// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lin_polylog_framed_clust
Rcpp::List lin_polylog_framed_clust(std::vector<double>& X, int K, int frame_width, int first_frame, int last_frame, int prev_k_f, int next_k_f);
RcppExport SEXP _OptCirClust_lin_polylog_framed_clust(SEXP XSEXP, SEXP KSEXP, SEXP frame_widthSEXP, SEXP first_frameSEXP, SEXP last_frameSEXP, SEXP prev_k_fSEXP, SEXP next_k_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type frame_width(frame_widthSEXP);
    Rcpp::traits::input_parameter< int >::type first_frame(first_frameSEXP);
    Rcpp::traits::input_parameter< int >::type last_frame(last_frameSEXP);
    Rcpp::traits::input_parameter< int >::type prev_k_f(prev_k_fSEXP);
    Rcpp::traits::input_parameter< int >::type next_k_f(next_k_fSEXP);
    rcpp_result_gen = Rcpp::wrap(lin_polylog_framed_clust(X, K, frame_width, first_frame, last_frame, prev_k_f, next_k_f));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OptCirClust_lin_polylog_framed_clust", (DL_FUNC) &_OptCirClust_lin_polylog_framed_clust, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptCirClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
