// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// hClustering
IntegerVector hClustering(arma::mat& distance_matrix, double threshold);
RcppExport SEXP _imbalance_hClustering(SEXP distance_matrixSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type distance_matrix(distance_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(hClustering(distance_matrix, threshold));
    return rcpp_result_gen;
END_RCPP
}
// computeGameProfiles
arma::mat computeGameProfiles(arma::mat probs, arma::umat knn_neighbours, arma::mat partial_payoffs, int iterations, double smooth_factor);
RcppExport SEXP _imbalance_computeGameProfiles(SEXP probsSEXP, SEXP knn_neighboursSEXP, SEXP partial_payoffsSEXP, SEXP iterationsSEXP, SEXP smooth_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type knn_neighbours(knn_neighboursSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type partial_payoffs(partial_payoffsSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type smooth_factor(smooth_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(computeGameProfiles(probs, knn_neighbours, partial_payoffs, iterations, smooth_factor));
    return rcpp_result_gen;
END_RCPP
}
// bestGaussianBandwidth
double bestGaussianBandwidth(arma::mat& dataset, arma::mat& covInv);
RcppExport SEXP _imbalance_bestGaussianBandwidth(SEXP datasetSEXP, SEXP covInvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covInv(covInvSEXP);
    rcpp_result_gen = Rcpp::wrap(bestGaussianBandwidth(dataset, covInv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imbalance_hClustering", (DL_FUNC) &_imbalance_hClustering, 2},
    {"_imbalance_computeGameProfiles", (DL_FUNC) &_imbalance_computeGameProfiles, 5},
    {"_imbalance_bestGaussianBandwidth", (DL_FUNC) &_imbalance_bestGaussianBandwidth, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_imbalance(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
