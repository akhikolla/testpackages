// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// JacobiCpp
List JacobiCpp(NumericMatrix x, bool only_values, double eps);
RcppExport SEXP _JacobiEigen_JacobiCpp(SEXP xSEXP, SEXP only_valuesSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type only_values(only_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(JacobiCpp(x, only_values, eps));
    return rcpp_result_gen;
END_RCPP
}
// JacobiSCpp
List JacobiSCpp(NumericMatrix x, bool only_values, double eps);
RcppExport SEXP _JacobiEigen_JacobiSCpp(SEXP xSEXP, SEXP only_valuesSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type only_values(only_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(JacobiSCpp(x, only_values, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_JacobiEigen_JacobiCpp", (DL_FUNC) &_JacobiEigen_JacobiCpp, 3},
    {"_JacobiEigen_JacobiSCpp", (DL_FUNC) &_JacobiEigen_JacobiSCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_JacobiEigen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
