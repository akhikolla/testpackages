% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_jt.R
\name{jt}
\alias{jt}
\alias{jt.charge}
\title{Junction Tree}
\usage{
jt(x, evidence = NULL, flow = "sum", propagate = "full")

\method{jt}{charge}(x, evidence = NULL, flow = "sum", propagate = "full")
}
\arguments{
\item{x}{An object return from \code{compile}}

\item{evidence}{A named vector. The names are the variabes and the elements
are the evidence}

\item{flow}{Either "sum" or "max"}

\item{propagate}{Either "no", "collect" or "full".}
}
\value{
A \code{jt} object
}
\description{
Construction of a junction tree and message passing
}
\examples{

# Setting up the network
# ----------------------

library(igraph)
el <- matrix(c(
"A", "T",
"T", "E",
"S", "L",
"S", "B",
"L", "E",
"E", "X",
"E", "D",
"B", "D"),
 nc = 2,
 byrow = TRUE
)

g <- igraph::graph_from_edgelist(el)
plot(g)
# -----------------------

# Data
# ----
# We use the asia data; see the man page (?asia)

# Compilation
# -----------
cl <- cpt_list(asia, g) # Checking and conversion
cp <- compile(cl)

# After the network has been compiled, the graph has been triangulated and
# moralized. Furthermore, all conditional probability tables (CPTs) has been
# designated one of the cliques (in the triangulated and moralized graph).

# Example 1: sum-flow without evidence
# ------------------------------------
jt1 <- jt(cp)
plot(jt1)
print(jt1)
query_belief(jt1, c("E", "L", "T"))
query_belief(jt1, c("B", "D", "E"), type = "joint")


# Notice, that jt1 is equivalent to:
# jt1 <- jt(cp, propagate = "no")
# jt1 <- propagate(jt1, prop = "full")
# That is; it is possible to postpone the actual propagation

# Example 2: sum-flow with evidence
# ---------------------------------
e2  <- c(A = "y", X = "n")
jt2 <- jt(cp, e2) 
query_belief(jt2, c("B", "D", "E"), type = "joint")

# Notice that, the configuration (D,E,B) = (y,y,n) has changed
# dramatically as a consequence of the evidence

# We can get the probability of the evidence:
query_evidence(jt2)

# Example 3: max-flow without evidence
# ------------------------------------
jt3 <- jt(cp, flow = "max")
mpe(jt3)


# Example 4: max-flow with evidence
# ---------------------------------
e4  <- c(T = "y", X = "y", D = "y")
jt4 <- jt(cp, e4, flow = "max")
mpe(jt4)

# Notice, that T, E, S, B, X and D has changed from "n" to "y"
# as a consequence of the new evidence e4


# Example 5: specifying a root node and only collect to save run time
# -------------------------------------------------------------------------

\donttest{
  cp5 <- compile(cpt_list(asia, g), "X")
  jt5 <- jt(cp5, propagate = "collect")
  query_belief(jt5, get_cliques(jt5)$C1, "joint")
}

# We can only query from the root clique now (clique 1)
# but we have ensured that the node of interest, "X", does indeed live in
# this clique

# Example 6: Compiling from a list of conditional probabilities
# -------------------------------------------------------------------------

# * We need a list with CPTs which we extract from the asia2 object
#    - the list must be named with child nodes
#    - The elements need to be array-like objects

cl  <- cpt_list(asia2)
cp6 <- compile(cl, save_graph = TRUE)

# Inspection; see if the graph correspond to the cpts
# g <- dag(cp6)
# plot(g) 

jt6 <- jt(cp6)
query_belief(jt6, c("either", "smoke"))

}
\seealso{
\code{\link{query_belief}}, \code{\link{mpe}},
\code{\link{get_cliques}}, \code{\link{get_clique_root}},
\code{\link{propagate}}
}
