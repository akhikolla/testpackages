// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mandelbrot
std::complex<double> mandelbrot(std::complex<double> z, int itDepth);
RcppExport SEXP _viscomplexr_mandelbrot(SEXP zSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(mandelbrot(z, itDepth));
    return rcpp_result_gen;
END_RCPP
}
// juliaNormal
std::complex<double> juliaNormal(std::complex<double> z, std::complex<double> c, double R_esc, int itDepth);
RcppExport SEXP _viscomplexr_juliaNormal(SEXP zSEXP, SEXP cSEXP, SEXP R_escSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type R_esc(R_escSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaNormal(z, c, R_esc, itDepth));
    return rcpp_result_gen;
END_RCPP
}
// blaschkeProd
std::complex<double> blaschkeProd(std::complex<double> z, std::vector<std::complex<double>> a);
RcppExport SEXP _viscomplexr_blaschkeProd(SEXP zSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::vector<std::complex<double>> >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(blaschkeProd(z, a));
    return rcpp_result_gen;
END_RCPP
}
// jacobiTheta
std::complex<double> jacobiTheta(std::complex<double> z, std::complex<double> tau, int nn);
RcppExport SEXP _viscomplexr_jacobiTheta(SEXP zSEXP, SEXP tauSEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(jacobiTheta(z, tau, nn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_viscomplexr_mandelbrot", (DL_FUNC) &_viscomplexr_mandelbrot, 2},
    {"_viscomplexr_juliaNormal", (DL_FUNC) &_viscomplexr_juliaNormal, 4},
    {"_viscomplexr_blaschkeProd", (DL_FUNC) &_viscomplexr_blaschkeProd, 2},
    {"_viscomplexr_jacobiTheta", (DL_FUNC) &_viscomplexr_jacobiTheta, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_viscomplexr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
