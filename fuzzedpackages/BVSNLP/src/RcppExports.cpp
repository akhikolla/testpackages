// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// null_mle_lreg
Rcpp::NumericVector null_mle_lreg(arma::mat& XX, int n, int p, int cons, double a, double b, double sprob, int niters);
RcppExport SEXP _BVSNLP_null_mle_lreg(SEXP XXSEXP, SEXP nSEXP, SEXP pSEXP, SEXP consSEXP, SEXP aSEXP, SEXP bSEXP, SEXP sprobSEXP, SEXP nitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type cons(consSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sprob(sprobSEXP);
    Rcpp::traits::input_parameter< int >::type niters(nitersSEXP);
    rcpp_result_gen = Rcpp::wrap(null_mle_lreg(XX, n, p, cons, a, b, sprob, niters));
    return rcpp_result_gen;
END_RCPP
}
// logreg_bvs
Rcpp::List logreg_bvs(const arma::mat& exmat, arma::uvec chain1, int nf, double tau, double r, const int nlptype, int a, int b, int in_cons, int loopcnt, bool cplng, arma::uvec chain2);
RcppExport SEXP _BVSNLP_logreg_bvs(SEXP exmatSEXP, SEXP chain1SEXP, SEXP nfSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP, SEXP aSEXP, SEXP bSEXP, SEXP in_consSEXP, SEXP loopcntSEXP, SEXP cplngSEXP, SEXP chain2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type chain1(chain1SEXP);
    Rcpp::traits::input_parameter< int >::type nf(nfSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type in_cons(in_consSEXP);
    Rcpp::traits::input_parameter< int >::type loopcnt(loopcntSEXP);
    Rcpp::traits::input_parameter< bool >::type cplng(cplngSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type chain2(chain2SEXP);
    rcpp_result_gen = Rcpp::wrap(logreg_bvs(exmat, chain1, nf, tau, r, nlptype, a, b, in_cons, loopcnt, cplng, chain2));
    return rcpp_result_gen;
END_RCPP
}
// lreg_coef_est
Rcpp::NumericVector lreg_coef_est(const arma::mat& exmat, arma::uvec mod_cols, double tau, double r, const int nlptype);
RcppExport SEXP _BVSNLP_lreg_coef_est(SEXP exmatSEXP, SEXP mod_colsSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mod_cols(mod_colsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    rcpp_result_gen = Rcpp::wrap(lreg_coef_est(exmat, mod_cols, tau, r, nlptype));
    return rcpp_result_gen;
END_RCPP
}
// lreg_mod_prob
double lreg_mod_prob(const arma::mat& exmat, arma::uvec mod_cols, double tau, double r, int a, int b, const int nlptype);
RcppExport SEXP _BVSNLP_lreg_mod_prob(SEXP exmatSEXP, SEXP mod_colsSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nlptypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mod_cols(mod_colsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    rcpp_result_gen = Rcpp::wrap(lreg_mod_prob(exmat, mod_cols, tau, r, a, b, nlptype));
    return rcpp_result_gen;
END_RCPP
}
// null_mle_cox
Rcpp::NumericVector null_mle_cox(arma::mat& XX, int n, int p, int cons, double a, double b, double csr, int niters);
RcppExport SEXP _BVSNLP_null_mle_cox(SEXP XXSEXP, SEXP nSEXP, SEXP pSEXP, SEXP consSEXP, SEXP aSEXP, SEXP bSEXP, SEXP csrSEXP, SEXP nitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type cons(consSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type csr(csrSEXP);
    Rcpp::traits::input_parameter< int >::type niters(nitersSEXP);
    rcpp_result_gen = Rcpp::wrap(null_mle_cox(XX, n, p, cons, a, b, csr, niters));
    return rcpp_result_gen;
END_RCPP
}
// cox_bvs
Rcpp::List cox_bvs(const arma::mat& exmat, arma::uvec cur_cols, int nf, double tau, double r, const int nlptype, int a, int b, int d, int L, int J, arma::vec temps);
RcppExport SEXP _BVSNLP_cox_bvs(SEXP exmatSEXP, SEXP cur_colsSEXP, SEXP nfSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP LSEXP, SEXP JSEXP, SEXP tempsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cur_cols(cur_colsSEXP);
    Rcpp::traits::input_parameter< int >::type nf(nfSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type temps(tempsSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_bvs(exmat, cur_cols, nf, tau, r, nlptype, a, b, d, L, J, temps));
    return rcpp_result_gen;
END_RCPP
}
// inc_prob_calc
arma::vec inc_prob_calc(arma::vec all_probs, Rcpp::List vis_covs, int p);
RcppExport SEXP _BVSNLP_inc_prob_calc(SEXP all_probsSEXP, SEXP vis_covsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type all_probs(all_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type vis_covs(vis_covsSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(inc_prob_calc(all_probs, vis_covs, p));
    return rcpp_result_gen;
END_RCPP
}
// cox_coef_est
Rcpp::NumericVector cox_coef_est(const arma::mat& exmat, arma::uvec mod_cols, double tau, double r, const int nlptype);
RcppExport SEXP _BVSNLP_cox_coef_est(SEXP exmatSEXP, SEXP mod_colsSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mod_cols(mod_colsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_coef_est(exmat, mod_cols, tau, r, nlptype));
    return rcpp_result_gen;
END_RCPP
}
// cox_mod_prob
double cox_mod_prob(const arma::mat& exmat, arma::uvec mod_cols, double tau, double r, int a, int b, const int nlptype);
RcppExport SEXP _BVSNLP_cox_mod_prob(SEXP exmatSEXP, SEXP mod_colsSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nlptypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type exmat(exmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mod_cols(mod_colsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_mod_prob(exmat, mod_cols, tau, r, a, b, nlptype));
    return rcpp_result_gen;
END_RCPP
}
// aucBMA_logistic
Rcpp::List aucBMA_logistic(const arma::mat& X_tr, const arma::vec& y_tr, const arma::mat& X_te, const arma::vec& y_te, double tau, double r, const int nlptype, arma::vec probs, Rcpp::ListOf<Rcpp::IntegerVector> models, int k);
RcppExport SEXP _BVSNLP_aucBMA_logistic(SEXP X_trSEXP, SEXP y_trSEXP, SEXP X_teSEXP, SEXP y_teSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP, SEXP probsSEXP, SEXP modelsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_tr(X_trSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_tr(y_trSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_te(X_teSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_te(y_teSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::IntegerVector> >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(aucBMA_logistic(X_tr, y_tr, X_te, y_te, tau, r, nlptype, probs, models, k));
    return rcpp_result_gen;
END_RCPP
}
// aucBMA_survival
arma::vec aucBMA_survival(const arma::mat& X_tr, const arma::mat& TS_tr, const arma::mat& X_te, const arma::mat& TS_te, double tau, double r, const int nlptype, arma::vec times, arma::vec probs, Rcpp::ListOf<Rcpp::IntegerVector> models, int k);
RcppExport SEXP _BVSNLP_aucBMA_survival(SEXP X_trSEXP, SEXP TS_trSEXP, SEXP X_teSEXP, SEXP TS_teSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP nlptypeSEXP, SEXP timesSEXP, SEXP probsSEXP, SEXP modelsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_tr(X_trSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TS_tr(TS_trSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_te(X_teSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TS_te(TS_teSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type nlptype(nlptypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::IntegerVector> >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(aucBMA_survival(X_tr, TS_tr, X_te, TS_te, tau, r, nlptype, times, probs, models, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BVSNLP_null_mle_lreg", (DL_FUNC) &_BVSNLP_null_mle_lreg, 8},
    {"_BVSNLP_logreg_bvs", (DL_FUNC) &_BVSNLP_logreg_bvs, 12},
    {"_BVSNLP_lreg_coef_est", (DL_FUNC) &_BVSNLP_lreg_coef_est, 5},
    {"_BVSNLP_lreg_mod_prob", (DL_FUNC) &_BVSNLP_lreg_mod_prob, 7},
    {"_BVSNLP_null_mle_cox", (DL_FUNC) &_BVSNLP_null_mle_cox, 8},
    {"_BVSNLP_cox_bvs", (DL_FUNC) &_BVSNLP_cox_bvs, 12},
    {"_BVSNLP_inc_prob_calc", (DL_FUNC) &_BVSNLP_inc_prob_calc, 3},
    {"_BVSNLP_cox_coef_est", (DL_FUNC) &_BVSNLP_cox_coef_est, 5},
    {"_BVSNLP_cox_mod_prob", (DL_FUNC) &_BVSNLP_cox_mod_prob, 7},
    {"_BVSNLP_aucBMA_logistic", (DL_FUNC) &_BVSNLP_aucBMA_logistic, 10},
    {"_BVSNLP_aucBMA_survival", (DL_FUNC) &_BVSNLP_aucBMA_survival, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_BVSNLP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
