// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// simulateHawkes
std::vector<std::vector<double> > simulateHawkes(SEXP lambda0, SEXP alpha, SEXP beta, SEXP horizon);
RcppExport SEXP _hawkes_simulateHawkes(SEXP lambda0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP horizonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type horizon(horizonSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateHawkes(lambda0, alpha, beta, horizon));
    return rcpp_result_gen;
END_RCPP
}
// jumpMean
std::vector<double> jumpMean(SEXP lambda0, SEXP alpha, SEXP beta, SEXP tau);
RcppExport SEXP _hawkes_jumpMean(SEXP lambda0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(jumpMean(lambda0, alpha, beta, tau));
    return rcpp_result_gen;
END_RCPP
}
// jumpVariance
arma::mat jumpVariance(SEXP lambda0, SEXP alpha, SEXP beta, SEXP tau);
RcppExport SEXP _hawkes_jumpVariance(SEXP lambda0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(jumpVariance(lambda0, alpha, beta, tau));
    return rcpp_result_gen;
END_RCPP
}
// jumpAutocorrelation
arma::mat jumpAutocorrelation(SEXP lambda0, SEXP alpha, SEXP beta, SEXP tau, SEXP lag);
RcppExport SEXP _hawkes_jumpAutocorrelation(SEXP lambda0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tauSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(jumpAutocorrelation(lambda0, alpha, beta, tau, lag));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodHawkes
double likelihoodHawkes(SEXP lambda0, SEXP alpha, SEXP beta, SEXP history);
RcppExport SEXP _hawkes_likelihoodHawkes(SEXP lambda0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP historySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type history(historySEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodHawkes(lambda0, alpha, beta, history));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hawkes_simulateHawkes", (DL_FUNC) &_hawkes_simulateHawkes, 4},
    {"_hawkes_jumpMean", (DL_FUNC) &_hawkes_jumpMean, 4},
    {"_hawkes_jumpVariance", (DL_FUNC) &_hawkes_jumpVariance, 4},
    {"_hawkes_jumpAutocorrelation", (DL_FUNC) &_hawkes_jumpAutocorrelation, 5},
    {"_hawkes_likelihoodHawkes", (DL_FUNC) &_hawkes_likelihoodHawkes, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_hawkes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
