// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getAll
Rcpp::DataFrame getAll(const std::string& path);
RcppExport SEXP _RcppGetconf_getAll(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(getAll(path));
    return rcpp_result_gen;
END_RCPP
}
// getConfig
SEXP getConfig(const std::string& var, const std::string& path);
RcppExport SEXP _RcppGetconf_getConfig(SEXP varSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type var(varSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(getConfig(var, path));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppGetconf_getAll", (DL_FUNC) &_RcppGetconf_getAll, 1},
    {"_RcppGetconf_getConfig", (DL_FUNC) &_RcppGetconf_getConfig, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppGetconf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
