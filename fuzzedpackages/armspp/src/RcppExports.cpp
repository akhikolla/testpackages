// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// armsGibbs
RObject armsGibbs(int nSamples, NumericVector previous, Function logPdf, NumericVector lower, NumericVector upper, List initial, NumericVector convex, IntegerVector maxPoints, IntegerVector metropolis, bool includeNEvaluations, bool showProgress);
RcppExport SEXP _armspp_armsGibbs(SEXP nSamplesSEXP, SEXP previousSEXP, SEXP logPdfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initialSEXP, SEXP convexSEXP, SEXP maxPointsSEXP, SEXP metropolisSEXP, SEXP includeNEvaluationsSEXP, SEXP showProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type previous(previousSEXP);
    Rcpp::traits::input_parameter< Function >::type logPdf(logPdfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< List >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type convex(convexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type maxPoints(maxPointsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type metropolis(metropolisSEXP);
    Rcpp::traits::input_parameter< bool >::type includeNEvaluations(includeNEvaluationsSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(armsGibbs(nSamples, previous, logPdf, lower, upper, initial, convex, maxPoints, metropolis, includeNEvaluations, showProgress));
    return rcpp_result_gen;
END_RCPP
}
// arms
RObject arms(int nSamples, List logPdf, NumericVector lower, NumericVector upper, List initial, NumericVector convex, IntegerVector maxPoints, IntegerVector metropolis, NumericVector previous, List arguments, bool includeNEvaluations);
RcppExport SEXP _armspp_arms(SEXP nSamplesSEXP, SEXP logPdfSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initialSEXP, SEXP convexSEXP, SEXP maxPointsSEXP, SEXP metropolisSEXP, SEXP previousSEXP, SEXP argumentsSEXP, SEXP includeNEvaluationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< List >::type logPdf(logPdfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< List >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type convex(convexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type maxPoints(maxPointsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type metropolis(metropolisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type previous(previousSEXP);
    Rcpp::traits::input_parameter< List >::type arguments(argumentsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeNEvaluations(includeNEvaluationsSEXP);
    rcpp_result_gen = Rcpp::wrap(arms(nSamples, logPdf, lower, upper, initial, convex, maxPoints, metropolis, previous, arguments, includeNEvaluations));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_armspp_armsGibbs", (DL_FUNC) &_armspp_armsGibbs, 11},
    {"_armspp_arms", (DL_FUNC) &_armspp_arms, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_armspp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
