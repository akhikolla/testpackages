% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lda.R
\name{step_lda}
\alias{step_lda}
\alias{tidy.step_lda}
\title{Calculates lda dimension estimates}
\source{
\url{https://arxiv.org/abs/1301.3781}
}
\usage{
step_lda(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  columns = NULL,
  lda_models = NULL,
  num_topics = 10,
  prefix = "lda",
  skip = FALSE,
  id = rand_id("lda")
)

\method{tidy}{step_lda}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables.
For \code{step_lda}, this indicates the variables to be encoded
into a \link{tokenlist}. See \code{\link[recipes:selections]{recipes::selections()}} for more
details. For the \code{tidy} method, these are not currently used.}

\item{role}{For model terms created by this step, what analysis
role should they be assigned?. By default, the function assumes
that the new columns created by the original variables will be
used as predictors in a model.}

\item{trained}{A logical to indicate if the recipe has been
baked.}

\item{columns}{A list of tibble results that define the
encoding. This is \code{NULL} until the step is trained by
\code{\link[recipes:prep]{recipes::prep.recipe()}}.}

\item{lda_models}{A WarpLDA model object from the text2vec package. If left
to NULL, the default, will it train its model based on the training data.
Look at the examples for how to fit a WarpLDA model.}

\item{num_topics}{integer desired number of latent topics.}

\item{prefix}{A prefix for generated column names, default to "lda".}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{recipes::bake.recipe()}}? While all
operations are baked when \code{\link[recipes:prep]{recipes::prep.recipe()}} is run, some
operations may not be able to be conducted on new data (e.g.
processing the outcome variable(s)). Care should be taken when
using \code{skip = TRUE} as it may affect the computations for
subsequent operations.}

\item{id}{A character string that is unique to this step to identify it}

\item{x}{A \code{step_lda} object.}
}
\value{
An updated version of \code{recipe} with the new step added
to the sequence of existing steps (if any).
}
\description{
\code{step_lda} creates a \emph{specification} of a recipe step that
will return the lda dimension estimates of a text variable.
}
\examples{
if (requireNamespace("text2vec", quietly = TRUE)) {
\donttest{
library(recipes)
library(modeldata)
data(okc_text)

okc_rec <- recipe(~ ., data = okc_text) \%>\%
  step_tokenize(essay0) \%>\%
  step_lda(essay0)

okc_obj <- okc_rec \%>\%
  prep()

bake(okc_obj, new_data = NULL) \%>\%
  slice(1:2)
tidy(okc_rec, number = 1)
tidy(okc_obj, number = 1)

# Changing the number of topics.
recipe(~ ., data = okc_text) \%>\%
  step_tokenize(essay0, essay1) \%>\%
  step_lda(essay0, essay1, num_topics = 20) \%>\%
  prep() \%>\%
  bake(new_data = NULL) \%>\%
  slice(1:2)

# Supplying A pre-trained LDA model trained using text2vec
library(text2vec)
tokens <- word_tokenizer(tolower(okc_text$essay5))
it <- itoken(tokens, ids = seq_along(okc_text$essay5))
v <- create_vocabulary(it)
dtm <- create_dtm(it, vocab_vectorizer(v))
lda_model <- LDA$new(n_topics = 15)

recipe(~ ., data = okc_text) \%>\%
  step_tokenize(essay0, essay1) \%>\%
  step_lda(essay0, essay1, lda_models = lda_model) \%>\%
  prep() \%>\%
  bake(new_data = NULL) \%>\%
  slice(1:2)
}
}
}
\seealso{
Other character to numeric steps: 
\code{\link{step_sequence_onehot}()},
\code{\link{step_textfeature}()}
}
\concept{character to numeric steps}
