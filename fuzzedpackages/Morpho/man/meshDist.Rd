% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meshDist.r, R/meshDistMatrix.r
\name{meshDist}
\alias{meshDist}
\alias{meshDist.mesh3d}
\alias{meshDist.matrix}
\title{calculates and visualises distances between surface meshes or 3D coordinates and a surface mesh.}
\usage{
meshDist(x, ...)

\method{meshDist}{mesh3d}(x, mesh2 = NULL, distvec = NULL,
  from = NULL, to = NULL, steps = 20, ceiling = FALSE,
  rampcolors = colorRamps::blue2green2red(steps - 1), NAcol = "white",
  file = "default", imagedim = "100x800", uprange = 1, ray = FALSE,
  raytol = 50, raystrict = FALSE, save = FALSE, plot = TRUE,
  sign = TRUE, tol = NULL, tolcol = "green", displace = FALSE,
  shade = TRUE, method = c("vcglib", "morpho"), add = FALSE,
  scaleramp = TRUE, ...)

\method{meshDist}{matrix}(x, mesh2 = NULL, distvec = NULL,
  from = NULL, to = NULL, steps = 20, ceiling = FALSE,
  rampcolors = colorRamps::blue2green2red(steps - 1), NAcol = "white",
  uprange = 1, plot = TRUE, sign = TRUE, tol = NULL,
  tolcol = "green", type = c("s", "p"), radius = NULL,
  displace = FALSE, add = FALSE, scaleramp = FALSE, ...)
}
\arguments{
\item{x}{reference mesh; object of class "mesh3d" or a n x 3 matrix
containing 3D coordinates.}

\item{\dots}{additional arguments passed to \code{\link{shade3d}}. See
\code{\link{rgl.material}} for details.}

\item{mesh2}{target mesh: either object of class "mesh3d" or a character
pointing to a surface mesh (ply, obj or stl file)}

\item{distvec}{vector: optional, a vector containing distances for each
vertex/coordinate of \code{x}, if distvec != NULL, \code{mesh2} will be ignored.}

\item{from}{numeric: minimum distance to be colorised; default is set to 0
mm}

\item{to}{numeric: maximum distance to be colorised; default is set to the
maximum distance}

\item{steps}{integer: determines break points for color ramp: n steps will
produce n-1 colors.}

\item{ceiling}{logical: if TRUE, the next larger integer of "to" is used}

\item{rampcolors}{character vector: specify the colors which are used to create a colorramp.}

\item{NAcol}{character: specify color for values outside the range defined by \code{from} and \code{to}.}

\item{file}{character: filename for mesh and image files produced. E.g.
"mydist" will produce the files mydist.ply and mydist.png}

\item{imagedim}{character of type 100x200 where 100 determines the width and
200 the height of the image.}

\item{uprange}{numeric between 0 and 1: restricts "to" to a quantile of
"to", if to is NULL.}

\item{ray}{logical: if TRUE, the search is along vertex normals.}

\item{raytol}{maximum distance to follow a normal.}

\item{raystrict}{logical: if TRUE, only outward along normals will be sought for closest points.}

\item{save}{logical: save a colored mesh.}

\item{plot}{logical: visualise result as 3D-plot and distance charts}

\item{sign}{logical: request signed distances. Only meaningful, if mesh2 is
specified or distvec contains signed distances.}

\item{tol}{numeric: threshold to color distances within this threshold
green.}

\item{tolcol}{a custom color to color vertices below a threshold defined by \code{tol}. Default is green.}

\item{displace}{logical: if TRUE, displacement vectors between original and
closest points are drawn colored according to the distance.}

\item{shade}{logical: if FALSE, the rendering of the colored surface will be
supressed.}

\item{method}{accepts: "vcglib" and "morpho" (and any abbreviation). vcglib
uses a command line tool using vcglib headers, morpho uses fortran routines
based on a kd-tree search for closest triangles.}

\item{add}{logical: if TRUE, visualization will be added to the rgl window currently in focus}

\item{scaleramp}{logical: if TRUE, the colorramp will be symmetrical for signed distances: spanning from \code{-max(from,to)} to \code{max(from,to)}.}

\item{type}{character: "s" shows coordinates as spheres, while "p" shows 3D
dots.}

\item{radius}{determines size of spheres; if not specified, optimal radius
size will be estimated by centroid size of the configuration.}
}
\value{
Returns an object of class "meshDist" if the input is a surface mesh
and one of class "matrixDist" if input is a matrix containing 3D
coordinates.
\item{colMesh }{object of mesh3d with colors added}
\item{dists }{vector with distances}
\item{cols }{vector with color values}
\item{params }{list of parameters used}
}
\description{
calculates and visualises distances between surface meshes or 3D coordinates
and a surface mesh.
}
\details{
calculates the distances from a mesh or a set of 3D coordinates to another
at each vertex; either closest point or along the normals

this function needs the command line tools from the Auxiliaries section in
\url{http://sourceforge.net/projects/morpho-rpackage/files/Auxiliaries}
installed.
}
\examples{

data(nose)##load data
##warp a mesh onto another landmark configuration:
longnose.mesh <- tps3d(shortnose.mesh, shortnose.lm, longnose.lm,threads=1)
\dontrun{
mD <- meshDist(longnose.mesh, shortnose.mesh)
##now change the color ramp
render(mD,rampcolors = c("white","red"))
}
#use unsigned distances and a ramp from blue to red
#color distances < 0.01 green:
\dontrun{
meshDist(longnose.mesh, shortnose.mesh, rampcolors = c("blue", "red"),sign=FALSE, tol=0.5)
}
}
\references{
Detection of inside/outside uses the algorithm proposed in:

Baerentzen, Jakob Andreas. & Aanaes, H., 2002. Generating Signed Distance
Fields From Triangle Meshes. Informatics and Mathematical Modelling, .
}
\seealso{
\code{\link{render.meshDist}}, , \code{\link{export.meshDist}},
\code{\link{shade3d}}
}
\author{
Stefan Schlager
}
