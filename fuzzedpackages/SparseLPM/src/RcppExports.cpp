// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_SLPM_ELBO
Rcpp::List cpp_SLPM_ELBO(arma::mat adj, arma::mat var_alpha_u, arma::mat var_alpha_v, arma::mat var_beta_u, arma::mat var_beta_v, arma::cube var_lambda, arma::vec var_delta, arma::vec var_a, arma::vec var_b, arma::vec delta, arma::vec a_gamma, arma::vec b_gamma, bool verbose);
RcppExport SEXP _SparseLPM_cpp_SLPM_ELBO(SEXP adjSEXP, SEXP var_alpha_uSEXP, SEXP var_alpha_vSEXP, SEXP var_beta_uSEXP, SEXP var_beta_vSEXP, SEXP var_lambdaSEXP, SEXP var_deltaSEXP, SEXP var_aSEXP, SEXP var_bSEXP, SEXP deltaSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_alpha_u(var_alpha_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_alpha_v(var_alpha_vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_beta_u(var_beta_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_beta_v(var_beta_vSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type var_lambda(var_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_delta(var_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_a(var_aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_b(var_bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_SLPM_ELBO(adj, var_alpha_u, var_alpha_v, var_beta_u, var_beta_v, var_lambda, var_delta, var_a, var_b, delta, a_gamma, b_gamma, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_SLPM_Optimisation
Rcpp::List cpp_SLPM_Optimisation(arma::mat adj, arma::mat var_alpha_u, arma::mat var_alpha_v, arma::mat var_beta_u, arma::mat var_beta_v, arma::cube var_lambda, arma::vec var_delta, arma::vec var_a, arma::vec var_b, arma::vec delta, arma::vec a_gamma, arma::vec b_gamma, double tol, unsigned int n_iter_max, bool natural_gradient, double learning_rate_factor_up, double learning_rate_factor_down, bool verbose);
RcppExport SEXP _SparseLPM_cpp_SLPM_Optimisation(SEXP adjSEXP, SEXP var_alpha_uSEXP, SEXP var_alpha_vSEXP, SEXP var_beta_uSEXP, SEXP var_beta_vSEXP, SEXP var_lambdaSEXP, SEXP var_deltaSEXP, SEXP var_aSEXP, SEXP var_bSEXP, SEXP deltaSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP tolSEXP, SEXP n_iter_maxSEXP, SEXP natural_gradientSEXP, SEXP learning_rate_factor_upSEXP, SEXP learning_rate_factor_downSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_alpha_u(var_alpha_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_alpha_v(var_alpha_vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_beta_u(var_beta_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type var_beta_v(var_beta_vSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type var_lambda(var_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_delta(var_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_a(var_aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type var_b(var_bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter_max(n_iter_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type natural_gradient(natural_gradientSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate_factor_up(learning_rate_factor_upSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate_factor_down(learning_rate_factor_downSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_SLPM_Optimisation(adj, var_alpha_u, var_alpha_v, var_beta_u, var_beta_v, var_lambda, var_delta, var_a, var_b, delta, a_gamma, b_gamma, tol, n_iter_max, natural_gradient, learning_rate_factor_up, learning_rate_factor_down, verbose));
    return rcpp_result_gen;
END_RCPP
}
