// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gif.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// bcd
Eigen::SparseMatrix<double> bcd(Eigen::MatrixXd& S, Eigen::MatrixXi& act_set, int iter_max, double eps);
static SEXP _gif_bcd_try(SEXP SSEXP, SEXP act_setSEXP, SEXP iter_maxSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type act_set(act_setSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(bcd(S, act_set, iter_max, eps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gif_bcd(SEXP SSEXP, SEXP act_setSEXP, SEXP iter_maxSEXP, SEXP epsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gif_bcd_try(SSEXP, act_setSEXP, iter_maxSEXP, epsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// soft_GT
List soft_GT(Eigen::MatrixXd& S, double lambda, Eigen::MatrixXi& act_set);
static SEXP _gif_soft_GT_try(SEXP SSEXP, SEXP lambdaSEXP, SEXP act_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type act_set(act_setSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_GT(S, lambda, act_set));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gif_soft_GT(SEXP SSEXP, SEXP lambdaSEXP, SEXP act_setSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gif_soft_GT_try(SSEXP, lambdaSEXP, act_setSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _gif_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Eigen::SparseMatrix<double>(*bcd)(Eigen::MatrixXd&,Eigen::MatrixXi&,int,double)");
        signatures.insert("List(*soft_GT)(Eigen::MatrixXd&,double,Eigen::MatrixXi&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _gif_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gif", "_gif_bcd", (DL_FUNC)_gif_bcd_try);
    R_RegisterCCallable("gif", "_gif_soft_GT", (DL_FUNC)_gif_soft_GT_try);
    R_RegisterCCallable("gif", "_gif_RcppExport_validate", (DL_FUNC)_gif_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_gif_bcd", (DL_FUNC) &_gif_bcd, 4},
    {"_gif_soft_GT", (DL_FUNC) &_gif_soft_GT, 3},
    {"_gif_RcppExport_registerCCallable", (DL_FUNC) &_gif_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_gif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
