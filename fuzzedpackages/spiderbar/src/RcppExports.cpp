// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rep_parse
SEXP rep_parse(std::string content);
RcppExport SEXP _spiderbar_rep_parse(SEXP contentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type content(contentSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_parse(content));
    return rcpp_result_gen;
END_RCPP
}
// rep_crawl_delays
DataFrame rep_crawl_delays(SEXP xp);
RcppExport SEXP _spiderbar_rep_crawl_delays(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_crawl_delays(xp));
    return rcpp_result_gen;
END_RCPP
}
// sitemaps
std::vector<std::string> sitemaps(SEXP xp);
RcppExport SEXP _spiderbar_sitemaps(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(sitemaps(xp));
    return rcpp_result_gen;
END_RCPP
}
// rep_as_string
std::string rep_as_string(SEXP xp);
RcppExport SEXP _spiderbar_rep_as_string(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_as_string(xp));
    return rcpp_result_gen;
END_RCPP
}
// rep_path_allowed
bool rep_path_allowed(SEXP xp, std::string path, std::string agent);
RcppExport SEXP _spiderbar_rep_path_allowed(SEXP xpSEXP, SEXP pathSEXP, SEXP agentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type agent(agentSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_path_allowed(xp, path, agent));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spiderbar_rep_parse", (DL_FUNC) &_spiderbar_rep_parse, 1},
    {"_spiderbar_rep_crawl_delays", (DL_FUNC) &_spiderbar_rep_crawl_delays, 1},
    {"_spiderbar_sitemaps", (DL_FUNC) &_spiderbar_sitemaps, 1},
    {"_spiderbar_rep_as_string", (DL_FUNC) &_spiderbar_rep_as_string, 1},
    {"_spiderbar_rep_path_allowed", (DL_FUNC) &_spiderbar_rep_path_allowed, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_spiderbar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
