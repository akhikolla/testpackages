// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// transactiontoBitmax
Rcpp::DataFrame transactiontoBitmax(std::vector<std::string> transac, char deli);
RcppExport SEXP _RecAssoRules_transactiontoBitmax(SEXP transacSEXP, SEXP deliSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type transac(transacSEXP);
    Rcpp::traits::input_parameter< char >::type deli(deliSEXP);
    rcpp_result_gen = Rcpp::wrap(transactiontoBitmax(transac, deli));
    return rcpp_result_gen;
END_RCPP
}
// prefrecset
DataFrame prefrecset(std::vector<std::vector<short>> Bitmax, std::vector<std::string> varnames, float relativeSup);
RcppExport SEXP _RecAssoRules_prefrecset(SEXP BitmaxSEXP, SEXP varnamesSEXP, SEXP relativeSupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<short>> >::type Bitmax(BitmaxSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type varnames(varnamesSEXP);
    Rcpp::traits::input_parameter< float >::type relativeSup(relativeSupSEXP);
    rcpp_result_gen = Rcpp::wrap(prefrecset(Bitmax, varnames, relativeSup));
    return rcpp_result_gen;
END_RCPP
}
// prefrecrules
List prefrecrules(std::vector<std::vector<short>> Bitmax, std::vector<std::string> varnames, float relativeSup, float Minconf);
RcppExport SEXP _RecAssoRules_prefrecrules(SEXP BitmaxSEXP, SEXP varnamesSEXP, SEXP relativeSupSEXP, SEXP MinconfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<short>> >::type Bitmax(BitmaxSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type varnames(varnamesSEXP);
    Rcpp::traits::input_parameter< float >::type relativeSup(relativeSupSEXP);
    Rcpp::traits::input_parameter< float >::type Minconf(MinconfSEXP);
    rcpp_result_gen = Rcpp::wrap(prefrecrules(Bitmax, varnames, relativeSup, Minconf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RecAssoRules_transactiontoBitmax", (DL_FUNC) &_RecAssoRules_transactiontoBitmax, 2},
    {"_RecAssoRules_prefrecset", (DL_FUNC) &_RecAssoRules_prefrecset, 3},
    {"_RecAssoRules_prefrecrules", (DL_FUNC) &_RecAssoRules_prefrecrules, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RecAssoRules(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
