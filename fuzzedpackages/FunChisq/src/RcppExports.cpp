// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// EFTDP
double EFTDP(const IntegerMatrix& nm);
RcppExport SEXP _FunChisq_EFTDP(SEXP nmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nm(nmSEXP);
    rcpp_result_gen = Rcpp::wrap(EFTDP(nm));
    return rcpp_result_gen;
END_RCPP
}
// EFTDQP
double EFTDQP(const IntegerMatrix& nm);
RcppExport SEXP _FunChisq_EFTDQP(SEXP nmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nm(nmSEXP);
    rcpp_result_gen = Rcpp::wrap(EFTDQP(nm));
    return rcpp_result_gen;
END_RCPP
}
// ExactFunctionalTest
double ExactFunctionalTest(const IntegerMatrix& nm, const LogicalVector& BoundSwitch);
RcppExport SEXP _FunChisq_ExactFunctionalTest(SEXP nmSEXP, SEXP BoundSwitchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nm(nmSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type BoundSwitch(BoundSwitchSEXP);
    rcpp_result_gen = Rcpp::wrap(ExactFunctionalTest(nm, BoundSwitch));
    return rcpp_result_gen;
END_RCPP
}
// interactions
DataFrame interactions(const IntegerMatrix& expression_matrix, const List& parent_index, const IntegerVector& child_index, const String& index_kind);
RcppExport SEXP _FunChisq_interactions(SEXP expression_matrixSEXP, SEXP parent_indexSEXP, SEXP child_indexSEXP, SEXP index_kindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type expression_matrix(expression_matrixSEXP);
    Rcpp::traits::input_parameter< const List& >::type parent_index(parent_indexSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type child_index(child_indexSEXP);
    Rcpp::traits::input_parameter< const String& >::type index_kind(index_kindSEXP);
    rcpp_result_gen = Rcpp::wrap(interactions(expression_matrix, parent_index, child_index, index_kind));
    return rcpp_result_gen;
END_RCPP
}
