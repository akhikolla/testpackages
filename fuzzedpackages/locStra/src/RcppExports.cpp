// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// powerMethodCpp
VectorXd powerMethodCpp(MatrixXd& X, VectorXd& v, double eps, int maxiter);
RcppExport SEXP _locStra_powerMethodCpp(SEXP XSEXP, SEXP vSEXP, SEXP epsSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< VectorXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(powerMethodCpp(X, v, eps, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// covMatrixCpp_dense
MatrixXd covMatrixCpp_dense(MatrixXd& X);
RcppExport SEXP _locStra_covMatrixCpp_dense(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(covMatrixCpp_dense(X));
    return rcpp_result_gen;
END_RCPP
}
// jaccardMatrixCpp_dense
MatrixXd jaccardMatrixCpp_dense(MatrixXd& X);
RcppExport SEXP _locStra_jaccardMatrixCpp_dense(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardMatrixCpp_dense(X));
    return rcpp_result_gen;
END_RCPP
}
// sMatrixCpp_dense
MatrixXd sMatrixCpp_dense(MatrixXd X, bool Djac, bool phased, int minVariants);
RcppExport SEXP _locStra_sMatrixCpp_dense(SEXP XSEXP, SEXP DjacSEXP, SEXP phasedSEXP, SEXP minVariantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< bool >::type phased(phasedSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    rcpp_result_gen = Rcpp::wrap(sMatrixCpp_dense(X, Djac, phased, minVariants));
    return rcpp_result_gen;
END_RCPP
}
// grmCpp_dense
MatrixXd grmCpp_dense(MatrixXd X, bool robust);
RcppExport SEXP _locStra_grmCpp_dense(SEXP XSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(grmCpp_dense(X, robust));
    return rcpp_result_gen;
END_RCPP
}
// covMatrixCpp_sparse
MatrixXd covMatrixCpp_sparse(MatrixXd& T, int nrows, int ncols);
RcppExport SEXP _locStra_covMatrixCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(covMatrixCpp_sparse(T, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// jaccardMatrixCpp_sparse
MatrixXd jaccardMatrixCpp_sparse(MatrixXi& T, int nrows, int ncols);
RcppExport SEXP _locStra_jaccardMatrixCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardMatrixCpp_sparse(T, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// sMatrixCpp_sparse
MatrixXd sMatrixCpp_sparse(MatrixXi& T, int nrows, int ncols, bool Djac, bool phased, int minVariants);
RcppExport SEXP _locStra_sMatrixCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP DjacSEXP, SEXP phasedSEXP, SEXP minVariantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< bool >::type phased(phasedSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    rcpp_result_gen = Rcpp::wrap(sMatrixCpp_sparse(T, nrows, ncols, Djac, phased, minVariants));
    return rcpp_result_gen;
END_RCPP
}
// grmCpp_sparse
MatrixXd grmCpp_sparse(MatrixXd& T, int nrows, int ncols, bool robust);
RcppExport SEXP _locStra_grmCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(grmCpp_sparse(T, nrows, ncols, robust));
    return rcpp_result_gen;
END_RCPP
}
// fastCovEVsCpp_dense
MatrixXd fastCovEVsCpp_dense(MatrixXd& X, int k, int q);
RcppExport SEXP _locStra_fastCovEVsCpp_dense(SEXP XSEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCovEVsCpp_dense(X, k, q));
    return rcpp_result_gen;
END_RCPP
}
// fastJaccardEVsCpp_dense
MatrixXd fastJaccardEVsCpp_dense(MatrixXd X, int k, int q);
RcppExport SEXP _locStra_fastJaccardEVsCpp_dense(SEXP XSEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJaccardEVsCpp_dense(X, k, q));
    return rcpp_result_gen;
END_RCPP
}
// fastSMatrixEVsCpp_dense
MatrixXd fastSMatrixEVsCpp_dense(MatrixXd X, int k, bool Djac, int minVariants, int q);
RcppExport SEXP _locStra_fastSMatrixEVsCpp_dense(SEXP XSEXP, SEXP kSEXP, SEXP DjacSEXP, SEXP minVariantsSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSMatrixEVsCpp_dense(X, k, Djac, minVariants, q));
    return rcpp_result_gen;
END_RCPP
}
// fastGrmEVsCpp_dense
MatrixXd fastGrmEVsCpp_dense(MatrixXd& X, int k, bool robust, int q);
RcppExport SEXP _locStra_fastGrmEVsCpp_dense(SEXP XSEXP, SEXP kSEXP, SEXP robustSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastGrmEVsCpp_dense(X, k, robust, q));
    return rcpp_result_gen;
END_RCPP
}
// fastCovEVsCpp_sparse
MatrixXd fastCovEVsCpp_sparse(MatrixXd& T, int nrows, int ncols, int k, int q);
RcppExport SEXP _locStra_fastCovEVsCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCovEVsCpp_sparse(T, nrows, ncols, k, q));
    return rcpp_result_gen;
END_RCPP
}
// fastJaccardEVsCpp_sparse
MatrixXd fastJaccardEVsCpp_sparse(MatrixXd& T, int nrows, int ncols, int k, int q);
RcppExport SEXP _locStra_fastJaccardEVsCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJaccardEVsCpp_sparse(T, nrows, ncols, k, q));
    return rcpp_result_gen;
END_RCPP
}
// fastSMatrixEVsCpp_sparse
MatrixXd fastSMatrixEVsCpp_sparse(MatrixXi& T, int nrows, int ncols, int k, bool Djac, int minVariants, int q);
RcppExport SEXP _locStra_fastSMatrixEVsCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP DjacSEXP, SEXP minVariantsSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastSMatrixEVsCpp_sparse(T, nrows, ncols, k, Djac, minVariants, q));
    return rcpp_result_gen;
END_RCPP
}
// fastGrmEVsCpp_sparse
MatrixXd fastGrmEVsCpp_sparse(MatrixXd& T, int nrows, int ncols, int k, bool robust, int q);
RcppExport SEXP _locStra_fastGrmEVsCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP robustSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd& >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fastGrmEVsCpp_sparse(T, nrows, ncols, k, robust, q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_locStra_powerMethodCpp", (DL_FUNC) &_locStra_powerMethodCpp, 4},
    {"_locStra_covMatrixCpp_dense", (DL_FUNC) &_locStra_covMatrixCpp_dense, 1},
    {"_locStra_jaccardMatrixCpp_dense", (DL_FUNC) &_locStra_jaccardMatrixCpp_dense, 1},
    {"_locStra_sMatrixCpp_dense", (DL_FUNC) &_locStra_sMatrixCpp_dense, 4},
    {"_locStra_grmCpp_dense", (DL_FUNC) &_locStra_grmCpp_dense, 2},
    {"_locStra_covMatrixCpp_sparse", (DL_FUNC) &_locStra_covMatrixCpp_sparse, 3},
    {"_locStra_jaccardMatrixCpp_sparse", (DL_FUNC) &_locStra_jaccardMatrixCpp_sparse, 3},
    {"_locStra_sMatrixCpp_sparse", (DL_FUNC) &_locStra_sMatrixCpp_sparse, 6},
    {"_locStra_grmCpp_sparse", (DL_FUNC) &_locStra_grmCpp_sparse, 4},
    {"_locStra_fastCovEVsCpp_dense", (DL_FUNC) &_locStra_fastCovEVsCpp_dense, 3},
    {"_locStra_fastJaccardEVsCpp_dense", (DL_FUNC) &_locStra_fastJaccardEVsCpp_dense, 3},
    {"_locStra_fastSMatrixEVsCpp_dense", (DL_FUNC) &_locStra_fastSMatrixEVsCpp_dense, 5},
    {"_locStra_fastGrmEVsCpp_dense", (DL_FUNC) &_locStra_fastGrmEVsCpp_dense, 4},
    {"_locStra_fastCovEVsCpp_sparse", (DL_FUNC) &_locStra_fastCovEVsCpp_sparse, 5},
    {"_locStra_fastJaccardEVsCpp_sparse", (DL_FUNC) &_locStra_fastJaccardEVsCpp_sparse, 5},
    {"_locStra_fastSMatrixEVsCpp_sparse", (DL_FUNC) &_locStra_fastSMatrixEVsCpp_sparse, 7},
    {"_locStra_fastGrmEVsCpp_sparse", (DL_FUNC) &_locStra_fastGrmEVsCpp_sparse, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_locStra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
