// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcppeigen_peltuv
Rcpp::List rcppeigen_peltuv(const std::vector<double>& data, const std::string& str_cost_func, const double& alpha, const int& m);
RcppExport SEXP _changepoint_mv_rcppeigen_peltuv(SEXP dataSEXP, SEXP str_cost_funcSEXP, SEXP alphaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type str_cost_func(str_cost_funcSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_peltuv(data, str_cost_func, alpha, m));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_tail_costs
std::vector<double> rcppeigen_tail_costs(const std::vector<double>& data, const std::string& str_cost_func, const int& m);
RcppExport SEXP _changepoint_mv_rcppeigen_tail_costs(SEXP dataSEXP, SEXP str_cost_funcSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type str_cost_func(str_cost_funcSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_tail_costs(data, str_cost_func, m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_changepoint_mv_rcppeigen_peltuv", (DL_FUNC) &_changepoint_mv_rcppeigen_peltuv, 4},
    {"_changepoint_mv_rcppeigen_tail_costs", (DL_FUNC) &_changepoint_mv_rcppeigen_tail_costs, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_changepoint_mv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
