// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rmn_mu_S2
void rmn_mu_S2(Eigen::VectorXd& rnd_vec, const int p, const Eigen::VectorXd mu, const Eigen::MatrixXd S);
RcppExport SEXP _BayesLN_rmn_mu_S2(SEXP rnd_vecSEXP, SEXP pSEXP, SEXP muSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type rnd_vec(rnd_vecSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S(SSEXP);
    rmn_mu_S2(rnd_vec, p, mu, S);
    return R_NilValue;
END_RCPP
}
// MCMC_alg
Rcpp::List MCMC_alg(const Eigen::VectorXd y, const Eigen::MatrixXd X, const List Z_list, const List K_gamma_list, const Eigen::MatrixXd S_beta_pri, double l_s, Eigen::VectorXd l_t, double d_s, Eigen::VectorXd d_t, double g_s, Eigen::VectorXd g_t, int s, int nsamp, int verbose, Eigen::VectorXd beta_init, double sigma2_init, Eigen::VectorXd tau2_init);
RcppExport SEXP _BayesLN_MCMC_alg(SEXP ySEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP K_gamma_listSEXP, SEXP S_beta_priSEXP, SEXP l_sSEXP, SEXP l_tSEXP, SEXP d_sSEXP, SEXP d_tSEXP, SEXP g_sSEXP, SEXP g_tSEXP, SEXP sSEXP, SEXP nsampSEXP, SEXP verboseSEXP, SEXP beta_initSEXP, SEXP sigma2_initSEXP, SEXP tau2_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const List >::type K_gamma_list(K_gamma_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S_beta_pri(S_beta_priSEXP);
    Rcpp::traits::input_parameter< double >::type l_s(l_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type l_t(l_tSEXP);
    Rcpp::traits::input_parameter< double >::type d_s(d_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type d_t(d_tSEXP);
    Rcpp::traits::input_parameter< double >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type g_t(g_tSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_init(sigma2_initSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tau2_init(tau2_initSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_alg(y, X, Z_list, K_gamma_list, S_beta_pri, l_s, l_t, d_s, d_t, g_s, g_t, s, nsamp, verbose, beta_init, sigma2_init, tau2_init));
    return rcpp_result_gen;
END_RCPP
}
// post_pred
Eigen::MatrixXd post_pred(List output, Eigen::MatrixXd Xrep, List Zrep_list, int s, int nsamp);
RcppExport SEXP _BayesLN_post_pred(SEXP outputSEXP, SEXP XrepSEXP, SEXP Zrep_listSEXP, SEXP sSEXP, SEXP nsampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Xrep(XrepSEXP);
    Rcpp::traits::input_parameter< List >::type Zrep_list(Zrep_listSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    rcpp_result_gen = Rcpp::wrap(post_pred(output, Xrep, Zrep_list, s, nsamp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesLN_rmn_mu_S2", (DL_FUNC) &_BayesLN_rmn_mu_S2, 4},
    {"_BayesLN_MCMC_alg", (DL_FUNC) &_BayesLN_MCMC_alg, 17},
    {"_BayesLN_post_pred", (DL_FUNC) &_BayesLN_post_pred, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesLN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
