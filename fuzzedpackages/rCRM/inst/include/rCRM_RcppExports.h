// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rCRM_RCPPEXPORTS_H_GEN_
#define RCPP_rCRM_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace rCRM {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rCRM", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rCRM", "_rCRM_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rCRM");
            }
        }
    }

    inline List P2L2C(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::ArrayXd ldS, double ltp, Eigen::VectorXd lambda, Eigen::ArrayXd wldS, double thresh, int maxit, double threshP, double threshB) {
        typedef SEXP(*Ptr_P2L2C)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_P2L2C p_P2L2C = NULL;
        if (p_P2L2C == NULL) {
            validateSignature("List(*P2L2C)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::ArrayXd,double,Eigen::VectorXd,Eigen::ArrayXd,double,int,double,double)");
            p_P2L2C = (Ptr_P2L2C)R_GetCCallable("rCRM", "_rCRM_P2L2C");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_P2L2C(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(ldS)), Shield<SEXP>(Rcpp::wrap(ltp)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(wldS)), Shield<SEXP>(Rcpp::wrap(thresh)), Shield<SEXP>(Rcpp::wrap(maxit)), Shield<SEXP>(Rcpp::wrap(threshP)), Shield<SEXP>(Rcpp::wrap(threshB)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List cvP2L2C(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::MatrixXd XF, Eigen::VectorXd yF, Eigen::ArrayXd ldS, double ltp, Eigen::VectorXd lambda, Eigen::ArrayXd wldS, double thresh, int maxit, double threshP, double threshB) {
        typedef SEXP(*Ptr_cvP2L2C)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvP2L2C p_cvP2L2C = NULL;
        if (p_cvP2L2C == NULL) {
            validateSignature("List(*cvP2L2C)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::MatrixXd,Eigen::VectorXd,Eigen::ArrayXd,double,Eigen::VectorXd,Eigen::ArrayXd,double,int,double,double)");
            p_cvP2L2C = (Ptr_cvP2L2C)R_GetCCallable("rCRM", "_rCRM_cvP2L2C");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cvP2L2C(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(XF)), Shield<SEXP>(Rcpp::wrap(yF)), Shield<SEXP>(Rcpp::wrap(ldS)), Shield<SEXP>(Rcpp::wrap(ltp)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(wldS)), Shield<SEXP>(Rcpp::wrap(thresh)), Shield<SEXP>(Rcpp::wrap(maxit)), Shield<SEXP>(Rcpp::wrap(threshP)), Shield<SEXP>(Rcpp::wrap(threshB)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_rCRM_RCPPEXPORTS_H_GEN_
