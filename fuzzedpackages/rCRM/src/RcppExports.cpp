// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rCRM.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// P2L2C
List P2L2C(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::ArrayXd ldS, double ltp, Eigen::VectorXd lambda, Eigen::ArrayXd wldS, double thresh, int maxit, double threshP, double threshB);
static SEXP _rCRM_P2L2C_try(SEXP XSEXP, SEXP ySEXP, SEXP ldSSEXP, SEXP ltpSEXP, SEXP lambdaSEXP, SEXP wldSSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP threshPSEXP, SEXP threshBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type ldS(ldSSEXP);
    Rcpp::traits::input_parameter< double >::type ltp(ltpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type wldS(wldSSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type threshP(threshPSEXP);
    Rcpp::traits::input_parameter< double >::type threshB(threshBSEXP);
    rcpp_result_gen = Rcpp::wrap(P2L2C(X, y, ldS, ltp, lambda, wldS, thresh, maxit, threshP, threshB));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rCRM_P2L2C(SEXP XSEXP, SEXP ySEXP, SEXP ldSSEXP, SEXP ltpSEXP, SEXP lambdaSEXP, SEXP wldSSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP threshPSEXP, SEXP threshBSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rCRM_P2L2C_try(XSEXP, ySEXP, ldSSEXP, ltpSEXP, lambdaSEXP, wldSSEXP, threshSEXP, maxitSEXP, threshPSEXP, threshBSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cvP2L2C
List cvP2L2C(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::MatrixXd XF, Eigen::VectorXd yF, Eigen::ArrayXd ldS, double ltp, Eigen::VectorXd lambda, Eigen::ArrayXd wldS, double thresh, int maxit, double threshP, double threshB);
static SEXP _rCRM_cvP2L2C_try(SEXP XSEXP, SEXP ySEXP, SEXP XFSEXP, SEXP yFSEXP, SEXP ldSSEXP, SEXP ltpSEXP, SEXP lambdaSEXP, SEXP wldSSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP threshPSEXP, SEXP threshBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XF(XFSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type yF(yFSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type ldS(ldSSEXP);
    Rcpp::traits::input_parameter< double >::type ltp(ltpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type wldS(wldSSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type threshP(threshPSEXP);
    Rcpp::traits::input_parameter< double >::type threshB(threshBSEXP);
    rcpp_result_gen = Rcpp::wrap(cvP2L2C(X, y, XF, yF, ldS, ltp, lambda, wldS, thresh, maxit, threshP, threshB));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rCRM_cvP2L2C(SEXP XSEXP, SEXP ySEXP, SEXP XFSEXP, SEXP yFSEXP, SEXP ldSSEXP, SEXP ltpSEXP, SEXP lambdaSEXP, SEXP wldSSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP threshPSEXP, SEXP threshBSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rCRM_cvP2L2C_try(XSEXP, ySEXP, XFSEXP, yFSEXP, ldSSEXP, ltpSEXP, lambdaSEXP, wldSSEXP, threshSEXP, maxitSEXP, threshPSEXP, threshBSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _rCRM_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*P2L2C)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::ArrayXd,double,Eigen::VectorXd,Eigen::ArrayXd,double,int,double,double)");
        signatures.insert("List(*cvP2L2C)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::MatrixXd,Eigen::VectorXd,Eigen::ArrayXd,double,Eigen::VectorXd,Eigen::ArrayXd,double,int,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _rCRM_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rCRM", "_rCRM_P2L2C", (DL_FUNC)_rCRM_P2L2C_try);
    R_RegisterCCallable("rCRM", "_rCRM_cvP2L2C", (DL_FUNC)_rCRM_cvP2L2C_try);
    R_RegisterCCallable("rCRM", "_rCRM_RcppExport_validate", (DL_FUNC)_rCRM_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_rCRM_P2L2C", (DL_FUNC) &_rCRM_P2L2C, 10},
    {"_rCRM_cvP2L2C", (DL_FUNC) &_rCRM_cvP2L2C, 12},
    {"_rCRM_RcppExport_registerCCallable", (DL_FUNC) &_rCRM_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rCRM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
