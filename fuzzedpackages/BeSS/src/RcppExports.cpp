// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/BeSS.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// bess_lm
List bess_lm(Eigen::MatrixXd X, Eigen::VectorXd y, int T0, int max_steps, Eigen::VectorXd beta0);
static SEXP _BeSS_bess_lm_try(SEXP XSEXP, SEXP ySEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(bess_lm(X, y, T0, max_steps, beta0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_bess_lm(SEXP XSEXP, SEXP ySEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP beta0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_bess_lm_try(XSEXP, ySEXP, T0SEXP, max_stepsSEXP, beta0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_A
List get_A(Eigen::MatrixXd& X, Eigen::VectorXd& y, Eigen::VectorXd& beta, double& coef0, int& T0, Eigen::VectorXi& B, Eigen::VectorXd& weights);
static SEXP _BeSS_get_A_try(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP coef0SEXP, SEXP T0SEXP, SEXP BSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< int& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A(X, y, beta, coef0, T0, B, weights));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_get_A(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP coef0SEXP, SEXP T0SEXP, SEXP BSEXP, SEXP weightsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_get_A_try(XSEXP, ySEXP, betaSEXP, coef0SEXP, T0SEXP, BSEXP, weightsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getcox_A
List getcox_A(Eigen::MatrixXd& X, Eigen::VectorXd& beta, int& T0, Eigen::VectorXi& B, Eigen::VectorXd& status, Eigen::VectorXd& weights);
static SEXP _BeSS_getcox_A_try(SEXP XSEXP, SEXP betaSEXP, SEXP T0SEXP, SEXP BSEXP, SEXP statusSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(getcox_A(X, beta, T0, B, status, weights));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_getcox_A(SEXP XSEXP, SEXP betaSEXP, SEXP T0SEXP, SEXP BSEXP, SEXP statusSEXP, SEXP weightsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_getcox_A_try(XSEXP, betaSEXP, T0SEXP, BSEXP, statusSEXP, weightsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EigenR
Eigen::MatrixXd EigenR(Eigen::MatrixXd X);
static SEXP _BeSS_EigenR_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_EigenR(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_EigenR_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gbess_lm
List gbess_lm(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::VectorXd G, Eigen::VectorXd index, List PhiG, List invPhiG, int T0, int max_steps, Eigen::VectorXd beta0, int n, int p, int N);
static SEXP _BeSS_gbess_lm_try(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP PhiGSEXP, SEXP invPhiGSEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type index(indexSEXP);
    Rcpp::traits::input_parameter< List >::type PhiG(PhiGSEXP);
    Rcpp::traits::input_parameter< List >::type invPhiG(invPhiGSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(gbess_lm(X, y, G, index, PhiG, invPhiG, T0, max_steps, beta0, n, p, N));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_gbess_lm(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP PhiGSEXP, SEXP invPhiGSEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_gbess_lm_try(XSEXP, ySEXP, GSEXP, indexSEXP, PhiGSEXP, invPhiGSEXP, T0SEXP, max_stepsSEXP, beta0SEXP, nSEXP, pSEXP, NSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gget_A
List gget_A(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::VectorXi G, Eigen::VectorXi index, int T0, Eigen::VectorXd beta0, double coef0, int n, int p, int N, Eigen::VectorXd weights, Eigen::VectorXi B00);
static SEXP _BeSS_gget_A_try(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP coef0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type B00(B00SEXP);
    rcpp_result_gen = Rcpp::wrap(gget_A(X, y, G, index, T0, beta0, coef0, n, p, N, weights, B00));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_gget_A(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP coef0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_gget_A_try(XSEXP, ySEXP, GSEXP, indexSEXP, T0SEXP, beta0SEXP, coef0SEXP, nSEXP, pSEXP, NSEXP, weightsSEXP, B00SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ggetcox_A
List ggetcox_A(Eigen::MatrixXd X, Eigen::VectorXi G, Eigen::VectorXi index, int T0, Eigen::VectorXd beta0, int n, int p, int N, Eigen::VectorXd status, Eigen::VectorXd weights, Eigen::VectorXi B00);
static SEXP _BeSS_ggetcox_A_try(SEXP XSEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP statusSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type B00(B00SEXP);
    rcpp_result_gen = Rcpp::wrap(ggetcox_A(X, G, index, T0, beta0, n, p, N, status, weights, B00));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _BeSS_ggetcox_A(SEXP XSEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP statusSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_BeSS_ggetcox_A_try(XSEXP, GSEXP, indexSEXP, T0SEXP, beta0SEXP, nSEXP, pSEXP, NSEXP, statusSEXP, weightsSEXP, B00SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _BeSS_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*bess_lm)(Eigen::MatrixXd,Eigen::VectorXd,int,int,Eigen::VectorXd)");
        signatures.insert("List(*get_A)(Eigen::MatrixXd&,Eigen::VectorXd&,Eigen::VectorXd&,double&,int&,Eigen::VectorXi&,Eigen::VectorXd&)");
        signatures.insert("List(*getcox_A)(Eigen::MatrixXd&,Eigen::VectorXd&,int&,Eigen::VectorXi&,Eigen::VectorXd&,Eigen::VectorXd&)");
        signatures.insert("Eigen::MatrixXd(*EigenR)(Eigen::MatrixXd)");
        signatures.insert("List(*gbess_lm)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,List,List,int,int,Eigen::VectorXd,int,int,int)");
        signatures.insert("List(*gget_A)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXi,Eigen::VectorXi,int,Eigen::VectorXd,double,int,int,int,Eigen::VectorXd,Eigen::VectorXi)");
        signatures.insert("List(*ggetcox_A)(Eigen::MatrixXd,Eigen::VectorXi,Eigen::VectorXi,int,Eigen::VectorXd,int,int,int,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXi)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _BeSS_RcppExport_registerCCallable() { 
    R_RegisterCCallable("BeSS", "_BeSS_bess_lm", (DL_FUNC)_BeSS_bess_lm_try);
    R_RegisterCCallable("BeSS", "_BeSS_get_A", (DL_FUNC)_BeSS_get_A_try);
    R_RegisterCCallable("BeSS", "_BeSS_getcox_A", (DL_FUNC)_BeSS_getcox_A_try);
    R_RegisterCCallable("BeSS", "_BeSS_EigenR", (DL_FUNC)_BeSS_EigenR_try);
    R_RegisterCCallable("BeSS", "_BeSS_gbess_lm", (DL_FUNC)_BeSS_gbess_lm_try);
    R_RegisterCCallable("BeSS", "_BeSS_gget_A", (DL_FUNC)_BeSS_gget_A_try);
    R_RegisterCCallable("BeSS", "_BeSS_ggetcox_A", (DL_FUNC)_BeSS_ggetcox_A_try);
    R_RegisterCCallable("BeSS", "_BeSS_RcppExport_validate", (DL_FUNC)_BeSS_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_BeSS_bess_lm", (DL_FUNC) &_BeSS_bess_lm, 5},
    {"_BeSS_get_A", (DL_FUNC) &_BeSS_get_A, 7},
    {"_BeSS_getcox_A", (DL_FUNC) &_BeSS_getcox_A, 6},
    {"_BeSS_EigenR", (DL_FUNC) &_BeSS_EigenR, 1},
    {"_BeSS_gbess_lm", (DL_FUNC) &_BeSS_gbess_lm, 12},
    {"_BeSS_gget_A", (DL_FUNC) &_BeSS_gget_A, 12},
    {"_BeSS_ggetcox_A", (DL_FUNC) &_BeSS_ggetcox_A, 11},
    {"_BeSS_RcppExport_registerCCallable", (DL_FUNC) &_BeSS_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_BeSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
