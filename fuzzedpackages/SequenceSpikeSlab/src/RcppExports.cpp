// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// HierarchicalPriorC
NumericVector HierarchicalPriorC(NumericVector logphi, NumericVector logpsi, NumericVector logprior, bool showProgress, bool divideByBinom);
RcppExport SEXP _SequenceSpikeSlab_HierarchicalPriorC(SEXP logphiSEXP, SEXP logpsiSEXP, SEXP logpriorSEXP, SEXP showProgressSEXP, SEXP divideByBinomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logphi(logphiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logpsi(logpsiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logprior(logpriorSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< bool >::type divideByBinom(divideByBinomSEXP);
    rcpp_result_gen = Rcpp::wrap(HierarchicalPriorC(logphi, logpsi, logprior, showProgress, divideByBinom));
    return rcpp_result_gen;
END_RCPP
}
// DiscreteSpikeSlabPriorC
NumericVector DiscreteSpikeSlabPriorC(NumericVector logphi, NumericVector logpsi, NumericVector grid, NumericVector logGridPrior, bool showProgress);
RcppExport SEXP _SequenceSpikeSlab_DiscreteSpikeSlabPriorC(SEXP logphiSEXP, SEXP logpsiSEXP, SEXP gridSEXP, SEXP logGridPriorSEXP, SEXP showProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logphi(logphiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logpsi(logpsiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logGridPrior(logGridPriorSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(DiscreteSpikeSlabPriorC(logphi, logpsi, grid, logGridPrior, showProgress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SequenceSpikeSlab_HierarchicalPriorC", (DL_FUNC) &_SequenceSpikeSlab_HierarchicalPriorC, 5},
    {"_SequenceSpikeSlab_DiscreteSpikeSlabPriorC", (DL_FUNC) &_SequenceSpikeSlab_DiscreteSpikeSlabPriorC, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SequenceSpikeSlab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
