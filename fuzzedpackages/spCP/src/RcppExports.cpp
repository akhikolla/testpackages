// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GetRooti
arma::mat GetRooti(arma::mat const& Cov, arma::mat const& Eye);
RcppExport SEXP _spCP_GetRooti(SEXP CovSEXP, SEXP EyeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Cov(CovSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Eye(EyeSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRooti(Cov, Eye));
    return rcpp_result_gen;
END_RCPP
}
// QInvFnc
arma::mat QInvFnc(arma::mat const& WAlpha, arma::mat const& EyeM, double Rho, int M);
RcppExport SEXP _spCP_QInvFnc(SEXP WAlphaSEXP, SEXP EyeMSEXP, SEXP RhoSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type WAlpha(WAlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type EyeM(EyeMSEXP);
    Rcpp::traits::input_parameter< double >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(QInvFnc(WAlpha, EyeM, Rho, M));
    return rcpp_result_gen;
END_RCPP
}
// QFnc
arma::mat QFnc(arma::mat const& WAlpha, arma::mat const& EyeM, double Rho, int M);
RcppExport SEXP _spCP_QFnc(SEXP WAlphaSEXP, SEXP EyeMSEXP, SEXP RhoSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type WAlpha(WAlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type EyeM(EyeMSEXP);
    Rcpp::traits::input_parameter< double >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(QFnc(WAlpha, EyeM, Rho, M));
    return rcpp_result_gen;
END_RCPP
}
// WAlphaFnc
arma::mat WAlphaFnc(double Alpha, arma::colvec const& DMLong, arma::umat const& AdjacentEdgesBoolean, arma::Mat<int> const& W, int M, int WeightsInd);
RcppExport SEXP _spCP_WAlphaFnc(SEXP AlphaSEXP, SEXP DMLongSEXP, SEXP AdjacentEdgesBooleanSEXP, SEXP WSEXP, SEXP MSEXP, SEXP WeightsIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< arma::colvec const& >::type DMLong(DMLongSEXP);
    Rcpp::traits::input_parameter< arma::umat const& >::type AdjacentEdgesBoolean(AdjacentEdgesBooleanSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int> const& >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type WeightsInd(WeightsIndSEXP);
    rcpp_result_gen = Rcpp::wrap(WAlphaFnc(Alpha, DMLong, AdjacentEdgesBoolean, W, M, WeightsInd));
    return rcpp_result_gen;
END_RCPP
}
// GetLogLik
arma::colvec GetLogLik(Rcpp::List DatObj_List, Rcpp::List Para_List, int NKeep);
RcppExport SEXP _spCP_GetLogLik(SEXP DatObj_ListSEXP, SEXP Para_ListSEXP, SEXP NKeepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type DatObj_List(DatObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Para_List(Para_ListSEXP);
    Rcpp::traits::input_parameter< int >::type NKeep(NKeepSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLogLik(DatObj_List, Para_List, NKeep));
    return rcpp_result_gen;
END_RCPP
}
// GetLogLikMean
double GetLogLikMean(Rcpp::List DatObj_List, Rcpp::List Para_List);
RcppExport SEXP _spCP_GetLogLikMean(SEXP DatObj_ListSEXP, SEXP Para_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type DatObj_List(DatObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Para_List(Para_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(GetLogLikMean(DatObj_List, Para_List));
    return rcpp_result_gen;
END_RCPP
}
// SamplePPD
arma::mat SamplePPD(Rcpp::List DatObj_List, Rcpp::List Para_List, int NKeep);
RcppExport SEXP _spCP_SamplePPD(SEXP DatObj_ListSEXP, SEXP Para_ListSEXP, SEXP NKeepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type DatObj_List(DatObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Para_List(Para_ListSEXP);
    Rcpp::traits::input_parameter< int >::type NKeep(NKeepSEXP);
    rcpp_result_gen = Rcpp::wrap(SamplePPD(DatObj_List, Para_List, NKeep));
    return rcpp_result_gen;
END_RCPP
}
// spCP_Rcpp
Rcpp::List spCP_Rcpp(Rcpp::List DatObj_List, Rcpp::List HyPara_List, Rcpp::List MetrObj_List, Rcpp::List Para_List, Rcpp::List DatAug_List, Rcpp::List McmcObj_List, arma::mat RawSamples, bool Interactive);
RcppExport SEXP _spCP_spCP_Rcpp(SEXP DatObj_ListSEXP, SEXP HyPara_ListSEXP, SEXP MetrObj_ListSEXP, SEXP Para_ListSEXP, SEXP DatAug_ListSEXP, SEXP McmcObj_ListSEXP, SEXP RawSamplesSEXP, SEXP InteractiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type DatObj_List(DatObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type HyPara_List(HyPara_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type MetrObj_List(MetrObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Para_List(Para_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type DatAug_List(DatAug_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type McmcObj_List(McmcObj_ListSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RawSamples(RawSamplesSEXP);
    Rcpp::traits::input_parameter< bool >::type Interactive(InteractiveSEXP);
    rcpp_result_gen = Rcpp::wrap(spCP_Rcpp(DatObj_List, HyPara_List, MetrObj_List, Para_List, DatAug_List, McmcObj_List, RawSamples, Interactive));
    return rcpp_result_gen;
END_RCPP
}
// PredictFuture
arma::cube PredictFuture(Rcpp::List DatObj_List, Rcpp::List Para_List, int NKeep);
RcppExport SEXP _spCP_PredictFuture(SEXP DatObj_ListSEXP, SEXP Para_ListSEXP, SEXP NKeepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type DatObj_List(DatObj_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Para_List(Para_ListSEXP);
    Rcpp::traits::input_parameter< int >::type NKeep(NKeepSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictFuture(DatObj_List, Para_List, NKeep));
    return rcpp_result_gen;
END_RCPP
}
// Test
void Test();
RcppExport SEXP _spCP_Test() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Test();
    return R_NilValue;
END_RCPP
}
// GetXTheta
arma::mat GetXTheta(arma::vec const& Theta, arma::uvec const& XThetaInd, arma::vec const& TimeVec, arma::vec const& OneNu, arma::vec const& OneN, double tNu, int N, int M);
RcppExport SEXP _spCP_GetXTheta(SEXP ThetaSEXP, SEXP XThetaIndSEXP, SEXP TimeVecSEXP, SEXP OneNuSEXP, SEXP OneNSEXP, SEXP tNuSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::uvec const& >::type XThetaInd(XThetaIndSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type TimeVec(TimeVecSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type OneNu(OneNuSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type OneN(OneNSEXP);
    Rcpp::traits::input_parameter< double >::type tNu(tNuSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(GetXTheta(Theta, XThetaInd, TimeVec, OneNu, OneN, tNu, N, M));
    return rcpp_result_gen;
END_RCPP
}
// GetXThetaLoc
arma::mat GetXThetaLoc(double ThetaLoc, arma::vec const& Time, arma::vec const& OneNu, int Nu);
RcppExport SEXP _spCP_GetXThetaLoc(SEXP ThetaLocSEXP, SEXP TimeSEXP, SEXP OneNuSEXP, SEXP NuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ThetaLoc(ThetaLocSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type OneNu(OneNuSEXP);
    Rcpp::traits::input_parameter< int >::type Nu(NuSEXP);
    rcpp_result_gen = Rcpp::wrap(GetXThetaLoc(ThetaLoc, Time, OneNu, Nu));
    return rcpp_result_gen;
END_RCPP
}
// CreatePhi
arma::vec CreatePhi(arma::vec const& Beta, arma::vec const& Lambda, arma::vec const& Eta, int M);
RcppExport SEXP _spCP_CreatePhi(SEXP BetaSEXP, SEXP LambdaSEXP, SEXP EtaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(CreatePhi(Beta, Lambda, Eta, M));
    return rcpp_result_gen;
END_RCPP
}
// CholInv
arma::mat CholInv(arma::mat const& Cov);
RcppExport SEXP _spCP_CholInv(SEXP CovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Cov(CovSEXP);
    rcpp_result_gen = Rcpp::wrap(CholInv(Cov));
    return rcpp_result_gen;
END_RCPP
}
// Inv3
arma::mat Inv3(arma::mat const& A);
RcppExport SEXP _spCP_Inv3(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Inv3(A));
    return rcpp_result_gen;
END_RCPP
}
// makeSymm
arma::mat makeSymm(arma::mat const& A);
RcppExport SEXP _spCP_makeSymm(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(makeSymm(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spCP_GetRooti", (DL_FUNC) &_spCP_GetRooti, 2},
    {"_spCP_QInvFnc", (DL_FUNC) &_spCP_QInvFnc, 4},
    {"_spCP_QFnc", (DL_FUNC) &_spCP_QFnc, 4},
    {"_spCP_WAlphaFnc", (DL_FUNC) &_spCP_WAlphaFnc, 6},
    {"_spCP_GetLogLik", (DL_FUNC) &_spCP_GetLogLik, 3},
    {"_spCP_GetLogLikMean", (DL_FUNC) &_spCP_GetLogLikMean, 2},
    {"_spCP_SamplePPD", (DL_FUNC) &_spCP_SamplePPD, 3},
    {"_spCP_spCP_Rcpp", (DL_FUNC) &_spCP_spCP_Rcpp, 8},
    {"_spCP_PredictFuture", (DL_FUNC) &_spCP_PredictFuture, 3},
    {"_spCP_Test", (DL_FUNC) &_spCP_Test, 0},
    {"_spCP_GetXTheta", (DL_FUNC) &_spCP_GetXTheta, 8},
    {"_spCP_GetXThetaLoc", (DL_FUNC) &_spCP_GetXThetaLoc, 4},
    {"_spCP_CreatePhi", (DL_FUNC) &_spCP_CreatePhi, 4},
    {"_spCP_CholInv", (DL_FUNC) &_spCP_CholInv, 1},
    {"_spCP_Inv3", (DL_FUNC) &_spCP_Inv3, 1},
    {"_spCP_makeSymm", (DL_FUNC) &_spCP_makeSymm, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_spCP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
