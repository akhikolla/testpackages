// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GPC_cpp
Rcpp::List GPC_cpp(arma::mat endpoint, arma::mat status, std::vector< arma::uvec > indexC, std::vector< arma::uvec > posC, std::vector< arma::uvec > indexT, std::vector< arma::uvec > posT, std::vector< double > threshold, arma::vec weight, arma::vec method, unsigned int D, unsigned int D_UTTE, unsigned int n_strata, arma::vec nUTTE_analyzedPeron_M1, std::vector<unsigned int> index_endpoint, std::vector<unsigned int> index_status, std::vector<int> index_UTTE, std::vector< std::vector< arma::mat > > list_survTimeC, std::vector< std::vector< arma::mat > > list_survTimeT, std::vector< std::vector< arma::mat > > list_survJumpC, std::vector< std::vector< arma::mat > > list_survJumpT, std::vector< arma::mat > list_lastSurv, arma::mat p_C, arma::mat p_T, std::vector< std::vector< arma::mat > > iid_survJumpC, std::vector< std::vector< arma::mat > > iid_survJumpT, double zeroPlus, int correctionUninf, bool hierarchical, int hprojection, bool neutralAsUninf, bool keepScore, int returnIID, int debug);
RcppExport SEXP _BuyseTest_GPC_cpp(SEXP endpointSEXP, SEXP statusSEXP, SEXP indexCSEXP, SEXP posCSEXP, SEXP indexTSEXP, SEXP posTSEXP, SEXP thresholdSEXP, SEXP weightSEXP, SEXP methodSEXP, SEXP DSEXP, SEXP D_UTTESEXP, SEXP n_strataSEXP, SEXP nUTTE_analyzedPeron_M1SEXP, SEXP index_endpointSEXP, SEXP index_statusSEXP, SEXP index_UTTESEXP, SEXP list_survTimeCSEXP, SEXP list_survTimeTSEXP, SEXP list_survJumpCSEXP, SEXP list_survJumpTSEXP, SEXP list_lastSurvSEXP, SEXP p_CSEXP, SEXP p_TSEXP, SEXP iid_survJumpCSEXP, SEXP iid_survJumpTSEXP, SEXP zeroPlusSEXP, SEXP correctionUninfSEXP, SEXP hierarchicalSEXP, SEXP hprojectionSEXP, SEXP neutralAsUninfSEXP, SEXP keepScoreSEXP, SEXP returnIIDSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type endpoint(endpointSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type status(statusSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type indexC(indexCSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type posC(posCSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type indexT(indexTSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type posT(posTSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type D(DSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type D_UTTE(D_UTTESEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_strata(n_strataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nUTTE_analyzedPeron_M1(nUTTE_analyzedPeron_M1SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type index_endpoint(index_endpointSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type index_status(index_statusSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type index_UTTE(index_UTTESEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survTimeC(list_survTimeCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survTimeT(list_survTimeTSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survJumpC(list_survJumpCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survJumpT(list_survJumpTSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::mat > >::type list_lastSurv(list_lastSurvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p_C(p_CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p_T(p_TSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type iid_survJumpC(iid_survJumpCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type iid_survJumpT(iid_survJumpTSEXP);
    Rcpp::traits::input_parameter< double >::type zeroPlus(zeroPlusSEXP);
    Rcpp::traits::input_parameter< int >::type correctionUninf(correctionUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type hierarchical(hierarchicalSEXP);
    Rcpp::traits::input_parameter< int >::type hprojection(hprojectionSEXP);
    Rcpp::traits::input_parameter< bool >::type neutralAsUninf(neutralAsUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepScore(keepScoreSEXP);
    Rcpp::traits::input_parameter< int >::type returnIID(returnIIDSEXP);
    Rcpp::traits::input_parameter< int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(GPC_cpp(endpoint, status, indexC, posC, indexT, posT, threshold, weight, method, D, D_UTTE, n_strata, nUTTE_analyzedPeron_M1, index_endpoint, index_status, index_UTTE, list_survTimeC, list_survTimeT, list_survJumpC, list_survJumpT, list_lastSurv, p_C, p_T, iid_survJumpC, iid_survJumpT, zeroPlus, correctionUninf, hierarchical, hprojection, neutralAsUninf, keepScore, returnIID, debug));
    return rcpp_result_gen;
END_RCPP
}
// GPC2_cpp
Rcpp::List GPC2_cpp(arma::mat endpoint, arma::mat status, std::vector< arma::uvec > indexC, std::vector< arma::uvec > posC, std::vector< arma::uvec > indexT, std::vector< arma::uvec > posT, std::vector< double > threshold, arma::vec weight, arma::vec method, unsigned int D, unsigned int D_UTTE, unsigned int n_strata, arma::vec nUTTE_analyzedPeron_M1, std::vector<unsigned int> index_endpoint, std::vector<unsigned int> index_status, std::vector<int> index_UTTE, std::vector< std::vector< arma::mat > > list_survTimeC, std::vector< std::vector< arma::mat > > list_survTimeT, std::vector< std::vector< arma::mat > > list_survJumpC, std::vector< std::vector< arma::mat > > list_survJumpT, std::vector< arma::mat > list_lastSurv, arma::mat p_C, arma::mat p_T, std::vector< std::vector< arma::mat > > iid_survJumpC, std::vector< std::vector< arma::mat > > iid_survJumpT, double zeroPlus, int correctionUninf, bool hierarchical, int hprojection, bool neutralAsUninf, bool keepScore, int returnIID, int debug);
RcppExport SEXP _BuyseTest_GPC2_cpp(SEXP endpointSEXP, SEXP statusSEXP, SEXP indexCSEXP, SEXP posCSEXP, SEXP indexTSEXP, SEXP posTSEXP, SEXP thresholdSEXP, SEXP weightSEXP, SEXP methodSEXP, SEXP DSEXP, SEXP D_UTTESEXP, SEXP n_strataSEXP, SEXP nUTTE_analyzedPeron_M1SEXP, SEXP index_endpointSEXP, SEXP index_statusSEXP, SEXP index_UTTESEXP, SEXP list_survTimeCSEXP, SEXP list_survTimeTSEXP, SEXP list_survJumpCSEXP, SEXP list_survJumpTSEXP, SEXP list_lastSurvSEXP, SEXP p_CSEXP, SEXP p_TSEXP, SEXP iid_survJumpCSEXP, SEXP iid_survJumpTSEXP, SEXP zeroPlusSEXP, SEXP correctionUninfSEXP, SEXP hierarchicalSEXP, SEXP hprojectionSEXP, SEXP neutralAsUninfSEXP, SEXP keepScoreSEXP, SEXP returnIIDSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type endpoint(endpointSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type status(statusSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type indexC(indexCSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type posC(posCSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type indexT(indexTSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::uvec > >::type posT(posTSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type D(DSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type D_UTTE(D_UTTESEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_strata(n_strataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nUTTE_analyzedPeron_M1(nUTTE_analyzedPeron_M1SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type index_endpoint(index_endpointSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type index_status(index_statusSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type index_UTTE(index_UTTESEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survTimeC(list_survTimeCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survTimeT(list_survTimeTSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survJumpC(list_survJumpCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type list_survJumpT(list_survJumpTSEXP);
    Rcpp::traits::input_parameter< std::vector< arma::mat > >::type list_lastSurv(list_lastSurvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p_C(p_CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p_T(p_TSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type iid_survJumpC(iid_survJumpCSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector< arma::mat > > >::type iid_survJumpT(iid_survJumpTSEXP);
    Rcpp::traits::input_parameter< double >::type zeroPlus(zeroPlusSEXP);
    Rcpp::traits::input_parameter< int >::type correctionUninf(correctionUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type hierarchical(hierarchicalSEXP);
    Rcpp::traits::input_parameter< int >::type hprojection(hprojectionSEXP);
    Rcpp::traits::input_parameter< bool >::type neutralAsUninf(neutralAsUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepScore(keepScoreSEXP);
    Rcpp::traits::input_parameter< int >::type returnIID(returnIIDSEXP);
    Rcpp::traits::input_parameter< int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(GPC2_cpp(endpoint, status, indexC, posC, indexT, posT, threshold, weight, method, D, D_UTTE, n_strata, nUTTE_analyzedPeron_M1, index_endpoint, index_status, index_UTTE, list_survTimeC, list_survTimeT, list_survJumpC, list_survJumpT, list_lastSurv, p_C, p_T, iid_survJumpC, iid_survJumpT, zeroPlus, correctionUninf, hierarchical, hprojection, neutralAsUninf, keepScore, returnIID, debug));
    return rcpp_result_gen;
END_RCPP
}
// calcIntegralSurv_cpp
std::vector< double > calcIntegralSurv_cpp(const arma::mat& survival, double start, double lastSurv, double lastdSurv, bool returnDeriv, int column, arma::mat& derivSurv, arma::mat& derivSurvD);
RcppExport SEXP _BuyseTest_calcIntegralSurv_cpp(SEXP survivalSEXP, SEXP startSEXP, SEXP lastSurvSEXP, SEXP lastdSurvSEXP, SEXP returnDerivSEXP, SEXP columnSEXP, SEXP derivSurvSEXP, SEXP derivSurvDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type lastSurv(lastSurvSEXP);
    Rcpp::traits::input_parameter< double >::type lastdSurv(lastdSurvSEXP);
    Rcpp::traits::input_parameter< bool >::type returnDeriv(returnDerivSEXP);
    Rcpp::traits::input_parameter< int >::type column(columnSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type derivSurv(derivSurvSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type derivSurvD(derivSurvDSEXP);
    rcpp_result_gen = Rcpp::wrap(calcIntegralSurv_cpp(survival, start, lastSurv, lastdSurv, returnDeriv, column, derivSurv, derivSurvD));
    return rcpp_result_gen;
END_RCPP
}
// calcIntegralCif_cpp
double calcIntegralCif_cpp(const arma::mat& cif, double start_val, double stop_val, double CIF_t, double lastCIF, int type);
RcppExport SEXP _BuyseTest_calcIntegralCif_cpp(SEXP cifSEXP, SEXP start_valSEXP, SEXP stop_valSEXP, SEXP CIF_tSEXP, SEXP lastCIFSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type cif(cifSEXP);
    Rcpp::traits::input_parameter< double >::type start_val(start_valSEXP);
    Rcpp::traits::input_parameter< double >::type stop_val(stop_valSEXP);
    Rcpp::traits::input_parameter< double >::type CIF_t(CIF_tSEXP);
    Rcpp::traits::input_parameter< double >::type lastCIF(lastCIFSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calcIntegralCif_cpp(cif, start_val, stop_val, CIF_t, lastCIF, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BuyseTest_GPC_cpp", (DL_FUNC) &_BuyseTest_GPC_cpp, 33},
    {"_BuyseTest_GPC2_cpp", (DL_FUNC) &_BuyseTest_GPC2_cpp, 33},
    {"_BuyseTest_calcIntegralSurv_cpp", (DL_FUNC) &_BuyseTest_calcIntegralSurv_cpp, 8},
    {"_BuyseTest_calcIntegralCif_cpp", (DL_FUNC) &_BuyseTest_calcIntegralCif_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BuyseTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
