// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PQPL_estimate
List PQPL_estimate(arma::mat M, arma::mat X, arma::vec w, arma::vec etaTilde, arma::mat R, double sigma2, int T);
RcppExport SEXP _binaryGP_PQPL_estimate(SEXP MSEXP, SEXP XSEXP, SEXP wSEXP, SEXP etaTildeSEXP, SEXP RSEXP, SEXP sigma2SEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type etaTilde(etaTildeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(PQPL_estimate(M, X, w, etaTilde, R, sigma2, T));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_fun
double likelihood_fun(arma::mat M, arma::mat X, arma::vec w, arma::vec etaTilde, arma::mat R, double sigma2, int T);
RcppExport SEXP _binaryGP_likelihood_fun(SEXP MSEXP, SEXP XSEXP, SEXP wSEXP, SEXP etaTildeSEXP, SEXP RSEXP, SEXP sigma2SEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type etaTilde(etaTildeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_fun(M, X, w, etaTilde, R, sigma2, T));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_binaryGP_PQPL_estimate", (DL_FUNC) &_binaryGP_PQPL_estimate, 7},
    {"_binaryGP_likelihood_fun", (DL_FUNC) &_binaryGP_likelihood_fun, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_binaryGP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
