// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_regmed
List rcpp_regmed(arma::vec alpha, arma::vec beta, double delta, double vary, double varx, arma::mat SampCov, arma::mat MedCov, double sample_size, double fracLasso, double lambda, double wt_delta, int max_iter, int max_iter_inner, double tol, double vary_step_size, double step_multiplier, bool verbose);
RcppExport SEXP _regmed_rcpp_regmed(SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP varySEXP, SEXP varxSEXP, SEXP SampCovSEXP, SEXP MedCovSEXP, SEXP sample_sizeSEXP, SEXP fracLassoSEXP, SEXP lambdaSEXP, SEXP wt_deltaSEXP, SEXP max_iterSEXP, SEXP max_iter_innerSEXP, SEXP tolSEXP, SEXP vary_step_sizeSEXP, SEXP step_multiplierSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type vary(varySEXP);
    Rcpp::traits::input_parameter< double >::type varx(varxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type SampCov(SampCovSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type MedCov(MedCovSEXP);
    Rcpp::traits::input_parameter< double >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type fracLasso(fracLassoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type wt_delta(wt_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_inner(max_iter_innerSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type vary_step_size(vary_step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type step_multiplier(step_multiplierSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_regmed(alpha, beta, delta, vary, varx, SampCov, MedCov, sample_size, fracLasso, lambda, wt_delta, max_iter, max_iter_inner, tol, vary_step_size, step_multiplier, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regmed_rcpp_regmed", (DL_FUNC) &_regmed_rcpp_regmed, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_regmed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
