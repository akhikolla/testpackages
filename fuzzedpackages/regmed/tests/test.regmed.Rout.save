
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> require(regmed)
Loading required package: regmed
Loading required package: glasso
> 
> set.seed(1000)
> 
> data(regmed_example)
> 
>  y <- regmed_example$y
>  x <- regmed_example$x
>  med <- regmed_example[, -c(1,2)]
>  fit.grid <- regmed.grid(x, med, y, lambda.vec= c(seq(from=1, to=0, by = -.1)), 
+ frac.lasso=.8)
> fit.grid
Call:
regmed.grid(x = x, mediator = med, y = y, lambda.vec = c(seq(from = 1, 
    to = 0, by = -0.1)), frac.lasso = 0.8)

   lambda converge iter df      bic
1     1.0     TRUE    2  1 462.7777
2     0.9     TRUE    2  1 462.7777
3     0.8     TRUE   10  2 466.7962
4     0.7     TRUE   10  3 466.7851
5     0.6     TRUE   16  3 462.2110
6     0.5     TRUE    7  5 465.7519
7     0.4     TRUE  186  6 461.7034
8     0.3     TRUE  280  8 462.2176
9     0.2     TRUE    5  8 456.3223
10    0.1     TRUE   14  9 459.7115
11    0.0     TRUE    8 10 468.0501
> 
> ## get best fit
> fit.trim <- trim.best(fit.grid)
> which.med <- colnames(med) %in% dimnames(fit.trim$alpha)[[1]]
> med.selected <- med[, which.med]
> 
> fit.regmed <- regmed.fit(x, med.selected, y, lambda = 0.2, frac.lasso=.8)
> summary(fit.regmed)
Call:
regmed.fit(x = x, mediator = med.selected, y = y, lambda = 0.2, 
    frac.lasso = 0.8)

Coefficients:
                    alpha       beta  alpha.beta
med.cg01644731  0.2029702 -0.1965572 -0.03989525
med.cg06890779 -0.2557726  0.1039875 -0.02659716

sum of alpha*beta =  -0.06649241 
delta =  -0.1363947 
sum of delta + alpha*beta =  -0.2028871 
var(x) =  1 
var(y) =  0.8880832 
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.322   0.074   0.472 
