// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// QRADMMCPP
arma::vec QRADMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int mr, double ta, double rhor);
RcppExport SEXP _cqrReg_QRADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP);
    rcpp_result_gen = Rcpp::wrap(QRADMMCPP(xr, yr, betar, to, mr, ta, rhor));
    return rcpp_result_gen;
END_RCPP
}
// CQRADMMCPP
arma::vec CQRADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, double to, int mr, arma::vec ta, double rhor, double pr);
RcppExport SEXP _cqrReg_CQRADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP);
    Rcpp::traits::input_parameter< double >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRADMMCPP(xr, yr, betar, to, mr, ta, rhor, pr));
    return rcpp_result_gen;
END_RCPP
}
// QRPADMMCPP
arma::vec QRPADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, int m, double ta, double rhor, double lambdar);
RcppExport SEXP _cqrReg_QRPADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP mSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP lambdarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP);
    Rcpp::traits::input_parameter< double >::type lambdar(lambdarSEXP);
    rcpp_result_gen = Rcpp::wrap(QRPADMMCPP(xr, yr, betar, m, ta, rhor, lambdar));
    return rcpp_result_gen;
END_RCPP
}
// CQRPADMMCPP
arma::vec CQRPADMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, int mr, arma::vec ta, double rhor, double lambdar, int pr, int kr);
RcppExport SEXP _cqrReg_CQRPADMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP mrSEXP, SEXP taSEXP, SEXP rhorSEXP, SEXP lambdarSEXP, SEXP prSEXP, SEXP krSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type rhor(rhorSEXP);
    Rcpp::traits::input_parameter< double >::type lambdar(lambdarSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type kr(krSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRPADMMCPP(xr, yr, betar, mr, ta, rhor, lambdar, pr, kr));
    return rcpp_result_gen;
END_RCPP
}
// CQRCDCPP
arma::vec CQRCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, arma::vec ta);
RcppExport SEXP _cqrReg_CQRCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRCDCPP(xr, yr, betar, to, m, ta));
    return rcpp_result_gen;
END_RCPP
}
// CQRMMCPP
arma::vec CQRMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, arma::vec ta);
RcppExport SEXP _cqrReg_CQRMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRMMCPP(xr, yr, betar, to, m, ta));
    return rcpp_result_gen;
END_RCPP
}
// CQRPCDCPP
arma::vec CQRPCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, arma::vec ta, double l);
RcppExport SEXP _cqrReg_CQRPCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRPCDCPP(xr, yr, betar, betaoldr, to, m, ta, l));
    return rcpp_result_gen;
END_RCPP
}
// CQRPMMCPP
arma::vec CQRPMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, arma::vec ta, double lamdar);
RcppExport SEXP _cqrReg_CQRPMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP);
    rcpp_result_gen = Rcpp::wrap(CQRPMMCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar));
    return rcpp_result_gen;
END_RCPP
}
// QRCDCPP
arma::vec QRCDCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, double ta);
RcppExport SEXP _cqrReg_QRCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    rcpp_result_gen = Rcpp::wrap(QRCDCPP(xr, yr, betar, to, m, ta));
    return rcpp_result_gen;
END_RCPP
}
// QRMMCPP
arma::vec QRMMCPP(arma::mat xr, arma:: vec yr, arma::vec betar, double to, int m, double ta);
RcppExport SEXP _cqrReg_QRMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    rcpp_result_gen = Rcpp::wrap(QRMMCPP(xr, yr, betar, to, m, ta));
    return rcpp_result_gen;
END_RCPP
}
// QRPCDCPP
arma::vec QRPCDCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, double ta, double lamdar);
RcppExport SEXP _cqrReg_QRPCDCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP);
    rcpp_result_gen = Rcpp::wrap(QRPCDCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar));
    return rcpp_result_gen;
END_RCPP
}
// QRPMMCPP
arma::vec QRPMMCPP(arma::mat xr, arma::vec yr, arma::vec betar, arma::vec betaoldr, double to, int m, double ta, double lamdar);
RcppExport SEXP _cqrReg_QRPMMCPP(SEXP xrSEXP, SEXP yrSEXP, SEXP betarSEXP, SEXP betaoldrSEXP, SEXP toSEXP, SEXP mSEXP, SEXP taSEXP, SEXP lamdarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaoldr(betaoldrSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    Rcpp::traits::input_parameter< double >::type lamdar(lamdarSEXP);
    rcpp_result_gen = Rcpp::wrap(QRPMMCPP(xr, yr, betar, betaoldr, to, m, ta, lamdar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cqrReg_QRADMMCPP", (DL_FUNC) &_cqrReg_QRADMMCPP, 7},
    {"_cqrReg_CQRADMMCPP", (DL_FUNC) &_cqrReg_CQRADMMCPP, 8},
    {"_cqrReg_QRPADMMCPP", (DL_FUNC) &_cqrReg_QRPADMMCPP, 7},
    {"_cqrReg_CQRPADMMCPP", (DL_FUNC) &_cqrReg_CQRPADMMCPP, 9},
    {"_cqrReg_CQRCDCPP", (DL_FUNC) &_cqrReg_CQRCDCPP, 6},
    {"_cqrReg_CQRMMCPP", (DL_FUNC) &_cqrReg_CQRMMCPP, 6},
    {"_cqrReg_CQRPCDCPP", (DL_FUNC) &_cqrReg_CQRPCDCPP, 8},
    {"_cqrReg_CQRPMMCPP", (DL_FUNC) &_cqrReg_CQRPMMCPP, 8},
    {"_cqrReg_QRCDCPP", (DL_FUNC) &_cqrReg_QRCDCPP, 6},
    {"_cqrReg_QRMMCPP", (DL_FUNC) &_cqrReg_QRMMCPP, 6},
    {"_cqrReg_QRPCDCPP", (DL_FUNC) &_cqrReg_QRPCDCPP, 8},
    {"_cqrReg_QRPMMCPP", (DL_FUNC) &_cqrReg_QRPMMCPP, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_cqrReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
