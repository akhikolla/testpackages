// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gwfa_c
NumericMatrix gwfa_c(NumericVector pt_x, NumericVector pt_y, NumericVector coord_x, NumericVector coord_y, float bandwith, int taille_sample, NumericVector rayons, NumericVector qs);
RcppExport SEXP _gwfa_gwfa_c(SEXP pt_xSEXP, SEXP pt_ySEXP, SEXP coord_xSEXP, SEXP coord_ySEXP, SEXP bandwithSEXP, SEXP taille_sampleSEXP, SEXP rayonsSEXP, SEXP qsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pt_x(pt_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pt_y(pt_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coord_x(coord_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coord_y(coord_ySEXP);
    Rcpp::traits::input_parameter< float >::type bandwith(bandwithSEXP);
    Rcpp::traits::input_parameter< int >::type taille_sample(taille_sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rayons(rayonsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qs(qsSEXP);
    rcpp_result_gen = Rcpp::wrap(gwfa_c(pt_x, pt_y, coord_x, coord_y, bandwith, taille_sample, rayons, qs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gwfa_gwfa_c", (DL_FUNC) &_gwfa_gwfa_c, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_gwfa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
