// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rotations.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// rcayleyCpp
Rcpp::NumericVector rcayleyCpp(unsigned int n, double kappa);
static SEXP _rotations_rcayleyCpp_try(SEXP nSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcayleyCpp(n, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_rcayleyCpp(SEXP nSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_rcayleyCpp_try(nSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rmbCpp
Rcpp::NumericVector rmbCpp(unsigned int n, double kappa);
static SEXP _rotations_rmbCpp_try(SEXP nSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmbCpp(n, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_rmbCpp(SEXP nSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_rmbCpp_try(nSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rfisherCpp
Rcpp::NumericVector rfisherCpp(unsigned int n, double kappa);
static SEXP _rotations_rfisherCpp_try(SEXP nSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(rfisherCpp(n, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_rfisherCpp(SEXP nSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_rfisherCpp_try(nSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rvmisesCPP
Rcpp::NumericVector rvmisesCPP(unsigned int n, double kappa);
static SEXP _rotations_rvmisesCPP_try(SEXP nSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(rvmisesCPP(n, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_rvmisesCPP(SEXP nSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_rvmisesCPP_try(nSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// centerCpp
arma::mat centerCpp(const arma::mat& Rs, const arma::mat& S);
static SEXP _rotations_centerCpp_try(SEXP RsSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(centerCpp(Rs, S));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_centerCpp(SEXP RsSEXP, SEXP SSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_centerCpp_try(RsSEXP, SSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lpvmises
double lpvmises(const arma::mat& Rs, const arma::mat& S, double kappa);
static SEXP _rotations_lpvmises_try(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lpvmises(Rs, S, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_lpvmises(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_lpvmises_try(RsSEXP, SSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lpfisher
double lpfisher(const arma::mat& Rs, const arma::mat& S, double kappa);
static SEXP _rotations_lpfisher_try(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lpfisher(Rs, S, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_lpfisher(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_lpfisher_try(RsSEXP, SSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lpcayley
double lpcayley(const arma::mat& Rs, const arma::mat& S, double kappa);
static SEXP _rotations_lpcayley_try(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(lpcayley(Rs, S, kappa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_lpcayley(SEXP RsSEXP, SEXP SSEXP, SEXP kappaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_lpcayley_try(RsSEXP, SSEXP, kappaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// S_MCMC_CPP
arma::mat S_MCMC_CPP(const arma::mat& Rs, const arma::mat& oldS, double rho, double kappa, int Dist);
static SEXP _rotations_S_MCMC_CPP_try(SEXP RsSEXP, SEXP oldSSEXP, SEXP rhoSEXP, SEXP kappaSEXP, SEXP DistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type oldS(oldSSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type Dist(DistSEXP);
    rcpp_result_gen = Rcpp::wrap(S_MCMC_CPP(Rs, oldS, rho, kappa, Dist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_S_MCMC_CPP(SEXP RsSEXP, SEXP oldSSEXP, SEXP rhoSEXP, SEXP kappaSEXP, SEXP DistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_S_MCMC_CPP_try(RsSEXP, oldSSEXP, rhoSEXP, kappaSEXP, DistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kap_MCMC_CPP
double kap_MCMC_CPP(const arma::mat& Rs, double oldKappa, double sigma, const arma::mat& S, int Dist);
static SEXP _rotations_kap_MCMC_CPP_try(SEXP RsSEXP, SEXP oldKappaSEXP, SEXP sigmaSEXP, SEXP SSEXP, SEXP DistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< double >::type oldKappa(oldKappaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type Dist(DistSEXP);
    rcpp_result_gen = Rcpp::wrap(kap_MCMC_CPP(Rs, oldKappa, sigma, S, Dist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_kap_MCMC_CPP(SEXP RsSEXP, SEXP oldKappaSEXP, SEXP sigmaSEXP, SEXP SSEXP, SEXP DistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_kap_MCMC_CPP_try(RsSEXP, oldKappaSEXP, sigmaSEXP, SSEXP, DistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// afun_CPP
arma::rowvec afun_CPP(const arma::mat& R1, const arma::mat& R2);
static SEXP _rotations_afun_CPP_try(SEXP R1SEXP, SEXP R2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R2(R2SEXP);
    rcpp_result_gen = Rcpp::wrap(afun_CPP(R1, R2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_afun_CPP(SEXP R1SEXP, SEXP R2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_afun_CPP_try(R1SEXP, R2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// both_MCMC_CPP
Rcpp::List both_MCMC_CPP(const arma::mat& Rs, arma::mat S0, double kappa0, double rho, double sigma, int burnin, int B, int Dist);
static SEXP _rotations_both_MCMC_CPP_try(SEXP RsSEXP, SEXP S0SEXP, SEXP kappa0SEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP burninSEXP, SEXP BSEXP, SEXP DistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type kappa0(kappa0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type Dist(DistSEXP);
    rcpp_result_gen = Rcpp::wrap(both_MCMC_CPP(Rs, S0, kappa0, rho, sigma, burnin, B, Dist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_both_MCMC_CPP(SEXP RsSEXP, SEXP S0SEXP, SEXP kappa0SEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP burninSEXP, SEXP BSEXP, SEXP DistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_both_MCMC_CPP_try(RsSEXP, S0SEXP, kappa0SEXP, rhoSEXP, sigmaSEXP, burninSEXP, BSEXP, DistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fisherAxisC
double fisherAxisC(const arma::mat& Qs, const arma::rowvec& Qhat);
static SEXP _rotations_fisherAxisC_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Qhat(QhatSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherAxisC(Qs, Qhat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_fisherAxisC(SEXP QsSEXP, SEXP QhatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_fisherAxisC_try(QsSEXP, QhatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fisherAxisCSymmetric
double fisherAxisCSymmetric(const arma::mat& Qs, const arma::rowvec& Qhat);
static SEXP _rotations_fisherAxisCSymmetric_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Qhat(QhatSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherAxisCSymmetric(Qs, Qhat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_fisherAxisCSymmetric(SEXP QsSEXP, SEXP QhatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_fisherAxisCSymmetric_try(QsSEXP, QhatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fisherBootC
arma::vec fisherBootC(const arma::mat& Qs, unsigned int m, bool symm);
static SEXP _rotations_fisherBootC_try(SEXP QsSEXP, SEXP mSEXP, SEXP symmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type symm(symmSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherBootC(Qs, m, symm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_fisherBootC(SEXP QsSEXP, SEXP mSEXP, SEXP symmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_fisherBootC_try(QsSEXP, mSEXP, symmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// RdistC
Rcpp::NumericVector RdistC(const Rcpp::NumericMatrix& Q1, const Rcpp::NumericVector& Q2);
static SEXP _rotations_RdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Q1(Q1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q2(Q2SEXP);
    rcpp_result_gen = Rcpp::wrap(RdistC(Q1, Q2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_RdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_RdistC_try(Q1SEXP, Q2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rdistSO3C
arma::rowvec rdistSO3C(const arma::mat& Rs, const arma::mat& R2);
static SEXP _rotations_rdistSO3C_try(SEXP RsSEXP, SEXP R2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R2(R2SEXP);
    rcpp_result_gen = Rcpp::wrap(rdistSO3C(Rs, R2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_rdistSO3C(SEXP RsSEXP, SEXP R2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_rdistSO3C_try(RsSEXP, R2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// EdistC
Rcpp::NumericVector EdistC(const Rcpp::NumericMatrix& Q1, const Rcpp::NumericVector& Q2);
static SEXP _rotations_EdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Q1(Q1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q2(Q2SEXP);
    rcpp_result_gen = Rcpp::wrap(EdistC(Q1, Q2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_EdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_EdistC_try(Q1SEXP, Q2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// oneRdistC
double oneRdistC(const Rcpp::NumericMatrix& Q1, const Rcpp::NumericVector& Q2);
static SEXP _rotations_oneRdistC_try(SEXP Q1SEXP, SEXP Q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Q1(Q1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q2(Q2SEXP);
    rcpp_result_gen = Rcpp::wrap(oneRdistC(Q1, Q2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_oneRdistC(SEXP Q1SEXP, SEXP Q2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_oneRdistC_try(Q1SEXP, Q2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cdfunsC
Rcpp::NumericVector cdfunsC(const Rcpp::NumericMatrix& Qs, const Rcpp::NumericVector& Qhat);
static SEXP _rotations_cdfunsC_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Qhat(QhatSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfunsC(Qs, Qhat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_cdfunsC(SEXP QsSEXP, SEXP QhatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_cdfunsC_try(QsSEXP, QhatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cdfunsCMedian
Rcpp::NumericVector cdfunsCMedian(const Rcpp::NumericMatrix& Qs, const Rcpp::NumericVector& Qhat);
static SEXP _rotations_cdfunsCMedian_try(SEXP QsSEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Qhat(QhatSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfunsCMedian(Qs, Qhat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_cdfunsCMedian(SEXP QsSEXP, SEXP QhatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_cdfunsCMedian_try(QsSEXP, QhatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// zhangQ4
Rcpp::NumericVector zhangQ4(const Rcpp::NumericMatrix& Q, unsigned int m);
static SEXP _rotations_zhangQ4_try(SEXP QSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(zhangQ4(Q, m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_zhangQ4(SEXP QSEXP, SEXP mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_zhangQ4_try(QSEXP, mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cdfunsCSO3
Rcpp::NumericVector cdfunsCSO3(const arma::mat& Rs, const arma::mat& Rhat);
static SEXP _rotations_cdfunsCSO3_try(SEXP RsSEXP, SEXP RhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Rhat(RhatSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfunsCSO3(Rs, Rhat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_cdfunsCSO3(SEXP RsSEXP, SEXP RhatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_cdfunsCSO3_try(RsSEXP, RhatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// zhangMedianC
Rcpp::NumericVector zhangMedianC(const arma::mat& Rs, unsigned int m);
static SEXP _rotations_zhangMedianC_try(SEXP RsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(zhangMedianC(Rs, m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_zhangMedianC(SEXP RsSEXP, SEXP mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_zhangMedianC_try(RsSEXP, mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// eskewC
arma::mat eskewC(const arma::rowvec& U);
static SEXP _rotations_eskewC_try(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(eskewC(U));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_eskewC(SEXP USEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_eskewC_try(USEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SO3defaultC
arma::mat SO3defaultC(const arma::mat& U, const arma::vec& theta);
static SEXP _rotations_SO3defaultC_try(SEXP USEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(SO3defaultC(U, theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_SO3defaultC(SEXP USEXP, SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_SO3defaultC_try(USEXP, thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Q4defaultC
arma::mat Q4defaultC(const arma::mat& U, const arma::vec& theta);
static SEXP _rotations_Q4defaultC_try(SEXP USEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Q4defaultC(U, theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_Q4defaultC(SEXP USEXP, SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_Q4defaultC_try(USEXP, thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pMatC
arma::mat pMatC(const arma::mat& p);
static SEXP _rotations_pMatC_try(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pMatC(p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_pMatC(SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_pMatC_try(pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// genrC
arma::mat genrC(const arma::vec& r, const arma::mat& S, int SO3, const arma::mat& u);
static SEXP _rotations_genrC_try(SEXP rSEXP, SEXP SSEXP, SEXP SO3SEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type SO3(SO3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(genrC(r, S, SO3, u));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_genrC(SEXP rSEXP, SEXP SSEXP, SEXP SO3SEXP, SEXP uSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_genrC_try(rSEXP, SSEXP, SO3SEXP, uSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// checkQ4
int checkQ4(const Rcpp::NumericMatrix& Q);
static SEXP _rotations_checkQ4_try(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(checkQ4(Q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_checkQ4(SEXP QSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_checkQ4_try(QSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// checkSO3
int checkSO3(const arma::mat& Rs);
static SEXP _rotations_checkSO3_try(SEXP RsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSO3(Rs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_checkSO3(SEXP RsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_checkSO3_try(RsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// expskewC
arma::mat expskewC(const arma::mat& M);
static SEXP _rotations_expskewC_try(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(expskewC(M));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_expskewC(SEXP MSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_expskewC_try(MSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// expskewCMulti
arma::mat expskewCMulti(const arma::mat& M);
static SEXP _rotations_expskewCMulti_try(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(expskewCMulti(M));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_expskewCMulti(SEXP MSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_expskewCMulti_try(MSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logSO3C
arma::mat logSO3C(const arma::mat& R);
static SEXP _rotations_logSO3C_try(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(logSO3C(R));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_logSO3C(SEXP RSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_logSO3C_try(RSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logSO3CMulti
arma::mat logSO3CMulti(const arma::mat& R);
static SEXP _rotations_logSO3CMulti_try(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(logSO3CMulti(R));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_logSO3CMulti(SEXP RSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_logSO3CMulti_try(RSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// projectSO3C
arma::mat projectSO3C(const arma::mat& M);
static SEXP _rotations_projectSO3C_try(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(projectSO3C(M));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_projectSO3C(SEXP MSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_projectSO3C_try(MSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meanSO3C
arma::mat meanSO3C(const arma::mat& Rs);
static SEXP _rotations_meanSO3C_try(SEXP RsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    rcpp_result_gen = Rcpp::wrap(meanSO3C(Rs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_meanSO3C(SEXP RsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_meanSO3C_try(RsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// meanQ4C
arma::rowvec meanQ4C(const arma::mat& Q);
static SEXP _rotations_meanQ4C_try(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(meanQ4C(Q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_meanQ4C(SEXP QSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_meanQ4C_try(QSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// medianSO3C
arma::mat medianSO3C(const arma::mat& Rs, unsigned int maxIterations, double maxEps);
static SEXP _rotations_medianSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type maxEps(maxEpsSEXP);
    rcpp_result_gen = Rcpp::wrap(medianSO3C(Rs, maxIterations, maxEps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_medianSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_medianSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HartmedianSO3C
arma::mat HartmedianSO3C(const arma::mat& Rs, unsigned int maxIterations, double maxEps);
static SEXP _rotations_HartmedianSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type maxEps(maxEpsSEXP);
    rcpp_result_gen = Rcpp::wrap(HartmedianSO3C(Rs, maxIterations, maxEps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_HartmedianSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_HartmedianSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gmeanSO3C
arma::mat gmeanSO3C(const arma::mat& Rs, unsigned int maxIterations, double maxEps);
static SEXP _rotations_gmeanSO3C_try(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rs(RsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type maxEps(maxEpsSEXP);
    rcpp_result_gen = Rcpp::wrap(gmeanSO3C(Rs, maxIterations, maxEps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_gmeanSO3C(SEXP RsSEXP, SEXP maxIterationsSEXP, SEXP maxEpsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_gmeanSO3C_try(RsSEXP, maxIterationsSEXP, maxEpsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HnCpp
arma::rowvec HnCpp(const arma::mat& Qs);
static SEXP _rotations_HnCpp_try(SEXP QsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    rcpp_result_gen = Rcpp::wrap(HnCpp(Qs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_HnCpp(SEXP QsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_HnCpp_try(QsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HnCppIntrinsic
arma::rowvec HnCppIntrinsic(const arma::mat& Qs);
static SEXP _rotations_HnCppIntrinsic_try(SEXP QsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    rcpp_result_gen = Rcpp::wrap(HnCppIntrinsic(Qs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_HnCppIntrinsic(SEXP QsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_HnCppIntrinsic_try(QsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HnCppBloc
arma::rowvec HnCppBloc(const arma::mat& Qs, const arma::mat& Cs);
static SEXP _rotations_HnCppBloc_try(SEXP QsSEXP, SEXP CsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cs(CsSEXP);
    rcpp_result_gen = Rcpp::wrap(HnCppBloc(Qs, Cs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rotations_HnCppBloc(SEXP QsSEXP, SEXP CsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rotations_HnCppBloc_try(QsSEXP, CsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _rotations_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::NumericVector(*rcayleyCpp)(unsigned int,double)");
        signatures.insert("Rcpp::NumericVector(*rmbCpp)(unsigned int,double)");
        signatures.insert("Rcpp::NumericVector(*rfisherCpp)(unsigned int,double)");
        signatures.insert("Rcpp::NumericVector(*rvmisesCPP)(unsigned int,double)");
        signatures.insert("arma::mat(*centerCpp)(const arma::mat&,const arma::mat&)");
        signatures.insert("double(*lpvmises)(const arma::mat&,const arma::mat&,double)");
        signatures.insert("double(*lpfisher)(const arma::mat&,const arma::mat&,double)");
        signatures.insert("double(*lpcayley)(const arma::mat&,const arma::mat&,double)");
        signatures.insert("arma::mat(*S_MCMC_CPP)(const arma::mat&,const arma::mat&,double,double,int)");
        signatures.insert("double(*kap_MCMC_CPP)(const arma::mat&,double,double,const arma::mat&,int)");
        signatures.insert("arma::rowvec(*afun_CPP)(const arma::mat&,const arma::mat&)");
        signatures.insert("Rcpp::List(*both_MCMC_CPP)(const arma::mat&,arma::mat,double,double,double,int,int,int)");
        signatures.insert("double(*fisherAxisC)(const arma::mat&,const arma::rowvec&)");
        signatures.insert("double(*fisherAxisCSymmetric)(const arma::mat&,const arma::rowvec&)");
        signatures.insert("arma::vec(*fisherBootC)(const arma::mat&,unsigned int,bool)");
        signatures.insert("Rcpp::NumericVector(*RdistC)(const Rcpp::NumericMatrix&,const Rcpp::NumericVector&)");
        signatures.insert("arma::rowvec(*rdistSO3C)(const arma::mat&,const arma::mat&)");
        signatures.insert("Rcpp::NumericVector(*EdistC)(const Rcpp::NumericMatrix&,const Rcpp::NumericVector&)");
        signatures.insert("double(*oneRdistC)(const Rcpp::NumericMatrix&,const Rcpp::NumericVector&)");
        signatures.insert("Rcpp::NumericVector(*cdfunsC)(const Rcpp::NumericMatrix&,const Rcpp::NumericVector&)");
        signatures.insert("Rcpp::NumericVector(*cdfunsCMedian)(const Rcpp::NumericMatrix&,const Rcpp::NumericVector&)");
        signatures.insert("Rcpp::NumericVector(*zhangQ4)(const Rcpp::NumericMatrix&,unsigned int)");
        signatures.insert("Rcpp::NumericVector(*cdfunsCSO3)(const arma::mat&,const arma::mat&)");
        signatures.insert("Rcpp::NumericVector(*zhangMedianC)(const arma::mat&,unsigned int)");
        signatures.insert("arma::mat(*eskewC)(const arma::rowvec&)");
        signatures.insert("arma::mat(*SO3defaultC)(const arma::mat&,const arma::vec&)");
        signatures.insert("arma::mat(*Q4defaultC)(const arma::mat&,const arma::vec&)");
        signatures.insert("arma::mat(*pMatC)(const arma::mat&)");
        signatures.insert("arma::mat(*genrC)(const arma::vec&,const arma::mat&,int,const arma::mat&)");
        signatures.insert("int(*checkQ4)(const Rcpp::NumericMatrix&)");
        signatures.insert("int(*checkSO3)(const arma::mat&)");
        signatures.insert("arma::mat(*expskewC)(const arma::mat&)");
        signatures.insert("arma::mat(*expskewCMulti)(const arma::mat&)");
        signatures.insert("arma::mat(*logSO3C)(const arma::mat&)");
        signatures.insert("arma::mat(*logSO3CMulti)(const arma::mat&)");
        signatures.insert("arma::mat(*projectSO3C)(const arma::mat&)");
        signatures.insert("arma::mat(*meanSO3C)(const arma::mat&)");
        signatures.insert("arma::rowvec(*meanQ4C)(const arma::mat&)");
        signatures.insert("arma::mat(*medianSO3C)(const arma::mat&,unsigned int,double)");
        signatures.insert("arma::mat(*HartmedianSO3C)(const arma::mat&,unsigned int,double)");
        signatures.insert("arma::mat(*gmeanSO3C)(const arma::mat&,unsigned int,double)");
        signatures.insert("arma::rowvec(*HnCpp)(const arma::mat&)");
        signatures.insert("arma::rowvec(*HnCppIntrinsic)(const arma::mat&)");
        signatures.insert("arma::rowvec(*HnCppBloc)(const arma::mat&,const arma::mat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _rotations_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rotations", "_rotations_rcayleyCpp", (DL_FUNC)_rotations_rcayleyCpp_try);
    R_RegisterCCallable("rotations", "_rotations_rmbCpp", (DL_FUNC)_rotations_rmbCpp_try);
    R_RegisterCCallable("rotations", "_rotations_rfisherCpp", (DL_FUNC)_rotations_rfisherCpp_try);
    R_RegisterCCallable("rotations", "_rotations_rvmisesCPP", (DL_FUNC)_rotations_rvmisesCPP_try);
    R_RegisterCCallable("rotations", "_rotations_centerCpp", (DL_FUNC)_rotations_centerCpp_try);
    R_RegisterCCallable("rotations", "_rotations_lpvmises", (DL_FUNC)_rotations_lpvmises_try);
    R_RegisterCCallable("rotations", "_rotations_lpfisher", (DL_FUNC)_rotations_lpfisher_try);
    R_RegisterCCallable("rotations", "_rotations_lpcayley", (DL_FUNC)_rotations_lpcayley_try);
    R_RegisterCCallable("rotations", "_rotations_S_MCMC_CPP", (DL_FUNC)_rotations_S_MCMC_CPP_try);
    R_RegisterCCallable("rotations", "_rotations_kap_MCMC_CPP", (DL_FUNC)_rotations_kap_MCMC_CPP_try);
    R_RegisterCCallable("rotations", "_rotations_afun_CPP", (DL_FUNC)_rotations_afun_CPP_try);
    R_RegisterCCallable("rotations", "_rotations_both_MCMC_CPP", (DL_FUNC)_rotations_both_MCMC_CPP_try);
    R_RegisterCCallable("rotations", "_rotations_fisherAxisC", (DL_FUNC)_rotations_fisherAxisC_try);
    R_RegisterCCallable("rotations", "_rotations_fisherAxisCSymmetric", (DL_FUNC)_rotations_fisherAxisCSymmetric_try);
    R_RegisterCCallable("rotations", "_rotations_fisherBootC", (DL_FUNC)_rotations_fisherBootC_try);
    R_RegisterCCallable("rotations", "_rotations_RdistC", (DL_FUNC)_rotations_RdistC_try);
    R_RegisterCCallable("rotations", "_rotations_rdistSO3C", (DL_FUNC)_rotations_rdistSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_EdistC", (DL_FUNC)_rotations_EdistC_try);
    R_RegisterCCallable("rotations", "_rotations_oneRdistC", (DL_FUNC)_rotations_oneRdistC_try);
    R_RegisterCCallable("rotations", "_rotations_cdfunsC", (DL_FUNC)_rotations_cdfunsC_try);
    R_RegisterCCallable("rotations", "_rotations_cdfunsCMedian", (DL_FUNC)_rotations_cdfunsCMedian_try);
    R_RegisterCCallable("rotations", "_rotations_zhangQ4", (DL_FUNC)_rotations_zhangQ4_try);
    R_RegisterCCallable("rotations", "_rotations_cdfunsCSO3", (DL_FUNC)_rotations_cdfunsCSO3_try);
    R_RegisterCCallable("rotations", "_rotations_zhangMedianC", (DL_FUNC)_rotations_zhangMedianC_try);
    R_RegisterCCallable("rotations", "_rotations_eskewC", (DL_FUNC)_rotations_eskewC_try);
    R_RegisterCCallable("rotations", "_rotations_SO3defaultC", (DL_FUNC)_rotations_SO3defaultC_try);
    R_RegisterCCallable("rotations", "_rotations_Q4defaultC", (DL_FUNC)_rotations_Q4defaultC_try);
    R_RegisterCCallable("rotations", "_rotations_pMatC", (DL_FUNC)_rotations_pMatC_try);
    R_RegisterCCallable("rotations", "_rotations_genrC", (DL_FUNC)_rotations_genrC_try);
    R_RegisterCCallable("rotations", "_rotations_checkQ4", (DL_FUNC)_rotations_checkQ4_try);
    R_RegisterCCallable("rotations", "_rotations_checkSO3", (DL_FUNC)_rotations_checkSO3_try);
    R_RegisterCCallable("rotations", "_rotations_expskewC", (DL_FUNC)_rotations_expskewC_try);
    R_RegisterCCallable("rotations", "_rotations_expskewCMulti", (DL_FUNC)_rotations_expskewCMulti_try);
    R_RegisterCCallable("rotations", "_rotations_logSO3C", (DL_FUNC)_rotations_logSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_logSO3CMulti", (DL_FUNC)_rotations_logSO3CMulti_try);
    R_RegisterCCallable("rotations", "_rotations_projectSO3C", (DL_FUNC)_rotations_projectSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_meanSO3C", (DL_FUNC)_rotations_meanSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_meanQ4C", (DL_FUNC)_rotations_meanQ4C_try);
    R_RegisterCCallable("rotations", "_rotations_medianSO3C", (DL_FUNC)_rotations_medianSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_HartmedianSO3C", (DL_FUNC)_rotations_HartmedianSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_gmeanSO3C", (DL_FUNC)_rotations_gmeanSO3C_try);
    R_RegisterCCallable("rotations", "_rotations_HnCpp", (DL_FUNC)_rotations_HnCpp_try);
    R_RegisterCCallable("rotations", "_rotations_HnCppIntrinsic", (DL_FUNC)_rotations_HnCppIntrinsic_try);
    R_RegisterCCallable("rotations", "_rotations_HnCppBloc", (DL_FUNC)_rotations_HnCppBloc_try);
    R_RegisterCCallable("rotations", "_rotations_RcppExport_validate", (DL_FUNC)_rotations_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_rotations_rcayleyCpp", (DL_FUNC) &_rotations_rcayleyCpp, 2},
    {"_rotations_rmbCpp", (DL_FUNC) &_rotations_rmbCpp, 2},
    {"_rotations_rfisherCpp", (DL_FUNC) &_rotations_rfisherCpp, 2},
    {"_rotations_rvmisesCPP", (DL_FUNC) &_rotations_rvmisesCPP, 2},
    {"_rotations_centerCpp", (DL_FUNC) &_rotations_centerCpp, 2},
    {"_rotations_lpvmises", (DL_FUNC) &_rotations_lpvmises, 3},
    {"_rotations_lpfisher", (DL_FUNC) &_rotations_lpfisher, 3},
    {"_rotations_lpcayley", (DL_FUNC) &_rotations_lpcayley, 3},
    {"_rotations_S_MCMC_CPP", (DL_FUNC) &_rotations_S_MCMC_CPP, 5},
    {"_rotations_kap_MCMC_CPP", (DL_FUNC) &_rotations_kap_MCMC_CPP, 5},
    {"_rotations_afun_CPP", (DL_FUNC) &_rotations_afun_CPP, 2},
    {"_rotations_both_MCMC_CPP", (DL_FUNC) &_rotations_both_MCMC_CPP, 8},
    {"_rotations_fisherAxisC", (DL_FUNC) &_rotations_fisherAxisC, 2},
    {"_rotations_fisherAxisCSymmetric", (DL_FUNC) &_rotations_fisherAxisCSymmetric, 2},
    {"_rotations_fisherBootC", (DL_FUNC) &_rotations_fisherBootC, 3},
    {"_rotations_RdistC", (DL_FUNC) &_rotations_RdistC, 2},
    {"_rotations_rdistSO3C", (DL_FUNC) &_rotations_rdistSO3C, 2},
    {"_rotations_EdistC", (DL_FUNC) &_rotations_EdistC, 2},
    {"_rotations_oneRdistC", (DL_FUNC) &_rotations_oneRdistC, 2},
    {"_rotations_cdfunsC", (DL_FUNC) &_rotations_cdfunsC, 2},
    {"_rotations_cdfunsCMedian", (DL_FUNC) &_rotations_cdfunsCMedian, 2},
    {"_rotations_zhangQ4", (DL_FUNC) &_rotations_zhangQ4, 2},
    {"_rotations_cdfunsCSO3", (DL_FUNC) &_rotations_cdfunsCSO3, 2},
    {"_rotations_zhangMedianC", (DL_FUNC) &_rotations_zhangMedianC, 2},
    {"_rotations_eskewC", (DL_FUNC) &_rotations_eskewC, 1},
    {"_rotations_SO3defaultC", (DL_FUNC) &_rotations_SO3defaultC, 2},
    {"_rotations_Q4defaultC", (DL_FUNC) &_rotations_Q4defaultC, 2},
    {"_rotations_pMatC", (DL_FUNC) &_rotations_pMatC, 1},
    {"_rotations_genrC", (DL_FUNC) &_rotations_genrC, 4},
    {"_rotations_checkQ4", (DL_FUNC) &_rotations_checkQ4, 1},
    {"_rotations_checkSO3", (DL_FUNC) &_rotations_checkSO3, 1},
    {"_rotations_expskewC", (DL_FUNC) &_rotations_expskewC, 1},
    {"_rotations_expskewCMulti", (DL_FUNC) &_rotations_expskewCMulti, 1},
    {"_rotations_logSO3C", (DL_FUNC) &_rotations_logSO3C, 1},
    {"_rotations_logSO3CMulti", (DL_FUNC) &_rotations_logSO3CMulti, 1},
    {"_rotations_projectSO3C", (DL_FUNC) &_rotations_projectSO3C, 1},
    {"_rotations_meanSO3C", (DL_FUNC) &_rotations_meanSO3C, 1},
    {"_rotations_meanQ4C", (DL_FUNC) &_rotations_meanQ4C, 1},
    {"_rotations_medianSO3C", (DL_FUNC) &_rotations_medianSO3C, 3},
    {"_rotations_HartmedianSO3C", (DL_FUNC) &_rotations_HartmedianSO3C, 3},
    {"_rotations_gmeanSO3C", (DL_FUNC) &_rotations_gmeanSO3C, 3},
    {"_rotations_HnCpp", (DL_FUNC) &_rotations_HnCpp, 1},
    {"_rotations_HnCppIntrinsic", (DL_FUNC) &_rotations_HnCppIntrinsic, 1},
    {"_rotations_HnCppBloc", (DL_FUNC) &_rotations_HnCppBloc, 2},
    {"_rotations_RcppExport_registerCCallable", (DL_FUNC) &_rotations_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rotations(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
