// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_eigen_svd
Rcpp::List compute_eigen_svd(const Eigen::Map<Eigen::MatrixXd>& X);
RcppExport SEXP _lfmm_compute_eigen_svd(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_eigen_svd(X));
    return rcpp_result_gen;
END_RCPP
}
// impute_lfmm_cpp
void impute_lfmm_cpp(Eigen::Map<Eigen::MatrixXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> U, const Eigen::Map<Eigen::MatrixXd> V, const Eigen::Map<Eigen::MatrixXd> B, NumericVector missingId);
RcppExport SEXP _lfmm_impute_lfmm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP USEXP, SEXP VSEXP, SEXP BSEXP, SEXP missingIdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missingId(missingIdSEXP);
    impute_lfmm_cpp(Y, X, U, V, B, missingId);
    return R_NilValue;
END_RCPP
}
// err2_lfmm_cpp
double err2_lfmm_cpp(const Eigen::Map<Eigen::MatrixXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> U, const Eigen::Map<Eigen::MatrixXd> V, const Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _lfmm_err2_lfmm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP USEXP, SEXP VSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(err2_lfmm_cpp(Y, X, U, V, B));
    return rcpp_result_gen;
END_RCPP
}
// err2s_lfmm_cpp
Eigen::VectorXd err2s_lfmm_cpp(const Eigen::Map<Eigen::MatrixXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> U, const Eigen::Map<Eigen::MatrixXd> V, const Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _lfmm_err2s_lfmm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP USEXP, SEXP VSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(err2s_lfmm_cpp(Y, X, U, V, B));
    return rcpp_result_gen;
END_RCPP
}
// sum2_lm_cpp
Eigen::VectorXd sum2_lm_cpp(const Eigen::Map<Eigen::MatrixXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _lfmm_sum2_lm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(sum2_lm_cpp(Y, X, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lfmm_compute_eigen_svd", (DL_FUNC) &_lfmm_compute_eigen_svd, 1},
    {"_lfmm_impute_lfmm_cpp", (DL_FUNC) &_lfmm_impute_lfmm_cpp, 6},
    {"_lfmm_err2_lfmm_cpp", (DL_FUNC) &_lfmm_err2_lfmm_cpp, 5},
    {"_lfmm_err2s_lfmm_cpp", (DL_FUNC) &_lfmm_err2s_lfmm_cpp, 5},
    {"_lfmm_sum2_lm_cpp", (DL_FUNC) &_lfmm_sum2_lm_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_lfmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
