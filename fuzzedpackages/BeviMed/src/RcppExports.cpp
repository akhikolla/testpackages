// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bevimed_mc
List bevimed_mc(int its, LogicalVector y, IntegerVector var_block_start_index, IntegerVector var_block_stop_index, IntegerVector cases, IntegerVector counts, IntegerVector min_ac, double tau_shape1, double tau_shape2, double pi_shape1, double pi_shape2, double z_shape1, double z_shape2, LogicalMatrix z0, bool estimate_logit_z_rate, NumericVector logit_z_rates, NumericVector logit_z_rate_proposal_sds, NumericVector z_weights, bool estimate_phi, NumericVector log_phis, double log_phi_mean, double log_phi_sd, NumericVector log_phi_proposal_sds, NumericVector t, int swaps, bool annealing, int tandem_variant_updates, IntegerVector y1_case_block_start_index, IntegerVector y1_case_block_stop_index, IntegerVector y1_variants, bool return_z_trace, bool return_x_trace);
RcppExport SEXP _BeviMed_bevimed_mc(SEXP itsSEXP, SEXP ySEXP, SEXP var_block_start_indexSEXP, SEXP var_block_stop_indexSEXP, SEXP casesSEXP, SEXP countsSEXP, SEXP min_acSEXP, SEXP tau_shape1SEXP, SEXP tau_shape2SEXP, SEXP pi_shape1SEXP, SEXP pi_shape2SEXP, SEXP z_shape1SEXP, SEXP z_shape2SEXP, SEXP z0SEXP, SEXP estimate_logit_z_rateSEXP, SEXP logit_z_ratesSEXP, SEXP logit_z_rate_proposal_sdsSEXP, SEXP z_weightsSEXP, SEXP estimate_phiSEXP, SEXP log_phisSEXP, SEXP log_phi_meanSEXP, SEXP log_phi_sdSEXP, SEXP log_phi_proposal_sdsSEXP, SEXP tSEXP, SEXP swapsSEXP, SEXP annealingSEXP, SEXP tandem_variant_updatesSEXP, SEXP y1_case_block_start_indexSEXP, SEXP y1_case_block_stop_indexSEXP, SEXP y1_variantsSEXP, SEXP return_z_traceSEXP, SEXP return_x_traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type its(itsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type var_block_start_index(var_block_start_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type var_block_stop_index(var_block_stop_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type min_ac(min_acSEXP);
    Rcpp::traits::input_parameter< double >::type tau_shape1(tau_shape1SEXP);
    Rcpp::traits::input_parameter< double >::type tau_shape2(tau_shape2SEXP);
    Rcpp::traits::input_parameter< double >::type pi_shape1(pi_shape1SEXP);
    Rcpp::traits::input_parameter< double >::type pi_shape2(pi_shape2SEXP);
    Rcpp::traits::input_parameter< double >::type z_shape1(z_shape1SEXP);
    Rcpp::traits::input_parameter< double >::type z_shape2(z_shape2SEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_logit_z_rate(estimate_logit_z_rateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logit_z_rates(logit_z_ratesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logit_z_rate_proposal_sds(logit_z_rate_proposal_sdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_weights(z_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_phi(estimate_phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_phis(log_phisSEXP);
    Rcpp::traits::input_parameter< double >::type log_phi_mean(log_phi_meanSEXP);
    Rcpp::traits::input_parameter< double >::type log_phi_sd(log_phi_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_phi_proposal_sds(log_phi_proposal_sdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type swaps(swapsSEXP);
    Rcpp::traits::input_parameter< bool >::type annealing(annealingSEXP);
    Rcpp::traits::input_parameter< int >::type tandem_variant_updates(tandem_variant_updatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y1_case_block_start_index(y1_case_block_start_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y1_case_block_stop_index(y1_case_block_stop_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y1_variants(y1_variantsSEXP);
    Rcpp::traits::input_parameter< bool >::type return_z_trace(return_z_traceSEXP);
    Rcpp::traits::input_parameter< bool >::type return_x_trace(return_x_traceSEXP);
    rcpp_result_gen = Rcpp::wrap(bevimed_mc(its, y, var_block_start_index, var_block_stop_index, cases, counts, min_ac, tau_shape1, tau_shape2, pi_shape1, pi_shape2, z_shape1, z_shape2, z0, estimate_logit_z_rate, logit_z_rates, logit_z_rate_proposal_sds, z_weights, estimate_phi, log_phis, log_phi_mean, log_phi_sd, log_phi_proposal_sds, t, swaps, annealing, tandem_variant_updates, y1_case_block_start_index, y1_case_block_stop_index, y1_variants, return_z_trace, return_x_trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BeviMed_bevimed_mc", (DL_FUNC) &_BeviMed_bevimed_mc, 32},
    {NULL, NULL, 0}
};

RcppExport void R_init_BeviMed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
