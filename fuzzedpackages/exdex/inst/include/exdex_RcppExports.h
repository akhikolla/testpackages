// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_exdex_RCPPEXPORTS_H_GEN_
#define RCPP_exdex_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace exdex {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("exdex", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("exdex", "_exdex_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in exdex");
            }
        }
    }

    inline arma::colvec arma_rowSums_minus_col(const arma::mat& x, const int& j) {
        typedef SEXP(*Ptr_arma_rowSums_minus_col)(SEXP,SEXP);
        static Ptr_arma_rowSums_minus_col p_arma_rowSums_minus_col = NULL;
        if (p_arma_rowSums_minus_col == NULL) {
            validateSignature("arma::colvec(*arma_rowSums_minus_col)(const arma::mat&,const int&)");
            p_arma_rowSums_minus_col = (Ptr_arma_rowSums_minus_col)R_GetCCallable("exdex", "_exdex_arma_rowSums_minus_col");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_arma_rowSums_minus_col(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(j)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::colvec >(rcpp_result_gen);
    }

    inline arma::mat cpp_log0const(const arma::mat& x, const double& constant) {
        typedef SEXP(*Ptr_cpp_log0const)(SEXP,SEXP);
        static Ptr_cpp_log0const p_cpp_log0const = NULL;
        if (p_cpp_log0const == NULL) {
            validateSignature("arma::mat(*cpp_log0const)(const arma::mat&,const double&)");
            p_cpp_log0const = (Ptr_cpp_log0const)R_GetCCallable("exdex", "_exdex_cpp_log0const");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_log0const(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(constant)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::rowvec cpp_col_ms(arma::mat const& x) {
        typedef SEXP(*Ptr_cpp_col_ms)(SEXP);
        static Ptr_cpp_col_ms p_cpp_col_ms = NULL;
        if (p_cpp_col_ms == NULL) {
            validateSignature("arma::rowvec(*cpp_col_ms)(arma::mat const&)");
            p_cpp_col_ms = (Ptr_cpp_col_ms)R_GetCCallable("exdex", "_exdex_cpp_col_ms");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_col_ms(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::rowvec >(rcpp_result_gen);
    }

    inline Rcpp::List cpp_sigma2hat_dj(const Rcpp::List& all_max, const int& b, const int& kn, const int& m, const String& bias_adjust, const String& which_dj) {
        typedef SEXP(*Ptr_cpp_sigma2hat_dj)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_sigma2hat_dj p_cpp_sigma2hat_dj = NULL;
        if (p_cpp_sigma2hat_dj == NULL) {
            validateSignature("Rcpp::List(*cpp_sigma2hat_dj)(const Rcpp::List&,const int&,const int&,const int&,const String&,const String&)");
            p_cpp_sigma2hat_dj = (Ptr_cpp_sigma2hat_dj)R_GetCCallable("exdex", "_exdex_cpp_sigma2hat_dj");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_sigma2hat_dj(Shield<SEXP>(Rcpp::wrap(all_max)), Shield<SEXP>(Rcpp::wrap(b)), Shield<SEXP>(Rcpp::wrap(kn)), Shield<SEXP>(Rcpp::wrap(m)), Shield<SEXP>(Rcpp::wrap(bias_adjust)), Shield<SEXP>(Rcpp::wrap(which_dj)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_exdex_RCPPEXPORTS_H_GEN_
