// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// characterToInteger
Rcpp::IntegerVector characterToInteger(const Rcpp::CharacterVector& x, const Rcpp::CharacterVector& levels);
RcppExport SEXP _MrSGUIDE_characterToInteger(SEXP xSEXP, SEXP levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type levels(levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(characterToInteger(x, levels));
    return rcpp_result_gen;
END_RCPP
}
// dataFramToNumeric
Rcpp::NumericMatrix dataFramToNumeric(const Rcpp::DataFrame& numX);
RcppExport SEXP _MrSGUIDE_dataFramToNumeric(SEXP numXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type numX(numXSEXP);
    rcpp_result_gen = Rcpp::wrap(dataFramToNumeric(numX));
    return rcpp_result_gen;
END_RCPP
}
// characterDict
Rcpp::List characterDict(const Rcpp::DataFrame& charX, const Rcpp::List& levels);
RcppExport SEXP _MrSGUIDE_characterDict(SEXP charXSEXP, SEXP levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type charX(charXSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type levels(levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(characterDict(charX, levels));
    return rcpp_result_gen;
END_RCPP
}
// GiStepWisePure
void GiStepWisePure(const arma::mat& numX, const arma::imat& catX, const arma::mat& Y, const arma::ivec trt, const arma::uvec& splitIndex, const arma::uvec& fitIndex, const arma::uvec& holdIndex, const int& bestK, const int& maxDepth, const int& minData, const int& minTrt, const int& batchNum, const int& CVFold, const double& CVSE, const int& bootNum, const double& alpha, const bool& faster, const bool& display, const std::vector<std::string>& varName, const std::string& treeName, const std::string& nodeName, const std::string& bootName, const std::string& impName);
RcppExport SEXP _MrSGUIDE_GiStepWisePure(SEXP numXSEXP, SEXP catXSEXP, SEXP YSEXP, SEXP trtSEXP, SEXP splitIndexSEXP, SEXP fitIndexSEXP, SEXP holdIndexSEXP, SEXP bestKSEXP, SEXP maxDepthSEXP, SEXP minDataSEXP, SEXP minTrtSEXP, SEXP batchNumSEXP, SEXP CVFoldSEXP, SEXP CVSESEXP, SEXP bootNumSEXP, SEXP alphaSEXP, SEXP fasterSEXP, SEXP displaySEXP, SEXP varNameSEXP, SEXP treeNameSEXP, SEXP nodeNameSEXP, SEXP bootNameSEXP, SEXP impNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type numX(numXSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type catX(catXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type splitIndex(splitIndexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type fitIndex(fitIndexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type holdIndex(holdIndexSEXP);
    Rcpp::traits::input_parameter< const int& >::type bestK(bestKSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxDepth(maxDepthSEXP);
    Rcpp::traits::input_parameter< const int& >::type minData(minDataSEXP);
    Rcpp::traits::input_parameter< const int& >::type minTrt(minTrtSEXP);
    Rcpp::traits::input_parameter< const int& >::type batchNum(batchNumSEXP);
    Rcpp::traits::input_parameter< const int& >::type CVFold(CVFoldSEXP);
    Rcpp::traits::input_parameter< const double& >::type CVSE(CVSESEXP);
    Rcpp::traits::input_parameter< const int& >::type bootNum(bootNumSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type faster(fasterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type display(displaySEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type varName(varNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type treeName(treeNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type nodeName(nodeNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type bootName(bootNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type impName(impNameSEXP);
    GiStepWisePure(numX, catX, Y, trt, splitIndex, fitIndex, holdIndex, bestK, maxDepth, minData, minTrt, batchNum, CVFold, CVSE, bootNum, alpha, faster, display, varName, treeName, nodeName, bootName, impName);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MrSGUIDE_characterToInteger", (DL_FUNC) &_MrSGUIDE_characterToInteger, 2},
    {"_MrSGUIDE_dataFramToNumeric", (DL_FUNC) &_MrSGUIDE_dataFramToNumeric, 1},
    {"_MrSGUIDE_characterDict", (DL_FUNC) &_MrSGUIDE_characterDict, 2},
    {"_MrSGUIDE_GiStepWisePure", (DL_FUNC) &_MrSGUIDE_GiStepWisePure, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_MrSGUIDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
