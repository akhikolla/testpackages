// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rust.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// any_naC
bool any_naC(const Rcpp::NumericVector& x);
static SEXP _rust_any_naC_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_naC(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_naC(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_naC_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// no_naC
bool no_naC(const Rcpp::NumericVector& x);
static SEXP _rust_no_naC_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(no_naC(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_no_naC(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_no_naC_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// any_nonpos
bool any_nonpos(const Rcpp::NumericVector& x);
static SEXP _rust_any_nonpos_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_nonpos(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_nonpos(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_nonpos_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// all_pos
bool all_pos(const Rcpp::NumericVector& x);
static SEXP _rust_all_pos_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(all_pos(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_all_pos(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_all_pos_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// any_neg
bool any_neg(const Rcpp::NumericVector& x);
static SEXP _rust_any_neg_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_neg(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_neg(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_neg_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// any_col_nonneg
bool any_col_nonneg(const Rcpp::NumericMatrix& x);
static SEXP _rust_any_col_nonneg_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_col_nonneg(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_col_nonneg(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_col_nonneg_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// any_pos
bool any_pos(const Rcpp::NumericVector& x);
static SEXP _rust_any_pos_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_pos(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_pos(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_pos_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// any_col_nonpos
bool any_col_nonpos(const Rcpp::NumericMatrix& x);
static SEXP _rust_any_col_nonpos_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_col_nonpos(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_any_col_nonpos(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_any_col_nonpos_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vecpow
Rcpp::NumericVector vecpow(const Rcpp::NumericVector& base, const Rcpp::NumericVector& exp);
static SEXP _rust_vecpow_try(SEXP baseSEXP, SEXP expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type exp(expSEXP);
    rcpp_result_gen = Rcpp::wrap(vecpow(base, exp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_vecpow(SEXP baseSEXP, SEXP expSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_vecpow_try(baseSEXP, expSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_rho_to_psi
arma::vec cpp_rho_to_psi(const arma::vec& rho, const arma::vec& psi_mode, const arma::mat& rot_mat);
static SEXP _rust_cpp_rho_to_psi_try(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rho_to_psi(rho, psi_mode, rot_mat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_rho_to_psi(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_rho_to_psi_try(rhoSEXP, psi_modeSEXP, rot_matSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_psi_to_phi
Rcpp::NumericVector cpp_psi_to_phi(const Rcpp::NumericVector& psi, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& gm, const Rcpp::NumericVector& con);
static SEXP _rust_cpp_psi_to_phi_try(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gm(gmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type con(conSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_psi_to_phi(psi, lambda, gm, con));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_psi_to_phi(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_psi_to_phi_try(psiSEXP, lambdaSEXP, gmSEXP, conSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_psi_to_phi_0
Rcpp::NumericVector cpp_psi_to_phi_0(const Rcpp::NumericVector& psi, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& gm, const Rcpp::NumericVector& con);
static SEXP _rust_cpp_psi_to_phi_0_try(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gm(gmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type con(conSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_psi_to_phi_0(psi, lambda, gm, con));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_psi_to_phi_0(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_psi_to_phi_0_try(psiSEXP, lambdaSEXP, gmSEXP, conSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf
double cpp_logf(const Rcpp::NumericVector& theta, const SEXP& logf, const Rcpp::List& pars);
static SEXP _rust_cpp_logf_try(SEXP thetaSEXP, SEXP logfSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf(theta, logf, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf(SEXP thetaSEXP, SEXP logfSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_try(thetaSEXP, logfSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf_scaled
double cpp_logf_scaled(const Rcpp::NumericVector& theta, const SEXP& logf, const Rcpp::List& pars);
static SEXP _rust_cpp_logf_scaled_try(SEXP thetaSEXP, SEXP logfSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf_scaled(theta, logf, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf_scaled(SEXP thetaSEXP, SEXP logfSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_scaled_try(thetaSEXP, logfSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf_rho
double cpp_logf_rho(const arma::vec& rho, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars);
static SEXP _rust_cpp_logf_rho_try(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf_rho(rho, psi_mode, rot_mat, hscale, logf, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf_rho(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_rho_try(rhoSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf_rho_2
double cpp_logf_rho_2(const arma::vec& rho, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_logf_rho_2_try(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf_rho_2(rho, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf_rho_2(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_rho_2_try(rhoSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf_rho_3
double cpp_logf_rho_3(const arma::vec& rho, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_logf_rho_3_try(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf_rho_3(rho, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf_rho_3(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_rho_3_try(rhoSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_logf_rho_4
double cpp_logf_rho_4(const arma::vec& rho, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_logf_rho_4_try(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logf_rho_4(rho, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_logf_rho_4(SEXP rhoSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_logf_rho_4_try(rhoSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rcpp_apply
Rcpp::NumericVector rcpp_apply(const Rcpp::NumericMatrix& x, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_rcpp_apply_try(SEXP xSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_apply(x, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_rcpp_apply(SEXP xSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_rcpp_apply_try(xSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_a_obj
double cpp_a_obj(const arma::vec& psi, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const int& d, const double& r, const double& big_val, const Rcpp::List& pars);
static SEXP _rust_cpp_a_obj_try(SEXP psiSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_a_obj(psi, psi_mode, rot_mat, hscale, logf, d, r, big_val, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_a_obj(SEXP psiSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_a_obj_try(psiSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, dSEXP, rSEXP, big_valSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_a_obj_2
double cpp_a_obj_2(const arma::vec& psi, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const int& d, const double& r, const double& big_val, const SEXP& tfun, const Rcpp::List& tpars, const SEXP& logf, const Rcpp::List& pars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_a_obj_2_try(SEXP psiSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tfun(tfunSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_a_obj_2(psi, psi_mode, rot_mat, hscale, d, r, big_val, tfun, tpars, logf, pars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_a_obj_2(SEXP psiSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_a_obj_2_try(psiSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, dSEXP, rSEXP, big_valSEXP, tfunSEXP, tparsSEXP, logfSEXP, parsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_lower_box
double cpp_lower_box(const arma::vec& rho, int j, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const int& d, const double& r, const double& big_val, const Rcpp::List& pars);
static SEXP _rust_cpp_lower_box_try(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lower_box(rho, j, psi_mode, rot_mat, hscale, logf, d, r, big_val, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_lower_box(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_lower_box_try(rhoSEXP, jSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, dSEXP, rSEXP, big_valSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_lower_box_2
double cpp_lower_box_2(const arma::vec& rho, int j, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& tfun, const Rcpp::List& tpars, const SEXP& logf, const Rcpp::List& pars, const int& d, const double& r, const double& big_val, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_lower_box_2_try(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tfun(tfunSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lower_box_2(rho, j, psi_mode, rot_mat, hscale, tfun, tpars, logf, pars, d, r, big_val, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_lower_box_2(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_lower_box_2_try(rhoSEXP, jSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, tfunSEXP, tparsSEXP, logfSEXP, parsSEXP, dSEXP, rSEXP, big_valSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_upper_box
double cpp_upper_box(const arma::vec& rho, int j, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const int& d, const double& r, const double& big_val, const Rcpp::List& pars);
static SEXP _rust_cpp_upper_box_try(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_upper_box(rho, j, psi_mode, rot_mat, hscale, logf, d, r, big_val, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_upper_box(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_upper_box_try(rhoSEXP, jSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, dSEXP, rSEXP, big_valSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_upper_box_2
double cpp_upper_box_2(const arma::vec& rho, int j, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& tfun, const Rcpp::List& tpars, const SEXP& logf, const Rcpp::List& pars, const int& d, const double& r, const double& big_val, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_cpp_upper_box_2_try(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tfun(tfunSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type big_val(big_valSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_upper_box_2(rho, j, psi_mode, rot_mat, hscale, tfun, tpars, logf, pars, d, r, big_val, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_cpp_upper_box_2(SEXP rhoSEXP, SEXP jSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP tfunSEXP, SEXP tparsSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP dSEXP, SEXP rSEXP, SEXP big_valSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_cpp_upper_box_2_try(rhoSEXP, jSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, tfunSEXP, tparsSEXP, logfSEXP, parsSEXP, dSEXP, rSEXP, big_valSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ru_cpp
Rcpp::List ru_cpp(const int& n, const int& d, const double& r, const double& a_box, const Rcpp::NumericVector& l_box, const Rcpp::NumericVector& u_box, const SEXP& logf, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const Rcpp::List& pars);
static SEXP _rust_ru_cpp_try(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP logfSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_box(a_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type l_box(l_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u_box(u_boxSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(ru_cpp(n, d, r, a_box, l_box, u_box, logf, psi_mode, rot_mat, hscale, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_ru_cpp(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP logfSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_ru_cpp_try(nSEXP, dSEXP, rSEXP, a_boxSEXP, l_boxSEXP, u_boxSEXP, logfSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ru_cpp_2
Rcpp::List ru_cpp_2(const int& n, const int& d, const double& r, const double& a_box, const Rcpp::NumericVector& l_box, const Rcpp::NumericVector& u_box, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_ru_cpp_2_try(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_box(a_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type l_box(l_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u_box(u_boxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(ru_cpp_2(n, d, r, a_box, l_box, u_box, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_ru_cpp_2(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_ru_cpp_2_try(nSEXP, dSEXP, rSEXP, a_boxSEXP, l_boxSEXP, u_boxSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ru_cpp_3
Rcpp::List ru_cpp_3(const int& n, const int& d, const double& r, const double& a_box, const Rcpp::NumericVector& l_box, const Rcpp::NumericVector& u_box, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_ru_cpp_3_try(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_box(a_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type l_box(l_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u_box(u_boxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(ru_cpp_3(n, d, r, a_box, l_box, u_box, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_ru_cpp_3(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_ru_cpp_3_try(nSEXP, dSEXP, rSEXP, a_boxSEXP, l_boxSEXP, u_boxSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ru_cpp_4
Rcpp::List ru_cpp_4(const int& n, const int& d, const double& r, const double& a_box, const Rcpp::NumericVector& l_box, const Rcpp::NumericVector& u_box, const arma::vec& psi_mode, const arma::mat& rot_mat, const double& hscale, const SEXP& logf, const Rcpp::List& pars, const Rcpp::List& tpars, const SEXP& ptpfun, const SEXP& phi_to_theta, const SEXP& log_j, const Rcpp::List& user_args);
static SEXP _rust_ru_cpp_4_try(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_box(a_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type l_box(l_boxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type u_box(u_boxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi_mode(psi_modeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rot_mat(rot_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type hscale(hscaleSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tpars(tparsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type ptpfun(ptpfunSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type phi_to_theta(phi_to_thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type log_j(log_jSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(ru_cpp_4(n, d, r, a_box, l_box, u_box, psi_mode, rot_mat, hscale, logf, pars, tpars, ptpfun, phi_to_theta, log_j, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_ru_cpp_4(SEXP nSEXP, SEXP dSEXP, SEXP rSEXP, SEXP a_boxSEXP, SEXP l_boxSEXP, SEXP u_boxSEXP, SEXP psi_modeSEXP, SEXP rot_matSEXP, SEXP hscaleSEXP, SEXP logfSEXP, SEXP parsSEXP, SEXP tparsSEXP, SEXP ptpfunSEXP, SEXP phi_to_thetaSEXP, SEXP log_jSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_ru_cpp_4_try(nSEXP, dSEXP, rSEXP, a_boxSEXP, l_boxSEXP, u_boxSEXP, psi_modeSEXP, rot_matSEXP, hscaleSEXP, logfSEXP, parsSEXP, tparsSEXP, ptpfunSEXP, phi_to_thetaSEXP, log_jSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_trans_xptr
SEXP create_trans_xptr(std::string fstr);
static SEXP _rust_create_trans_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_trans_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_trans_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_trans_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bc_no_trans
Rcpp::NumericVector bc_no_trans(const Rcpp::NumericVector& psi, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& gm, const Rcpp::NumericVector& con);
static SEXP _rust_bc_no_trans_try(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gm(gmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type con(conSEXP);
    rcpp_result_gen = Rcpp::wrap(bc_no_trans(psi, lambda, gm, con));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_bc_no_trans(SEXP psiSEXP, SEXP lambdaSEXP, SEXP gmSEXP, SEXP conSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_bc_no_trans_try(psiSEXP, lambdaSEXP, gmSEXP, conSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_psi_to_phi_xptr
SEXP create_psi_to_phi_xptr(std::string fstr);
static SEXP _rust_create_psi_to_phi_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_psi_to_phi_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_psi_to_phi_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_psi_to_phi_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log_none_jac
double log_none_jac(const Rcpp::NumericVector& theta, const Rcpp::List& user_args);
static SEXP _rust_log_none_jac_try(SEXP thetaSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_none_jac(theta, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_log_none_jac(SEXP thetaSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_log_none_jac_try(thetaSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_log_jac_xptr
SEXP create_log_jac_xptr(std::string fstr);
static SEXP _rust_create_log_jac_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_log_jac_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_log_jac_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_log_jac_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// no_trans
Rcpp::NumericVector no_trans(const Rcpp::NumericVector& theta, const Rcpp::List& user_args);
static SEXP _rust_no_trans_try(SEXP thetaSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(no_trans(theta, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_no_trans(SEXP thetaSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_no_trans_try(thetaSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// null_phi_to_theta_xptr
SEXP null_phi_to_theta_xptr(std::string fstr);
static SEXP _rust_null_phi_to_theta_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(null_phi_to_theta_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_null_phi_to_theta_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_null_phi_to_theta_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logdN01
double logdN01(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logdN01_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logdN01(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logdN01(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logdN01_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logdnorm2
double logdnorm2(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logdnorm2_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logdnorm2(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logdnorm2(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logdnorm2_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logdmvnorm
double logdmvnorm(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logdmvnorm_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logdmvnorm(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logdmvnorm(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logdmvnorm_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logcauchy
double logcauchy(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logcauchy_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logcauchy(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logcauchy(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logcauchy_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// loghalfcauchy
double loghalfcauchy(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_loghalfcauchy_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(loghalfcauchy(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_loghalfcauchy(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_loghalfcauchy_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lognormalmix
double lognormalmix(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_lognormalmix_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(lognormalmix(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_lognormalmix(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_lognormalmix_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lognormt
double lognormt(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_lognormt_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(lognormt(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_lognormt(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_lognormt_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logdlnorm
double logdlnorm(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logdlnorm_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logdlnorm(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logdlnorm(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logdlnorm_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// logdgamma
double logdgamma(const Rcpp::NumericVector& x, const Rcpp::List& pars);
static SEXP _rust_logdgamma_try(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(logdgamma(x, pars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_logdgamma(SEXP xSEXP, SEXP parsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_logdgamma_try(xSEXP, parsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// loggp
double loggp(const Rcpp::NumericVector& x, const Rcpp::List& ss);
static SEXP _rust_loggp_try(SEXP xSEXP, SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(loggp(x, ss));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_loggp(SEXP xSEXP, SEXP ssSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_loggp_try(xSEXP, ssSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_xptr
SEXP create_xptr(std::string fstr);
static SEXP _rust_create_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// neglog
double neglog(const Rcpp::NumericVector& theta, const Rcpp::List& user_args);
static SEXP _rust_neglog_try(SEXP thetaSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(neglog(theta, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_neglog(SEXP thetaSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_neglog_try(thetaSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bc_log_j
double bc_log_j(const Rcpp::NumericVector& theta, const Rcpp::List& user_args);
static SEXP _rust_bc_log_j_try(SEXP thetaSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(bc_log_j(theta, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_bc_log_j(SEXP thetaSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_bc_log_j_try(thetaSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_log_j_xptr
SEXP create_log_j_xptr(std::string fstr);
static SEXP _rust_create_log_j_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_log_j_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_log_j_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_log_j_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// exptrans
Rcpp::NumericVector exptrans(const Rcpp::NumericVector& phi, const Rcpp::List& user_args);
static SEXP _rust_exptrans_try(SEXP phiSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(exptrans(phi, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_exptrans(SEXP phiSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_exptrans_try(phiSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vecpower
Rcpp::NumericVector vecpower(const Rcpp::NumericVector& base, const Rcpp::NumericVector& exp);
static SEXP _rust_vecpower_try(SEXP baseSEXP, SEXP expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type exp(expSEXP);
    rcpp_result_gen = Rcpp::wrap(vecpower(base, exp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_vecpower(SEXP baseSEXP, SEXP expSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_vecpower_try(baseSEXP, expSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bc_phi_to_theta
Rcpp::NumericVector bc_phi_to_theta(const Rcpp::NumericVector& phi, const Rcpp::List& user_args);
static SEXP _rust_bc_phi_to_theta_try(SEXP phiSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(bc_phi_to_theta(phi, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_bc_phi_to_theta(SEXP phiSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_bc_phi_to_theta_try(phiSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gp_phi_to_theta
Rcpp::NumericVector gp_phi_to_theta(const Rcpp::NumericVector& phi, const Rcpp::List& user_args);
static SEXP _rust_gp_phi_to_theta_try(SEXP phiSEXP, SEXP user_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type user_args(user_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(gp_phi_to_theta(phi, user_args));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_gp_phi_to_theta(SEXP phiSEXP, SEXP user_argsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_gp_phi_to_theta_try(phiSEXP, user_argsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_phi_to_theta_xptr
SEXP create_phi_to_theta_xptr(std::string fstr);
static SEXP _rust_create_phi_to_theta_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_phi_to_theta_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rust_create_phi_to_theta_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rust_create_phi_to_theta_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _rust_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("bool(*any_naC)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*no_naC)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*any_nonpos)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*all_pos)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*any_neg)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*any_col_nonneg)(const Rcpp::NumericMatrix&)");
        signatures.insert("bool(*any_pos)(const Rcpp::NumericVector&)");
        signatures.insert("bool(*any_col_nonpos)(const Rcpp::NumericMatrix&)");
        signatures.insert("Rcpp::NumericVector(*vecpow)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("arma::vec(*cpp_rho_to_psi)(const arma::vec&,const arma::vec&,const arma::mat&)");
        signatures.insert("Rcpp::NumericVector(*cpp_psi_to_phi)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("Rcpp::NumericVector(*cpp_psi_to_phi_0)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("double(*cpp_logf)(const Rcpp::NumericVector&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_logf_scaled)(const Rcpp::NumericVector&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_logf_rho)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_logf_rho_2)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_logf_rho_3)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_logf_rho_4)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("Rcpp::NumericVector(*rcpp_apply)(const Rcpp::NumericMatrix&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_a_obj)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const int&,const double&,const double&,const Rcpp::List&)");
        signatures.insert("double(*cpp_a_obj_2)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const int&,const double&,const double&,const SEXP&,const Rcpp::List&,const SEXP&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_lower_box)(const arma::vec&,int,const arma::vec&,const arma::mat&,const double&,const SEXP&,const int&,const double&,const double&,const Rcpp::List&)");
        signatures.insert("double(*cpp_lower_box_2)(const arma::vec&,int,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const SEXP&,const Rcpp::List&,const int&,const double&,const double&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("double(*cpp_upper_box)(const arma::vec&,int,const arma::vec&,const arma::mat&,const double&,const SEXP&,const int&,const double&,const double&,const Rcpp::List&)");
        signatures.insert("double(*cpp_upper_box_2)(const arma::vec&,int,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const SEXP&,const Rcpp::List&,const int&,const double&,const double&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("Rcpp::List(*ru_cpp)(const int&,const int&,const double&,const double&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const SEXP&,const arma::vec&,const arma::mat&,const double&,const Rcpp::List&)");
        signatures.insert("Rcpp::List(*ru_cpp_2)(const int&,const int&,const double&,const double&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("Rcpp::List(*ru_cpp_3)(const int&,const int&,const double&,const double&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("Rcpp::List(*ru_cpp_4)(const int&,const int&,const double&,const double&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const arma::vec&,const arma::mat&,const double&,const SEXP&,const Rcpp::List&,const Rcpp::List&,const SEXP&,const SEXP&,const SEXP&,const Rcpp::List&)");
        signatures.insert("SEXP(*create_trans_xptr)(std::string)");
        signatures.insert("Rcpp::NumericVector(*bc_no_trans)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("SEXP(*create_psi_to_phi_xptr)(std::string)");
        signatures.insert("double(*log_none_jac)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("SEXP(*create_log_jac_xptr)(std::string)");
        signatures.insert("Rcpp::NumericVector(*no_trans)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("SEXP(*null_phi_to_theta_xptr)(std::string)");
        signatures.insert("double(*logdN01)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*logdnorm2)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*logdmvnorm)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*logcauchy)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*loghalfcauchy)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*lognormalmix)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*lognormt)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*logdlnorm)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*logdgamma)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*loggp)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("SEXP(*create_xptr)(std::string)");
        signatures.insert("double(*neglog)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("double(*bc_log_j)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("SEXP(*create_log_j_xptr)(std::string)");
        signatures.insert("Rcpp::NumericVector(*exptrans)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("Rcpp::NumericVector(*vecpower)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("Rcpp::NumericVector(*bc_phi_to_theta)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("Rcpp::NumericVector(*gp_phi_to_theta)(const Rcpp::NumericVector&,const Rcpp::List&)");
        signatures.insert("SEXP(*create_phi_to_theta_xptr)(std::string)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _rust_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rust", "_rust_any_naC", (DL_FUNC)_rust_any_naC_try);
    R_RegisterCCallable("rust", "_rust_no_naC", (DL_FUNC)_rust_no_naC_try);
    R_RegisterCCallable("rust", "_rust_any_nonpos", (DL_FUNC)_rust_any_nonpos_try);
    R_RegisterCCallable("rust", "_rust_all_pos", (DL_FUNC)_rust_all_pos_try);
    R_RegisterCCallable("rust", "_rust_any_neg", (DL_FUNC)_rust_any_neg_try);
    R_RegisterCCallable("rust", "_rust_any_col_nonneg", (DL_FUNC)_rust_any_col_nonneg_try);
    R_RegisterCCallable("rust", "_rust_any_pos", (DL_FUNC)_rust_any_pos_try);
    R_RegisterCCallable("rust", "_rust_any_col_nonpos", (DL_FUNC)_rust_any_col_nonpos_try);
    R_RegisterCCallable("rust", "_rust_vecpow", (DL_FUNC)_rust_vecpow_try);
    R_RegisterCCallable("rust", "_rust_cpp_rho_to_psi", (DL_FUNC)_rust_cpp_rho_to_psi_try);
    R_RegisterCCallable("rust", "_rust_cpp_psi_to_phi", (DL_FUNC)_rust_cpp_psi_to_phi_try);
    R_RegisterCCallable("rust", "_rust_cpp_psi_to_phi_0", (DL_FUNC)_rust_cpp_psi_to_phi_0_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf", (DL_FUNC)_rust_cpp_logf_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf_scaled", (DL_FUNC)_rust_cpp_logf_scaled_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf_rho", (DL_FUNC)_rust_cpp_logf_rho_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf_rho_2", (DL_FUNC)_rust_cpp_logf_rho_2_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf_rho_3", (DL_FUNC)_rust_cpp_logf_rho_3_try);
    R_RegisterCCallable("rust", "_rust_cpp_logf_rho_4", (DL_FUNC)_rust_cpp_logf_rho_4_try);
    R_RegisterCCallable("rust", "_rust_rcpp_apply", (DL_FUNC)_rust_rcpp_apply_try);
    R_RegisterCCallable("rust", "_rust_cpp_a_obj", (DL_FUNC)_rust_cpp_a_obj_try);
    R_RegisterCCallable("rust", "_rust_cpp_a_obj_2", (DL_FUNC)_rust_cpp_a_obj_2_try);
    R_RegisterCCallable("rust", "_rust_cpp_lower_box", (DL_FUNC)_rust_cpp_lower_box_try);
    R_RegisterCCallable("rust", "_rust_cpp_lower_box_2", (DL_FUNC)_rust_cpp_lower_box_2_try);
    R_RegisterCCallable("rust", "_rust_cpp_upper_box", (DL_FUNC)_rust_cpp_upper_box_try);
    R_RegisterCCallable("rust", "_rust_cpp_upper_box_2", (DL_FUNC)_rust_cpp_upper_box_2_try);
    R_RegisterCCallable("rust", "_rust_ru_cpp", (DL_FUNC)_rust_ru_cpp_try);
    R_RegisterCCallable("rust", "_rust_ru_cpp_2", (DL_FUNC)_rust_ru_cpp_2_try);
    R_RegisterCCallable("rust", "_rust_ru_cpp_3", (DL_FUNC)_rust_ru_cpp_3_try);
    R_RegisterCCallable("rust", "_rust_ru_cpp_4", (DL_FUNC)_rust_ru_cpp_4_try);
    R_RegisterCCallable("rust", "_rust_create_trans_xptr", (DL_FUNC)_rust_create_trans_xptr_try);
    R_RegisterCCallable("rust", "_rust_bc_no_trans", (DL_FUNC)_rust_bc_no_trans_try);
    R_RegisterCCallable("rust", "_rust_create_psi_to_phi_xptr", (DL_FUNC)_rust_create_psi_to_phi_xptr_try);
    R_RegisterCCallable("rust", "_rust_log_none_jac", (DL_FUNC)_rust_log_none_jac_try);
    R_RegisterCCallable("rust", "_rust_create_log_jac_xptr", (DL_FUNC)_rust_create_log_jac_xptr_try);
    R_RegisterCCallable("rust", "_rust_no_trans", (DL_FUNC)_rust_no_trans_try);
    R_RegisterCCallable("rust", "_rust_null_phi_to_theta_xptr", (DL_FUNC)_rust_null_phi_to_theta_xptr_try);
    R_RegisterCCallable("rust", "_rust_logdN01", (DL_FUNC)_rust_logdN01_try);
    R_RegisterCCallable("rust", "_rust_logdnorm2", (DL_FUNC)_rust_logdnorm2_try);
    R_RegisterCCallable("rust", "_rust_logdmvnorm", (DL_FUNC)_rust_logdmvnorm_try);
    R_RegisterCCallable("rust", "_rust_logcauchy", (DL_FUNC)_rust_logcauchy_try);
    R_RegisterCCallable("rust", "_rust_loghalfcauchy", (DL_FUNC)_rust_loghalfcauchy_try);
    R_RegisterCCallable("rust", "_rust_lognormalmix", (DL_FUNC)_rust_lognormalmix_try);
    R_RegisterCCallable("rust", "_rust_lognormt", (DL_FUNC)_rust_lognormt_try);
    R_RegisterCCallable("rust", "_rust_logdlnorm", (DL_FUNC)_rust_logdlnorm_try);
    R_RegisterCCallable("rust", "_rust_logdgamma", (DL_FUNC)_rust_logdgamma_try);
    R_RegisterCCallable("rust", "_rust_loggp", (DL_FUNC)_rust_loggp_try);
    R_RegisterCCallable("rust", "_rust_create_xptr", (DL_FUNC)_rust_create_xptr_try);
    R_RegisterCCallable("rust", "_rust_neglog", (DL_FUNC)_rust_neglog_try);
    R_RegisterCCallable("rust", "_rust_bc_log_j", (DL_FUNC)_rust_bc_log_j_try);
    R_RegisterCCallable("rust", "_rust_create_log_j_xptr", (DL_FUNC)_rust_create_log_j_xptr_try);
    R_RegisterCCallable("rust", "_rust_exptrans", (DL_FUNC)_rust_exptrans_try);
    R_RegisterCCallable("rust", "_rust_vecpower", (DL_FUNC)_rust_vecpower_try);
    R_RegisterCCallable("rust", "_rust_bc_phi_to_theta", (DL_FUNC)_rust_bc_phi_to_theta_try);
    R_RegisterCCallable("rust", "_rust_gp_phi_to_theta", (DL_FUNC)_rust_gp_phi_to_theta_try);
    R_RegisterCCallable("rust", "_rust_create_phi_to_theta_xptr", (DL_FUNC)_rust_create_phi_to_theta_xptr_try);
    R_RegisterCCallable("rust", "_rust_RcppExport_validate", (DL_FUNC)_rust_RcppExport_validate);
    return R_NilValue;
}
