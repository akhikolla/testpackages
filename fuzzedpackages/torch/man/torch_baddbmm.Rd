% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-namespace-docs.R,
%   R/gen-namespace-examples.R, R/gen-namespace.R
\name{torch_baddbmm}
\alias{torch_baddbmm}
\title{Baddbmm}
\usage{
torch_baddbmm(self, batch1, batch2, beta = 1L, alpha = 1L)
}
\arguments{
\item{self}{(Tensor) the tensor to be added}

\item{batch1}{(Tensor) the first batch of matrices to be multiplied}

\item{batch2}{(Tensor) the second batch of matrices to be multiplied}

\item{beta}{(Number, optional) multiplier for \code{input} (\eqn{\beta})}

\item{alpha}{(Number, optional) multiplier for \eqn{\mbox{batch1} \mathbin{@} \mbox{batch2}} (\eqn{\alpha})}
}
\description{
Baddbmm
}
\section{baddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=NULL) -> Tensor }{


Performs a batch matrix-matrix product of matrices in \code{batch1}
and \code{batch2}.
\code{input} is added to the final result.

\code{batch1} and \code{batch2} must be 3-D tensors each containing the same
number of matrices.

If \code{batch1} is a \eqn{(b \times n \times m)} tensor, \code{batch2} is a
\eqn{(b \times m \times p)} tensor, then \code{input} must be
broadcastable  with a
\eqn{(b \times n \times p)} tensor and \code{out} will be a
\eqn{(b \times n \times p)} tensor. Both \code{alpha} and \code{beta} mean the
same as the scaling factors used in \code{torch_addbmm}.

\deqn{
    \mbox{out}_i = \beta\ \mbox{input}_i + \alpha\ (\mbox{batch1}_i \mathbin{@} \mbox{batch2}_i)
}
For inputs of type \code{FloatTensor} or \code{DoubleTensor}, arguments \code{beta} and
\code{alpha} must be real numbers, otherwise they should be integers.
}

\examples{
if (torch_is_installed()) {

M = torch_randn(c(10, 3, 5))
batch1 = torch_randn(c(10, 3, 4))
batch2 = torch_randn(c(10, 4, 5))
torch_baddbmm(M, batch1, batch2)
}
}
