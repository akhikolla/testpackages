// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_linear
S4 cpp_linear(arma::sp_mat& mt1, arma::sp_mat& mt2, const int method, unsigned int rank, double limit, bool symm, bool drop0);
RcppExport SEXP _proxyC_cpp_linear(SEXP mt1SEXP, SEXP mt2SEXP, SEXP methodSEXP, SEXP rankSEXP, SEXP limitSEXP, SEXP symmSEXP, SEXP drop0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt1(mt1SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt2(mt2SEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< bool >::type symm(symmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop0(drop0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_linear(mt1, mt2, method, rank, limit, symm, drop0));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sd
NumericVector cpp_sd(arma::sp_mat& mt);
RcppExport SEXP _proxyC_cpp_sd(SEXP mtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt(mtSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sd(mt));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nz
NumericVector cpp_nz(arma::sp_mat& mt);
RcppExport SEXP _proxyC_cpp_nz(SEXP mtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt(mtSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_nz(mt));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pair
S4 cpp_pair(arma::sp_mat& mt1, arma::sp_mat& mt2, const int method, unsigned int rank, double limit, double weight, bool symm, bool drop0);
RcppExport SEXP _proxyC_cpp_pair(SEXP mt1SEXP, SEXP mt2SEXP, SEXP methodSEXP, SEXP rankSEXP, SEXP limitSEXP, SEXP weightSEXP, SEXP symmSEXP, SEXP drop0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt1(mt1SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type mt2(mt2SEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< double >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< bool >::type symm(symmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop0(drop0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pair(mt1, mt2, method, rank, limit, weight, symm, drop0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_proxyC_cpp_linear", (DL_FUNC) &_proxyC_cpp_linear, 7},
    {"_proxyC_cpp_sd", (DL_FUNC) &_proxyC_cpp_sd, 1},
    {"_proxyC_cpp_nz", (DL_FUNC) &_proxyC_cpp_nz, 1},
    {"_proxyC_cpp_pair", (DL_FUNC) &_proxyC_cpp_pair, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_proxyC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
