Terminals unused in grammar

   PLCUR
   PRCUR


Grammar

    0 $accept: program $end

    1 program: prgm

    2 prgm: opt_termins stmts opt_termins
    3     | opt_termins

    4 stmts: stmt
    5      | stmts termins stmt

    6 stmt: assign_stmt
    7     | if_stmt
    8     | expr

    9 expr: expr AND expr
   10     | expr OR expr
   11     | arg

   12 arg: fcall
   13    | arg OP_PLUS arg
   14    | arg OP_SUB arg
   15    | arg OP_MULT arg
   16    | arg OP_DIV arg
   17    | arg OP_MOD arg
   18    | arg FACTOR
   19    | arg OP_POWER arg
   20    | arg OP_EQ arg
   21    | arg OP_NEQ arg
   22    | arg OP_GT arg
   23    | arg OP_LT arg
   24    | arg OP_GE arg
   25    | arg OP_LE arg
   26    | OP_SUB arg
   27    | primary REXP_MATCH primary
   28    | primary

   29 primary: IDENT
   30        | LIT_NUM
   31        | LIT_STR
   32        | LIT_REXP
   33        | '(' expr ')'
   34        | NA_NUM

   35 fcall: fname '(' args ')'

   36 fname: IDENT

   37 args: %empty
   38     | expr
   39     | args COMMA expr

   40 if_stmt: KEY_IF condition then_stmts opt_else

   41 condition: '(' expr ')' opt_termin

   42 then_stmts: stmt TERMIN
   43           | '{' prgm '}'

   44 opt_else: %empty
   45         | KEY_ELSE stmt
   46         | KEY_ELSE '{' prgm '}'

   47 assign_stmt: lvar ASSIGN expr

   48 lvar: IDENT

   49 opt_termin: %empty
   50           | TERMIN

   51 opt_termins: %empty
   52            | termins

   53 termins: TERMIN termins
   54        | TERMIN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 33 35 41
')' (41) 33 35 41
'{' (123) 43 46
'}' (125) 43 46
error (256)
LIT_NUM (258) 30
NA_NUM (259) 34
LIT_STR (260) 31
LIT_REXP (261) 32
IDENT (262) 29 36 48
KEY_IF (263) 40
KEY_ELSE (264) 45 46
ASSIGN (265) 47
TERMIN (266) 42 50 53 54
PLCUR (267)
PRCUR (268)
COMMA (269) 39
OR (270) 10
AND (271) 9
OP_EQ (272) 20
OP_NEQ (273) 21
REXP_MATCH (274) 27
OP_LT (275) 23
OP_LE (276) 25
OP_GT (277) 22
OP_GE (278) 24
OP_PLUS (279) 13
OP_SUB (280) 14 26
OP_MULT (281) 15
OP_DIV (282) 16
OP_MOD (283) 17
OP_POWER (284) 19
FACTOR (285) 18
UMINUS (286)


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
prgm (38)
    on left: 2 3, on right: 1 43 46
stmts (39)
    on left: 4 5, on right: 2 5
stmt (40)
    on left: 6 7 8, on right: 4 5 42 45
expr (41)
    on left: 9 10 11, on right: 8 9 10 33 38 39 41 47
arg (42)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    11 13 14 15 16 17 18 19 20 21 22 23 24 25 26
primary (43)
    on left: 29 30 31 32 33 34, on right: 27 28
fcall (44)
    on left: 35, on right: 12
fname (45)
    on left: 36, on right: 35
args (46)
    on left: 37 38 39, on right: 35 39
if_stmt (47)
    on left: 40, on right: 7
condition (48)
    on left: 41, on right: 40
then_stmts (49)
    on left: 42 43, on right: 40
opt_else (50)
    on left: 44 45 46, on right: 40
assign_stmt (51)
    on left: 47, on right: 6
lvar (52)
    on left: 48, on right: 47
opt_termin (53)
    on left: 49 50, on right: 41
opt_termins (54)
    on left: 51 52, on right: 2 3
termins (55)
    on left: 53 54, on right: 5 52 53


State 0

    0 $accept: . program $end

    TERMIN  shift, and go to state 1

    $default  reduce using rule 51 (opt_termins)

    program      go to state 2
    prgm         go to state 3
    opt_termins  go to state 4
    termins      go to state 5


State 1

   53 termins: TERMIN . termins
   54        | TERMIN .

    TERMIN  shift, and go to state 1

    $default  reduce using rule 54 (termins)

    termins  go to state 6


State 2

    0 $accept: program . $end

    $end  shift, and go to state 7


State 3

    1 program: prgm .

    $default  reduce using rule 1 (program)


State 4

    2 prgm: opt_termins . stmts opt_termins
    3     | opt_termins .

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 12
    KEY_IF    shift, and go to state 13
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 3 (prgm)

    stmts        go to state 16
    stmt         go to state 17
    expr         go to state 18
    arg          go to state 19
    primary      go to state 20
    fcall        go to state 21
    fname        go to state 22
    if_stmt      go to state 23
    assign_stmt  go to state 24
    lvar         go to state 25


State 5

   52 opt_termins: termins .

    $default  reduce using rule 52 (opt_termins)


State 6

   53 termins: TERMIN termins .

    $default  reduce using rule 53 (termins)


State 7

    0 $accept: program $end .

    $default  accept


State 8

   30 primary: LIT_NUM .

    $default  reduce using rule 30 (primary)


State 9

   34 primary: NA_NUM .

    $default  reduce using rule 34 (primary)


State 10

   31 primary: LIT_STR .

    $default  reduce using rule 31 (primary)


State 11

   32 primary: LIT_REXP .

    $default  reduce using rule 32 (primary)


State 12

   29 primary: IDENT .
   36 fname: IDENT .
   48 lvar: IDENT .

    ASSIGN    reduce using rule 48 (lvar)
    '('       reduce using rule 36 (fname)
    $default  reduce using rule 29 (primary)


State 13

   40 if_stmt: KEY_IF . condition then_stmts opt_else

    '('  shift, and go to state 26

    condition  go to state 27


State 14

   26 arg: OP_SUB . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 29
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 15

   33 primary: '(' . expr ')'

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 30
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 16

    2 prgm: opt_termins stmts . opt_termins
    5 stmts: stmts . termins stmt

    TERMIN  shift, and go to state 1

    $default  reduce using rule 51 (opt_termins)

    opt_termins  go to state 31
    termins      go to state 32


State 17

    4 stmts: stmt .

    $default  reduce using rule 4 (stmts)


State 18

    8 stmt: expr .
    9 expr: expr . AND expr
   10     | expr . OR expr

    OR   shift, and go to state 33
    AND  shift, and go to state 34

    $default  reduce using rule 8 (stmt)


State 19

   11 expr: arg .
   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_EQ     shift, and go to state 35
    OP_NEQ    shift, and go to state 36
    OP_LT     shift, and go to state 37
    OP_LE     shift, and go to state 38
    OP_GT     shift, and go to state 39
    OP_GE     shift, and go to state 40
    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 11 (expr)


State 20

   27 arg: primary . REXP_MATCH primary
   28    | primary .

    REXP_MATCH  shift, and go to state 48

    $default  reduce using rule 28 (arg)


State 21

   12 arg: fcall .

    $default  reduce using rule 12 (arg)


State 22

   35 fcall: fname . '(' args ')'

    '('  shift, and go to state 49


State 23

    7 stmt: if_stmt .

    $default  reduce using rule 7 (stmt)


State 24

    6 stmt: assign_stmt .

    $default  reduce using rule 6 (stmt)


State 25

   47 assign_stmt: lvar . ASSIGN expr

    ASSIGN  shift, and go to state 50


State 26

   41 condition: '(' . expr ')' opt_termin

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 51
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 27

   40 if_stmt: KEY_IF condition . then_stmts opt_else

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 12
    KEY_IF    shift, and go to state 13
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 52

    stmt         go to state 53
    expr         go to state 18
    arg          go to state 19
    primary      go to state 20
    fcall        go to state 21
    fname        go to state 22
    if_stmt      go to state 23
    then_stmts   go to state 54
    assign_stmt  go to state 24
    lvar         go to state 25


State 28

   29 primary: IDENT .
   36 fname: IDENT .

    '('       reduce using rule 36 (fname)
    $default  reduce using rule 29 (primary)


State 29

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg
   26    | OP_SUB arg .

    $default  reduce using rule 26 (arg)


State 30

    9 expr: expr . AND expr
   10     | expr . OR expr
   33 primary: '(' expr . ')'

    OR   shift, and go to state 33
    AND  shift, and go to state 34
    ')'  shift, and go to state 55


State 31

    2 prgm: opt_termins stmts opt_termins .

    $default  reduce using rule 2 (prgm)


State 32

    5 stmts: stmts termins . stmt
   52 opt_termins: termins .

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 12
    KEY_IF    shift, and go to state 13
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 52 (opt_termins)

    stmt         go to state 56
    expr         go to state 18
    arg          go to state 19
    primary      go to state 20
    fcall        go to state 21
    fname        go to state 22
    if_stmt      go to state 23
    assign_stmt  go to state 24
    lvar         go to state 25


State 33

   10 expr: expr OR . expr

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 57
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 34

    9 expr: expr AND . expr

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 58
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 35

   20 arg: arg OP_EQ . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 59
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 36

   21 arg: arg OP_NEQ . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 60
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 37

   23 arg: arg OP_LT . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 61
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 38

   25 arg: arg OP_LE . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 62
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 39

   22 arg: arg OP_GT . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 63
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 40

   24 arg: arg OP_GE . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 64
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 41

   13 arg: arg OP_PLUS . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 65
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 42

   14 arg: arg OP_SUB . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 66
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 43

   15 arg: arg OP_MULT . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 67
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 44

   16 arg: arg OP_DIV . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 68
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 45

   17 arg: arg OP_MOD . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 69
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 46

   19 arg: arg OP_POWER . arg

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    arg      go to state 70
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 47

   18 arg: arg FACTOR .

    $default  reduce using rule 18 (arg)


State 48

   27 arg: primary REXP_MATCH . primary

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 71
    '('       shift, and go to state 15

    primary  go to state 72


State 49

   35 fcall: fname '(' . args ')'

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 37 (args)

    expr     go to state 73
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22
    args     go to state 74


State 50

   47 assign_stmt: lvar ASSIGN . expr

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 75
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 51

    9 expr: expr . AND expr
   10     | expr . OR expr
   41 condition: '(' expr . ')' opt_termin

    OR   shift, and go to state 33
    AND  shift, and go to state 34
    ')'  shift, and go to state 76


State 52

   43 then_stmts: '{' . prgm '}'

    TERMIN  shift, and go to state 1

    $default  reduce using rule 51 (opt_termins)

    prgm         go to state 77
    opt_termins  go to state 4
    termins      go to state 5


State 53

   42 then_stmts: stmt . TERMIN

    TERMIN  shift, and go to state 78


State 54

   40 if_stmt: KEY_IF condition then_stmts . opt_else

    KEY_ELSE  shift, and go to state 79

    $default  reduce using rule 44 (opt_else)

    opt_else  go to state 80


State 55

   33 primary: '(' expr ')' .

    $default  reduce using rule 33 (primary)


State 56

    5 stmts: stmts termins stmt .

    $default  reduce using rule 5 (stmts)


State 57

    9 expr: expr . AND expr
   10     | expr . OR expr
   10     | expr OR expr .

    AND  shift, and go to state 34

    $default  reduce using rule 10 (expr)


State 58

    9 expr: expr . AND expr
    9     | expr AND expr .
   10     | expr . OR expr

    $default  reduce using rule 9 (expr)


State 59

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   20    | arg OP_EQ arg .
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_LT     shift, and go to state 37
    OP_LE     shift, and go to state 38
    OP_GT     shift, and go to state 39
    OP_GE     shift, and go to state 40
    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    OP_EQ   error (nonassociative)
    OP_NEQ  error (nonassociative)

    $default  reduce using rule 20 (arg)


State 60

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   21    | arg OP_NEQ arg .
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_LT     shift, and go to state 37
    OP_LE     shift, and go to state 38
    OP_GT     shift, and go to state 39
    OP_GE     shift, and go to state 40
    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    OP_EQ   error (nonassociative)
    OP_NEQ  error (nonassociative)

    $default  reduce using rule 21 (arg)


State 61

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   23    | arg OP_LT arg .
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 23 (arg)


State 62

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg
   25    | arg OP_LE arg .

    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 25 (arg)


State 63

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   22    | arg OP_GT arg .
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 22 (arg)


State 64

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   24    | arg OP_GE arg .
   25    | arg . OP_LE arg

    OP_PLUS   shift, and go to state 41
    OP_SUB    shift, and go to state 42
    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 24 (arg)


State 65

   13 arg: arg . OP_PLUS arg
   13    | arg OP_PLUS arg .
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 13 (arg)


State 66

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   14    | arg OP_SUB arg .
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_MULT   shift, and go to state 43
    OP_DIV    shift, and go to state 44
    OP_MOD    shift, and go to state 45
    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 14 (arg)


State 67

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   15    | arg OP_MULT arg .
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 15 (arg)


State 68

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   16    | arg OP_DIV arg .
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 16 (arg)


State 69

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   17    | arg OP_MOD arg .
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 17 (arg)


State 70

   13 arg: arg . OP_PLUS arg
   14    | arg . OP_SUB arg
   15    | arg . OP_MULT arg
   16    | arg . OP_DIV arg
   17    | arg . OP_MOD arg
   18    | arg . FACTOR
   19    | arg . OP_POWER arg
   19    | arg OP_POWER arg .
   20    | arg . OP_EQ arg
   21    | arg . OP_NEQ arg
   22    | arg . OP_GT arg
   23    | arg . OP_LT arg
   24    | arg . OP_GE arg
   25    | arg . OP_LE arg

    OP_POWER  shift, and go to state 46
    FACTOR    shift, and go to state 47

    $default  reduce using rule 19 (arg)


State 71

   29 primary: IDENT .

    $default  reduce using rule 29 (primary)


State 72

   27 arg: primary REXP_MATCH primary .

    $default  reduce using rule 27 (arg)


State 73

    9 expr: expr . AND expr
   10     | expr . OR expr
   38 args: expr .

    OR   shift, and go to state 33
    AND  shift, and go to state 34

    $default  reduce using rule 38 (args)


State 74

   35 fcall: fname '(' args . ')'
   39 args: args . COMMA expr

    COMMA  shift, and go to state 81
    ')'    shift, and go to state 82


State 75

    9 expr: expr . AND expr
   10     | expr . OR expr
   47 assign_stmt: lvar ASSIGN expr .

    OR   shift, and go to state 33
    AND  shift, and go to state 34

    $default  reduce using rule 47 (assign_stmt)


State 76

   41 condition: '(' expr ')' . opt_termin

    TERMIN  shift, and go to state 83

    $default  reduce using rule 49 (opt_termin)

    opt_termin  go to state 84


State 77

   43 then_stmts: '{' prgm . '}'

    '}'  shift, and go to state 85


State 78

   42 then_stmts: stmt TERMIN .

    $default  reduce using rule 42 (then_stmts)


State 79

   45 opt_else: KEY_ELSE . stmt
   46         | KEY_ELSE . '{' prgm '}'

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 12
    KEY_IF    shift, and go to state 13
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 86

    stmt         go to state 87
    expr         go to state 18
    arg          go to state 19
    primary      go to state 20
    fcall        go to state 21
    fname        go to state 22
    if_stmt      go to state 23
    assign_stmt  go to state 24
    lvar         go to state 25


State 80

   40 if_stmt: KEY_IF condition then_stmts opt_else .

    $default  reduce using rule 40 (if_stmt)


State 81

   39 args: args COMMA . expr

    LIT_NUM   shift, and go to state 8
    NA_NUM    shift, and go to state 9
    LIT_STR   shift, and go to state 10
    LIT_REXP  shift, and go to state 11
    IDENT     shift, and go to state 28
    OP_SUB    shift, and go to state 14
    '('       shift, and go to state 15

    expr     go to state 88
    arg      go to state 19
    primary  go to state 20
    fcall    go to state 21
    fname    go to state 22


State 82

   35 fcall: fname '(' args ')' .

    $default  reduce using rule 35 (fcall)


State 83

   50 opt_termin: TERMIN .

    $default  reduce using rule 50 (opt_termin)


State 84

   41 condition: '(' expr ')' opt_termin .

    $default  reduce using rule 41 (condition)


State 85

   43 then_stmts: '{' prgm '}' .

    $default  reduce using rule 43 (then_stmts)


State 86

   46 opt_else: KEY_ELSE '{' . prgm '}'

    TERMIN  shift, and go to state 1

    $default  reduce using rule 51 (opt_termins)

    prgm         go to state 89
    opt_termins  go to state 4
    termins      go to state 5


State 87

   45 opt_else: KEY_ELSE stmt .

    $default  reduce using rule 45 (opt_else)


State 88

    9 expr: expr . AND expr
   10     | expr . OR expr
   39 args: args COMMA expr .

    OR   shift, and go to state 33
    AND  shift, and go to state 34

    $default  reduce using rule 39 (args)


State 89

   46 opt_else: KEY_ELSE '{' prgm . '}'

    '}'  shift, and go to state 90


State 90

   46 opt_else: KEY_ELSE '{' prgm '}' .

    $default  reduce using rule 46 (opt_else)
