// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Robust_filter
std::list< std::list <  std::list < Eigen::MatrixXd > > > Robust_filter(const std::list<std::list<Eigen::MatrixXd> >& Y_expanded, const std::list<Eigen::MatrixXd>& C_list, const std::list<Eigen::MatrixXd>& Sigma_Add_list, const std::list<Eigen::MatrixXd>& Sigma_Inn_Contribution, const Eigen::MatrixXd& A, const Eigen::MatrixXd& Sigma_Inn, const Eigen::MatrixXd& Sigma_Add, const double& s, const int& Num_Descendents, const int& Num_Particles, const std::list<std::vector<int> >& to_sample, const std::vector<int>& Number_of_resamples, const std::vector<double>& sigma_tilde, const std::vector<double>& sigma_hat, const Eigen::MatrixXd& mu_0, const Eigen::MatrixXd& Sigma_0, const int& horizon, const std::vector <double>& prob_inn, const std::vector <double>& prob_add, int Particle_Number, const std::list<Eigen::MatrixXd>& Y_Full_list);
RcppExport SEXP _RobKF_Robust_filter(SEXP Y_expandedSEXP, SEXP C_listSEXP, SEXP Sigma_Add_listSEXP, SEXP Sigma_Inn_ContributionSEXP, SEXP ASEXP, SEXP Sigma_InnSEXP, SEXP Sigma_AddSEXP, SEXP sSEXP, SEXP Num_DescendentsSEXP, SEXP Num_ParticlesSEXP, SEXP to_sampleSEXP, SEXP Number_of_resamplesSEXP, SEXP sigma_tildeSEXP, SEXP sigma_hatSEXP, SEXP mu_0SEXP, SEXP Sigma_0SEXP, SEXP horizonSEXP, SEXP prob_innSEXP, SEXP prob_addSEXP, SEXP Particle_NumberSEXP, SEXP Y_Full_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::list<std::list<Eigen::MatrixXd> >& >::type Y_expanded(Y_expandedSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type C_list(C_listSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type Sigma_Add_list(Sigma_Add_listSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type Sigma_Inn_Contribution(Sigma_Inn_ContributionSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_Inn(Sigma_InnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_Add(Sigma_AddSEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int& >::type Num_Descendents(Num_DescendentsSEXP);
    Rcpp::traits::input_parameter< const int& >::type Num_Particles(Num_ParticlesSEXP);
    Rcpp::traits::input_parameter< const std::list<std::vector<int> >& >::type to_sample(to_sampleSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Number_of_resamples(Number_of_resamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sigma_tilde(sigma_tildeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sigma_hat(sigma_hatSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< const int& >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< const std::vector <double>& >::type prob_inn(prob_innSEXP);
    Rcpp::traits::input_parameter< const std::vector <double>& >::type prob_add(prob_addSEXP);
    Rcpp::traits::input_parameter< int >::type Particle_Number(Particle_NumberSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type Y_Full_list(Y_Full_listSEXP);
    rcpp_result_gen = Rcpp::wrap(Robust_filter(Y_expanded, C_list, Sigma_Add_list, Sigma_Inn_Contribution, A, Sigma_Inn, Sigma_Add, s, Num_Descendents, Num_Particles, to_sample, Number_of_resamples, sigma_tilde, sigma_hat, mu_0, Sigma_0, horizon, prob_inn, prob_add, Particle_Number, Y_Full_list));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_Limit
Eigen::MatrixXd Sigma_Limit(Eigen::MatrixXd Sigma0, Eigen::MatrixXd C, Eigen::MatrixXd A, Eigen::MatrixXd Sigma_Inn, Eigen::MatrixXd Sigma_Add, double epsilon);
RcppExport SEXP _RobKF_Sigma_Limit(SEXP Sigma0SEXP, SEXP CSEXP, SEXP ASEXP, SEXP Sigma_InnSEXP, SEXP Sigma_AddSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type C(CSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma_Inn(Sigma_InnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma_Add(Sigma_AddSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_Limit(Sigma0, C, A, Sigma_Inn, Sigma_Add, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// aorkf_huber_list
std::list<std::list<Eigen::MatrixXd> > aorkf_huber_list(const Eigen::MatrixXd& mu_init, const Eigen::MatrixXd& Sigma_init, const std::list<Eigen::MatrixXd>& ys, const Eigen::MatrixXd& A, const Eigen::MatrixXd& b, const Eigen::MatrixXd& C, const Eigen::MatrixXd& d, const Eigen::MatrixXd& R, const Eigen::MatrixXd& Q, const double& h);
RcppExport SEXP _RobKF_aorkf_huber_list(SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP ysSEXP, SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP RSEXP, SEXP QSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(aorkf_huber_list(mu_init, Sigma_init, ys, A, b, C, d, R, Q, h));
    return rcpp_result_gen;
END_RCPP
}
// aorkf_t_list
std::list<std::list<Eigen::MatrixXd> > aorkf_t_list(const Eigen::MatrixXd& mu_init, const Eigen::MatrixXd& Sigma_init, const std::list<Eigen::MatrixXd>& ys, const Eigen::MatrixXd& A, const Eigen::MatrixXd& b, const Eigen::MatrixXd& C, const Eigen::MatrixXd& d, const Eigen::MatrixXd& R, const Eigen::MatrixXd& Q, const double& s, const double& epsilon);
RcppExport SEXP _RobKF_aorkf_t_list(SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP ysSEXP, SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP RSEXP, SEXP QSEXP, SEXP sSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(aorkf_t_list(mu_init, Sigma_init, ys, A, b, C, d, R, Q, s, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// iorkf_huber_list
std::list<std::list<Eigen::MatrixXd> > iorkf_huber_list(const Eigen::MatrixXd& mu_init, const Eigen::MatrixXd& Sigma_init, const std::list<Eigen::MatrixXd>& ys, const Eigen::MatrixXd& A, const Eigen::MatrixXd& b, const Eigen::MatrixXd& C, const Eigen::MatrixXd& d, const Eigen::MatrixXd& R, const Eigen::MatrixXd& Q, const double& h);
RcppExport SEXP _RobKF_iorkf_huber_list(SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP ysSEXP, SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP RSEXP, SEXP QSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(iorkf_huber_list(mu_init, Sigma_init, ys, A, b, C, d, R, Q, h));
    return rcpp_result_gen;
END_RCPP
}
// iorkf_huber_matrix
std::list<Eigen::MatrixXd> iorkf_huber_matrix(const Eigen::MatrixXd& mu_old, const Eigen::MatrixXd& Sigma_old, const Eigen::MatrixXd& y, const Eigen::MatrixXd& A, const Eigen::MatrixXd& b, const Eigen::MatrixXd& C, const Eigen::MatrixXd& d, const Eigen::MatrixXd& R, const Eigen::MatrixXd& Q, const double& h);
RcppExport SEXP _RobKF_iorkf_huber_matrix(SEXP mu_oldSEXP, SEXP Sigma_oldSEXP, SEXP ySEXP, SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP RSEXP, SEXP QSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_old(mu_oldSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_old(Sigma_oldSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(iorkf_huber_matrix(mu_old, Sigma_old, y, A, b, C, d, R, Q, h));
    return rcpp_result_gen;
END_RCPP
}
// kf_list
std::list<std::list<Eigen::MatrixXd> > kf_list(const Eigen::MatrixXd& mu_init, const Eigen::MatrixXd& Sigma_init, const std::list<Eigen::MatrixXd>& ys, const Eigen::MatrixXd& A, const Eigen::MatrixXd& b, const Eigen::MatrixXd& C, const Eigen::MatrixXd& d, const Eigen::MatrixXd& R, const Eigen::MatrixXd& Q);
RcppExport SEXP _RobKF_kf_list(SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP ysSEXP, SEXP ASEXP, SEXP bSEXP, SEXP CSEXP, SEXP dSEXP, SEXP RSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< const std::list<Eigen::MatrixXd>& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(kf_list(mu_init, Sigma_init, ys, A, b, C, d, R, Q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RobKF_Robust_filter", (DL_FUNC) &_RobKF_Robust_filter, 21},
    {"_RobKF_Sigma_Limit", (DL_FUNC) &_RobKF_Sigma_Limit, 6},
    {"_RobKF_aorkf_huber_list", (DL_FUNC) &_RobKF_aorkf_huber_list, 10},
    {"_RobKF_aorkf_t_list", (DL_FUNC) &_RobKF_aorkf_t_list, 11},
    {"_RobKF_iorkf_huber_list", (DL_FUNC) &_RobKF_iorkf_huber_list, 10},
    {"_RobKF_iorkf_huber_matrix", (DL_FUNC) &_RobKF_iorkf_huber_matrix, 10},
    {"_RobKF_kf_list", (DL_FUNC) &_RobKF_kf_list, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_RobKF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
