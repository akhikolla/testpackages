// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/L1mstate.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// scaleQ
List scaleQ(Eigen::MatrixXd X);
static SEXP _L1mstate_scaleQ_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleQ(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_scaleQ(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_scaleQ_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pletaQ
double pletaQ(Eigen::VectorXd& xb, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _L1mstate_pletaQ_try(SEXP xbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pletaQ(xb, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_pletaQ(SEXP xbSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_pletaQ_try(xbSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// d1Q
Eigen::VectorXd d1Q(Eigen::VectorXd& xb, Eigen::VectorXd& tevent, int& N, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _L1mstate_d1Q_try(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(d1Q(xb, tevent, N, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_d1Q(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_d1Q_try(xbSEXP, teventSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// d2Q
Eigen::VectorXd d2Q(Eigen::VectorXd& xb, Eigen::VectorXd& tevent, int& N, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n);
static SEXP _L1mstate_d2Q_try(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type tevent(teventSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent(neventSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nevent1(nevent1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(d2Q(xb, tevent, N, nevent, nevent1, loc1, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_d2Q(SEXP xbSEXP, SEXP teventSEXP, SEXP NSEXP, SEXP neventSEXP, SEXP nevent1SEXP, SEXP loc1SEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_d2Q_try(xbSEXP, teventSEXP, NSEXP, neventSEXP, nevent1SEXP, loc1SEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_lambdaQ
double max_lambdaQ(List& x);
static SEXP _L1mstate_max_lambdaQ_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(max_lambdaQ(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_max_lambdaQ(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_max_lambdaQ_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1msQ
List l1msQ(List& x, Eigen::VectorXd lambda, int nlambda, int p, double thresh, int maxit);
static SEXP _L1mstate_l1msQ_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP pSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(l1msQ(x, lambda, nlambda, p, thresh, maxit));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_l1msQ(SEXP xSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP pSEXP, SEXP threshSEXP, SEXP maxitSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_l1msQ_try(xSEXP, lambdaSEXP, nlambdaSEXP, pSEXP, threshSEXP, maxitSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cvl1msQ
List cvl1msQ(List& x, Eigen::VectorXd lambda, int nlambda, int p, double thresh, int maxit, List& xF);
static SEXP _L1mstate_cvl1msQ_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP pSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP xFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< List& >::type xF(xFSEXP);
    rcpp_result_gen = Rcpp::wrap(cvl1msQ(x, lambda, nlambda, p, thresh, maxit, xF));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _L1mstate_cvl1msQ(SEXP xSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP pSEXP, SEXP threshSEXP, SEXP maxitSEXP, SEXP xFSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_L1mstate_cvl1msQ_try(xSEXP, lambdaSEXP, nlambdaSEXP, pSEXP, threshSEXP, maxitSEXP, xFSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _L1mstate_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*scaleQ)(Eigen::MatrixXd)");
        signatures.insert("double(*pletaQ)(Eigen::VectorXd&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("Eigen::VectorXd(*d1Q)(Eigen::VectorXd&,Eigen::VectorXd&,int&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("Eigen::VectorXd(*d2Q)(Eigen::VectorXd&,Eigen::VectorXd&,int&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&)");
        signatures.insert("double(*max_lambdaQ)(List&)");
        signatures.insert("List(*l1msQ)(List&,Eigen::VectorXd,int,int,double,int)");
        signatures.insert("List(*cvl1msQ)(List&,Eigen::VectorXd,int,int,double,int,List&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _L1mstate_RcppExport_registerCCallable() { 
    R_RegisterCCallable("L1mstate", "_L1mstate_scaleQ", (DL_FUNC)_L1mstate_scaleQ_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_pletaQ", (DL_FUNC)_L1mstate_pletaQ_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_d1Q", (DL_FUNC)_L1mstate_d1Q_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_d2Q", (DL_FUNC)_L1mstate_d2Q_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_max_lambdaQ", (DL_FUNC)_L1mstate_max_lambdaQ_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_l1msQ", (DL_FUNC)_L1mstate_l1msQ_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_cvl1msQ", (DL_FUNC)_L1mstate_cvl1msQ_try);
    R_RegisterCCallable("L1mstate", "_L1mstate_RcppExport_validate", (DL_FUNC)_L1mstate_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_L1mstate_scaleQ", (DL_FUNC) &_L1mstate_scaleQ, 1},
    {"_L1mstate_pletaQ", (DL_FUNC) &_L1mstate_pletaQ, 5},
    {"_L1mstate_d1Q", (DL_FUNC) &_L1mstate_d1Q, 7},
    {"_L1mstate_d2Q", (DL_FUNC) &_L1mstate_d2Q, 7},
    {"_L1mstate_max_lambdaQ", (DL_FUNC) &_L1mstate_max_lambdaQ, 1},
    {"_L1mstate_l1msQ", (DL_FUNC) &_L1mstate_l1msQ, 6},
    {"_L1mstate_cvl1msQ", (DL_FUNC) &_L1mstate_cvl1msQ, 7},
    {"_L1mstate_RcppExport_registerCCallable", (DL_FUNC) &_L1mstate_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_L1mstate(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
