// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// D_Gradient
arma::mat D_Gradient(Rcpp::List xGroup, Rcpp::List zGroup, Rcpp::List LGroup, Rcpp::List yGroup, arma::vec b, int N, int q);
RcppExport SEXP _splmm_D_Gradient(SEXP xGroupSEXP, SEXP zGroupSEXP, SEXP LGroupSEXP, SEXP yGroupSEXP, SEXP bSEXP, SEXP NSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type xGroup(xGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zGroup(zGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type LGroup(LGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type yGroup(yGroupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(D_Gradient(xGroup, zGroup, LGroup, yGroup, b, N, q));
    return rcpp_result_gen;
END_RCPP
}
// D_HessianMatrix
arma::mat D_HessianMatrix(Rcpp::List xGroup, Rcpp::List zGroup, Rcpp::List LGroup, Rcpp::List yGroup, arma::vec b, int N, int q);
RcppExport SEXP _splmm_D_HessianMatrix(SEXP xGroupSEXP, SEXP zGroupSEXP, SEXP LGroupSEXP, SEXP yGroupSEXP, SEXP bSEXP, SEXP NSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type xGroup(xGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zGroup(zGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type LGroup(LGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type yGroup(yGroupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(D_HessianMatrix(xGroup, zGroup, LGroup, yGroup, b, N, q));
    return rcpp_result_gen;
END_RCPP
}
// ObjFunction
double ObjFunction(Rcpp::List xGroup, Rcpp::List yGroup, Rcpp::List LGroup, arma::vec b_nonpen, arma::mat L_nonpen, double lambda1, double lambda2, Rcpp::String penalty_b, Rcpp::String penalty_L, double ll1);
RcppExport SEXP _splmm_ObjFunction(SEXP xGroupSEXP, SEXP yGroupSEXP, SEXP LGroupSEXP, SEXP b_nonpenSEXP, SEXP L_nonpenSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP penalty_bSEXP, SEXP penalty_LSEXP, SEXP ll1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type xGroup(xGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type yGroup(yGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type LGroup(LGroupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b_nonpen(b_nonpenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L_nonpen(L_nonpenSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type penalty_b(penalty_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type penalty_L(penalty_LSEXP);
    Rcpp::traits::input_parameter< double >::type ll1(ll1SEXP);
    rcpp_result_gen = Rcpp::wrap(ObjFunction(xGroup, yGroup, LGroup, b_nonpen, L_nonpen, lambda1, lambda2, penalty_b, penalty_L, ll1));
    return rcpp_result_gen;
END_RCPP
}
// ObjFunction_L
double ObjFunction_L(Rcpp::List xGroup, Rcpp::List yGroup, Rcpp::List zGroup, Rcpp::List zIdGrp, arma::vec b_nonpen, arma::mat L, arma::uvec nonpen, double sigma, double lambda, Rcpp::String penalty, double ll1);
RcppExport SEXP _splmm_ObjFunction_L(SEXP xGroupSEXP, SEXP yGroupSEXP, SEXP zGroupSEXP, SEXP zIdGrpSEXP, SEXP b_nonpenSEXP, SEXP LSEXP, SEXP nonpenSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP ll1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type xGroup(xGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type yGroup(yGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zGroup(zGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zIdGrp(zIdGrpSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b_nonpen(b_nonpenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nonpen(nonpenSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type ll1(ll1SEXP);
    rcpp_result_gen = Rcpp::wrap(ObjFunction_L(xGroup, yGroup, zGroup, zIdGrp, b_nonpen, L, nonpen, sigma, lambda, penalty, ll1));
    return rcpp_result_gen;
END_RCPP
}
// ArmijoRule_L
Rcpp::List ArmijoRule_L(Rcpp::List xGroup, Rcpp::List yGroup, Rcpp::List zGroup, arma::mat L, int l, int k, double grad, double hessian, arma::vec b, double sigma, Rcpp::List zIdGrp, bool linNonpen, arma::uvec nonpen, double lambda, Rcpp::String penalty, double ll1, double gamma, int maxArmijo, double a_init, double delta, double rho, int converged);
RcppExport SEXP _splmm_ArmijoRule_L(SEXP xGroupSEXP, SEXP yGroupSEXP, SEXP zGroupSEXP, SEXP LSEXP, SEXP lSEXP, SEXP kSEXP, SEXP gradSEXP, SEXP hessianSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP zIdGrpSEXP, SEXP linNonpenSEXP, SEXP nonpenSEXP, SEXP lambdaSEXP, SEXP penaltySEXP, SEXP ll1SEXP, SEXP gammaSEXP, SEXP maxArmijoSEXP, SEXP a_initSEXP, SEXP deltaSEXP, SEXP rhoSEXP, SEXP convergedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type xGroup(xGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type yGroup(yGroupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zGroup(zGroupSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< double >::type hessian(hessianSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zIdGrp(zIdGrpSEXP);
    Rcpp::traits::input_parameter< bool >::type linNonpen(linNonpenSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nonpen(nonpenSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type ll1(ll1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type maxArmijo(maxArmijoSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type converged(convergedSEXP);
    rcpp_result_gen = Rcpp::wrap(ArmijoRule_L(xGroup, yGroup, zGroup, L, l, k, grad, hessian, b, sigma, zIdGrp, linNonpen, nonpen, lambda, penalty, ll1, gamma, maxArmijo, a_init, delta, rho, converged));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_splmm_D_Gradient", (DL_FUNC) &_splmm_D_Gradient, 7},
    {"_splmm_D_HessianMatrix", (DL_FUNC) &_splmm_D_HessianMatrix, 7},
    {"_splmm_ObjFunction", (DL_FUNC) &_splmm_ObjFunction, 10},
    {"_splmm_ObjFunction_L", (DL_FUNC) &_splmm_ObjFunction_L, 11},
    {"_splmm_ArmijoRule_L", (DL_FUNC) &_splmm_ArmijoRule_L, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_splmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
