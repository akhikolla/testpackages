// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// distImages
NumericMatrix distImages(arma::cube images, int verbosity);
RcppExport SEXP _curveDepth_distImages(SEXP imagesSEXP, SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< int >::type verbosity(verbositySEXP);
    rcpp_result_gen = Rcpp::wrap(distImages(images, verbosity));
    return rcpp_result_gen;
END_RCPP
}
// distCurves
NumericMatrix distCurves(List curves, bool oneWay, int verbosity);
RcppExport SEXP _curveDepth_distCurves(SEXP curvesSEXP, SEXP oneWaySEXP, SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< bool >::type oneWay(oneWaySEXP);
    Rcpp::traits::input_parameter< int >::type verbosity(verbositySEXP);
    rcpp_result_gen = Rcpp::wrap(distCurves(curves, oneWay, verbosity));
    return rcpp_result_gen;
END_RCPP
}
// distCurvesAsymm
NumericMatrix distCurvesAsymm(List curvesRows, List curvesCols, bool oneWay, int verbosity);
RcppExport SEXP _curveDepth_distCurvesAsymm(SEXP curvesRowsSEXP, SEXP curvesColsSEXP, SEXP oneWaySEXP, SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type curvesRows(curvesRowsSEXP);
    Rcpp::traits::input_parameter< List >::type curvesCols(curvesColsSEXP);
    Rcpp::traits::input_parameter< bool >::type oneWay(oneWaySEXP);
    Rcpp::traits::input_parameter< int >::type verbosity(verbositySEXP);
    rcpp_result_gen = Rcpp::wrap(distCurvesAsymm(curvesRows, curvesCols, oneWay, verbosity));
    return rcpp_result_gen;
END_RCPP
}
// depthCurveTukey
NumericVector depthCurveTukey(List objects, List data, int nDirs, bool subs, double fracInt, double fracEst, List subsamples, bool exactEst, double minMassObj, double minMassDat);
RcppExport SEXP _curveDepth_depthCurveTukey(SEXP objectsSEXP, SEXP dataSEXP, SEXP nDirsSEXP, SEXP subsSEXP, SEXP fracIntSEXP, SEXP fracEstSEXP, SEXP subsamplesSEXP, SEXP exactEstSEXP, SEXP minMassObjSEXP, SEXP minMassDatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nDirs(nDirsSEXP);
    Rcpp::traits::input_parameter< bool >::type subs(subsSEXP);
    Rcpp::traits::input_parameter< double >::type fracInt(fracIntSEXP);
    Rcpp::traits::input_parameter< double >::type fracEst(fracEstSEXP);
    Rcpp::traits::input_parameter< List >::type subsamples(subsamplesSEXP);
    Rcpp::traits::input_parameter< bool >::type exactEst(exactEstSEXP);
    Rcpp::traits::input_parameter< double >::type minMassObj(minMassObjSEXP);
    Rcpp::traits::input_parameter< double >::type minMassDat(minMassDatSEXP);
    rcpp_result_gen = Rcpp::wrap(depthCurveTukey(objects, data, nDirs, subs, fracInt, fracEst, subsamples, exactEst, minMassObj, minMassDat));
    return rcpp_result_gen;
END_RCPP
}
// curvesSubsample
List curvesSubsample(List curves, IntegerVector ptsPerCurve);
RcppExport SEXP _curveDepth_curvesSubsample(SEXP curvesSEXP, SEXP ptsPerCurveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ptsPerCurve(ptsPerCurveSEXP);
    rcpp_result_gen = Rcpp::wrap(curvesSubsample(curves, ptsPerCurve));
    return rcpp_result_gen;
END_RCPP
}
// images2curves
List images2curves(arma::cube images);
RcppExport SEXP _curveDepth_images2curves(SEXP imagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type images(imagesSEXP);
    rcpp_result_gen = Rcpp::wrap(images2curves(images));
    return rcpp_result_gen;
END_RCPP
}
// depthCTukey
NumericVector depthCTukey(List objects, List data, int nDirs, bool subs, int m, double fracInt, double fracEst, bool exactEst, double minMassObj, double minMassDat);
RcppExport SEXP _curveDepth_depthCTukey(SEXP objectsSEXP, SEXP dataSEXP, SEXP nDirsSEXP, SEXP subsSEXP, SEXP mSEXP, SEXP fracIntSEXP, SEXP fracEstSEXP, SEXP exactEstSEXP, SEXP minMassObjSEXP, SEXP minMassDatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nDirs(nDirsSEXP);
    Rcpp::traits::input_parameter< bool >::type subs(subsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type fracInt(fracIntSEXP);
    Rcpp::traits::input_parameter< double >::type fracEst(fracEstSEXP);
    Rcpp::traits::input_parameter< bool >::type exactEst(exactEstSEXP);
    Rcpp::traits::input_parameter< double >::type minMassObj(minMassObjSEXP);
    Rcpp::traits::input_parameter< double >::type minMassDat(minMassDatSEXP);
    rcpp_result_gen = Rcpp::wrap(depthCTukey(objects, data, nDirs, subs, m, fracInt, fracEst, exactEst, minMassObj, minMassDat));
    return rcpp_result_gen;
END_RCPP
}
// voxelize
List voxelize(List f, NumericVector from, NumericVector to, NumericVector by);
RcppExport SEXP _curveDepth_voxelize(SEXP fSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP bySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type by(bySEXP);
    rcpp_result_gen = Rcpp::wrap(voxelize(f, from, to, by));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_curveDepth_distImages", (DL_FUNC) &_curveDepth_distImages, 2},
    {"_curveDepth_distCurves", (DL_FUNC) &_curveDepth_distCurves, 3},
    {"_curveDepth_distCurvesAsymm", (DL_FUNC) &_curveDepth_distCurvesAsymm, 4},
    {"_curveDepth_depthCurveTukey", (DL_FUNC) &_curveDepth_depthCurveTukey, 10},
    {"_curveDepth_curvesSubsample", (DL_FUNC) &_curveDepth_curvesSubsample, 2},
    {"_curveDepth_images2curves", (DL_FUNC) &_curveDepth_images2curves, 1},
    {"_curveDepth_depthCTukey", (DL_FUNC) &_curveDepth_depthCTukey, 10},
    {"_curveDepth_voxelize", (DL_FUNC) &_curveDepth_voxelize, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_curveDepth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
