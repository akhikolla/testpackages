// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// adf_tests_panel_cpp
arma::mat adf_tests_panel_cpp(const arma::mat& y, const int& pmin, const int& pmax, const int& ic, const arma::vec& dc, const arma::vec& detr, const bool& ic_scale, const double& h_rs, const arma::umat& range);
RcppExport SEXP _bootUR_adf_tests_panel_cpp(SEXP ySEXP, SEXP pminSEXP, SEXP pmaxSEXP, SEXP icSEXP, SEXP dcSEXP, SEXP detrSEXP, SEXP ic_scaleSEXP, SEXP h_rsSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type pmin(pminSEXP);
    Rcpp::traits::input_parameter< const int& >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type ic(icSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type detr(detrSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ic_scale(ic_scaleSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_rs(h_rsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(adf_tests_panel_cpp(y, pmin, pmax, ic, dc, detr, ic_scale, h_rs, range));
    return rcpp_result_gen;
END_RCPP
}
// adf_panel_bootstrap_dgp_cpp
Rcpp::List adf_panel_bootstrap_dgp_cpp(const arma::mat& y, const int& pmin, const int& pmax, const int& ic, const int& dc, const bool& QD, const bool& trim, const bool& ic_scale, const double& h_rs, const arma::umat& range);
RcppExport SEXP _bootUR_adf_panel_bootstrap_dgp_cpp(SEXP ySEXP, SEXP pminSEXP, SEXP pmaxSEXP, SEXP icSEXP, SEXP dcSEXP, SEXP QDSEXP, SEXP trimSEXP, SEXP ic_scaleSEXP, SEXP h_rsSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type pmin(pminSEXP);
    Rcpp::traits::input_parameter< const int& >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type ic(icSEXP);
    Rcpp::traits::input_parameter< const int& >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< const bool& >::type QD(QDSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trim(trimSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ic_scale(ic_scaleSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_rs(h_rsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(adf_panel_bootstrap_dgp_cpp(y, pmin, pmax, ic, dc, QD, trim, ic_scale, h_rs, range));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_cpp
arma::cube bootstrap_cpp(const int& B, const arma::mat& u, const arma::mat& e, const int& boot, const int& l, const arma::mat& s, const double& ar, const arma::mat& ar_est, const arma::mat& y0, const int& pmin, const int& pmax, const int& ic, const arma::vec& dc, const arma::vec& detr, const bool& ic_scale, const double& h_rs, const arma::umat& range, const bool& joint, const bool& do_parallel, const int& nc, const bool& show_progress);
RcppExport SEXP _bootUR_bootstrap_cpp(SEXP BSEXP, SEXP uSEXP, SEXP eSEXP, SEXP bootSEXP, SEXP lSEXP, SEXP sSEXP, SEXP arSEXP, SEXP ar_estSEXP, SEXP y0SEXP, SEXP pminSEXP, SEXP pmaxSEXP, SEXP icSEXP, SEXP dcSEXP, SEXP detrSEXP, SEXP ic_scaleSEXP, SEXP h_rsSEXP, SEXP rangeSEXP, SEXP jointSEXP, SEXP do_parallelSEXP, SEXP ncSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const int& >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ar_est(ar_estSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type pmin(pminSEXP);
    Rcpp::traits::input_parameter< const int& >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type ic(icSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type detr(detrSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ic_scale(ic_scaleSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_rs(h_rsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_parallel(do_parallelSEXP);
    Rcpp::traits::input_parameter< const int& >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_cpp(B, u, e, boot, l, s, ar, ar_est, y0, pmin, pmax, ic, dc, detr, ic_scale, h_rs, range, joint, do_parallel, nc, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// scaling_factors_cpp
arma::mat scaling_factors_cpp(const arma::cube& u, const double& prob);
RcppExport SEXP _bootUR_scaling_factors_cpp(SEXP uSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_factors_cpp(u, prob));
    return rcpp_result_gen;
END_RCPP
}
// union_tests_cpp
arma::mat union_tests_cpp(const arma::cube& t, arma::mat& s);
RcppExport SEXP _bootUR_union_tests_cpp(SEXP tSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(union_tests_cpp(t, s));
    return rcpp_result_gen;
END_RCPP
}
// union_test_cpp
arma::vec union_test_cpp(const arma::mat& t, arma::vec& s);
RcppExport SEXP _bootUR_union_test_cpp(SEXP tSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(union_test_cpp(t, s));
    return rcpp_result_gen;
END_RCPP
}
// BSQT_cpp
Rcpp:: List BSQT_cpp(const arma::vec& pvec, const arma::mat& test_i, const arma::mat& t_star, const double& level);
RcppExport SEXP _bootUR_BSQT_cpp(SEXP pvecSEXP, SEXP test_iSEXP, SEXP t_starSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type test_i(test_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type t_star(t_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(BSQT_cpp(pvec, test_i, t_star, level));
    return rcpp_result_gen;
END_RCPP
}
// iADF_cpp
arma::mat iADF_cpp(const arma::mat& test_i, const arma::mat& t_star, const double& level);
RcppExport SEXP _bootUR_iADF_cpp(SEXP test_iSEXP, SEXP t_starSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type test_i(test_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type t_star(t_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(iADF_cpp(test_i, t_star, level));
    return rcpp_result_gen;
END_RCPP
}
// FDR_cpp
Rcpp:: List FDR_cpp(const arma::mat& test_i, const arma::mat& t_star, const double& level);
RcppExport SEXP _bootUR_FDR_cpp(SEXP test_iSEXP, SEXP t_starSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type test_i(test_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type t_star(t_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(FDR_cpp(test_i, t_star, level));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bootUR_adf_tests_panel_cpp", (DL_FUNC) &_bootUR_adf_tests_panel_cpp, 9},
    {"_bootUR_adf_panel_bootstrap_dgp_cpp", (DL_FUNC) &_bootUR_adf_panel_bootstrap_dgp_cpp, 10},
    {"_bootUR_bootstrap_cpp", (DL_FUNC) &_bootUR_bootstrap_cpp, 21},
    {"_bootUR_scaling_factors_cpp", (DL_FUNC) &_bootUR_scaling_factors_cpp, 2},
    {"_bootUR_union_tests_cpp", (DL_FUNC) &_bootUR_union_tests_cpp, 2},
    {"_bootUR_union_test_cpp", (DL_FUNC) &_bootUR_union_test_cpp, 2},
    {"_bootUR_BSQT_cpp", (DL_FUNC) &_bootUR_BSQT_cpp, 4},
    {"_bootUR_iADF_cpp", (DL_FUNC) &_bootUR_iADF_cpp, 3},
    {"_bootUR_FDR_cpp", (DL_FUNC) &_bootUR_FDR_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bootUR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
