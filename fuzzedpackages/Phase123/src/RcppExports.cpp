// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// RunAdaptiveEffToxTrial
List RunAdaptiveEffToxTrial(int DoseStart, arma::vec Dose, arma::vec Hypermeans, arma::vec Hypervars, arma::vec Contour, arma::vec PiLim, arma::vec ProbLim, int cohort, int NET, int NF, int B, int nSims, arma::vec PETrue, arma::vec PTTrue);
RcppExport SEXP _Phase123_RunAdaptiveEffToxTrial(SEXP DoseStartSEXP, SEXP DoseSEXP, SEXP HypermeansSEXP, SEXP HypervarsSEXP, SEXP ContourSEXP, SEXP PiLimSEXP, SEXP ProbLimSEXP, SEXP cohortSEXP, SEXP NETSEXP, SEXP NFSEXP, SEXP BSEXP, SEXP nSimsSEXP, SEXP PETrueSEXP, SEXP PTTrueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type DoseStart(DoseStartSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypermeans(HypermeansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypervars(HypervarsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Contour(ContourSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PiLim(PiLimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ProbLim(ProbLimSEXP);
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< int >::type NET(NETSEXP);
    Rcpp::traits::input_parameter< int >::type NF(NFSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type nSims(nSimsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PETrue(PETrueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PTTrue(PTTrueSEXP);
    rcpp_result_gen = Rcpp::wrap(RunAdaptiveEffToxTrial(DoseStart, Dose, Hypermeans, Hypervars, Contour, PiLim, ProbLim, cohort, NET, NF, B, nSims, PETrue, PTTrue));
    return rcpp_result_gen;
END_RCPP
}
// AssignEffTox
int AssignEffTox(arma::vec YE, arma::vec YT, arma::vec Doses, arma::vec Dose, arma::vec DosesTried, arma::vec Hypermeans, arma::vec Hypervars, arma::vec Contour, arma::vec PiLim, arma::vec ProbLim, int B);
RcppExport SEXP _Phase123_AssignEffTox(SEXP YESEXP, SEXP YTSEXP, SEXP DosesSEXP, SEXP DoseSEXP, SEXP DosesTriedSEXP, SEXP HypermeansSEXP, SEXP HypervarsSEXP, SEXP ContourSEXP, SEXP PiLimSEXP, SEXP ProbLimSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YE(YESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type YT(YTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Doses(DosesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type DosesTried(DosesTriedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypermeans(HypermeansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypervars(HypervarsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Contour(ContourSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PiLim(PiLimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ProbLim(ProbLimSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(AssignEffTox(YE, YT, Doses, Dose, DosesTried, Hypermeans, Hypervars, Contour, PiLim, ProbLim, B));
    return rcpp_result_gen;
END_RCPP
}
// RandomEffTox
int RandomEffTox(arma::vec YE, arma::vec YT, arma::vec Doses, arma::vec Dose, arma::vec DosesTried, arma::vec Hypermeans, arma::vec Hypervars, arma::vec Contour, arma::vec PiLim, arma::vec ProbLim, int B);
RcppExport SEXP _Phase123_RandomEffTox(SEXP YESEXP, SEXP YTSEXP, SEXP DosesSEXP, SEXP DoseSEXP, SEXP DosesTriedSEXP, SEXP HypermeansSEXP, SEXP HypervarsSEXP, SEXP ContourSEXP, SEXP PiLimSEXP, SEXP ProbLimSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YE(YESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type YT(YTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Doses(DosesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type DosesTried(DosesTriedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypermeans(HypermeansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypervars(HypervarsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Contour(ContourSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type PiLim(PiLimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ProbLim(ProbLimSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomEffTox(YE, YT, Doses, Dose, DosesTried, Hypermeans, Hypervars, Contour, PiLim, ProbLim, B));
    return rcpp_result_gen;
END_RCPP
}
// PieceMCMC
List PieceMCMC(arma::vec Y, arma::vec I, arma::vec YE, arma::vec YT, arma::vec Doses, arma::vec Dose, int B, arma::mat prob, arma::mat MaxObs);
RcppExport SEXP _Phase123_PieceMCMC(SEXP YSEXP, SEXP ISEXP, SEXP YESEXP, SEXP YTSEXP, SEXP DosesSEXP, SEXP DoseSEXP, SEXP BSEXP, SEXP probSEXP, SEXP MaxObsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type YE(YESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type YT(YTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Doses(DosesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type prob(probSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type MaxObs(MaxObsSEXP);
    rcpp_result_gen = Rcpp::wrap(PieceMCMC(Y, I, YE, YT, Doses, Dose, B, prob, MaxObs));
    return rcpp_result_gen;
END_RCPP
}
// EFFTOX
arma::mat EFFTOX(arma::vec YE, arma::vec YT, arma::vec Doses, arma::vec Dose, arma::vec Hypermeans, arma::vec Hypervars, int B);
RcppExport SEXP _Phase123_EFFTOX(SEXP YESEXP, SEXP YTSEXP, SEXP DosesSEXP, SEXP DoseSEXP, SEXP HypermeansSEXP, SEXP HypervarsSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YE(YESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type YT(YTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Doses(DosesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypermeans(HypermeansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Hypervars(HypervarsSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(EFFTOX(YE, YT, Doses, Dose, Hypermeans, Hypervars, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Phase123_RunAdaptiveEffToxTrial", (DL_FUNC) &_Phase123_RunAdaptiveEffToxTrial, 14},
    {"_Phase123_AssignEffTox", (DL_FUNC) &_Phase123_AssignEffTox, 11},
    {"_Phase123_RandomEffTox", (DL_FUNC) &_Phase123_RandomEffTox, 11},
    {"_Phase123_PieceMCMC", (DL_FUNC) &_Phase123_PieceMCMC, 9},
    {"_Phase123_EFFTOX", (DL_FUNC) &_Phase123_EFFTOX, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_Phase123(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
