// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// simulate_one_pos
int simulate_one_pos(NumericVector x_pop, NumericVector y_pop, NumericVector index_pop, int sample_size_min, int sample_size_max, bool replace, float lower_limit, float upper_limit);
RcppExport SEXP _fastpos_simulate_one_pos(SEXP x_popSEXP, SEXP y_popSEXP, SEXP index_popSEXP, SEXP sample_size_minSEXP, SEXP sample_size_maxSEXP, SEXP replaceSEXP, SEXP lower_limitSEXP, SEXP upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_pop(x_popSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_pop(y_popSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type index_pop(index_popSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size_min(sample_size_minSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size_max(sample_size_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< float >::type lower_limit(lower_limitSEXP);
    Rcpp::traits::input_parameter< float >::type upper_limit(upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_one_pos(x_pop, y_pop, index_pop, sample_size_min, sample_size_max, replace, lower_limit, upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// simulate_pos
IntegerVector simulate_pos(NumericVector x_pop, NumericVector y_pop, int n_studies, int sample_size_min, int sample_size_max, bool replace, float lower_limit, float upper_limit);
RcppExport SEXP _fastpos_simulate_pos(SEXP x_popSEXP, SEXP y_popSEXP, SEXP n_studiesSEXP, SEXP sample_size_minSEXP, SEXP sample_size_maxSEXP, SEXP replaceSEXP, SEXP lower_limitSEXP, SEXP upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_pop(x_popSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_pop(y_popSEXP);
    Rcpp::traits::input_parameter< int >::type n_studies(n_studiesSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size_min(sample_size_minSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size_max(sample_size_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< float >::type lower_limit(lower_limitSEXP);
    Rcpp::traits::input_parameter< float >::type upper_limit(upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_pos(x_pop, y_pop, n_studies, sample_size_min, sample_size_max, replace, lower_limit, upper_limit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastpos_simulate_one_pos", (DL_FUNC) &_fastpos_simulate_one_pos, 8},
    {"_fastpos_simulate_pos", (DL_FUNC) &_fastpos_simulate_pos, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastpos(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
