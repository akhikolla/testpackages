// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fast_factor
SEXP fast_factor(SEXP x, bool as_int);
RcppExport SEXP _dexterMST_fast_factor(SEXP xSEXP, SEXP as_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type as_int(as_intSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor(x, as_int));
    return rcpp_result_gen;
END_RCPP
}
// fast_factor_lev
SEXP fast_factor_lev(SEXP x, SEXP levs, bool as_int);
RcppExport SEXP _dexterMST_fast_factor_lev(SEXP xSEXP, SEXP levsSEXP, SEXP as_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type levs(levsSEXP);
    Rcpp::traits::input_parameter< bool >::type as_int(as_intSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor_lev(x, levs, as_int));
    return rcpp_result_gen;
END_RCPP
}
// bid_c
IntegerVector bid_c(const std::vector<std::string>& test_id, const std::vector<std::string>& booklet_id, const std::vector<std::string>& test_lev, const std::vector<std::string>& booklet_lev);
RcppExport SEXP _dexterMST_bid_c(SEXP test_idSEXP, SEXP booklet_idSEXP, SEXP test_levSEXP, SEXP booklet_levSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type test_id(test_idSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type test_lev(test_levSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type booklet_lev(booklet_levSEXP);
    rcpp_result_gen = Rcpp::wrap(bid_c(test_id, booklet_id, test_lev, booklet_lev));
    return rcpp_result_gen;
END_RCPP
}
// is_person_booklet_sorted
bool is_person_booklet_sorted(const IntegerVector& booklet_id, const IntegerVector& person_id);
RcppExport SEXP _dexterMST_is_person_booklet_sorted(SEXP booklet_idSEXP, SEXP person_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    rcpp_result_gen = Rcpp::wrap(is_person_booklet_sorted(booklet_id, person_id));
    return rcpp_result_gen;
END_RCPP
}
// mutate_booklet_score
IntegerVector mutate_booklet_score(const IntegerVector& person_id, const IntegerVector& booklet_id, const IntegerVector& item_score);
RcppExport SEXP _dexterMST_mutate_booklet_score(SEXP person_idSEXP, SEXP booklet_idSEXP, SEXP item_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(mutate_booklet_score(person_id, booklet_id, item_score));
    return rcpp_result_gen;
END_RCPP
}
// make_booklets_unsafe
List make_booklets_unsafe(const IntegerVector& person_id, IntegerVector& booklet_id, const IntegerVector& module_nbr, const IntegerVector& item_id, const IntegerVector& item_score, IntegerVector& booklet_score, IntegerVector& include_rsp, const IntegerVector& bk_nmod);
RcppExport SEXP _dexterMST_make_booklets_unsafe(SEXP person_idSEXP, SEXP booklet_idSEXP, SEXP module_nbrSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP booklet_scoreSEXP, SEXP include_rspSEXP, SEXP bk_nmodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type module_nbr(module_nbrSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type include_rsp(include_rspSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type bk_nmod(bk_nmodSEXP);
    rcpp_result_gen = Rcpp::wrap(make_booklets_unsafe(person_id, booklet_id, module_nbr, item_id, item_score, booklet_score, include_rsp, bk_nmod));
    return rcpp_result_gen;
END_RCPP
}
// suf_stats_nrm_c
List suf_stats_nrm_c(const IntegerVector& booklet_id, const IntegerVector& booklet_score, const IntegerVector& item_id, const IntegerVector& item_score, const int nit, const int max_score);
RcppExport SEXP _dexterMST_suf_stats_nrm_c(SEXP booklet_idSEXP, SEXP booklet_scoreSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP nitSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(suf_stats_nrm_c(booklet_id, booklet_score, item_id, item_score, nit, max_score));
    return rcpp_result_gen;
END_RCPP
}
// im_booklet_score
std::vector<int> im_booklet_score(const IntegerVector& person_id, const IntegerVector& item_score);
RcppExport SEXP _dexterMST_im_booklet_score(SEXP person_idSEXP, SEXP item_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(im_booklet_score(person_id, item_score));
    return rcpp_result_gen;
END_RCPP
}
// suf_stats_im_c
List suf_stats_im_c(const IntegerVector& booklet_score, const IntegerVector& item_id, const IntegerVector& item_score, const int nit, const int max_score);
RcppExport SEXP _dexterMST_suf_stats_im_c(SEXP booklet_scoreSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP nitSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(suf_stats_im_c(booklet_score, item_id, item_score, nit, max_score));
    return rcpp_result_gen;
END_RCPP
}
// is_connected_C
bool is_connected_C(const IntegerMatrix& A);
RcppExport SEXP _dexterMST_is_connected_C(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(is_connected_C(A));
    return rcpp_result_gen;
END_RCPP
}
// Expect
void Expect(const arma::vec& b, const arma::ivec& a, arma::ivec& bfirst, arma::ivec& blast, const arma::ivec& bmax, const arma::ivec& nmod, const arma::ivec& brouting, arma::ivec& mnit, const arma::ivec& mod_min, const arma::ivec& mod_max, const arma::ivec& scoretab, /* out */ arma::vec& E);
RcppExport SEXP _dexterMST_Expect(SEXP bSEXP, SEXP aSEXP, SEXP bfirstSEXP, SEXP blastSEXP, SEXP bmaxSEXP, SEXP nmodSEXP, SEXP broutingSEXP, SEXP mnitSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP, SEXP scoretabSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type bfirst(bfirstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type blast(blastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bmax(bmaxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nmod(nmodSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type brouting(broutingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_max(mod_maxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< /* out */ arma::vec& >::type E(ESEXP);
    Expect(b, a, bfirst, blast, bmax, nmod, brouting, mnit, mod_min, mod_max, scoretab, E);
    return R_NilValue;
END_RCPP
}
// NR
void NR(const arma::vec& b, const arma::ivec& a, arma::ivec& bfirst, arma::ivec& blast, const arma::ivec& bmax, const arma::ivec& nmod, const arma::ivec& brouting, arma::ivec& mnit, const arma::ivec& mod_min, const arma::ivec& mod_max, const arma::ivec& scoretab, /* out */ arma::vec& E, arma::mat& H);
RcppExport SEXP _dexterMST_NR(SEXP bSEXP, SEXP aSEXP, SEXP bfirstSEXP, SEXP blastSEXP, SEXP bmaxSEXP, SEXP nmodSEXP, SEXP broutingSEXP, SEXP mnitSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP, SEXP scoretabSEXP, SEXP ESEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type bfirst(bfirstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type blast(blastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bmax(bmaxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nmod(nmodSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type brouting(broutingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_max(mod_maxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< /* out */ arma::vec& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    NR(b, a, bfirst, blast, bmax, nmod, brouting, mnit, mod_min, mod_max, scoretab, E, H);
    return R_NilValue;
END_RCPP
}
// dirichlet
void dirichlet(const arma::vec& alpha, arma::vec& out);
RcppExport SEXP _dexterMST_dirichlet(SEXP alphaSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type out(outSEXP);
    dirichlet(alpha, out);
    return R_NilValue;
END_RCPP
}
// calibrate_Bayes
arma::mat calibrate_Bayes(const arma::ivec& a, const arma::ivec& first, const arma::ivec& last, arma::ivec& bfirst, arma::ivec& blast, const arma::ivec& bmax, const arma::ivec& bmin, const arma::ivec& nmod, const arma::ivec& brouting, arma::ivec& mnit, const arma::ivec& mod_min, const arma::ivec& mod_max, const arma::ivec& itb, const arma::ivec& itnb, const arma::ivec& sufI, const arma::ivec& scoretab, arma::vec& b, const arma::vec& fixed_b, const int from, const int step, const int ndraws, const double prior_eta, const double prior_rho, const double prior_nu, const double prior_sigma);
RcppExport SEXP _dexterMST_calibrate_Bayes(SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP bfirstSEXP, SEXP blastSEXP, SEXP bmaxSEXP, SEXP bminSEXP, SEXP nmodSEXP, SEXP broutingSEXP, SEXP mnitSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP, SEXP itbSEXP, SEXP itnbSEXP, SEXP sufISEXP, SEXP scoretabSEXP, SEXP bSEXP, SEXP fixed_bSEXP, SEXP fromSEXP, SEXP stepSEXP, SEXP ndrawsSEXP, SEXP prior_etaSEXP, SEXP prior_rhoSEXP, SEXP prior_nuSEXP, SEXP prior_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type bfirst(bfirstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type blast(blastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bmax(bmaxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bmin(bminSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nmod(nmodSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type brouting(broutingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_max(mod_maxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type itb(itbSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type itnb(itnbSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type sufI(sufISEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fixed_b(fixed_bSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_eta(prior_etaSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_rho(prior_rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_nu(prior_nuSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_sigma(prior_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_Bayes(a, first, last, bfirst, blast, bmax, bmin, nmod, brouting, mnit, mod_min, mod_max, itb, itnb, sufI, scoretab, b, fixed_b, from, step, ndraws, prior_eta, prior_rho, prior_nu, prior_sigma));
    return rcpp_result_gen;
END_RCPP
}
// ittotmat_mst
arma::mat ittotmat_mst(const arma::vec& b, const arma::ivec& a, const arma::vec& c, arma::ivec& first, arma::ivec& last, const int bmin, const int bmax, const int nmod, const int brouting, arma::ivec& mnit, const arma::ivec& mod_min, const arma::ivec& mod_max);
RcppExport SEXP _dexterMST_ittotmat_mst(SEXP bSEXP, SEXP aSEXP, SEXP cSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP bminSEXP, SEXP bmaxSEXP, SEXP nmodSEXP, SEXP broutingSEXP, SEXP mnitSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const int >::type bmin(bminSEXP);
    Rcpp::traits::input_parameter< const int >::type bmax(bmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nmod(nmodSEXP);
    Rcpp::traits::input_parameter< const int >::type brouting(broutingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type mod_max(mod_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(ittotmat_mst(b, a, c, first, last, bmin, bmax, nmod, brouting, mnit, mod_min, mod_max));
    return rcpp_result_gen;
END_RCPP
}
// elsym_C
arma::vec elsym_C(const int routing, const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, arma::ivec& mod_min, arma::ivec& mod_max, arma::ivec& mnit, const int max_score, const int item1_first, const int aij, const int item2_first, const int akl);
RcppExport SEXP _dexterMST_elsym_C(SEXP routingSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP, SEXP mnitSEXP, SEXP max_scoreSEXP, SEXP item1_firstSEXP, SEXP aijSEXP, SEXP item2_firstSEXP, SEXP aklSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type routing(routingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mod_max(mod_maxSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type item1_first(item1_firstSEXP);
    Rcpp::traits::input_parameter< const int >::type aij(aijSEXP);
    Rcpp::traits::input_parameter< const int >::type item2_first(item2_firstSEXP);
    Rcpp::traits::input_parameter< const int >::type akl(aklSEXP);
    rcpp_result_gen = Rcpp::wrap(elsym_C(routing, b, a, first, last, mod_min, mod_max, mnit, max_score, item1_first, aij, item2_first, akl));
    return rcpp_result_gen;
END_RCPP
}
// prof_enorm
arma::vec prof_enorm(const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, const int routing, arma::ivec& mnit, arma::ivec& mod_min, arma::ivec& mod_max, const int max_score, const arma::ivec& AB);
RcppExport SEXP _dexterMST_prof_enorm(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP routingSEXP, SEXP mnitSEXP, SEXP mod_minSEXP, SEXP mod_maxSEXP, SEXP max_scoreSEXP, SEXP ABSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const int >::type routing(routingSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mnit(mnitSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mod_min(mod_minSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type mod_max(mod_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type AB(ABSEXP);
    rcpp_result_gen = Rcpp::wrap(prof_enorm(b, a, first, last, routing, mnit, mod_min, mod_max, max_score, AB));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dexterMST_fast_factor", (DL_FUNC) &_dexterMST_fast_factor, 2},
    {"_dexterMST_fast_factor_lev", (DL_FUNC) &_dexterMST_fast_factor_lev, 3},
    {"_dexterMST_bid_c", (DL_FUNC) &_dexterMST_bid_c, 4},
    {"_dexterMST_is_person_booklet_sorted", (DL_FUNC) &_dexterMST_is_person_booklet_sorted, 2},
    {"_dexterMST_mutate_booklet_score", (DL_FUNC) &_dexterMST_mutate_booklet_score, 3},
    {"_dexterMST_make_booklets_unsafe", (DL_FUNC) &_dexterMST_make_booklets_unsafe, 8},
    {"_dexterMST_suf_stats_nrm_c", (DL_FUNC) &_dexterMST_suf_stats_nrm_c, 6},
    {"_dexterMST_im_booklet_score", (DL_FUNC) &_dexterMST_im_booklet_score, 2},
    {"_dexterMST_suf_stats_im_c", (DL_FUNC) &_dexterMST_suf_stats_im_c, 5},
    {"_dexterMST_is_connected_C", (DL_FUNC) &_dexterMST_is_connected_C, 1},
    {"_dexterMST_Expect", (DL_FUNC) &_dexterMST_Expect, 12},
    {"_dexterMST_NR", (DL_FUNC) &_dexterMST_NR, 13},
    {"_dexterMST_dirichlet", (DL_FUNC) &_dexterMST_dirichlet, 2},
    {"_dexterMST_calibrate_Bayes", (DL_FUNC) &_dexterMST_calibrate_Bayes, 25},
    {"_dexterMST_ittotmat_mst", (DL_FUNC) &_dexterMST_ittotmat_mst, 12},
    {"_dexterMST_elsym_C", (DL_FUNC) &_dexterMST_elsym_C, 13},
    {"_dexterMST_prof_enorm", (DL_FUNC) &_dexterMST_prof_enorm, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_dexterMST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
