// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// B1_Cpp
double B1_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_B1_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(B1_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// BH2_Cpp
double BH2_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_BH2_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(BH2_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// BHC1_Cpp
double BHC1_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_BHC1_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(BHC1_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// BHC2_Cpp
double BHC2_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_BHC2_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(BHC2_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// BHI_Cpp
double BHI_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_BHI_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(BHI_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// BHK_Cpp
double BHK_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_BHK_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(BHK_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// CM_Cpp
double CM_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_CM_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(CM_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// FM_Cpp
double FM_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_FM_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(FM_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// HM_Cpp
double HM_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_HM_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(HM_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// K2_Cpp
double K2_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_K2_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// K2U_Cpp
double K2U_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_K2U_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(K2U_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// KS_Cpp
double KS_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_KS_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(KS_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// MGG_Cpp
double MGG_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_MGG_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(MGG_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// MI_Cpp
double MI_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_MI_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(MI_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// MOI_Cpp
double MOI_Cpp(const NumericVector& X, double k);
RcppExport SEXP _symmetry_MOI_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MOI_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// MOK_Cpp
double MOK_Cpp(const NumericVector& X, double k);
RcppExport SEXP _symmetry_MOK_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MOK_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// NAC1_Cpp
double NAC1_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_NAC1_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(NAC1_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// NAC2_Cpp
double NAC2_Cpp(const NumericVector& X, double a);
RcppExport SEXP _symmetry_NAC2_Cpp(SEXP XSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(NAC2_Cpp(X, a));
    return rcpp_result_gen;
END_RCPP
}
// NAI_Cpp
double NAI_Cpp(const NumericVector& X, double k);
RcppExport SEXP _symmetry_NAI_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(NAI_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// NAK_Cpp
double NAK_Cpp(const NumericVector& X, double k);
RcppExport SEXP _symmetry_NAK_Cpp(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(NAK_Cpp(X, k));
    return rcpp_result_gen;
END_RCPP
}
// RW_Cpp
double RW_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_RW_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(RW_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// SGN_Cpp
double SGN_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_SGN_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(SGN_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// WCX_Cpp
double WCX_Cpp(const NumericVector& X);
RcppExport SEXP _symmetry_WCX_Cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(WCX_Cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// randomize_sign
NumericVector randomize_sign(const NumericVector& X, double mu);
RcppExport SEXP _symmetry_randomize_sign(SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(randomize_sign(X, mu));
    return rcpp_result_gen;
END_RCPP
}
// reflected_boot
NumericVector reflected_boot(const NumericVector& X, double mu);
RcppExport SEXP _symmetry_reflected_boot(SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(reflected_boot(X, mu));
    return rcpp_result_gen;
END_RCPP
}
// boot_sample
NumericVector boot_sample(const NumericVector& X, double mu_param, int B, std::string null_method, std::string stat, double k, bool known_mean);
RcppExport SEXP _symmetry_boot_sample(SEXP XSEXP, SEXP mu_paramSEXP, SEXP BSEXP, SEXP null_methodSEXP, SEXP statSEXP, SEXP kSEXP, SEXP known_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu_param(mu_paramSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type null_method(null_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type known_mean(known_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sample(X, mu_param, B, null_method, stat, k, known_mean));
    return rcpp_result_gen;
END_RCPP
}
// mn_boot_sample
NumericVector mn_boot_sample(const NumericVector& X, double mu_param, int B, std::string stat, double k, double q, bool known_mean);
RcppExport SEXP _symmetry_mn_boot_sample(SEXP XSEXP, SEXP mu_paramSEXP, SEXP BSEXP, SEXP statSEXP, SEXP kSEXP, SEXP qSEXP, SEXP known_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu_param(mu_paramSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type known_mean(known_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(mn_boot_sample(X, mu_param, B, stat, k, q, known_mean));
    return rcpp_result_gen;
END_RCPP
}
// boot_sample_lm
NumericVector boot_sample_lm(const arma::mat& model_matrix, const NumericVector& fitted, const NumericVector& residuals, int B, std::string null_method, std::string stat, double k);
RcppExport SEXP _symmetry_boot_sample_lm(SEXP model_matrixSEXP, SEXP fittedSEXP, SEXP residualsSEXP, SEXP BSEXP, SEXP null_methodSEXP, SEXP statSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type null_method(null_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sample_lm(model_matrix, fitted, residuals, B, null_method, stat, k));
    return rcpp_result_gen;
END_RCPP
}
// simulate_garch
NumericVector simulate_garch(const NumericVector& resid, const NumericVector& y, const NumericVector& cfit, double omega, const NumericVector& alpha, const NumericVector& beta);
RcppExport SEXP _symmetry_simulate_garch(SEXP residSEXP, SEXP ySEXP, SEXP cfitSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type resid(residSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cfit(cfitSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_garch(resid, y, cfit, omega, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_symmetry_B1_Cpp", (DL_FUNC) &_symmetry_B1_Cpp, 1},
    {"_symmetry_BH2_Cpp", (DL_FUNC) &_symmetry_BH2_Cpp, 1},
    {"_symmetry_BHC1_Cpp", (DL_FUNC) &_symmetry_BHC1_Cpp, 2},
    {"_symmetry_BHC2_Cpp", (DL_FUNC) &_symmetry_BHC2_Cpp, 2},
    {"_symmetry_BHI_Cpp", (DL_FUNC) &_symmetry_BHI_Cpp, 1},
    {"_symmetry_BHK_Cpp", (DL_FUNC) &_symmetry_BHK_Cpp, 1},
    {"_symmetry_CM_Cpp", (DL_FUNC) &_symmetry_CM_Cpp, 1},
    {"_symmetry_FM_Cpp", (DL_FUNC) &_symmetry_FM_Cpp, 1},
    {"_symmetry_HM_Cpp", (DL_FUNC) &_symmetry_HM_Cpp, 2},
    {"_symmetry_K2_Cpp", (DL_FUNC) &_symmetry_K2_Cpp, 1},
    {"_symmetry_K2U_Cpp", (DL_FUNC) &_symmetry_K2U_Cpp, 1},
    {"_symmetry_KS_Cpp", (DL_FUNC) &_symmetry_KS_Cpp, 1},
    {"_symmetry_MGG_Cpp", (DL_FUNC) &_symmetry_MGG_Cpp, 1},
    {"_symmetry_MI_Cpp", (DL_FUNC) &_symmetry_MI_Cpp, 1},
    {"_symmetry_MOI_Cpp", (DL_FUNC) &_symmetry_MOI_Cpp, 2},
    {"_symmetry_MOK_Cpp", (DL_FUNC) &_symmetry_MOK_Cpp, 2},
    {"_symmetry_NAC1_Cpp", (DL_FUNC) &_symmetry_NAC1_Cpp, 2},
    {"_symmetry_NAC2_Cpp", (DL_FUNC) &_symmetry_NAC2_Cpp, 2},
    {"_symmetry_NAI_Cpp", (DL_FUNC) &_symmetry_NAI_Cpp, 2},
    {"_symmetry_NAK_Cpp", (DL_FUNC) &_symmetry_NAK_Cpp, 2},
    {"_symmetry_RW_Cpp", (DL_FUNC) &_symmetry_RW_Cpp, 1},
    {"_symmetry_SGN_Cpp", (DL_FUNC) &_symmetry_SGN_Cpp, 1},
    {"_symmetry_WCX_Cpp", (DL_FUNC) &_symmetry_WCX_Cpp, 1},
    {"_symmetry_randomize_sign", (DL_FUNC) &_symmetry_randomize_sign, 2},
    {"_symmetry_reflected_boot", (DL_FUNC) &_symmetry_reflected_boot, 2},
    {"_symmetry_boot_sample", (DL_FUNC) &_symmetry_boot_sample, 7},
    {"_symmetry_mn_boot_sample", (DL_FUNC) &_symmetry_mn_boot_sample, 7},
    {"_symmetry_boot_sample_lm", (DL_FUNC) &_symmetry_boot_sample_lm, 7},
    {"_symmetry_simulate_garch", (DL_FUNC) &_symmetry_simulate_garch, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_symmetry(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
