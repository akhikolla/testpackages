// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sqp.h"
#include "../inst/include/sqp_types.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dummy
void dummy();
static SEXP _sqp_dummy_try() {
BEGIN_RCPP
    dummy();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _sqp_dummy() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_sqp_dummy_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bfgs_update
void bfgs_update(arma::mat& hessian, arma::vec& old_y, arma::vec& new_y, arma::vec& old_gradient, arma::vec& new_gradient, const bool constraint_adjustment);
RcppExport SEXP _sqp_bfgs_update(SEXP hessianSEXP, SEXP old_ySEXP, SEXP new_ySEXP, SEXP old_gradientSEXP, SEXP new_gradientSEXP, SEXP constraint_adjustmentSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type hessian(hessianSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_y(old_ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type new_y(new_ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type old_gradient(old_gradientSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type new_gradient(new_gradientSEXP);
    Rcpp::traits::input_parameter< const bool >::type constraint_adjustment(constraint_adjustmentSEXP);
    bfgs_update(hessian, old_y, new_y, old_gradient, new_gradient, constraint_adjustment);
    return R_NilValue;
END_RCPP
}
// slacked_dense
Rcpp::List slacked_dense(arma::vec x, arma::mat Q, arma::mat C_eq, arma::mat C_ineq, arma::vec l, const arma::vec& t_eq, arma::vec t_ineq, const double& penalty, const double tol, const unsigned max_iter, int dim_eq, int dim_ineq, int dim_Q, const unsigned solver, const bool fast, const bool all_slack, const bool debug);
RcppExport SEXP _sqp_slacked_dense(SEXP xSEXP, SEXP QSEXP, SEXP C_eqSEXP, SEXP C_ineqSEXP, SEXP lSEXP, SEXP t_eqSEXP, SEXP t_ineqSEXP, SEXP penaltySEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP dim_eqSEXP, SEXP dim_ineqSEXP, SEXP dim_QSEXP, SEXP solverSEXP, SEXP fastSEXP, SEXP all_slackSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_eq(C_eqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_ineq(C_ineqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t_eq(t_eqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_ineq(t_ineqSEXP);
    Rcpp::traits::input_parameter< const double& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type dim_eq(dim_eqSEXP);
    Rcpp::traits::input_parameter< int >::type dim_ineq(dim_ineqSEXP);
    Rcpp::traits::input_parameter< int >::type dim_Q(dim_QSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< const bool >::type fast(fastSEXP);
    Rcpp::traits::input_parameter< const bool >::type all_slack(all_slackSEXP);
    Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(slacked_dense(x, Q, C_eq, C_ineq, l, t_eq, t_ineq, penalty, tol, max_iter, dim_eq, dim_ineq, dim_Q, solver, fast, all_slack, debug));
    return rcpp_result_gen;
END_RCPP
}
// slacked_sparse
Rcpp::List slacked_sparse(arma::vec x, arma::sp_mat Q, arma::sp_mat C_eq, arma::sp_mat C_ineq, arma::vec l, const arma::vec& t_eq, arma::vec t_ineq, const double& penalty, const double tol, const unsigned max_iter, int dim_eq, int dim_ineq, int dim_Q, const bool all_slack, const bool debug);
RcppExport SEXP _sqp_slacked_sparse(SEXP xSEXP, SEXP QSEXP, SEXP C_eqSEXP, SEXP C_ineqSEXP, SEXP lSEXP, SEXP t_eqSEXP, SEXP t_ineqSEXP, SEXP penaltySEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP dim_eqSEXP, SEXP dim_ineqSEXP, SEXP dim_QSEXP, SEXP all_slackSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type C_eq(C_eqSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type C_ineq(C_ineqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t_eq(t_eqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_ineq(t_ineqSEXP);
    Rcpp::traits::input_parameter< const double& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type dim_eq(dim_eqSEXP);
    Rcpp::traits::input_parameter< int >::type dim_ineq(dim_ineqSEXP);
    Rcpp::traits::input_parameter< int >::type dim_Q(dim_QSEXP);
    Rcpp::traits::input_parameter< const bool >::type all_slack(all_slackSEXP);
    Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(slacked_sparse(x, Q, C_eq, C_ineq, l, t_eq, t_ineq, penalty, tol, max_iter, dim_eq, dim_ineq, dim_Q, all_slack, debug));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _sqp_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*dummy)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _sqp_RcppExport_registerCCallable() { 
    R_RegisterCCallable("sqp", "_sqp_dummy", (DL_FUNC)_sqp_dummy_try);
    R_RegisterCCallable("sqp", "_sqp_RcppExport_validate", (DL_FUNC)_sqp_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_sqp_dummy", (DL_FUNC) &_sqp_dummy, 0},
    {"_sqp_bfgs_update", (DL_FUNC) &_sqp_bfgs_update, 6},
    {"_sqp_slacked_dense", (DL_FUNC) &_sqp_slacked_dense, 17},
    {"_sqp_slacked_sparse", (DL_FUNC) &_sqp_slacked_sparse, 15},
    {"_sqp_RcppExport_registerCCallable", (DL_FUNC) &_sqp_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_sqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
