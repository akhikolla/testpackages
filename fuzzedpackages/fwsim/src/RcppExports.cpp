// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "fwsim_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// Cpp_fwpopsim
List Cpp_fwpopsim(int G, IntegerMatrix H0, IntegerVector N0, NumericVector alpha, List mutmodel, bool SNP, IntegerVector save_gs, bool progress, bool trace, bool ensure_children);
RcppExport SEXP _fwsim_Cpp_fwpopsim(SEXP GSEXP, SEXP H0SEXP, SEXP N0SEXP, SEXP alphaSEXP, SEXP mutmodelSEXP, SEXP SNPSEXP, SEXP save_gsSEXP, SEXP progressSEXP, SEXP traceSEXP, SEXP ensure_childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< List >::type mutmodel(mutmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type SNP(SNPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type save_gs(save_gsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type ensure_children(ensure_childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_fwpopsim(G, H0, N0, alpha, mutmodel, SNP, save_gs, progress, trace, ensure_children));
    return rcpp_result_gen;
END_RCPP
}
// Cpp_fwpopsim_fixed
List Cpp_fwpopsim_fixed(int G, IntegerMatrix H0, IntegerVector N0, List mutmodel, bool SNP, IntegerVector save_gs, bool progress, bool trace);
RcppExport SEXP _fwsim_Cpp_fwpopsim_fixed(SEXP GSEXP, SEXP H0SEXP, SEXP N0SEXP, SEXP mutmodelSEXP, SEXP SNPSEXP, SEXP save_gsSEXP, SEXP progressSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< List >::type mutmodel(mutmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type SNP(SNPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type save_gs(save_gsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_fwpopsim_fixed(G, H0, N0, mutmodel, SNP, save_gs, progress, trace));
    return rcpp_result_gen;
END_RCPP
}
// fwpopsim_fixed_genealogy
Rcpp::XPtr<SimulatedGenealogy> fwpopsim_fixed_genealogy(int G, IntegerVector H0, int pop_size, List mutmodel, bool progress, bool trace, bool cleanup_haplotypes, bool cleanup_lineages, bool plot, bool all_pairs, int random_pairs, bool continue_to_one_founder);
RcppExport SEXP _fwsim_fwpopsim_fixed_genealogy(SEXP GSEXP, SEXP H0SEXP, SEXP pop_sizeSEXP, SEXP mutmodelSEXP, SEXP progressSEXP, SEXP traceSEXP, SEXP cleanup_haplotypesSEXP, SEXP cleanup_lineagesSEXP, SEXP plotSEXP, SEXP all_pairsSEXP, SEXP random_pairsSEXP, SEXP continue_to_one_founderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type mutmodel(mutmodelSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type cleanup_haplotypes(cleanup_haplotypesSEXP);
    Rcpp::traits::input_parameter< bool >::type cleanup_lineages(cleanup_lineagesSEXP);
    Rcpp::traits::input_parameter< bool >::type plot(plotSEXP);
    Rcpp::traits::input_parameter< bool >::type all_pairs(all_pairsSEXP);
    Rcpp::traits::input_parameter< int >::type random_pairs(random_pairsSEXP);
    Rcpp::traits::input_parameter< bool >::type continue_to_one_founder(continue_to_one_founderSEXP);
    rcpp_result_gen = Rcpp::wrap(fwpopsim_fixed_genealogy(G, H0, pop_size, mutmodel, progress, trace, cleanup_haplotypes, cleanup_lineages, plot, all_pairs, random_pairs, continue_to_one_founder));
    return rcpp_result_gen;
END_RCPP
}
// print_simulation_info
void print_simulation_info(Rcpp::XPtr<SimulatedGenealogy> object);
RcppExport SEXP _fwsim_print_simulation_info(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SimulatedGenealogy> >::type object(objectSEXP);
    print_simulation_info(object);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fwsim_Cpp_fwpopsim", (DL_FUNC) &_fwsim_Cpp_fwpopsim, 10},
    {"_fwsim_Cpp_fwpopsim_fixed", (DL_FUNC) &_fwsim_Cpp_fwpopsim_fixed, 8},
    {"_fwsim_fwpopsim_fixed_genealogy", (DL_FUNC) &_fwsim_fwpopsim_fixed_genealogy, 12},
    {"_fwsim_print_simulation_info", (DL_FUNC) &_fwsim_print_simulation_info, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fwsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
