####
## TODO
####

1 mcmcSL: better error management than that stupid try()
{
  Why? Because it could be that I forgot an argument for summaries()
  of for simulator() and I don t want the algorithm to just keep going!
}


2 stochOptim simulator: set up simulator that takes as input a matrix of parameters
{
  wraps up the simulator provided by the user so that is it can take a matrix
  as input
}

3 Improve .getCovariance
{
  At the the moment it doesn't check if the hessian is posive definite, maybe
  we could use the checks that we used for the saddlepoint
}

4 Synlik has to support data that come in matrix form
{
  Various simulators (ex: Voles) produce a list of different states, maybe
  we can say that all the algorithms that use object@data should actually use
  object@data["y"]
}

5. In function .updateParams put the maxJump check in C++
{

}









####
## DONE
####

1. stohOptim constraints: impose contraints when simulating paramters from multivariate normal
{
  the constraints come in as a matrix, and we write a Rcpp while() loop, where we keep simulating
  until we get enough values.
}
