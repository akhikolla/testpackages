% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gbp4d_cpp_rd.r
\name{gbp4d_solver_dpp}
\alias{gbp4d_solver_dpp}
\title{gbp4d_solver_dpp}
\usage{
gbp4d_solver_dpp(p, ldhw, m)
}
\arguments{
\item{p}{p profit of it fit into bn <vector>
- cluster w via gbp1d, cluster max(l,d,h) and area via gbp4d_solver_dpp_main_create_p()}

\item{ldhw}{it scales <matrix>
- l, d, h, w it scale along x, y, z and w (weight on separate single dimension) <numeric>}

\item{m}{bn scales <vector>
- l, d, h, w bn scale along x, y, z and w (weight on separate single dimension) <numeric>}
}
\value{
gbp4d
 a gbp4d instantiate with p profit, it item (x, y, z, w, l, d, h, w) position scale matrix, bn bin (l, d, h, w) scale vector,
  k selection, o objective, and ok an indicator of all fit or not.
}
\description{
solve gbp4d via extreme point heuristic and best information score fit strategy.
}
\details{
gbp4d init a profit vector p, a length l, a depth d, a height h, and a weight w, along with
  associate constraints ml, md, mh and mw.
 gbp4d should fit it (l, d, h, w) into bn (ml, md, mh, mw) with w on weight limit constraint
  and l, d, h on geometry intepretation.
 gbp4d solver would solve

   maximize   sum_{j=1}^{n} p_{j} k_{j}

   subject to sum_{j=1}^{n} w_{j} k_{j} leq mw and

              fit (l_{j}, d_{j}, h_{j}) at coordinate (x_{j}, y_{j}, z_{j})
              such that no overlap in ml x md x mh cuboid, j = 1, ......, n

 and instantiate a gbp4d object with a x-axis coordinate vector x, a y-axis coordinate vector y,
  a z-axis coordinate vector z, a selection vector k, and an objective o.
}
\seealso{
Other gbp4d: \code{\link{gbp4d_checkr}},
  \code{\link{gbp4d}}
}

