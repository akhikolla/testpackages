% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gbp1d_cpp_rd.r
\name{gbp1d_solver_dpp}
\alias{gbp1d_solver_dpp}
\title{gbp1d_solver_dpp}
\usage{
gbp1d_solver_dpp(p, w, c)
}
\arguments{
\item{p}{p profit <vector>::<numeric>}

\item{w}{w weight <vector>::<integer>}

\item{c}{c constraint on weight <integer>}
}
\value{
gbp1d
 a gbp1d instantiate with p profit, w weight, c constraint on weight,
  k selection, o objective, and ok an indicator of all fit or not.
}
\description{
solve gbp1d via dynamic programming simple - adagio::knapsnak()
}
\details{
a dynamic programming solver on gbp1d instantiate - knapsack 0-1 problem, see gbp1d.

 gbp1d init a profit vector p, a weight vector w, and a weight constraint c,
 gbp1d solver would solve

    maximize sum_{j=1}^{n} p_{j} x_{j}

  subject to sum_{j=1}^{n} w_{j} x_{j} leq c
             x_{j} in {0, 1}, j = 1, ...., n

 and instantiate a gbp1d object with a selectin vector x and an objective z.

 gbp1d is implemented as rcpp class, an instantiate can be solved by calling
  gbp1d_solver_dpp(p, w, c) and gbp1d_solver_min(p, w, c)
}
\seealso{
Other gbp1d: \code{\link{gbp1d}}
}

