// Generated by rstantools.  Do not edit by hand.

/*
    fishflux is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishflux is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishflux.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_cnpmodelmcmc_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_cnpmodelmcmc");
    reader.add_event(450, 448, "end", "model_cnpmodelmcmc");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
normal_lb_ub_rng(const T0__& mu,
                     const T1__& sigma,
                     const T2__& lb,
                     const T3__& ub, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ p1(DUMMY_VAR__);
        (void) p1;  // dummy to suppress unused var warning
        stan::math::initialize(p1, DUMMY_VAR__);
        stan::math::fill(p1, DUMMY_VAR__);
        stan::math::assign(p1,normal_cdf(lb, mu, sigma));
        current_statement_begin__ = 5;
        local_scalar_t__ p2(DUMMY_VAR__);
        (void) p2;  // dummy to suppress unused var warning
        stan::math::initialize(p2, DUMMY_VAR__);
        stan::math::fill(p2, DUMMY_VAR__);
        stan::math::assign(p2,normal_cdf(ub, mu, sigma));
        current_statement_begin__ = 6;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p1, p2, base_rng__));
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sigma * inv_Phi(u)) + mu));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct normal_lb_ub_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& mu,
                     const T1__& sigma,
                     const T2__& lb,
                     const T3__& ub, RNG& base_rng__, std::ostream* pstream__) const {
        return normal_lb_ub_rng(mu, sigma, lb, ub, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
get_log_sd(const T0__& mu,
               const T1__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        local_scalar_t__ log_sigma(DUMMY_VAR__);
        (void) log_sigma;  // dummy to suppress unused var warning
        stan::math::initialize(log_sigma, DUMMY_VAR__);
        stan::math::fill(log_sigma, DUMMY_VAR__);
        stan::math::assign(log_sigma,stan::math::sqrt(stan::math::log(((pow(sigma, 2) / pow(mu, 2)) + 1))));
        current_statement_begin__ = 12;
        if (as_bool(logical_lte(log_sigma, 0))) {
            current_statement_begin__ = 13;
            stan::math::assign(log_sigma, 0.0000000001);
        }
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_sigma);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_log_sd_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
               const T1__& sigma, std::ostream* pstream__) const {
        return get_log_sd(mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
get_log_mu(const T0__& mu,
               const T1__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        local_scalar_t__ log_sigma(DUMMY_VAR__);
        (void) log_sigma;  // dummy to suppress unused var warning
        stan::math::initialize(log_sigma, DUMMY_VAR__);
        stan::math::fill(log_sigma, DUMMY_VAR__);
        stan::math::assign(log_sigma,stan::math::sqrt(stan::math::log(((pow(sigma, 2) / pow(mu, 2)) + 1))));
        current_statement_begin__ = 20;
        local_scalar_t__ log_mu(DUMMY_VAR__);
        (void) log_mu;  // dummy to suppress unused var warning
        stan::math::initialize(log_mu, DUMMY_VAR__);
        stan::math::fill(log_mu, DUMMY_VAR__);
        stan::math::assign(log_mu,(stan::math::log(mu) - (0.5 * pow(log_sigma, 2))));
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_mu);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_log_mu_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
               const T1__& sigma, std::ostream* pstream__) const {
        return get_log_mu(mu, sigma, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_cnpmodelmcmc
  : public stan::model::model_base_crtp<model_cnpmodelmcmc> {
private:
        double lt_m;
        double ac_m;
        double an_m;
        double ap_m;
        double Dc_m;
        double Dn_m;
        double Dp_m;
        double linf_m;
        double k_m;
        double t0_m;
        double theta_m;
        double r_m;
        double h_m;
        double lwa_m;
        double lwb_m;
        double mdw_m;
        double v_m;
        double F0nz_m;
        double F0pz_m;
        double Qc_m;
        double Qn_m;
        double Qp_m;
        double alpha_m;
        double f0_m;
        double lt_sd;
        double ac_sd;
        double an_sd;
        double ap_sd;
        double Dc_sd;
        double Dn_sd;
        double Dp_sd;
        double linf_sd;
        double k_sd;
        double t0_sd;
        double theta_sd;
        double r_sd;
        double h_sd;
        double lwa_sd;
        double lwb_sd;
        double mdw_sd;
        double v_sd;
        double F0nz_sd;
        double F0pz_sd;
        double Qc_sd;
        double Qn_sd;
        double Qp_sd;
        double alpha_sd;
        double f0_sd;
        double ro_Qc_Qn;
        double ro_Qc_Qp;
        double ro_Qn_Qp;
        double ro_Dc_Dn;
        double ro_Dc_Dp;
        double ro_Dn_Dp;
        double ro_lwa_lwb;
        double ro_alpha_f0;
        double logQc_m;
        double logQc_sd;
        double logQn_m;
        double logQn_sd;
        double logQp_m;
        double logQp_sd;
        double logDc_m;
        double logDc_sd;
        double logDn_m;
        double logDn_sd;
        double logDp_m;
        double logDp_sd;
        double loglwa_m;
        double loglwa_sd;
        double loglwb_m;
        double loglwb_sd;
        double loga_m;
        double loga_sd;
        double logf0_m;
        double logf0_sd;
public:
    model_cnpmodelmcmc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_cnpmodelmcmc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_cnpmodelmcmc_namespace::model_cnpmodelmcmc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "lt_m", "double", context__.to_vec());
            lt_m = double(0);
            vals_r__ = context__.vals_r("lt_m");
            pos__ = 0;
            lt_m = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "ac_m", "double", context__.to_vec());
            ac_m = double(0);
            vals_r__ = context__.vals_r("ac_m");
            pos__ = 0;
            ac_m = vals_r__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "an_m", "double", context__.to_vec());
            an_m = double(0);
            vals_r__ = context__.vals_r("an_m");
            pos__ = 0;
            an_m = vals_r__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "ap_m", "double", context__.to_vec());
            ap_m = double(0);
            vals_r__ = context__.vals_r("ap_m");
            pos__ = 0;
            ap_m = vals_r__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "Dc_m", "double", context__.to_vec());
            Dc_m = double(0);
            vals_r__ = context__.vals_r("Dc_m");
            pos__ = 0;
            Dc_m = vals_r__[pos__++];
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "Dn_m", "double", context__.to_vec());
            Dn_m = double(0);
            vals_r__ = context__.vals_r("Dn_m");
            pos__ = 0;
            Dn_m = vals_r__[pos__++];
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "Dp_m", "double", context__.to_vec());
            Dp_m = double(0);
            vals_r__ = context__.vals_r("Dp_m");
            pos__ = 0;
            Dp_m = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "linf_m", "double", context__.to_vec());
            linf_m = double(0);
            vals_r__ = context__.vals_r("linf_m");
            pos__ = 0;
            linf_m = vals_r__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "k_m", "double", context__.to_vec());
            k_m = double(0);
            vals_r__ = context__.vals_r("k_m");
            pos__ = 0;
            k_m = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "t0_m", "double", context__.to_vec());
            t0_m = double(0);
            vals_r__ = context__.vals_r("t0_m");
            pos__ = 0;
            t0_m = vals_r__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "theta_m", "double", context__.to_vec());
            theta_m = double(0);
            vals_r__ = context__.vals_r("theta_m");
            pos__ = 0;
            theta_m = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "r_m", "double", context__.to_vec());
            r_m = double(0);
            vals_r__ = context__.vals_r("r_m");
            pos__ = 0;
            r_m = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "h_m", "double", context__.to_vec());
            h_m = double(0);
            vals_r__ = context__.vals_r("h_m");
            pos__ = 0;
            h_m = vals_r__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "lwa_m", "double", context__.to_vec());
            lwa_m = double(0);
            vals_r__ = context__.vals_r("lwa_m");
            pos__ = 0;
            lwa_m = vals_r__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "lwb_m", "double", context__.to_vec());
            lwb_m = double(0);
            vals_r__ = context__.vals_r("lwb_m");
            pos__ = 0;
            lwb_m = vals_r__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "mdw_m", "double", context__.to_vec());
            mdw_m = double(0);
            vals_r__ = context__.vals_r("mdw_m");
            pos__ = 0;
            mdw_m = vals_r__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "v_m", "double", context__.to_vec());
            v_m = double(0);
            vals_r__ = context__.vals_r("v_m");
            pos__ = 0;
            v_m = vals_r__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "F0nz_m", "double", context__.to_vec());
            F0nz_m = double(0);
            vals_r__ = context__.vals_r("F0nz_m");
            pos__ = 0;
            F0nz_m = vals_r__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "F0pz_m", "double", context__.to_vec());
            F0pz_m = double(0);
            vals_r__ = context__.vals_r("F0pz_m");
            pos__ = 0;
            F0pz_m = vals_r__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "Qc_m", "double", context__.to_vec());
            Qc_m = double(0);
            vals_r__ = context__.vals_r("Qc_m");
            pos__ = 0;
            Qc_m = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "Qn_m", "double", context__.to_vec());
            Qn_m = double(0);
            vals_r__ = context__.vals_r("Qn_m");
            pos__ = 0;
            Qn_m = vals_r__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "Qp_m", "double", context__.to_vec());
            Qp_m = double(0);
            vals_r__ = context__.vals_r("Qp_m");
            pos__ = 0;
            Qp_m = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "alpha_m", "double", context__.to_vec());
            alpha_m = double(0);
            vals_r__ = context__.vals_r("alpha_m");
            pos__ = 0;
            alpha_m = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "f0_m", "double", context__.to_vec());
            f0_m = double(0);
            vals_r__ = context__.vals_r("f0_m");
            pos__ = 0;
            f0_m = vals_r__[pos__++];
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "lt_sd", "double", context__.to_vec());
            lt_sd = double(0);
            vals_r__ = context__.vals_r("lt_sd");
            pos__ = 0;
            lt_sd = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "ac_sd", "double", context__.to_vec());
            ac_sd = double(0);
            vals_r__ = context__.vals_r("ac_sd");
            pos__ = 0;
            ac_sd = vals_r__[pos__++];
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "an_sd", "double", context__.to_vec());
            an_sd = double(0);
            vals_r__ = context__.vals_r("an_sd");
            pos__ = 0;
            an_sd = vals_r__[pos__++];
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "ap_sd", "double", context__.to_vec());
            ap_sd = double(0);
            vals_r__ = context__.vals_r("ap_sd");
            pos__ = 0;
            ap_sd = vals_r__[pos__++];
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "Dc_sd", "double", context__.to_vec());
            Dc_sd = double(0);
            vals_r__ = context__.vals_r("Dc_sd");
            pos__ = 0;
            Dc_sd = vals_r__[pos__++];
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "Dn_sd", "double", context__.to_vec());
            Dn_sd = double(0);
            vals_r__ = context__.vals_r("Dn_sd");
            pos__ = 0;
            Dn_sd = vals_r__[pos__++];
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "Dp_sd", "double", context__.to_vec());
            Dp_sd = double(0);
            vals_r__ = context__.vals_r("Dp_sd");
            pos__ = 0;
            Dp_sd = vals_r__[pos__++];
            current_statement_begin__ = 67;
            context__.validate_dims("data initialization", "linf_sd", "double", context__.to_vec());
            linf_sd = double(0);
            vals_r__ = context__.vals_r("linf_sd");
            pos__ = 0;
            linf_sd = vals_r__[pos__++];
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "k_sd", "double", context__.to_vec());
            k_sd = double(0);
            vals_r__ = context__.vals_r("k_sd");
            pos__ = 0;
            k_sd = vals_r__[pos__++];
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "t0_sd", "double", context__.to_vec());
            t0_sd = double(0);
            vals_r__ = context__.vals_r("t0_sd");
            pos__ = 0;
            t0_sd = vals_r__[pos__++];
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "theta_sd", "double", context__.to_vec());
            theta_sd = double(0);
            vals_r__ = context__.vals_r("theta_sd");
            pos__ = 0;
            theta_sd = vals_r__[pos__++];
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "r_sd", "double", context__.to_vec());
            r_sd = double(0);
            vals_r__ = context__.vals_r("r_sd");
            pos__ = 0;
            r_sd = vals_r__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "h_sd", "double", context__.to_vec());
            h_sd = double(0);
            vals_r__ = context__.vals_r("h_sd");
            pos__ = 0;
            h_sd = vals_r__[pos__++];
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "lwa_sd", "double", context__.to_vec());
            lwa_sd = double(0);
            vals_r__ = context__.vals_r("lwa_sd");
            pos__ = 0;
            lwa_sd = vals_r__[pos__++];
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "lwb_sd", "double", context__.to_vec());
            lwb_sd = double(0);
            vals_r__ = context__.vals_r("lwb_sd");
            pos__ = 0;
            lwb_sd = vals_r__[pos__++];
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "mdw_sd", "double", context__.to_vec());
            mdw_sd = double(0);
            vals_r__ = context__.vals_r("mdw_sd");
            pos__ = 0;
            mdw_sd = vals_r__[pos__++];
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "v_sd", "double", context__.to_vec());
            v_sd = double(0);
            vals_r__ = context__.vals_r("v_sd");
            pos__ = 0;
            v_sd = vals_r__[pos__++];
            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "F0nz_sd", "double", context__.to_vec());
            F0nz_sd = double(0);
            vals_r__ = context__.vals_r("F0nz_sd");
            pos__ = 0;
            F0nz_sd = vals_r__[pos__++];
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "F0pz_sd", "double", context__.to_vec());
            F0pz_sd = double(0);
            vals_r__ = context__.vals_r("F0pz_sd");
            pos__ = 0;
            F0pz_sd = vals_r__[pos__++];
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "Qc_sd", "double", context__.to_vec());
            Qc_sd = double(0);
            vals_r__ = context__.vals_r("Qc_sd");
            pos__ = 0;
            Qc_sd = vals_r__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "Qn_sd", "double", context__.to_vec());
            Qn_sd = double(0);
            vals_r__ = context__.vals_r("Qn_sd");
            pos__ = 0;
            Qn_sd = vals_r__[pos__++];
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "Qp_sd", "double", context__.to_vec());
            Qp_sd = double(0);
            vals_r__ = context__.vals_r("Qp_sd");
            pos__ = 0;
            Qp_sd = vals_r__[pos__++];
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "alpha_sd", "double", context__.to_vec());
            alpha_sd = double(0);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            alpha_sd = vals_r__[pos__++];
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "f0_sd", "double", context__.to_vec());
            f0_sd = double(0);
            vals_r__ = context__.vals_r("f0_sd");
            pos__ = 0;
            f0_sd = vals_r__[pos__++];
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "ro_Qc_Qn", "double", context__.to_vec());
            ro_Qc_Qn = double(0);
            vals_r__ = context__.vals_r("ro_Qc_Qn");
            pos__ = 0;
            ro_Qc_Qn = vals_r__[pos__++];
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "ro_Qc_Qp", "double", context__.to_vec());
            ro_Qc_Qp = double(0);
            vals_r__ = context__.vals_r("ro_Qc_Qp");
            pos__ = 0;
            ro_Qc_Qp = vals_r__[pos__++];
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "ro_Qn_Qp", "double", context__.to_vec());
            ro_Qn_Qp = double(0);
            vals_r__ = context__.vals_r("ro_Qn_Qp");
            pos__ = 0;
            ro_Qn_Qp = vals_r__[pos__++];
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "ro_Dc_Dn", "double", context__.to_vec());
            ro_Dc_Dn = double(0);
            vals_r__ = context__.vals_r("ro_Dc_Dn");
            pos__ = 0;
            ro_Dc_Dn = vals_r__[pos__++];
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "ro_Dc_Dp", "double", context__.to_vec());
            ro_Dc_Dp = double(0);
            vals_r__ = context__.vals_r("ro_Dc_Dp");
            pos__ = 0;
            ro_Dc_Dp = vals_r__[pos__++];
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "ro_Dn_Dp", "double", context__.to_vec());
            ro_Dn_Dp = double(0);
            vals_r__ = context__.vals_r("ro_Dn_Dp");
            pos__ = 0;
            ro_Dn_Dp = vals_r__[pos__++];
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "ro_lwa_lwb", "double", context__.to_vec());
            ro_lwa_lwb = double(0);
            vals_r__ = context__.vals_r("ro_lwa_lwb");
            pos__ = 0;
            ro_lwa_lwb = vals_r__[pos__++];
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "ro_alpha_f0", "double", context__.to_vec());
            ro_alpha_f0 = double(0);
            vals_r__ = context__.vals_r("ro_alpha_f0");
            pos__ = 0;
            ro_alpha_f0 = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 98;
            logQc_m = double(0);
            stan::math::fill(logQc_m, DUMMY_VAR__);
            stan::math::assign(logQc_m,get_log_mu(Qc_m, Qc_sd, pstream__));
            current_statement_begin__ = 99;
            logQc_sd = double(0);
            stan::math::fill(logQc_sd, DUMMY_VAR__);
            stan::math::assign(logQc_sd,get_log_sd(Qc_m, Qc_sd, pstream__));
            current_statement_begin__ = 100;
            logQn_m = double(0);
            stan::math::fill(logQn_m, DUMMY_VAR__);
            stan::math::assign(logQn_m,get_log_mu(Qn_m, Qn_sd, pstream__));
            current_statement_begin__ = 101;
            logQn_sd = double(0);
            stan::math::fill(logQn_sd, DUMMY_VAR__);
            stan::math::assign(logQn_sd,get_log_sd(Qn_m, Qn_sd, pstream__));
            current_statement_begin__ = 102;
            logQp_m = double(0);
            stan::math::fill(logQp_m, DUMMY_VAR__);
            stan::math::assign(logQp_m,get_log_mu(Qp_m, Qp_sd, pstream__));
            current_statement_begin__ = 103;
            logQp_sd = double(0);
            stan::math::fill(logQp_sd, DUMMY_VAR__);
            stan::math::assign(logQp_sd,get_log_sd(Qp_m, Qp_sd, pstream__));
            current_statement_begin__ = 105;
            logDc_m = double(0);
            stan::math::fill(logDc_m, DUMMY_VAR__);
            stan::math::assign(logDc_m,get_log_mu(Dc_m, Dc_sd, pstream__));
            current_statement_begin__ = 106;
            logDc_sd = double(0);
            stan::math::fill(logDc_sd, DUMMY_VAR__);
            stan::math::assign(logDc_sd,get_log_sd(Dc_m, Dc_sd, pstream__));
            current_statement_begin__ = 107;
            logDn_m = double(0);
            stan::math::fill(logDn_m, DUMMY_VAR__);
            stan::math::assign(logDn_m,get_log_mu(Dn_m, Dn_sd, pstream__));
            current_statement_begin__ = 108;
            logDn_sd = double(0);
            stan::math::fill(logDn_sd, DUMMY_VAR__);
            stan::math::assign(logDn_sd,get_log_sd(Dn_m, Dn_sd, pstream__));
            current_statement_begin__ = 109;
            logDp_m = double(0);
            stan::math::fill(logDp_m, DUMMY_VAR__);
            stan::math::assign(logDp_m,get_log_mu(Dp_m, Dp_sd, pstream__));
            current_statement_begin__ = 110;
            logDp_sd = double(0);
            stan::math::fill(logDp_sd, DUMMY_VAR__);
            stan::math::assign(logDp_sd,get_log_sd(Dp_m, Dp_sd, pstream__));
            current_statement_begin__ = 112;
            loglwa_m = double(0);
            stan::math::fill(loglwa_m, DUMMY_VAR__);
            stan::math::assign(loglwa_m,get_log_mu(lwa_m, lwa_sd, pstream__));
            current_statement_begin__ = 113;
            loglwa_sd = double(0);
            stan::math::fill(loglwa_sd, DUMMY_VAR__);
            stan::math::assign(loglwa_sd,get_log_sd(lwa_m, lwa_sd, pstream__));
            current_statement_begin__ = 114;
            loglwb_m = double(0);
            stan::math::fill(loglwb_m, DUMMY_VAR__);
            stan::math::assign(loglwb_m,get_log_mu(lwb_m, lwb_sd, pstream__));
            current_statement_begin__ = 115;
            loglwb_sd = double(0);
            stan::math::fill(loglwb_sd, DUMMY_VAR__);
            stan::math::assign(loglwb_sd,get_log_sd(lwb_m, lwb_sd, pstream__));
            current_statement_begin__ = 117;
            loga_m = double(0);
            stan::math::fill(loga_m, DUMMY_VAR__);
            stan::math::assign(loga_m,get_log_mu(alpha_m, alpha_sd, pstream__));
            current_statement_begin__ = 118;
            loga_sd = double(0);
            stan::math::fill(loga_sd, DUMMY_VAR__);
            stan::math::assign(loga_sd,get_log_sd(alpha_m, alpha_sd, pstream__));
            current_statement_begin__ = 119;
            logf0_m = double(0);
            stan::math::fill(logf0_m, DUMMY_VAR__);
            stan::math::assign(logf0_m,get_log_mu(f0_m, f0_sd, pstream__));
            current_statement_begin__ = 120;
            logf0_sd = double(0);
            stan::math::fill(logf0_sd, DUMMY_VAR__);
            stan::math::assign(logf0_sd,get_log_sd(f0_m, f0_sd, pstream__));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_cnpmodelmcmc() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lt");
        names__.push_back("ac");
        names__.push_back("an");
        names__.push_back("ap");
        names__.push_back("Dc");
        names__.push_back("Dn");
        names__.push_back("Dp");
        names__.push_back("linf");
        names__.push_back("k");
        names__.push_back("t0");
        names__.push_back("theta");
        names__.push_back("r");
        names__.push_back("h");
        names__.push_back("lwa");
        names__.push_back("lwb");
        names__.push_back("mdw");
        names__.push_back("v");
        names__.push_back("F0nz");
        names__.push_back("F0pz");
        names__.push_back("Qc");
        names__.push_back("Qn");
        names__.push_back("Qp");
        names__.push_back("alpha");
        names__.push_back("f0");
        names__.push_back("m_max");
        names__.push_back("l1");
        names__.push_back("a1");
        names__.push_back("a2");
        names__.push_back("l2");
        names__.push_back("w1");
        names__.push_back("w2");
        names__.push_back("wd1");
        names__.push_back("wd2");
        names__.push_back("Wd");
        names__.push_back("Ww");
        names__.push_back("Qc1");
        names__.push_back("Qn1");
        names__.push_back("Qp1");
        names__.push_back("Gc");
        names__.push_back("Gn");
        names__.push_back("Gp");
        names__.push_back("Em");
        names__.push_back("gC_to_J");
        names__.push_back("Ec");
        names__.push_back("Bm");
        names__.push_back("B_main");
        names__.push_back("B_syn");
        names__.push_back("B_rest");
        names__.push_back("B_tot");
        names__.push_back("F0c");
        names__.push_back("F0n");
        names__.push_back("F0p");
        names__.push_back("Sn");
        names__.push_back("Sp");
        names__.push_back("Sc");
        names__.push_back("st_np");
        names__.push_back("st_cn");
        names__.push_back("st_cp");
        names__.push_back("stf_np");
        names__.push_back("stf_cn");
        names__.push_back("stf_cp");
        names__.push_back("lim");
        names__.push_back("Ic");
        names__.push_back("In");
        names__.push_back("Ip");
        names__.push_back("Wc");
        names__.push_back("Wn");
        names__.push_back("Wp");
        names__.push_back("Fn");
        names__.push_back("Fp");
        names__.push_back("Fc");
        names__.push_back("Frn");
        names__.push_back("Frp");
        names__.push_back("IN");
        names__.push_back("IN_cnp");
        names__.push_back("Sigma_Qcnp");
        names__.push_back("Sigma_Dcnp");
        names__.push_back("Sigma_lw");
        names__.push_back("Sigma_ab");
        names__.push_back("mu_Qcnp");
        names__.push_back("mu_Dcnp");
        names__.push_back("mu_lw");
        names__.push_back("mu_ab");
        names__.push_back("Qcnp");
        names__.push_back("Dcnp");
        names__.push_back("lw");
        names__.push_back("ab");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_cnpmodelmcmc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 132;
            double lt;
            (void) lt;  // dummy to suppress unused var warning
            stan::math::initialize(lt, DUMMY_VAR__);
            stan::math::fill(lt, DUMMY_VAR__);
            current_statement_begin__ = 133;
            double ac;
            (void) ac;  // dummy to suppress unused var warning
            stan::math::initialize(ac, DUMMY_VAR__);
            stan::math::fill(ac, DUMMY_VAR__);
            current_statement_begin__ = 134;
            double an;
            (void) an;  // dummy to suppress unused var warning
            stan::math::initialize(an, DUMMY_VAR__);
            stan::math::fill(an, DUMMY_VAR__);
            current_statement_begin__ = 135;
            double ap;
            (void) ap;  // dummy to suppress unused var warning
            stan::math::initialize(ap, DUMMY_VAR__);
            stan::math::fill(ap, DUMMY_VAR__);
            current_statement_begin__ = 136;
            double Dc;
            (void) Dc;  // dummy to suppress unused var warning
            stan::math::initialize(Dc, DUMMY_VAR__);
            stan::math::fill(Dc, DUMMY_VAR__);
            current_statement_begin__ = 137;
            double Dn;
            (void) Dn;  // dummy to suppress unused var warning
            stan::math::initialize(Dn, DUMMY_VAR__);
            stan::math::fill(Dn, DUMMY_VAR__);
            current_statement_begin__ = 138;
            double Dp;
            (void) Dp;  // dummy to suppress unused var warning
            stan::math::initialize(Dp, DUMMY_VAR__);
            stan::math::fill(Dp, DUMMY_VAR__);
            current_statement_begin__ = 139;
            double linf;
            (void) linf;  // dummy to suppress unused var warning
            stan::math::initialize(linf, DUMMY_VAR__);
            stan::math::fill(linf, DUMMY_VAR__);
            current_statement_begin__ = 140;
            double k;
            (void) k;  // dummy to suppress unused var warning
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 141;
            double t0;
            (void) t0;  // dummy to suppress unused var warning
            stan::math::initialize(t0, DUMMY_VAR__);
            stan::math::fill(t0, DUMMY_VAR__);
            current_statement_begin__ = 142;
            double theta;
            (void) theta;  // dummy to suppress unused var warning
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 143;
            double r;
            (void) r;  // dummy to suppress unused var warning
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            current_statement_begin__ = 144;
            double h;
            (void) h;  // dummy to suppress unused var warning
            stan::math::initialize(h, DUMMY_VAR__);
            stan::math::fill(h, DUMMY_VAR__);
            current_statement_begin__ = 145;
            double lwa;
            (void) lwa;  // dummy to suppress unused var warning
            stan::math::initialize(lwa, DUMMY_VAR__);
            stan::math::fill(lwa, DUMMY_VAR__);
            current_statement_begin__ = 146;
            double lwb;
            (void) lwb;  // dummy to suppress unused var warning
            stan::math::initialize(lwb, DUMMY_VAR__);
            stan::math::fill(lwb, DUMMY_VAR__);
            current_statement_begin__ = 147;
            double mdw;
            (void) mdw;  // dummy to suppress unused var warning
            stan::math::initialize(mdw, DUMMY_VAR__);
            stan::math::fill(mdw, DUMMY_VAR__);
            current_statement_begin__ = 148;
            double v;
            (void) v;  // dummy to suppress unused var warning
            stan::math::initialize(v, DUMMY_VAR__);
            stan::math::fill(v, DUMMY_VAR__);
            current_statement_begin__ = 149;
            double F0nz;
            (void) F0nz;  // dummy to suppress unused var warning
            stan::math::initialize(F0nz, DUMMY_VAR__);
            stan::math::fill(F0nz, DUMMY_VAR__);
            current_statement_begin__ = 150;
            double F0pz;
            (void) F0pz;  // dummy to suppress unused var warning
            stan::math::initialize(F0pz, DUMMY_VAR__);
            stan::math::fill(F0pz, DUMMY_VAR__);
            current_statement_begin__ = 151;
            double Qc;
            (void) Qc;  // dummy to suppress unused var warning
            stan::math::initialize(Qc, DUMMY_VAR__);
            stan::math::fill(Qc, DUMMY_VAR__);
            current_statement_begin__ = 152;
            double Qn;
            (void) Qn;  // dummy to suppress unused var warning
            stan::math::initialize(Qn, DUMMY_VAR__);
            stan::math::fill(Qn, DUMMY_VAR__);
            current_statement_begin__ = 153;
            double Qp;
            (void) Qp;  // dummy to suppress unused var warning
            stan::math::initialize(Qp, DUMMY_VAR__);
            stan::math::fill(Qp, DUMMY_VAR__);
            current_statement_begin__ = 154;
            double alpha;
            (void) alpha;  // dummy to suppress unused var warning
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 155;
            double f0;
            (void) f0;  // dummy to suppress unused var warning
            stan::math::initialize(f0, DUMMY_VAR__);
            stan::math::fill(f0, DUMMY_VAR__);
            current_statement_begin__ = 159;
            double m_max;
            (void) m_max;  // dummy to suppress unused var warning
            stan::math::initialize(m_max, DUMMY_VAR__);
            stan::math::fill(m_max, DUMMY_VAR__);
            current_statement_begin__ = 160;
            double l1;
            (void) l1;  // dummy to suppress unused var warning
            stan::math::initialize(l1, DUMMY_VAR__);
            stan::math::fill(l1, DUMMY_VAR__);
            current_statement_begin__ = 161;
            double a1;
            (void) a1;  // dummy to suppress unused var warning
            stan::math::initialize(a1, DUMMY_VAR__);
            stan::math::fill(a1, DUMMY_VAR__);
            current_statement_begin__ = 162;
            double a2;
            (void) a2;  // dummy to suppress unused var warning
            stan::math::initialize(a2, DUMMY_VAR__);
            stan::math::fill(a2, DUMMY_VAR__);
            current_statement_begin__ = 163;
            double l2;
            (void) l2;  // dummy to suppress unused var warning
            stan::math::initialize(l2, DUMMY_VAR__);
            stan::math::fill(l2, DUMMY_VAR__);
            current_statement_begin__ = 164;
            double w1;
            (void) w1;  // dummy to suppress unused var warning
            stan::math::initialize(w1, DUMMY_VAR__);
            stan::math::fill(w1, DUMMY_VAR__);
            current_statement_begin__ = 165;
            double w2;
            (void) w2;  // dummy to suppress unused var warning
            stan::math::initialize(w2, DUMMY_VAR__);
            stan::math::fill(w2, DUMMY_VAR__);
            current_statement_begin__ = 166;
            double wd1;
            (void) wd1;  // dummy to suppress unused var warning
            stan::math::initialize(wd1, DUMMY_VAR__);
            stan::math::fill(wd1, DUMMY_VAR__);
            current_statement_begin__ = 167;
            double wd2;
            (void) wd2;  // dummy to suppress unused var warning
            stan::math::initialize(wd2, DUMMY_VAR__);
            stan::math::fill(wd2, DUMMY_VAR__);
            current_statement_begin__ = 168;
            double Wd;
            (void) Wd;  // dummy to suppress unused var warning
            stan::math::initialize(Wd, DUMMY_VAR__);
            stan::math::fill(Wd, DUMMY_VAR__);
            current_statement_begin__ = 169;
            double Ww;
            (void) Ww;  // dummy to suppress unused var warning
            stan::math::initialize(Ww, DUMMY_VAR__);
            stan::math::fill(Ww, DUMMY_VAR__);
            current_statement_begin__ = 171;
            double Qc1;
            (void) Qc1;  // dummy to suppress unused var warning
            stan::math::initialize(Qc1, DUMMY_VAR__);
            stan::math::fill(Qc1, DUMMY_VAR__);
            current_statement_begin__ = 172;
            double Qn1;
            (void) Qn1;  // dummy to suppress unused var warning
            stan::math::initialize(Qn1, DUMMY_VAR__);
            stan::math::fill(Qn1, DUMMY_VAR__);
            current_statement_begin__ = 173;
            double Qp1;
            (void) Qp1;  // dummy to suppress unused var warning
            stan::math::initialize(Qp1, DUMMY_VAR__);
            stan::math::fill(Qp1, DUMMY_VAR__);
            current_statement_begin__ = 174;
            double Gc;
            (void) Gc;  // dummy to suppress unused var warning
            stan::math::initialize(Gc, DUMMY_VAR__);
            stan::math::fill(Gc, DUMMY_VAR__);
            current_statement_begin__ = 175;
            double Gn;
            (void) Gn;  // dummy to suppress unused var warning
            stan::math::initialize(Gn, DUMMY_VAR__);
            stan::math::fill(Gn, DUMMY_VAR__);
            current_statement_begin__ = 176;
            double Gp;
            (void) Gp;  // dummy to suppress unused var warning
            stan::math::initialize(Gp, DUMMY_VAR__);
            stan::math::fill(Gp, DUMMY_VAR__);
            current_statement_begin__ = 178;
            double Em;
            (void) Em;  // dummy to suppress unused var warning
            stan::math::initialize(Em, DUMMY_VAR__);
            stan::math::fill(Em, DUMMY_VAR__);
            current_statement_begin__ = 179;
            double gC_to_J;
            (void) gC_to_J;  // dummy to suppress unused var warning
            stan::math::initialize(gC_to_J, DUMMY_VAR__);
            stan::math::fill(gC_to_J, DUMMY_VAR__);
            current_statement_begin__ = 180;
            double Ec;
            (void) Ec;  // dummy to suppress unused var warning
            stan::math::initialize(Ec, DUMMY_VAR__);
            stan::math::fill(Ec, DUMMY_VAR__);
            current_statement_begin__ = 181;
            double Bm;
            (void) Bm;  // dummy to suppress unused var warning
            stan::math::initialize(Bm, DUMMY_VAR__);
            stan::math::fill(Bm, DUMMY_VAR__);
            current_statement_begin__ = 182;
            double B_main;
            (void) B_main;  // dummy to suppress unused var warning
            stan::math::initialize(B_main, DUMMY_VAR__);
            stan::math::fill(B_main, DUMMY_VAR__);
            current_statement_begin__ = 183;
            double B_syn;
            (void) B_syn;  // dummy to suppress unused var warning
            stan::math::initialize(B_syn, DUMMY_VAR__);
            stan::math::fill(B_syn, DUMMY_VAR__);
            current_statement_begin__ = 184;
            double B_rest;
            (void) B_rest;  // dummy to suppress unused var warning
            stan::math::initialize(B_rest, DUMMY_VAR__);
            stan::math::fill(B_rest, DUMMY_VAR__);
            current_statement_begin__ = 185;
            double B_tot;
            (void) B_tot;  // dummy to suppress unused var warning
            stan::math::initialize(B_tot, DUMMY_VAR__);
            stan::math::fill(B_tot, DUMMY_VAR__);
            current_statement_begin__ = 186;
            double F0c;
            (void) F0c;  // dummy to suppress unused var warning
            stan::math::initialize(F0c, DUMMY_VAR__);
            stan::math::fill(F0c, DUMMY_VAR__);
            current_statement_begin__ = 188;
            double F0n;
            (void) F0n;  // dummy to suppress unused var warning
            stan::math::initialize(F0n, DUMMY_VAR__);
            stan::math::fill(F0n, DUMMY_VAR__);
            current_statement_begin__ = 189;
            double F0p;
            (void) F0p;  // dummy to suppress unused var warning
            stan::math::initialize(F0p, DUMMY_VAR__);
            stan::math::fill(F0p, DUMMY_VAR__);
            current_statement_begin__ = 191;
            double Sn;
            (void) Sn;  // dummy to suppress unused var warning
            stan::math::initialize(Sn, DUMMY_VAR__);
            stan::math::fill(Sn, DUMMY_VAR__);
            current_statement_begin__ = 192;
            double Sp;
            (void) Sp;  // dummy to suppress unused var warning
            stan::math::initialize(Sp, DUMMY_VAR__);
            stan::math::fill(Sp, DUMMY_VAR__);
            current_statement_begin__ = 193;
            double Sc;
            (void) Sc;  // dummy to suppress unused var warning
            stan::math::initialize(Sc, DUMMY_VAR__);
            stan::math::fill(Sc, DUMMY_VAR__);
            current_statement_begin__ = 196;
            double st_np;
            (void) st_np;  // dummy to suppress unused var warning
            stan::math::initialize(st_np, DUMMY_VAR__);
            stan::math::fill(st_np, DUMMY_VAR__);
            current_statement_begin__ = 197;
            double st_cn;
            (void) st_cn;  // dummy to suppress unused var warning
            stan::math::initialize(st_cn, DUMMY_VAR__);
            stan::math::fill(st_cn, DUMMY_VAR__);
            current_statement_begin__ = 198;
            double st_cp;
            (void) st_cp;  // dummy to suppress unused var warning
            stan::math::initialize(st_cp, DUMMY_VAR__);
            stan::math::fill(st_cp, DUMMY_VAR__);
            current_statement_begin__ = 201;
            double stf_np;
            (void) stf_np;  // dummy to suppress unused var warning
            stan::math::initialize(stf_np, DUMMY_VAR__);
            stan::math::fill(stf_np, DUMMY_VAR__);
            current_statement_begin__ = 202;
            double stf_cn;
            (void) stf_cn;  // dummy to suppress unused var warning
            stan::math::initialize(stf_cn, DUMMY_VAR__);
            stan::math::fill(stf_cn, DUMMY_VAR__);
            current_statement_begin__ = 203;
            double stf_cp;
            (void) stf_cp;  // dummy to suppress unused var warning
            stan::math::initialize(stf_cp, DUMMY_VAR__);
            stan::math::fill(stf_cp, DUMMY_VAR__);
            current_statement_begin__ = 205;
            int lim;
            (void) lim;  // dummy to suppress unused var warning
            stan::math::fill(lim, std::numeric_limits<int>::min());
            current_statement_begin__ = 208;
            double Ic;
            (void) Ic;  // dummy to suppress unused var warning
            stan::math::initialize(Ic, DUMMY_VAR__);
            stan::math::fill(Ic, DUMMY_VAR__);
            current_statement_begin__ = 209;
            double In;
            (void) In;  // dummy to suppress unused var warning
            stan::math::initialize(In, DUMMY_VAR__);
            stan::math::fill(In, DUMMY_VAR__);
            current_statement_begin__ = 210;
            double Ip;
            (void) Ip;  // dummy to suppress unused var warning
            stan::math::initialize(Ip, DUMMY_VAR__);
            stan::math::fill(Ip, DUMMY_VAR__);
            current_statement_begin__ = 212;
            double Wc;
            (void) Wc;  // dummy to suppress unused var warning
            stan::math::initialize(Wc, DUMMY_VAR__);
            stan::math::fill(Wc, DUMMY_VAR__);
            current_statement_begin__ = 213;
            double Wn;
            (void) Wn;  // dummy to suppress unused var warning
            stan::math::initialize(Wn, DUMMY_VAR__);
            stan::math::fill(Wn, DUMMY_VAR__);
            current_statement_begin__ = 214;
            double Wp;
            (void) Wp;  // dummy to suppress unused var warning
            stan::math::initialize(Wp, DUMMY_VAR__);
            stan::math::fill(Wp, DUMMY_VAR__);
            current_statement_begin__ = 216;
            double Fn;
            (void) Fn;  // dummy to suppress unused var warning
            stan::math::initialize(Fn, DUMMY_VAR__);
            stan::math::fill(Fn, DUMMY_VAR__);
            current_statement_begin__ = 217;
            double Fp;
            (void) Fp;  // dummy to suppress unused var warning
            stan::math::initialize(Fp, DUMMY_VAR__);
            stan::math::fill(Fp, DUMMY_VAR__);
            current_statement_begin__ = 219;
            double Fc;
            (void) Fc;  // dummy to suppress unused var warning
            stan::math::initialize(Fc, DUMMY_VAR__);
            stan::math::fill(Fc, DUMMY_VAR__);
            current_statement_begin__ = 221;
            double Frn;
            (void) Frn;  // dummy to suppress unused var warning
            stan::math::initialize(Frn, DUMMY_VAR__);
            stan::math::fill(Frn, DUMMY_VAR__);
            current_statement_begin__ = 222;
            double Frp;
            (void) Frp;  // dummy to suppress unused var warning
            stan::math::initialize(Frp, DUMMY_VAR__);
            stan::math::fill(Frp, DUMMY_VAR__);
            current_statement_begin__ = 224;
            double IN;
            (void) IN;  // dummy to suppress unused var warning
            stan::math::initialize(IN, DUMMY_VAR__);
            stan::math::fill(IN, DUMMY_VAR__);
            current_statement_begin__ = 225;
            double IN_cnp;
            (void) IN_cnp;  // dummy to suppress unused var warning
            stan::math::initialize(IN_cnp, DUMMY_VAR__);
            stan::math::fill(IN_cnp, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("Sigma_Qcnp", "3", 3);
            validate_non_negative_index("Sigma_Qcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma_Qcnp(3, 3);
            stan::math::initialize(Sigma_Qcnp, DUMMY_VAR__);
            stan::math::fill(Sigma_Qcnp, DUMMY_VAR__);
            current_statement_begin__ = 231;
            validate_non_negative_index("Sigma_Dcnp", "3", 3);
            validate_non_negative_index("Sigma_Dcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma_Dcnp(3, 3);
            stan::math::initialize(Sigma_Dcnp, DUMMY_VAR__);
            stan::math::fill(Sigma_Dcnp, DUMMY_VAR__);
            current_statement_begin__ = 232;
            validate_non_negative_index("Sigma_lw", "2", 2);
            validate_non_negative_index("Sigma_lw", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma_lw(2, 2);
            stan::math::initialize(Sigma_lw, DUMMY_VAR__);
            stan::math::fill(Sigma_lw, DUMMY_VAR__);
            current_statement_begin__ = 233;
            validate_non_negative_index("Sigma_ab", "2", 2);
            validate_non_negative_index("Sigma_ab", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma_ab(2, 2);
            stan::math::initialize(Sigma_ab, DUMMY_VAR__);
            stan::math::fill(Sigma_ab, DUMMY_VAR__);
            current_statement_begin__ = 235;
            validate_non_negative_index("mu_Qcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_Qcnp(3);
            stan::math::initialize(mu_Qcnp, DUMMY_VAR__);
            stan::math::fill(mu_Qcnp, DUMMY_VAR__);
            current_statement_begin__ = 236;
            validate_non_negative_index("mu_Dcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_Dcnp(3);
            stan::math::initialize(mu_Dcnp, DUMMY_VAR__);
            stan::math::fill(mu_Dcnp, DUMMY_VAR__);
            current_statement_begin__ = 237;
            validate_non_negative_index("mu_lw", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_lw(2);
            stan::math::initialize(mu_lw, DUMMY_VAR__);
            stan::math::fill(mu_lw, DUMMY_VAR__);
            current_statement_begin__ = 238;
            validate_non_negative_index("mu_ab", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_ab(2);
            stan::math::initialize(mu_ab, DUMMY_VAR__);
            stan::math::fill(mu_ab, DUMMY_VAR__);
            current_statement_begin__ = 241;
            validate_non_negative_index("Qcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Qcnp(3);
            stan::math::initialize(Qcnp, DUMMY_VAR__);
            stan::math::fill(Qcnp, DUMMY_VAR__);
            current_statement_begin__ = 242;
            validate_non_negative_index("Dcnp", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Dcnp(3);
            stan::math::initialize(Dcnp, DUMMY_VAR__);
            stan::math::fill(Dcnp, DUMMY_VAR__);
            current_statement_begin__ = 243;
            validate_non_negative_index("lw", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lw(2);
            stan::math::initialize(lw, DUMMY_VAR__);
            stan::math::fill(lw, DUMMY_VAR__);
            current_statement_begin__ = 244;
            validate_non_negative_index("ab", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ab(2);
            stan::math::initialize(ab, DUMMY_VAR__);
            stan::math::fill(ab, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 247;
            stan::model::assign(mu_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        logQc_m, 
                        "assigning variable mu_Qcnp");
            current_statement_begin__ = 248;
            stan::model::assign(mu_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        logQn_m, 
                        "assigning variable mu_Qcnp");
            current_statement_begin__ = 249;
            stan::model::assign(mu_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        logQp_m, 
                        "assigning variable mu_Qcnp");
            current_statement_begin__ = 251;
            stan::model::assign(mu_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        logDc_m, 
                        "assigning variable mu_Dcnp");
            current_statement_begin__ = 252;
            stan::model::assign(mu_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        logDn_m, 
                        "assigning variable mu_Dcnp");
            current_statement_begin__ = 253;
            stan::model::assign(mu_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        logDp_m, 
                        "assigning variable mu_Dcnp");
            current_statement_begin__ = 255;
            stan::model::assign(mu_lw, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        loglwa_m, 
                        "assigning variable mu_lw");
            current_statement_begin__ = 256;
            stan::model::assign(mu_lw, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        loglwb_m, 
                        "assigning variable mu_lw");
            current_statement_begin__ = 258;
            stan::model::assign(mu_ab, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        loga_m, 
                        "assigning variable mu_ab");
            current_statement_begin__ = 259;
            stan::model::assign(mu_ab, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        logf0_m, 
                        "assigning variable mu_ab");
            current_statement_begin__ = 262;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        pow(logQc_sd, 2), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 263;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        pow(logQn_sd, 2), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 264;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        pow(logQp_sd, 2), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 265;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((logQc_sd * logQn_sd) * ro_Qc_Qn), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 266;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((logQc_sd * logQn_sd) * ro_Qc_Qn), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 267;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        ((logQc_sd * logQp_sd) * ro_Qc_Qp), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 268;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((logQc_sd * logQp_sd) * ro_Qc_Qp), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 269;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        ((logQn_sd * logQp_sd) * ro_Qn_Qp), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 270;
            stan::model::assign(Sigma_Qcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((logQn_sd * logQp_sd) * ro_Qn_Qp), 
                        "assigning variable Sigma_Qcnp");
            current_statement_begin__ = 272;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        pow(logDc_sd, 2), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 273;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        pow(logDn_sd, 2), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 274;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        pow(logDp_sd, 2), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 275;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((logDc_sd * logDn_sd) * ro_Dc_Dn), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 276;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((logDc_sd * logDn_sd) * ro_Dc_Dn), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 277;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        ((logDc_sd * logDp_sd) * ro_Dc_Dp), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 278;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((logDc_sd * logDp_sd) * ro_Dc_Dp), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 279;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        ((logDn_sd * logDp_sd) * ro_Dn_Dp), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 280;
            stan::model::assign(Sigma_Dcnp, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((logDn_sd * logDp_sd) * ro_Dn_Dp), 
                        "assigning variable Sigma_Dcnp");
            current_statement_begin__ = 282;
            stan::model::assign(Sigma_lw, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        pow(loglwa_sd, 2), 
                        "assigning variable Sigma_lw");
            current_statement_begin__ = 283;
            stan::model::assign(Sigma_lw, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        pow(loglwb_sd, 2), 
                        "assigning variable Sigma_lw");
            current_statement_begin__ = 284;
            stan::model::assign(Sigma_lw, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((loglwa_sd * loglwb_sd) * ro_lwa_lwb), 
                        "assigning variable Sigma_lw");
            current_statement_begin__ = 285;
            stan::model::assign(Sigma_lw, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((loglwa_sd * loglwb_sd) * ro_lwa_lwb), 
                        "assigning variable Sigma_lw");
            current_statement_begin__ = 287;
            stan::model::assign(Sigma_ab, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        pow(loga_sd, 2), 
                        "assigning variable Sigma_ab");
            current_statement_begin__ = 288;
            stan::model::assign(Sigma_ab, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        pow(logf0_sd, 2), 
                        "assigning variable Sigma_ab");
            current_statement_begin__ = 289;
            stan::model::assign(Sigma_ab, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((loga_sd * logf0_sd) * ro_alpha_f0), 
                        "assigning variable Sigma_ab");
            current_statement_begin__ = 290;
            stan::model::assign(Sigma_ab, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((loga_sd * logf0_sd) * ro_alpha_f0), 
                        "assigning variable Sigma_ab");
            current_statement_begin__ = 293;
            stan::math::assign(Qcnp, multi_normal_rng(mu_Qcnp, Sigma_Qcnp, base_rng__));
            current_statement_begin__ = 294;
            stan::math::assign(Dcnp, multi_normal_rng(mu_Dcnp, Sigma_Dcnp, base_rng__));
            current_statement_begin__ = 295;
            stan::math::assign(lw, multi_normal_rng(mu_lw, Sigma_lw, base_rng__));
            current_statement_begin__ = 296;
            stan::math::assign(ab, multi_normal_rng(mu_ab, Sigma_ab, base_rng__));
            current_statement_begin__ = 300;
            stan::math::assign(Qc, stan::math::exp(get_base1(Qcnp, 1, "Qcnp", 1)));
            current_statement_begin__ = 301;
            stan::math::assign(Qn, stan::math::exp(get_base1(Qcnp, 2, "Qcnp", 1)));
            current_statement_begin__ = 302;
            stan::math::assign(Qp, stan::math::exp(get_base1(Qcnp, 3, "Qcnp", 1)));
            current_statement_begin__ = 304;
            stan::math::assign(Dc, stan::math::exp(get_base1(Dcnp, 1, "Dcnp", 1)));
            current_statement_begin__ = 305;
            stan::math::assign(Dn, stan::math::exp(get_base1(Dcnp, 2, "Dcnp", 1)));
            current_statement_begin__ = 306;
            stan::math::assign(Dp, stan::math::exp(get_base1(Dcnp, 3, "Dcnp", 1)));
            current_statement_begin__ = 308;
            stan::math::assign(lwa, stan::math::exp(get_base1(lw, 1, "lw", 1)));
            current_statement_begin__ = 309;
            stan::math::assign(lwb, stan::math::exp(get_base1(lw, 2, "lw", 1)));
            current_statement_begin__ = 311;
            stan::math::assign(alpha, stan::math::exp(get_base1(ab, 1, "ab", 1)));
            current_statement_begin__ = 312;
            stan::math::assign(f0, stan::math::exp(get_base1(ab, 2, "ab", 1)));
            current_statement_begin__ = 316;
            stan::math::assign(lt, normal_lb_ub_rng(lt_m, lt_sd, 0.5, 1000, base_rng__, pstream__));
            current_statement_begin__ = 317;
            stan::math::assign(ac, normal_lb_ub_rng(ac_m, ac_sd, 0.0001, 1, base_rng__, pstream__));
            current_statement_begin__ = 318;
            stan::math::assign(an, normal_lb_ub_rng(an_m, an_sd, 0.0001, 1, base_rng__, pstream__));
            current_statement_begin__ = 319;
            stan::math::assign(ap, normal_lb_ub_rng(ap_m, ap_sd, 0.0001, 1, base_rng__, pstream__));
            current_statement_begin__ = 320;
            stan::math::assign(linf, normal_lb_ub_rng(linf_m, linf_sd, 1, 1000, base_rng__, pstream__));
            current_statement_begin__ = 321;
            stan::math::assign(k, normal_lb_ub_rng(k_m, k_sd, 0.0001, 3, base_rng__, pstream__));
            current_statement_begin__ = 322;
            stan::math::assign(t0, normal_rng(t0_m, t0_sd, base_rng__));
            current_statement_begin__ = 323;
            stan::math::assign(theta, normal_lb_ub_rng(theta_m, theta_sd, 0.1, 6, base_rng__, pstream__));
            current_statement_begin__ = 324;
            stan::math::assign(r, normal_lb_ub_rng(r_m, r_sd, 0.001, 8, base_rng__, pstream__));
            current_statement_begin__ = 325;
            stan::math::assign(h, normal_lb_ub_rng(h_m, h_sd, 1, 5, base_rng__, pstream__));
            current_statement_begin__ = 326;
            stan::math::assign(mdw, normal_lb_ub_rng(mdw_m, mdw_sd, 0.001, 1, base_rng__, pstream__));
            current_statement_begin__ = 327;
            stan::math::assign(v, normal_rng(v_m, v_sd, base_rng__));
            current_statement_begin__ = 328;
            stan::math::assign(F0nz, normal_lb_ub_rng(F0nz_m, F0nz_sd, 0.000000000000001, 0.1, base_rng__, pstream__));
            current_statement_begin__ = 329;
            stan::math::assign(F0pz, normal_lb_ub_rng(F0pz_m, F0pz_sd, 0.000000000000001, 0.1, base_rng__, pstream__));
            current_statement_begin__ = 333;
            stan::math::assign(m_max, (lwa * pow(linf, lwb)));
            current_statement_begin__ = 335;
            stan::math::assign(l1, lt);
            current_statement_begin__ = 336;
            stan::math::assign(w1, (lwa * pow(l1, lwb)));
            current_statement_begin__ = 337;
            stan::math::assign(wd1, (w1 * mdw));
            current_statement_begin__ = 341;
            if (as_bool(logical_lt(lt, linf))) {
                current_statement_begin__ = 342;
                stan::math::assign(a1, ((stan::math::log((1.0 - (l1 / linf))) / -(k)) + t0));
                current_statement_begin__ = 343;
                stan::math::assign(a2, (a1 + (1.0 / 365)));
                current_statement_begin__ = 344;
                stan::math::assign(l2, (linf * (1.0 - stan::math::exp((-(k) * (a2 - t0))))));
                current_statement_begin__ = 345;
                stan::math::assign(w2, (lwa * pow(l2, lwb)));
                current_statement_begin__ = 346;
                stan::math::assign(wd2, (w2 * mdw));
                current_statement_begin__ = 347;
                stan::math::assign(Wd, (wd2 - wd1));
                current_statement_begin__ = 348;
                stan::math::assign(Ww, (w2 - w1));
            }
            current_statement_begin__ = 350;
            if (as_bool(logical_gte(lt, linf))) {
                current_statement_begin__ = 352;
                stan::math::assign(a1, 100);
                current_statement_begin__ = 353;
                stan::math::assign(a2, a1);
                current_statement_begin__ = 354;
                stan::math::assign(l2, l1);
                current_statement_begin__ = 355;
                stan::math::assign(w2, w1);
                current_statement_begin__ = 356;
                stan::math::assign(wd2, wd1);
                current_statement_begin__ = 357;
                stan::math::assign(Wd, 0);
                current_statement_begin__ = 358;
                stan::math::assign(Ww, 0);
            }
            current_statement_begin__ = 361;
            stan::math::assign(Qc1, ((Qc * wd1) / 100));
            current_statement_begin__ = 362;
            stan::math::assign(Qn1, ((Qn * wd1) / 100));
            current_statement_begin__ = 363;
            stan::math::assign(Qp1, ((Qp * wd1) / 100));
            current_statement_begin__ = 364;
            stan::math::assign(Gc, ((Qc * Wd) / 100));
            current_statement_begin__ = 365;
            stan::math::assign(Gn, ((Qn * Wd) / 100));
            current_statement_begin__ = 366;
            stan::math::assign(Gp, ((Qp * Wd) / 100));
            current_statement_begin__ = 370;
            stan::math::assign(Em, stan::math::exp((((4.38 + (0.1032 * stan::math::log(v))) + (0.73 * stan::math::log(h))) + (0.41 * stan::math::log((r + 1.0))))));
            current_statement_begin__ = 372;
            stan::math::assign(gC_to_J, 39e3);
            current_statement_begin__ = 373;
            stan::math::assign(Ec, 24e3);
            current_statement_begin__ = 374;
            stan::math::assign(Bm, ((f0 * gC_to_J) * pow(m_max, (alpha - 1.0))));
            current_statement_begin__ = 375;
            stan::math::assign(B_main, (Bm * w1));
            current_statement_begin__ = 376;
            stan::math::assign(B_syn, (Em * Ww));
            current_statement_begin__ = 377;
            stan::math::assign(B_rest, (B_main + B_syn));
            current_statement_begin__ = 378;
            stan::math::assign(B_tot, (B_rest * theta));
            current_statement_begin__ = 379;
            stan::math::assign(F0c, (B_tot / gC_to_J));
            current_statement_begin__ = 383;
            stan::math::assign(F0n, (F0nz * Qn1));
            current_statement_begin__ = 384;
            stan::math::assign(F0p, (F0pz * Qp1));
            current_statement_begin__ = 387;
            stan::math::assign(Sn, ((Gn + F0n) / an));
            current_statement_begin__ = 388;
            stan::math::assign(Sp, ((Gp + F0p) / ap));
            current_statement_begin__ = 389;
            stan::math::assign(Sc, ((Gc + F0c) / ac));
            current_statement_begin__ = 393;
            stan::math::assign(st_np, (Sn / Sp));
            current_statement_begin__ = 394;
            stan::math::assign(st_cn, (Sc / Sn));
            current_statement_begin__ = 395;
            stan::math::assign(st_cp, (Sc / Sp));
            current_statement_begin__ = 398;
            stan::math::assign(stf_np, (Dn / Dp));
            current_statement_begin__ = 399;
            stan::math::assign(stf_cn, (Dc / Dn));
            current_statement_begin__ = 400;
            stan::math::assign(stf_cp, (Dc / Dp));
            current_statement_begin__ = 404;
            if (as_bool((primitive_value(logical_gt(st_cn, stf_cn)) && primitive_value(logical_gt(st_cp, stf_cp))))) {
                current_statement_begin__ = 405;
                stan::math::assign(lim, 1);
            } else if (as_bool((primitive_value(logical_lt(st_cn, stf_cn)) && primitive_value(logical_gt(st_np, stf_np))))) {
                current_statement_begin__ = 407;
                stan::math::assign(lim, 2);
            } else {
                current_statement_begin__ = 409;
                stan::math::assign(lim, 3);
            }
            current_statement_begin__ = 414;
            if (as_bool(logical_eq(lim, 3))) {
                current_statement_begin__ = 415;
                stan::math::assign(Ip, Sp);
                current_statement_begin__ = 416;
                stan::math::assign(In, (Ip * stf_np));
                current_statement_begin__ = 417;
                stan::math::assign(Ic, (Ip * stf_cp));
            } else if (as_bool(logical_eq(lim, 2))) {
                current_statement_begin__ = 419;
                stan::math::assign(In, Sn);
                current_statement_begin__ = 420;
                stan::math::assign(Ip, (In / stf_np));
                current_statement_begin__ = 421;
                stan::math::assign(Ic, (In * stf_cn));
            } else {
                current_statement_begin__ = 423;
                stan::math::assign(Ic, Sc);
                current_statement_begin__ = 424;
                stan::math::assign(Ip, (Ic / stf_cp));
                current_statement_begin__ = 425;
                stan::math::assign(In, (Ic / stf_cn));
            }
            current_statement_begin__ = 429;
            stan::math::assign(Wc, (Ic * (1 - ac)));
            current_statement_begin__ = 430;
            stan::math::assign(Wn, (In * (1 - an)));
            current_statement_begin__ = 431;
            stan::math::assign(Wp, (Ip * (1 - ap)));
            current_statement_begin__ = 434;
            stan::math::assign(Fn, ((In - Wn) - Gn));
            current_statement_begin__ = 435;
            stan::math::assign(Fp, ((Ip - Wp) - Gp));
            current_statement_begin__ = 438;
            stan::math::assign(Fc, ((Ic - Wc) - Gc));
            current_statement_begin__ = 441;
            stan::math::assign(Frn, (Fn - F0n));
            current_statement_begin__ = 442;
            stan::math::assign(Frp, (Fp - F0p));
            current_statement_begin__ = 445;
            stan::math::assign(IN, ((Ic * 100) / Dc));
            current_statement_begin__ = 446;
            stan::math::assign(IN_cnp, ((Ic + In) + Ip));
            // validate, write generated quantities
            current_statement_begin__ = 132;
            check_greater_or_equal(function__, "lt", lt, 0.001);
            vars__.push_back(lt);
            current_statement_begin__ = 133;
            check_greater_or_equal(function__, "ac", ac, 0);
            vars__.push_back(ac);
            current_statement_begin__ = 134;
            check_greater_or_equal(function__, "an", an, 0);
            vars__.push_back(an);
            current_statement_begin__ = 135;
            check_greater_or_equal(function__, "ap", ap, 0);
            vars__.push_back(ap);
            current_statement_begin__ = 136;
            check_greater_or_equal(function__, "Dc", Dc, 0);
            vars__.push_back(Dc);
            current_statement_begin__ = 137;
            check_greater_or_equal(function__, "Dn", Dn, 0);
            vars__.push_back(Dn);
            current_statement_begin__ = 138;
            check_greater_or_equal(function__, "Dp", Dp, 0);
            vars__.push_back(Dp);
            current_statement_begin__ = 139;
            check_greater_or_equal(function__, "linf", linf, 0);
            vars__.push_back(linf);
            current_statement_begin__ = 140;
            check_greater_or_equal(function__, "k", k, 0);
            vars__.push_back(k);
            current_statement_begin__ = 141;
            vars__.push_back(t0);
            current_statement_begin__ = 142;
            check_greater_or_equal(function__, "theta", theta, 0);
            check_less_or_equal(function__, "theta", theta, 10);
            vars__.push_back(theta);
            current_statement_begin__ = 143;
            check_greater_or_equal(function__, "r", r, 0);
            vars__.push_back(r);
            current_statement_begin__ = 144;
            check_greater_or_equal(function__, "h", h, 0);
            vars__.push_back(h);
            current_statement_begin__ = 145;
            check_greater_or_equal(function__, "lwa", lwa, 0);
            vars__.push_back(lwa);
            current_statement_begin__ = 146;
            check_greater_or_equal(function__, "lwb", lwb, 0);
            vars__.push_back(lwb);
            current_statement_begin__ = 147;
            check_greater_or_equal(function__, "mdw", mdw, 0);
            vars__.push_back(mdw);
            current_statement_begin__ = 148;
            check_greater_or_equal(function__, "v", v, 0);
            vars__.push_back(v);
            current_statement_begin__ = 149;
            check_greater_or_equal(function__, "F0nz", F0nz, 0);
            vars__.push_back(F0nz);
            current_statement_begin__ = 150;
            check_greater_or_equal(function__, "F0pz", F0pz, 0);
            vars__.push_back(F0pz);
            current_statement_begin__ = 151;
            check_greater_or_equal(function__, "Qc", Qc, 0);
            vars__.push_back(Qc);
            current_statement_begin__ = 152;
            check_greater_or_equal(function__, "Qn", Qn, 0);
            vars__.push_back(Qn);
            current_statement_begin__ = 153;
            check_greater_or_equal(function__, "Qp", Qp, 0);
            vars__.push_back(Qp);
            current_statement_begin__ = 154;
            check_greater_or_equal(function__, "alpha", alpha, 0);
            vars__.push_back(alpha);
            current_statement_begin__ = 155;
            check_greater_or_equal(function__, "f0", f0, 0);
            vars__.push_back(f0);
            current_statement_begin__ = 159;
            check_greater_or_equal(function__, "m_max", m_max, 0);
            vars__.push_back(m_max);
            current_statement_begin__ = 160;
            vars__.push_back(l1);
            current_statement_begin__ = 161;
            vars__.push_back(a1);
            current_statement_begin__ = 162;
            vars__.push_back(a2);
            current_statement_begin__ = 163;
            vars__.push_back(l2);
            current_statement_begin__ = 164;
            vars__.push_back(w1);
            current_statement_begin__ = 165;
            vars__.push_back(w2);
            current_statement_begin__ = 166;
            vars__.push_back(wd1);
            current_statement_begin__ = 167;
            vars__.push_back(wd2);
            current_statement_begin__ = 168;
            vars__.push_back(Wd);
            current_statement_begin__ = 169;
            vars__.push_back(Ww);
            current_statement_begin__ = 171;
            vars__.push_back(Qc1);
            current_statement_begin__ = 172;
            vars__.push_back(Qn1);
            current_statement_begin__ = 173;
            vars__.push_back(Qp1);
            current_statement_begin__ = 174;
            vars__.push_back(Gc);
            current_statement_begin__ = 175;
            vars__.push_back(Gn);
            current_statement_begin__ = 176;
            vars__.push_back(Gp);
            current_statement_begin__ = 178;
            vars__.push_back(Em);
            current_statement_begin__ = 179;
            vars__.push_back(gC_to_J);
            current_statement_begin__ = 180;
            vars__.push_back(Ec);
            current_statement_begin__ = 181;
            vars__.push_back(Bm);
            current_statement_begin__ = 182;
            vars__.push_back(B_main);
            current_statement_begin__ = 183;
            vars__.push_back(B_syn);
            current_statement_begin__ = 184;
            vars__.push_back(B_rest);
            current_statement_begin__ = 185;
            vars__.push_back(B_tot);
            current_statement_begin__ = 186;
            vars__.push_back(F0c);
            current_statement_begin__ = 188;
            vars__.push_back(F0n);
            current_statement_begin__ = 189;
            vars__.push_back(F0p);
            current_statement_begin__ = 191;
            vars__.push_back(Sn);
            current_statement_begin__ = 192;
            vars__.push_back(Sp);
            current_statement_begin__ = 193;
            vars__.push_back(Sc);
            current_statement_begin__ = 196;
            vars__.push_back(st_np);
            current_statement_begin__ = 197;
            vars__.push_back(st_cn);
            current_statement_begin__ = 198;
            vars__.push_back(st_cp);
            current_statement_begin__ = 201;
            vars__.push_back(stf_np);
            current_statement_begin__ = 202;
            vars__.push_back(stf_cn);
            current_statement_begin__ = 203;
            vars__.push_back(stf_cp);
            current_statement_begin__ = 205;
            vars__.push_back(lim);
            current_statement_begin__ = 208;
            vars__.push_back(Ic);
            current_statement_begin__ = 209;
            vars__.push_back(In);
            current_statement_begin__ = 210;
            vars__.push_back(Ip);
            current_statement_begin__ = 212;
            vars__.push_back(Wc);
            current_statement_begin__ = 213;
            vars__.push_back(Wn);
            current_statement_begin__ = 214;
            vars__.push_back(Wp);
            current_statement_begin__ = 216;
            vars__.push_back(Fn);
            current_statement_begin__ = 217;
            vars__.push_back(Fp);
            current_statement_begin__ = 219;
            vars__.push_back(Fc);
            current_statement_begin__ = 221;
            vars__.push_back(Frn);
            current_statement_begin__ = 222;
            vars__.push_back(Frp);
            current_statement_begin__ = 224;
            vars__.push_back(IN);
            current_statement_begin__ = 225;
            vars__.push_back(IN_cnp);
            current_statement_begin__ = 230;
            size_t Sigma_Qcnp_j_2_max__ = 3;
            size_t Sigma_Qcnp_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < Sigma_Qcnp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_Qcnp_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma_Qcnp(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 231;
            size_t Sigma_Dcnp_j_2_max__ = 3;
            size_t Sigma_Dcnp_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < Sigma_Dcnp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_Dcnp_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma_Dcnp(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 232;
            size_t Sigma_lw_j_2_max__ = 2;
            size_t Sigma_lw_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < Sigma_lw_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_lw_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma_lw(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 233;
            size_t Sigma_ab_j_2_max__ = 2;
            size_t Sigma_ab_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < Sigma_ab_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_ab_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma_ab(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 235;
            size_t mu_Qcnp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < mu_Qcnp_j_1_max__; ++j_1__) {
                vars__.push_back(mu_Qcnp(j_1__));
            }
            current_statement_begin__ = 236;
            size_t mu_Dcnp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < mu_Dcnp_j_1_max__; ++j_1__) {
                vars__.push_back(mu_Dcnp(j_1__));
            }
            current_statement_begin__ = 237;
            size_t mu_lw_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < mu_lw_j_1_max__; ++j_1__) {
                vars__.push_back(mu_lw(j_1__));
            }
            current_statement_begin__ = 238;
            size_t mu_ab_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < mu_ab_j_1_max__; ++j_1__) {
                vars__.push_back(mu_ab(j_1__));
            }
            current_statement_begin__ = 241;
            size_t Qcnp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < Qcnp_j_1_max__; ++j_1__) {
                vars__.push_back(Qcnp(j_1__));
            }
            current_statement_begin__ = 242;
            size_t Dcnp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < Dcnp_j_1_max__; ++j_1__) {
                vars__.push_back(Dcnp(j_1__));
            }
            current_statement_begin__ = 243;
            size_t lw_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < lw_j_1_max__; ++j_1__) {
                vars__.push_back(lw(j_1__));
            }
            current_statement_begin__ = 244;
            size_t ab_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < ab_j_1_max__; ++j_1__) {
                vars__.push_back(ab(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_cnpmodelmcmc";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ac";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "an";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ap";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwa";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mdw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0nz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0pz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ww";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qn1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qp1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Em";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gC_to_J";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ec";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_main";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_rest";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_tot";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lim";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ic";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "In";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ip";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Frn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Frp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN_cnp";
        param_names__.push_back(param_name_stream__.str());
        size_t Sigma_Qcnp_j_2_max__ = 3;
        size_t Sigma_Qcnp_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < Sigma_Qcnp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_Qcnp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_Qcnp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_Dcnp_j_2_max__ = 3;
        size_t Sigma_Dcnp_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < Sigma_Dcnp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_Dcnp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_Dcnp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_lw_j_2_max__ = 2;
        size_t Sigma_lw_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Sigma_lw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_lw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_lw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_ab_j_2_max__ = 2;
        size_t Sigma_ab_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Sigma_ab_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_ab_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_ab" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_Qcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < mu_Qcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_Qcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_Dcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < mu_Dcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_Dcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_lw_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mu_lw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_lw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_ab_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mu_ab_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_ab" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Qcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < Qcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Qcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Dcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < Dcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Dcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lw_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ab_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < ab_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ab" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ac";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "an";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ap";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Dp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "linf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwa";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lwb";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mdw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0nz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0pz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "m_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "wd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ww";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qn1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Qp1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Gp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Em";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gC_to_J";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ec";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Bm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_main";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_rest";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B_tot";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "F0p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Sc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "st_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_np";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "stf_cp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lim";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ic";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "In";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Ip";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Wp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Fc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Frn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Frp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "IN_cnp";
        param_names__.push_back(param_name_stream__.str());
        size_t Sigma_Qcnp_j_2_max__ = 3;
        size_t Sigma_Qcnp_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < Sigma_Qcnp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_Qcnp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_Qcnp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_Dcnp_j_2_max__ = 3;
        size_t Sigma_Dcnp_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < Sigma_Dcnp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_Dcnp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_Dcnp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_lw_j_2_max__ = 2;
        size_t Sigma_lw_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Sigma_lw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_lw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_lw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sigma_ab_j_2_max__ = 2;
        size_t Sigma_ab_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < Sigma_ab_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_ab_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma_ab" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_Qcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < mu_Qcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_Qcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_Dcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < mu_Dcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_Dcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_lw_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mu_lw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_lw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_ab_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mu_ab_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_ab" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Qcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < Qcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Qcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Dcnp_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < Dcnp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Dcnp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lw_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ab_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < ab_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ab" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_cnpmodelmcmc_namespace::model_cnpmodelmcmc stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
