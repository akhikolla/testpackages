// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compare_files
bool compare_files(std::string expected, std::string test);
RcppExport SEXP _vdiffr_compare_files(SEXP expectedSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type expected(expectedSEXP);
    Rcpp::traits::input_parameter< std::string >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_files(expected, test));
    return rcpp_result_gen;
END_RCPP
}
// svglite_
bool svglite_(std::string file, std::string bg, double width, double height, double pointsize, bool standalone, Rcpp::List aliases);
RcppExport SEXP _vdiffr_svglite_(SEXP fileSEXP, SEXP bgSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP pointsizeSEXP, SEXP standaloneSEXP, SEXP aliasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    Rcpp::traits::input_parameter< double >::type pointsize(pointsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type standalone(standaloneSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type aliases(aliasesSEXP);
    rcpp_result_gen = Rcpp::wrap(svglite_(file, bg, width, height, pointsize, standalone, aliases));
    return rcpp_result_gen;
END_RCPP
}
// svgstring_
Rcpp::XPtr<std::stringstream> svgstring_(Rcpp::Environment env, std::string bg, double width, double height, double pointsize, bool standalone, Rcpp::List aliases);
RcppExport SEXP _vdiffr_svgstring_(SEXP envSEXP, SEXP bgSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP pointsizeSEXP, SEXP standaloneSEXP, SEXP aliasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< std::string >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    Rcpp::traits::input_parameter< double >::type pointsize(pointsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type standalone(standaloneSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type aliases(aliasesSEXP);
    rcpp_result_gen = Rcpp::wrap(svgstring_(env, bg, width, height, pointsize, standalone, aliases));
    return rcpp_result_gen;
END_RCPP
}
// get_svg_content
std::string get_svg_content(Rcpp::XPtr<std::stringstream> p);
RcppExport SEXP _vdiffr_get_svg_content(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stringstream> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(get_svg_content(p));
    return rcpp_result_gen;
END_RCPP
}
// library_load
SEXP library_load();
RcppExport SEXP _vdiffr_library_load() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(library_load());
    return rcpp_result_gen;
END_RCPP
}
// test_string_width
SEXP test_string_width(SEXP string, SEXP font_size, SEXP font_file);
RcppExport SEXP _vdiffr_test_string_width(SEXP stringSEXP, SEXP font_sizeSEXP, SEXP font_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type font_size(font_sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type font_file(font_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(test_string_width(string, font_size, font_file));
    return rcpp_result_gen;
END_RCPP
}
// test_string_info
SEXP test_string_info(SEXP string, SEXP font_size, SEXP font_file);
RcppExport SEXP _vdiffr_test_string_info(SEXP stringSEXP, SEXP font_sizeSEXP, SEXP font_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type font_size(font_sizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type font_file(font_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(test_string_info(string, font_size, font_file));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vdiffr_compare_files", (DL_FUNC) &_vdiffr_compare_files, 2},
    {"_vdiffr_svglite_", (DL_FUNC) &_vdiffr_svglite_, 7},
    {"_vdiffr_svgstring_", (DL_FUNC) &_vdiffr_svgstring_, 7},
    {"_vdiffr_get_svg_content", (DL_FUNC) &_vdiffr_get_svg_content, 1},
    {"_vdiffr_library_load", (DL_FUNC) &_vdiffr_library_load, 0},
    {"_vdiffr_test_string_width", (DL_FUNC) &_vdiffr_test_string_width, 3},
    {"_vdiffr_test_string_info", (DL_FUNC) &_vdiffr_test_string_info, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_vdiffr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
