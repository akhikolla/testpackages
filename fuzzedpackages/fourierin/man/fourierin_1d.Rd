% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fourierin.R
\name{fourierin_1d}
\alias{fourierin_1d}
\title{Univariate Fourier integrals}
\usage{
fourierin_1d(f, lower_int, upper_int, lower_eval = NULL,
  upper_eval = NULL, const_adj, freq_adj, resolution = NULL,
  eval_grid = NULL, use_fft = TRUE)
}
\arguments{
\item{f}{function or a vector of size m. If a function is
provided, it must be able to be evaluated at vectors. If a
vector of values is provided, such evaluations must have been
obtained on a regular grid and the Fourier integral is faster
is m is a power of 2.}

\item{lower_int}{Lower integration limit(s).}

\item{upper_int}{Upper integration limit(s).}

\item{lower_eval}{Lower evaluation limit(s). It can be NULL if an
evaluation grid is provided.}

\item{upper_eval}{Upper evaluation limit(s). It can be NULL if an
evaluation grid is provided.}

\item{const_adj}{Factor related to adjust definition of Fourier
transform. It is usually equal to 0, -1 or 1.}

\item{freq_adj}{Constant to adjust the exponent on the definition
of the Fourier transform. It is usually equal to 1, -1, 2pi or
-2pi.}

\item{resolution}{A vector of integers (faster if powers of two)
determining the resolution of the evaluation grid. Not
required if f is a vector.}

\item{eval_grid}{Optional matrix with d columns with the points
where the Fourier integral will be evaluated. If it is
provided, the FFT will not be used.}

\item{use_fft}{Logical value specifying whether the FFT will be
used.}
}
\value{
If w is given, only the values of the Fourier integral are
    returned, otherwise, a list with the elements \item{w}{A vector
    of size m where the integral was computed.}  \item{values}{A
    complex vector of size m with the values of the integral}
}
\description{
It computes Fourier integrals of functions of one and two
variables on a regular grid.
}
\details{
See vignette for more detailed examples.
}
\examples{
##--- Example 1 ---------------------------------------------------
##--- Recovering std. normal from its characteristic function -----
library(fourierin)

#' Function to to be used in integrand
myfun <- function(t) exp(-t^2/2)

                                        # Compute Foueien integral
out <- fourierin_1d(f = myfun,
                    lower_int = -5, upper_int = 5,
                    lower_eval = -3, upper_eval = 3,
                    const_adj = -1, freq_adj = -1,
                    resolution = 64)

## Extract grid and values
grid <- out$w
values <- Re(out$values)

plot(grid, values, type = "l", col = 3)
lines(grid, dnorm(grid), col = 4)

##--- Example 2 -----------------------------------------------
##--- Computing characteristic function of a gamma r. v. ------

library(fourierin)

## Function to to be used in integrand
myfun <- function(t) dgamma(t, shape, rate)

## Compute integral
shape <- 5
rate <- 3
out <- fourierin_1d(f = myfun, lower_int = 0, upper_int = 6,
                    lower_eval = -4, upper_eval = 4,
                    const_adj = 1, freq_adj = 1, resolution = 64)

grid <- out$w                           # Extract grid
re_values <- Re(out$values)             # Real values
im_values <- Im(out$values)             # Imag values

                                     # Now compute the real and
                                     # imaginary true values of the
                                        # characteric function.
true_cf <- function(t, shape, rate) (1 - 1i*t/rate)^-shape
true_re <- Re(true_cf(grid, shape, rate))
true_im <- Im(true_cf(grid, shape, rate))

                                     # Compare them. We can see a
                                     # slight discrepancy on the
                                     # tails, but that is fixed
                                     # when resulution is
                                     # increased.
plot(grid, re_values, type = "l", col = 3)
lines(grid, true_re, col = 4)

                                        # Same here
plot(grid, im_values, type = "l", col = 3)
lines(grid, true_im, col = 4)
}
