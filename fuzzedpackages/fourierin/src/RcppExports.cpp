// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fourierin.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// fourierin_1d_cpp
arma::cx_vec fourierin_1d_cpp(const arma::vec& f, double a, double b, double c, double d, double r, double s);
static SEXP _fourierin_fourierin_1d_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_1d_cpp(f, a, b, c, d, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_1d_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_1d_cpp_try(fSEXP, aSEXP, bSEXP, cSEXP, dSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_1d_nonregular_cpp
arma::cx_vec fourierin_1d_nonregular_cpp(const arma::vec& f, double a, double b, const arma::vec& w, int resolution, double r, double s);
static SEXP _fourierin_fourierin_1d_nonregular_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_1d_nonregular_cpp(f, a, b, w, resolution, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_1d_nonregular_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_1d_nonregular_cpp_try(fSEXP, aSEXP, bSEXP, wSEXP, resolutionSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_2d_cpp
arma::cx_mat fourierin_2d_cpp(const arma::mat& f, const arma::vec& a, const arma::vec& b, const arma::vec& c, const arma::vec& d, double r, double s);
static SEXP _fourierin_fourierin_2d_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_2d_cpp(f, a, b, c, d, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_2d_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_2d_cpp_try(fSEXP, aSEXP, bSEXP, cSEXP, dSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_2d_nonregular_cpp
arma::cx_mat fourierin_2d_nonregular_cpp(const arma::mat& f, const arma::vec& a, const arma::vec& b, const arma::mat& w, const arma::vec& resolution, double r, double s);
static SEXP _fourierin_fourierin_2d_nonregular_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_2d_nonregular_cpp(f, a, b, w, resolution, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_2d_nonregular_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_2d_nonregular_cpp_try(fSEXP, aSEXP, bSEXP, wSEXP, resolutionSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_cx_1d_cpp
arma::cx_vec fourierin_cx_1d_cpp(const arma::cx_vec& f, double a, double b, double c, double d, double r, double s);
static SEXP _fourierin_fourierin_cx_1d_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_cx_1d_cpp(f, a, b, c, d, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_cx_1d_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_cx_1d_cpp_try(fSEXP, aSEXP, bSEXP, cSEXP, dSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_cx_1d_nonregular_cpp
arma::cx_vec fourierin_cx_1d_nonregular_cpp(const arma::cx_vec& f, double a, double b, const arma::vec& w, int resolution, double r, double s);
static SEXP _fourierin_fourierin_cx_1d_nonregular_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_cx_1d_nonregular_cpp(f, a, b, w, resolution, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_cx_1d_nonregular_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_cx_1d_nonregular_cpp_try(fSEXP, aSEXP, bSEXP, wSEXP, resolutionSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_cx_2d_cpp
arma::cx_mat fourierin_cx_2d_cpp(const arma::cx_mat& f, const arma::vec& a, const arma::vec& b, const arma::vec& c, const arma::vec& d, double r, double s);
static SEXP _fourierin_fourierin_cx_2d_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_cx_2d_cpp(f, a, b, c, d, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_cx_2d_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_cx_2d_cpp_try(fSEXP, aSEXP, bSEXP, cSEXP, dSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fourierin_cx_2d_nonregular_cpp
arma::cx_mat fourierin_cx_2d_nonregular_cpp(const arma::cx_mat& f, const arma::vec& a, const arma::vec& b, const arma::mat& w, const arma::vec& resolution, double r, double s);
static SEXP _fourierin_fourierin_cx_2d_nonregular_cpp_try(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(fourierin_cx_2d_nonregular_cpp(f, a, b, w, resolution, r, s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fourierin_fourierin_cx_2d_nonregular_cpp(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP wSEXP, SEXP resolutionSEXP, SEXP rSEXP, SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fourierin_fourierin_cx_2d_nonregular_cpp_try(fSEXP, aSEXP, bSEXP, wSEXP, resolutionSEXP, rSEXP, sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _fourierin_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::cx_vec(*fourierin_1d_cpp)(const arma::vec&,double,double,double,double,double,double)");
        signatures.insert("arma::cx_vec(*fourierin_1d_nonregular_cpp)(const arma::vec&,double,double,const arma::vec&,int,double,double)");
        signatures.insert("arma::cx_mat(*fourierin_2d_cpp)(const arma::mat&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,double,double)");
        signatures.insert("arma::cx_mat(*fourierin_2d_nonregular_cpp)(const arma::mat&,const arma::vec&,const arma::vec&,const arma::mat&,const arma::vec&,double,double)");
        signatures.insert("arma::cx_vec(*fourierin_cx_1d_cpp)(const arma::cx_vec&,double,double,double,double,double,double)");
        signatures.insert("arma::cx_vec(*fourierin_cx_1d_nonregular_cpp)(const arma::cx_vec&,double,double,const arma::vec&,int,double,double)");
        signatures.insert("arma::cx_mat(*fourierin_cx_2d_cpp)(const arma::cx_mat&,const arma::vec&,const arma::vec&,const arma::vec&,const arma::vec&,double,double)");
        signatures.insert("arma::cx_mat(*fourierin_cx_2d_nonregular_cpp)(const arma::cx_mat&,const arma::vec&,const arma::vec&,const arma::mat&,const arma::vec&,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _fourierin_RcppExport_registerCCallable() { 
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_1d_cpp", (DL_FUNC)_fourierin_fourierin_1d_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_1d_nonregular_cpp", (DL_FUNC)_fourierin_fourierin_1d_nonregular_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_2d_cpp", (DL_FUNC)_fourierin_fourierin_2d_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_2d_nonregular_cpp", (DL_FUNC)_fourierin_fourierin_2d_nonregular_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_cx_1d_cpp", (DL_FUNC)_fourierin_fourierin_cx_1d_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_cx_1d_nonregular_cpp", (DL_FUNC)_fourierin_fourierin_cx_1d_nonregular_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_cx_2d_cpp", (DL_FUNC)_fourierin_fourierin_cx_2d_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_fourierin_cx_2d_nonregular_cpp", (DL_FUNC)_fourierin_fourierin_cx_2d_nonregular_cpp_try);
    R_RegisterCCallable("fourierin", "_fourierin_RcppExport_validate", (DL_FUNC)_fourierin_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_fourierin_fourierin_1d_cpp", (DL_FUNC) &_fourierin_fourierin_1d_cpp, 7},
    {"_fourierin_fourierin_1d_nonregular_cpp", (DL_FUNC) &_fourierin_fourierin_1d_nonregular_cpp, 7},
    {"_fourierin_fourierin_2d_cpp", (DL_FUNC) &_fourierin_fourierin_2d_cpp, 7},
    {"_fourierin_fourierin_2d_nonregular_cpp", (DL_FUNC) &_fourierin_fourierin_2d_nonregular_cpp, 7},
    {"_fourierin_fourierin_cx_1d_cpp", (DL_FUNC) &_fourierin_fourierin_cx_1d_cpp, 7},
    {"_fourierin_fourierin_cx_1d_nonregular_cpp", (DL_FUNC) &_fourierin_fourierin_cx_1d_nonregular_cpp, 7},
    {"_fourierin_fourierin_cx_2d_cpp", (DL_FUNC) &_fourierin_fourierin_cx_2d_cpp, 7},
    {"_fourierin_fourierin_cx_2d_nonregular_cpp", (DL_FUNC) &_fourierin_fourierin_cx_2d_nonregular_cpp, 7},
    {"_fourierin_RcppExport_registerCCallable", (DL_FUNC) &_fourierin_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fourierin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
