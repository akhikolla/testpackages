// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getL
std::vector<double> getL(std::vector<double> ub, std::vector<double> lb, double level);
RcppExport SEXP _ctgt_getL(SEXP ubSEXP, SEXP lbSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(getL(ub, lb, level));
    return rcpp_result_gen;
END_RCPP
}
// pv
double pv(double x, std::vector<double> lam);
RcppExport SEXP _ctgt_pv(SEXP xSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(pv(x, lam));
    return rcpp_result_gen;
END_RCPP
}
// criticalvalue
double criticalvalue(std::vector<double> lam, double alpha);
RcppExport SEXP _ctgt_criticalvalue(SEXP lamSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(criticalvalue(lam, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ctgt_getL", (DL_FUNC) &_ctgt_getL, 3},
    {"_ctgt_pv", (DL_FUNC) &_ctgt_pv, 2},
    {"_ctgt_criticalvalue", (DL_FUNC) &_ctgt_criticalvalue, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ctgt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
