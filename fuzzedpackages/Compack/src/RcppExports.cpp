// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Compack.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// ALM_GMD
Rcpp::List ALM_GMD(arma::vec y, arma::mat Z, arma::mat Zc, arma::mat Zc_proj, arma::vec beta, arma::vec lambda, arma::vec pf, int dfmax, int pfmax, arma::mat A, arma::vec b, arma::umat group_index, int inner_maxiter, int outer_maxiter, double inner_eps, double outer_eps, double mu_ratio, double u_ini, double tol);
static SEXP _Compack_ALM_GMD_try(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP ASEXP, SEXP bSEXP, SEXP group_indexSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc(ZcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc_proj(Zc_projSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pf(pfSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type pfmax(pfmaxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type group_index(group_indexSEXP);
    Rcpp::traits::input_parameter< int >::type inner_maxiter(inner_maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type outer_maxiter(outer_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_eps(inner_epsSEXP);
    Rcpp::traits::input_parameter< double >::type outer_eps(outer_epsSEXP);
    Rcpp::traits::input_parameter< double >::type mu_ratio(mu_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type u_ini(u_iniSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ALM_GMD(y, Z, Zc, Zc_proj, beta, lambda, pf, dfmax, pfmax, A, b, group_index, inner_maxiter, outer_maxiter, inner_eps, outer_eps, mu_ratio, u_ini, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Compack_ALM_GMD(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP ASEXP, SEXP bSEXP, SEXP group_indexSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Compack_ALM_GMD_try(ySEXP, ZSEXP, ZcSEXP, Zc_projSEXP, betaSEXP, lambdaSEXP, pfSEXP, dfmaxSEXP, pfmaxSEXP, ASEXP, bSEXP, group_indexSEXP, inner_maxiterSEXP, outer_maxiterSEXP, inner_epsSEXP, outer_epsSEXP, mu_ratioSEXP, u_iniSEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ALM_CD
Rcpp::List ALM_CD(arma::vec y, arma::mat Z, arma::mat Zc, arma::mat Zc_proj, arma::vec beta, arma::vec lambda, arma::vec pf, double b, arma::vec A, int dfmax, int pfmax, int inner_maxiter, int outer_maxiter, double inner_eps, double outer_eps, double mu_ratio, double u_ini, double tol);
static SEXP _Compack_ALM_CD_try(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP bSEXP, SEXP ASEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc(ZcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc_proj(Zc_projSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pf(pfSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type pfmax(pfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type inner_maxiter(inner_maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type outer_maxiter(outer_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_eps(inner_epsSEXP);
    Rcpp::traits::input_parameter< double >::type outer_eps(outer_epsSEXP);
    Rcpp::traits::input_parameter< double >::type mu_ratio(mu_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type u_ini(u_iniSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ALM_CD(y, Z, Zc, Zc_proj, beta, lambda, pf, b, A, dfmax, pfmax, inner_maxiter, outer_maxiter, inner_eps, outer_eps, mu_ratio, u_ini, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Compack_ALM_CD(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP bSEXP, SEXP ASEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Compack_ALM_CD_try(ySEXP, ZSEXP, ZcSEXP, Zc_projSEXP, betaSEXP, lambdaSEXP, pfSEXP, bSEXP, ASEXP, dfmaxSEXP, pfmaxSEXP, inner_maxiterSEXP, outer_maxiterSEXP, inner_epsSEXP, outer_epsSEXP, mu_ratioSEXP, u_iniSEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ALM_CD_comp
Rcpp::List ALM_CD_comp(arma::vec y, arma::mat Z, arma::mat Zc, arma::mat Zc_proj, arma::vec beta, arma::vec lambda, arma::vec pf, int dfmax, int pfmax, int inner_maxiter, int outer_maxiter, double inner_eps, double outer_eps, double mu_ratio, double u_ini, double tol);
static SEXP _Compack_ALM_CD_comp_try(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc(ZcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zc_proj(Zc_projSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pf(pfSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type pfmax(pfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type inner_maxiter(inner_maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type outer_maxiter(outer_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_eps(inner_epsSEXP);
    Rcpp::traits::input_parameter< double >::type outer_eps(outer_epsSEXP);
    Rcpp::traits::input_parameter< double >::type mu_ratio(mu_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type u_ini(u_iniSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ALM_CD_comp(y, Z, Zc, Zc_proj, beta, lambda, pf, dfmax, pfmax, inner_maxiter, outer_maxiter, inner_eps, outer_eps, mu_ratio, u_ini, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Compack_ALM_CD_comp(SEXP ySEXP, SEXP ZSEXP, SEXP ZcSEXP, SEXP Zc_projSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP pfSEXP, SEXP dfmaxSEXP, SEXP pfmaxSEXP, SEXP inner_maxiterSEXP, SEXP outer_maxiterSEXP, SEXP inner_epsSEXP, SEXP outer_epsSEXP, SEXP mu_ratioSEXP, SEXP u_iniSEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Compack_ALM_CD_comp_try(ySEXP, ZSEXP, ZcSEXP, Zc_projSEXP, betaSEXP, lambdaSEXP, pfSEXP, dfmaxSEXP, pfmaxSEXP, inner_maxiterSEXP, outer_maxiterSEXP, inner_epsSEXP, outer_epsSEXP, mu_ratioSEXP, u_iniSEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Compack_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*ALM_GMD)(arma::vec,arma::mat,arma::mat,arma::mat,arma::vec,arma::vec,arma::vec,int,int,arma::mat,arma::vec,arma::umat,int,int,double,double,double,double,double)");
        signatures.insert("Rcpp::List(*ALM_CD)(arma::vec,arma::mat,arma::mat,arma::mat,arma::vec,arma::vec,arma::vec,double,arma::vec,int,int,int,int,double,double,double,double,double)");
        signatures.insert("Rcpp::List(*ALM_CD_comp)(arma::vec,arma::mat,arma::mat,arma::mat,arma::vec,arma::vec,arma::vec,int,int,int,int,double,double,double,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Compack_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Compack", "_Compack_ALM_GMD", (DL_FUNC)_Compack_ALM_GMD_try);
    R_RegisterCCallable("Compack", "_Compack_ALM_CD", (DL_FUNC)_Compack_ALM_CD_try);
    R_RegisterCCallable("Compack", "_Compack_ALM_CD_comp", (DL_FUNC)_Compack_ALM_CD_comp_try);
    R_RegisterCCallable("Compack", "_Compack_RcppExport_validate", (DL_FUNC)_Compack_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Compack_ALM_GMD", (DL_FUNC) &_Compack_ALM_GMD, 19},
    {"_Compack_ALM_CD", (DL_FUNC) &_Compack_ALM_CD, 18},
    {"_Compack_ALM_CD_comp", (DL_FUNC) &_Compack_ALM_CD_comp, 16},
    {"_Compack_RcppExport_registerCCallable", (DL_FUNC) &_Compack_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Compack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
