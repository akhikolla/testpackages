// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_TAI
NumericVector cpp_TAI(const NumericMatrix& ExpressionSet, const NumericVector& Phylostratum);
RcppExport SEXP _myTAI_cpp_TAI(SEXP ExpressionSetSEXP, SEXP PhylostratumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ExpressionSet(ExpressionSetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Phylostratum(PhylostratumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_TAI(ExpressionSet, Phylostratum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bootMatrix
NumericMatrix cpp_bootMatrix(const NumericMatrix& ExpressionMatrix, const NumericVector& AgeVector, const int& permutations);
RcppExport SEXP _myTAI_cpp_bootMatrix(SEXP ExpressionMatrixSEXP, SEXP AgeVectorSEXP, SEXP permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ExpressionMatrix(ExpressionMatrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type AgeVector(AgeVectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type permutations(permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bootMatrix(ExpressionMatrix, AgeVector, permutations));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pMatrix
NumericMatrix cpp_pMatrix(const NumericMatrix& ExpressionSet, const NumericVector& AgeVector);
RcppExport SEXP _myTAI_cpp_pMatrix(SEXP ExpressionSetSEXP, SEXP AgeVectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ExpressionSet(ExpressionSetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type AgeVector(AgeVectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pMatrix(ExpressionSet, AgeVector));
    return rcpp_result_gen;
END_RCPP
}
// cpp_std_error
double cpp_std_error(const NumericVector& x);
RcppExport SEXP _myTAI_cpp_std_error(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_std_error(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_geom_mean
double cpp_geom_mean(const NumericVector& x);
RcppExport SEXP _myTAI_cpp_geom_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_geom_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_harmonic_mean
double cpp_harmonic_mean(const NumericVector& x);
RcppExport SEXP _myTAI_cpp_harmonic_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_harmonic_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_omitMatrix
NumericMatrix cpp_omitMatrix(const NumericMatrix& ExpressionSet, const NumericVector& AgeVector);
RcppExport SEXP _myTAI_cpp_omitMatrix(SEXP ExpressionSetSEXP, SEXP AgeVectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ExpressionSet(ExpressionSetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type AgeVector(AgeVectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_omitMatrix(ExpressionSet, AgeVector));
    return rcpp_result_gen;
END_RCPP
}
