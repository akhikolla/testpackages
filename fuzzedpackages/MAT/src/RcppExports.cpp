// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// score_cpp
List score_cpp(arma::mat ipar, arma::rowvec resp, arma::colvec th, const int p, arma::mat sigma, const int maxIter, const double conv, const double D, bool Fisher);
RcppExport SEXP _MAT_score_cpp(SEXP iparSEXP, SEXP respSEXP, SEXP thSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP maxIterSEXP, SEXP convSEXP, SEXP DSEXP, SEXP FisherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ipar(iparSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type resp(respSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type th(thSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type Fisher(FisherSEXP);
    rcpp_result_gen = Rcpp::wrap(score_cpp(ipar, resp, th, p, sigma, maxIter, conv, D, Fisher));
    return rcpp_result_gen;
END_RCPP
}
// SCORE_cpp
List SCORE_cpp(arma::mat ipar, arma::mat resp_full, const int p, arma::mat sigma, const int maxIter, const double conv, const double D, bool Fisher);
RcppExport SEXP _MAT_SCORE_cpp(SEXP iparSEXP, SEXP resp_fullSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP maxIterSEXP, SEXP convSEXP, SEXP DSEXP, SEXP FisherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ipar(iparSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type resp_full(resp_fullSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type Fisher(FisherSEXP);
    rcpp_result_gen = Rcpp::wrap(SCORE_cpp(ipar, resp_full, p, sigma, maxIter, conv, D, Fisher));
    return rcpp_result_gen;
END_RCPP
}
// selectItem_cpp
arma::mat selectItem_cpp(arma::mat ipar, arma::uvec available, arma::uvec given, arma::colvec th, const int p, arma::mat sigma, const double D, String method, String selectionType, arma::colvec c_weights, bool content_balancing, int topN);
RcppExport SEXP _MAT_selectItem_cpp(SEXP iparSEXP, SEXP availableSEXP, SEXP givenSEXP, SEXP thSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP DSEXP, SEXP methodSEXP, SEXP selectionTypeSEXP, SEXP c_weightsSEXP, SEXP content_balancingSEXP, SEXP topNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ipar(iparSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type available(availableSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type given(givenSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type th(thSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< String >::type selectionType(selectionTypeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type c_weights(c_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type content_balancing(content_balancingSEXP);
    Rcpp::traits::input_parameter< int >::type topN(topNSEXP);
    rcpp_result_gen = Rcpp::wrap(selectItem_cpp(ipar, available, given, th, p, sigma, D, method, selectionType, c_weights, content_balancing, topN));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MAT_score_cpp", (DL_FUNC) &_MAT_score_cpp, 9},
    {"_MAT_SCORE_cpp", (DL_FUNC) &_MAT_SCORE_cpp, 8},
    {"_MAT_selectItem_cpp", (DL_FUNC) &_MAT_selectItem_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_MAT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
