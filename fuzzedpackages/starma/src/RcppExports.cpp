// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// starmaCPP
Rcpp::List starmaCPP(const arma::mat& data, const Rcpp::List& wlist, arma::mat arMat, arma::mat maMat, int iterate);
RcppExport SEXP _starma_starmaCPP(SEXP dataSEXP, SEXP wlistSEXP, SEXP arMatSEXP, SEXP maMatSEXP, SEXP iterateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type wlist(wlistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type arMat(arMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type maMat(maMatSEXP);
    Rcpp::traits::input_parameter< int >::type iterate(iterateSEXP);
    rcpp_result_gen = Rcpp::wrap(starmaCPP(data, wlist, arMat, maMat, iterate));
    return rcpp_result_gen;
END_RCPP
}
// stcovCPP
double stcovCPP(const arma::mat& data, const Rcpp::List& wlist, int slag1, int slag2, int tlag);
RcppExport SEXP _starma_stcovCPP(SEXP dataSEXP, SEXP wlistSEXP, SEXP slag1SEXP, SEXP slag2SEXP, SEXP tlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type wlist(wlistSEXP);
    Rcpp::traits::input_parameter< int >::type slag1(slag1SEXP);
    Rcpp::traits::input_parameter< int >::type slag2(slag2SEXP);
    Rcpp::traits::input_parameter< int >::type tlag(tlagSEXP);
    rcpp_result_gen = Rcpp::wrap(stcovCPP(data, wlist, slag1, slag2, tlag));
    return rcpp_result_gen;
END_RCPP
}
// stacfCPP
arma::mat stacfCPP(const arma::mat& data, const Rcpp::List& wlist, int tlagMax);
RcppExport SEXP _starma_stacfCPP(SEXP dataSEXP, SEXP wlistSEXP, SEXP tlagMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type wlist(wlistSEXP);
    Rcpp::traits::input_parameter< int >::type tlagMax(tlagMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(stacfCPP(data, wlist, tlagMax));
    return rcpp_result_gen;
END_RCPP
}
// stpacfCPP
arma::mat stpacfCPP(const arma::mat& data, const Rcpp::List& wlist, int tlagMax);
RcppExport SEXP _starma_stpacfCPP(SEXP dataSEXP, SEXP wlistSEXP, SEXP tlagMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type wlist(wlistSEXP);
    Rcpp::traits::input_parameter< int >::type tlagMax(tlagMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(stpacfCPP(data, wlist, tlagMax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_starma_starmaCPP", (DL_FUNC) &_starma_starmaCPP, 5},
    {"_starma_stcovCPP", (DL_FUNC) &_starma_stcovCPP, 5},
    {"_starma_stacfCPP", (DL_FUNC) &_starma_stacfCPP, 3},
    {"_starma_stpacfCPP", (DL_FUNC) &_starma_stpacfCPP, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_starma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
