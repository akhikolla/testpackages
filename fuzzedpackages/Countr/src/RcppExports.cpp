// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Countr.h"
#include "../inst/include/Countr_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// sWeibull
double sWeibull(double t, const Rcpp::List distPars);
RcppExport SEXP _Countr_sWeibull(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    rcpp_result_gen = Rcpp::wrap(sWeibull(t, distPars));
    return rcpp_result_gen;
END_RCPP
}
// sBurr
double sBurr(double t, const Rcpp::List distPars);
RcppExport SEXP _Countr_sBurr(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    rcpp_result_gen = Rcpp::wrap(sBurr(t, distPars));
    return rcpp_result_gen;
END_RCPP
}
// sgamma
double sgamma(double t, const Rcpp::List distPars);
RcppExport SEXP _Countr_sgamma(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    rcpp_result_gen = Rcpp::wrap(sgamma(t, distPars));
    return rcpp_result_gen;
END_RCPP
}
// sgengamma
double sgengamma(double t, const Rcpp::List distPars);
RcppExport SEXP _Countr_sgengamma(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    rcpp_result_gen = Rcpp::wrap(sgengamma(t, distPars));
    return rcpp_result_gen;
END_RCPP
}
// surv
double surv(double t, const Rcpp::List distPars, const std::string dist);
RcppExport SEXP _Countr_surv(SEXP tSEXP, SEXP distParsSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(surv(t, distPars, dist));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_bi
arma::vec dCount_allProbs_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_user
arma::vec dCount_allProbs_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_scalar_bi
double dCount_allProbs_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_vec_bi
arma::vec dCount_allProbs_vec_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_vec_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_vec_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_scalar_user
double dCount_allProbs_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_allProbs_vec_user
arma::vec dCount_allProbs_vec_user(arma::Col<unsigned> x, const Rcpp::List distPars, const Rcpp::List extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_allProbs_vec_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_allProbs_vec_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_bi
arma::vec dCount_dePril_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_bi(x, distPars, dist, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_user
arma::vec dCount_dePril_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_scalar_bi
double dCount_dePril_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_vec_bi
arma::vec dCount_dePril_vec_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_vec_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_vec_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_scalar_user
double dCount_dePril_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_dePril_vec_user
arma::vec dCount_dePril_vec_user(arma::Col<unsigned> x, const Rcpp::List distPars, const Rcpp::List extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_dePril_vec_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_dePril_vec_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_bi
arma::vec dCount_naive_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_bi(x, distPars, dist, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_user
arma::vec dCount_naive_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_scalar_bi
double dCount_naive_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_vec_bi
arma::vec dCount_naive_vec_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_vec_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_vec_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_scalar_user
double dCount_naive_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dCount_naive_vec_user
arma::vec dCount_naive_vec_user(arma::Col<unsigned> x, const Rcpp::List distPars, const Rcpp::List extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dCount_naive_vec_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dCount_naive_vec_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// getProbsmodified_dePril
arma::vec getProbsmodified_dePril(unsigned xnum, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap);
RcppExport SEXP _Countr_getProbsmodified_dePril(SEXP xnumSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type xnum(xnumSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    rcpp_result_gen = Rcpp::wrap(getProbsmodified_dePril(xnum, distPars, dist, distPars0, dist0, extrapolPars, nsteps, time, extrap));
    return rcpp_result_gen;
END_RCPP
}
// dmodifiedCount_bi
arma::vec dmodifiedCount_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dmodifiedCount_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmodifiedCount_bi(x, distPars, dist, distPars0, dist0, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dmodifiedCount_user
arma::vec dmodifiedCount_user(arma::Col<unsigned> x, const Rcpp::List distPars, Rcpp::Function survR, const Rcpp::List distPars0, Rcpp::Function survR0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dmodifiedCount_user(SEXP xSEXP, SEXP distParsSEXP, SEXP survRSEXP, SEXP distPars0SEXP, SEXP survR0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR0(survR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmodifiedCount_user(x, distPars, survR, distPars0, survR0, extrapolPars, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dmodifiedCount_scalar_bi
double dmodifiedCount_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP _Countr_dmodifiedCount_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmodifiedCount_scalar_bi(x, distPars, dist, distPars0, dist0, nsteps, time, extrap, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dmodifiedCount_scalar_user
double dmodifiedCount_scalar_user(unsigned x, const Rcpp::List distPars, Rcpp::Function survR, const Rcpp::List distPars0, Rcpp::Function survR0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP _Countr_dmodifiedCount_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP survRSEXP, SEXP distPars0SEXP, SEXP survR0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR0(survR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmodifiedCount_scalar_user(x, distPars, survR, distPars0, survR0, extrapolPars, nsteps, time, extrap, cdfout, logFlag));
    return rcpp_result_gen;
END_RCPP
}
// dWeibullgammaCount_mat
arma::vec dWeibullgammaCount_mat(arma::Col<unsigned> x, double shape, double r, double alpha, double time, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullgammaCount_mat_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_mat(x, shape, r, alpha, time, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_mat(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_mat_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_mat_vec
arma::vec dWeibullgammaCount_mat_vec(arma::Col<unsigned> x, arma::vec shape, double r, double alpha, double time, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullgammaCount_mat_vec_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_mat_vec(x, shape, r, alpha, time, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_mat_vec(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_mat_vec_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_mat_Covariates
arma::vec dWeibullgammaCount_mat_Covariates(arma::Col<unsigned> x, double cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullgammaCount_mat_Covariates_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_mat_Covariates(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_mat_Covariates(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_mat_Covariates_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_mat_Covariates_vec
arma::vec dWeibullgammaCount_mat_Covariates_vec(arma::Col<unsigned> x, arma::vec cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullgammaCount_mat_Covariates_vec_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_mat_Covariates_vec(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_mat_Covariates_vec(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_mat_Covariates_vec_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_acc
arma::vec dWeibullgammaCount_acc(arma::Col<unsigned> x, double shape, double r, double alpha, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullgammaCount_acc_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_acc(x, shape, r, alpha, time, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_acc(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_acc_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_acc_vec
arma::vec dWeibullgammaCount_acc_vec(arma::Col<unsigned> x, arma::vec shape, double r, double alpha, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullgammaCount_acc_vec_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_acc_vec(x, shape, r, alpha, time, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_acc_vec(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_acc_vec_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_acc_Covariates
arma::vec dWeibullgammaCount_acc_Covariates(arma::Col<unsigned> x, double cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullgammaCount_acc_Covariates_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_acc_Covariates(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_acc_Covariates(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_acc_Covariates_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullgammaCount_acc_Covariates_vec
arma::vec dWeibullgammaCount_acc_Covariates_vec(arma::Col<unsigned> x, arma::vec cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullgammaCount_acc_Covariates_vec_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullgammaCount_acc_Covariates_vec(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullgammaCount_acc_Covariates_vec(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullgammaCount_acc_Covariates_vec_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// alphagen
arma::mat alphagen(double cc, unsigned jrow, unsigned ncol);
static SEXP _Countr_alphagen_try(SEXP ccSEXP, SEXP jrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jrow(jrowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(alphagen(cc, jrow, ncol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_alphagen(SEXP ccSEXP, SEXP jrowSEXP, SEXP ncolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_alphagen_try(ccSEXP, jrowSEXP, ncolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullCount_mat
arma::vec dWeibullCount_mat(arma::Col<unsigned> x, double shape, double scale, double time, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullCount_mat_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullCount_mat(x, shape, scale, time, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullCount_mat(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullCount_mat_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullCount_mat_scalar
double dWeibullCount_mat_scalar(unsigned x, double shape, double scale, double time, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullCount_mat_scalar_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullCount_mat_scalar(x, shape, scale, time, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullCount_mat_scalar(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullCount_mat_scalar_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullCount_mat_vec
arma::vec dWeibullCount_mat_vec(arma::Col<unsigned> x, arma::vec shape, arma::vec scale, double time, bool logFlag, unsigned jmax);
static SEXP _Countr_dWeibullCount_mat_vec_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullCount_mat_vec(x, shape, scale, time, logFlag, jmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullCount_mat_vec(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullCount_mat_vec_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullCount_acc
arma::vec dWeibullCount_acc(arma::Col<unsigned> x, double shape, double scale, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullCount_acc_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullCount_acc(x, shape, scale, time, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullCount_acc(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullCount_acc_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dWeibullCount_acc_vec
arma::vec dWeibullCount_acc_vec(arma::Col<unsigned> x, arma::vec shape, arma::vec scale, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP _Countr_dWeibullCount_acc_vec_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    rcpp_result_gen = Rcpp::wrap(dWeibullCount_acc_vec(x, shape, scale, time, logFlag, jmax, nmax, eps, printa));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Countr_dWeibullCount_acc_vec(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Countr_dWeibullCount_acc_vec_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Countr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*dWeibullgammaCount_mat)(arma::Col<unsigned>,double,double,double,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_mat_vec)(arma::Col<unsigned>,arma::vec,double,double,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_mat_Covariates)(arma::Col<unsigned>,double,double,double,arma::mat,arma::vec,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_mat_Covariates_vec)(arma::Col<unsigned>,arma::vec,double,double,arma::mat,arma::vec,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc)(arma::Col<unsigned>,double,double,double,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc_vec)(arma::Col<unsigned>,arma::vec,double,double,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc_Covariates)(arma::Col<unsigned>,double,double,double,arma::mat,arma::vec,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc_Covariates_vec)(arma::Col<unsigned>,arma::vec,double,double,arma::mat,arma::vec,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::mat(*alphagen)(double,unsigned,unsigned)");
        signatures.insert("arma::vec(*dWeibullCount_mat)(arma::Col<unsigned>,double,double,double,bool,unsigned)");
        signatures.insert("double(*dWeibullCount_mat_scalar)(unsigned,double,double,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullCount_mat_vec)(arma::Col<unsigned>,arma::vec,arma::vec,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullCount_acc)(arma::Col<unsigned>,double,double,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullCount_acc_vec)(arma::Col<unsigned>,arma::vec,arma::vec,double,bool,unsigned,int,double,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Countr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_mat", (DL_FUNC)_Countr_dWeibullgammaCount_mat_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_mat_vec", (DL_FUNC)_Countr_dWeibullgammaCount_mat_vec_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_mat_Covariates", (DL_FUNC)_Countr_dWeibullgammaCount_mat_Covariates_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_mat_Covariates_vec", (DL_FUNC)_Countr_dWeibullgammaCount_mat_Covariates_vec_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_acc", (DL_FUNC)_Countr_dWeibullgammaCount_acc_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_acc_vec", (DL_FUNC)_Countr_dWeibullgammaCount_acc_vec_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_acc_Covariates", (DL_FUNC)_Countr_dWeibullgammaCount_acc_Covariates_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullgammaCount_acc_Covariates_vec", (DL_FUNC)_Countr_dWeibullgammaCount_acc_Covariates_vec_try);
    R_RegisterCCallable("Countr", "_Countr_alphagen", (DL_FUNC)_Countr_alphagen_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullCount_mat", (DL_FUNC)_Countr_dWeibullCount_mat_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullCount_mat_scalar", (DL_FUNC)_Countr_dWeibullCount_mat_scalar_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullCount_mat_vec", (DL_FUNC)_Countr_dWeibullCount_mat_vec_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullCount_acc", (DL_FUNC)_Countr_dWeibullCount_acc_try);
    R_RegisterCCallable("Countr", "_Countr_dWeibullCount_acc_vec", (DL_FUNC)_Countr_dWeibullCount_acc_vec_try);
    R_RegisterCCallable("Countr", "_Countr_RcppExport_validate", (DL_FUNC)_Countr_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Countr_sWeibull", (DL_FUNC) &_Countr_sWeibull, 2},
    {"_Countr_sBurr", (DL_FUNC) &_Countr_sBurr, 2},
    {"_Countr_sgamma", (DL_FUNC) &_Countr_sgamma, 2},
    {"_Countr_sgengamma", (DL_FUNC) &_Countr_sgengamma, 2},
    {"_Countr_surv", (DL_FUNC) &_Countr_surv, 3},
    {"_Countr_dCount_allProbs_bi", (DL_FUNC) &_Countr_dCount_allProbs_bi, 7},
    {"_Countr_dCount_allProbs_user", (DL_FUNC) &_Countr_dCount_allProbs_user, 8},
    {"_Countr_dCount_allProbs_scalar_bi", (DL_FUNC) &_Countr_dCount_allProbs_scalar_bi, 7},
    {"_Countr_dCount_allProbs_vec_bi", (DL_FUNC) &_Countr_dCount_allProbs_vec_bi, 7},
    {"_Countr_dCount_allProbs_scalar_user", (DL_FUNC) &_Countr_dCount_allProbs_scalar_user, 8},
    {"_Countr_dCount_allProbs_vec_user", (DL_FUNC) &_Countr_dCount_allProbs_vec_user, 8},
    {"_Countr_dCount_dePril_bi", (DL_FUNC) &_Countr_dCount_dePril_bi, 8},
    {"_Countr_dCount_dePril_user", (DL_FUNC) &_Countr_dCount_dePril_user, 9},
    {"_Countr_dCount_dePril_scalar_bi", (DL_FUNC) &_Countr_dCount_dePril_scalar_bi, 7},
    {"_Countr_dCount_dePril_vec_bi", (DL_FUNC) &_Countr_dCount_dePril_vec_bi, 7},
    {"_Countr_dCount_dePril_scalar_user", (DL_FUNC) &_Countr_dCount_dePril_scalar_user, 8},
    {"_Countr_dCount_dePril_vec_user", (DL_FUNC) &_Countr_dCount_dePril_vec_user, 8},
    {"_Countr_dCount_naive_bi", (DL_FUNC) &_Countr_dCount_naive_bi, 8},
    {"_Countr_dCount_naive_user", (DL_FUNC) &_Countr_dCount_naive_user, 9},
    {"_Countr_dCount_naive_scalar_bi", (DL_FUNC) &_Countr_dCount_naive_scalar_bi, 7},
    {"_Countr_dCount_naive_vec_bi", (DL_FUNC) &_Countr_dCount_naive_vec_bi, 7},
    {"_Countr_dCount_naive_scalar_user", (DL_FUNC) &_Countr_dCount_naive_scalar_user, 8},
    {"_Countr_dCount_naive_vec_user", (DL_FUNC) &_Countr_dCount_naive_vec_user, 8},
    {"_Countr_getProbsmodified_dePril", (DL_FUNC) &_Countr_getProbsmodified_dePril, 9},
    {"_Countr_dmodifiedCount_bi", (DL_FUNC) &_Countr_dmodifiedCount_bi, 10},
    {"_Countr_dmodifiedCount_user", (DL_FUNC) &_Countr_dmodifiedCount_user, 11},
    {"_Countr_dmodifiedCount_scalar_bi", (DL_FUNC) &_Countr_dmodifiedCount_scalar_bi, 9},
    {"_Countr_dmodifiedCount_scalar_user", (DL_FUNC) &_Countr_dmodifiedCount_scalar_user, 11},
    {"_Countr_dWeibullgammaCount_mat", (DL_FUNC) &_Countr_dWeibullgammaCount_mat, 7},
    {"_Countr_dWeibullgammaCount_mat_vec", (DL_FUNC) &_Countr_dWeibullgammaCount_mat_vec, 7},
    {"_Countr_dWeibullgammaCount_mat_Covariates", (DL_FUNC) &_Countr_dWeibullgammaCount_mat_Covariates, 9},
    {"_Countr_dWeibullgammaCount_mat_Covariates_vec", (DL_FUNC) &_Countr_dWeibullgammaCount_mat_Covariates_vec, 9},
    {"_Countr_dWeibullgammaCount_acc", (DL_FUNC) &_Countr_dWeibullgammaCount_acc, 10},
    {"_Countr_dWeibullgammaCount_acc_vec", (DL_FUNC) &_Countr_dWeibullgammaCount_acc_vec, 10},
    {"_Countr_dWeibullgammaCount_acc_Covariates", (DL_FUNC) &_Countr_dWeibullgammaCount_acc_Covariates, 12},
    {"_Countr_dWeibullgammaCount_acc_Covariates_vec", (DL_FUNC) &_Countr_dWeibullgammaCount_acc_Covariates_vec, 12},
    {"_Countr_alphagen", (DL_FUNC) &_Countr_alphagen, 3},
    {"_Countr_dWeibullCount_mat", (DL_FUNC) &_Countr_dWeibullCount_mat, 6},
    {"_Countr_dWeibullCount_mat_scalar", (DL_FUNC) &_Countr_dWeibullCount_mat_scalar, 6},
    {"_Countr_dWeibullCount_mat_vec", (DL_FUNC) &_Countr_dWeibullCount_mat_vec, 6},
    {"_Countr_dWeibullCount_acc", (DL_FUNC) &_Countr_dWeibullCount_acc, 9},
    {"_Countr_dWeibullCount_acc_vec", (DL_FUNC) &_Countr_dWeibullCount_acc_vec, 9},
    {"_Countr_RcppExport_registerCCallable", (DL_FUNC) &_Countr_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Countr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
