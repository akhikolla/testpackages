// Generated by rstantools.  Do not edit by hand.

/*
    pandemicLP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pandemicLP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pandemicLP.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_seasonal_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_seasonal");
    reader.add_event(70, 68, "end", "model_seasonal");
    return reader;
}
#include <stan_meta_header.hpp>
class model_seasonal
  : public stan::model::model_base_crtp<model_seasonal> {
private:
        int n;
        std::vector<int> y;
        double pop;
        double p;
        int w1;
        int w2;
        int w3;
public:
    model_seasonal(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_seasonal(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_seasonal_namespace::model_seasonal";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 20;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n));
            y = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "pop", "double", context__.to_vec());
            pop = double(0);
            vals_r__ = context__.vals_r("pop");
            pos__ = 0;
            pop = vals_r__[pos__++];
            check_greater_or_equal(function__, "pop", pop, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "p", "double", context__.to_vec());
            p = double(0);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            p = vals_r__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "w1", "int", context__.to_vec());
            w1 = int(0);
            vals_i__ = context__.vals_i("w1");
            pos__ = 0;
            w1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "w1", w1, 0);
            check_less_or_equal(function__, "w1", w1, 7);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "w2", "int", context__.to_vec());
            w2 = int(0);
            vals_i__ = context__.vals_i("w2");
            pos__ = 0;
            w2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "w2", w2, 0);
            check_less_or_equal(function__, "w2", w2, 7);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "w3", "int", context__.to_vec());
            w3 = int(0);
            vals_i__ = context__.vals_i("w3");
            pos__ = 0;
            w3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "w3", w3, 0);
            check_less_or_equal(function__, "w3", w3, 7);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_seasonal() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c", "double", context__.to_vec());
        double c(0);
        c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("f")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable f missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("f");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "f", "double", context__.to_vec());
        double f(0);
        f = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1, f);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable f: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("b01")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b01 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b01");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b01", "double", context__.to_vec());
        double b01(0);
        b01 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b01);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b01: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a", "double", context__.to_vec());
        double a(0);
        a = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, ((p * pop) * stan::math::exp((f * b01))), a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("d_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d_1", "double", context__.to_vec());
        double d_1(0);
        d_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, d_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("d_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d_2", "double", context__.to_vec());
        double d_2(0);
        d_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, d_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("d_3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d_3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d_3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d_3", "double", context__.to_vec());
        double d_3(0);
        d_3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, d_3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d_3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.scalar_lb_constrain(0, lp__);
            else
                c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 32;
            local_scalar_t__ f;
            (void) f;  // dummy to suppress unused var warning
            if (jacobian__)
                f = in__.scalar_lb_constrain(1, lp__);
            else
                f = in__.scalar_lb_constrain(1);
            current_statement_begin__ = 33;
            local_scalar_t__ b01;
            (void) b01;  // dummy to suppress unused var warning
            if (jacobian__)
                b01 = in__.scalar_constrain(lp__);
            else
                b01 = in__.scalar_constrain();
            current_statement_begin__ = 35;
            local_scalar_t__ a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.scalar_lub_constrain(0, ((p * pop) * stan::math::exp((f * b01))), lp__);
            else
                a = in__.scalar_lub_constrain(0, ((p * pop) * stan::math::exp((f * b01))));
            current_statement_begin__ = 36;
            local_scalar_t__ d_1;
            (void) d_1;  // dummy to suppress unused var warning
            if (jacobian__)
                d_1 = in__.scalar_lb_constrain(0, lp__);
            else
                d_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 37;
            local_scalar_t__ d_2;
            (void) d_2;  // dummy to suppress unused var warning
            if (jacobian__)
                d_2 = in__.scalar_lb_constrain(0, lp__);
            else
                d_2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 38;
            local_scalar_t__ d_3;
            (void) d_3;  // dummy to suppress unused var warning
            if (jacobian__)
                d_3 = in__.scalar_lb_constrain(0, lp__);
            else
                d_3 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 42;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("mu", "n", n);
            std::vector<local_scalar_t__> mu(n, local_scalar_t__(0));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 45;
            stan::math::assign(b, stan::math::exp(b01));
            current_statement_begin__ = 46;
            for (int t = 1; t <= n; ++t) {
                current_statement_begin__ = 47;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((stan::math::exp(((((stan::math::log(f) + stan::math::log(a)) + stan::math::log(c)) - (c * t)) - ((f + 1) * stan::math::log((b + stan::math::exp((-(c) * t))))))) * pow(d_1, (logical_eq(modulus((t - w1), 7), 0) * logical_gt(w1, 0)))) * pow(d_2, (logical_eq(modulus((t - w2), 7), 0) * logical_gt(w2, 0)))) * pow(d_3, (logical_eq(modulus((t - w3), 7), 0) * logical_gt(w3, 0)))), 
                            "assigning variable mu");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 42;
            if (stan::math::is_uninitialized(b)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "b", b, 0);
            current_statement_begin__ = 43;
            size_t mu_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(mu[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t mu_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < mu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu[i_0__]", mu[i_0__], 0);
                check_less_or_equal(function__, "mu[i_0__]", mu[i_0__], pop);
            }
            // model body
            current_statement_begin__ = 55;
            lp_accum__.add(poisson_log<propto__>(y, mu));
            current_statement_begin__ = 58;
            lp_accum__.add(gamma_log<propto__>(a, 0.1, 0.1));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log<propto__>(b01, 0, stan::math::sqrt(20)));
            current_statement_begin__ = 61;
            lp_accum__.add(gamma_log<propto__>(c, 2, 9));
            current_statement_begin__ = 62;
            lp_accum__.add(gamma_log<propto__>(f, 0.01, 0.01));
            current_statement_begin__ = 65;
            lp_accum__.add(gamma_log<propto__>(d_1, 2, 1));
            current_statement_begin__ = 66;
            lp_accum__.add(gamma_log<propto__>(d_2, 2, 1));
            current_statement_begin__ = 67;
            lp_accum__.add(gamma_log<propto__>(d_3, 2, 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("c");
        names__.push_back("f");
        names__.push_back("b01");
        names__.push_back("a");
        names__.push_back("d_1");
        names__.push_back("d_2");
        names__.push_back("d_3");
        names__.push_back("b");
        names__.push_back("mu");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_seasonal_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double c = in__.scalar_lb_constrain(0);
        vars__.push_back(c);
        double f = in__.scalar_lb_constrain(1);
        vars__.push_back(f);
        double b01 = in__.scalar_constrain();
        vars__.push_back(b01);
        double a = in__.scalar_lub_constrain(0, ((p * pop) * stan::math::exp((f * b01))));
        vars__.push_back(a);
        double d_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(d_1);
        double d_2 = in__.scalar_lb_constrain(0);
        vars__.push_back(d_2);
        double d_3 = in__.scalar_lb_constrain(0);
        vars__.push_back(d_3);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 42;
            double b;
            (void) b;  // dummy to suppress unused var warning
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("mu", "n", n);
            std::vector<double> mu(n, double(0));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 45;
            stan::math::assign(b, stan::math::exp(b01));
            current_statement_begin__ = 46;
            for (int t = 1; t <= n; ++t) {
                current_statement_begin__ = 47;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (((stan::math::exp(((((stan::math::log(f) + stan::math::log(a)) + stan::math::log(c)) - (c * t)) - ((f + 1) * stan::math::log((b + stan::math::exp((-(c) * t))))))) * pow(d_1, (logical_eq(modulus((t - w1), 7), 0) * logical_gt(w1, 0)))) * pow(d_2, (logical_eq(modulus((t - w2), 7), 0) * logical_gt(w2, 0)))) * pow(d_3, (logical_eq(modulus((t - w3), 7), 0) * logical_gt(w3, 0)))), 
                            "assigning variable mu");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 42;
            check_greater_or_equal(function__, "b", b, 0);
            current_statement_begin__ = 43;
            size_t mu_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < mu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu[i_0__]", mu[i_0__], 0);
                check_less_or_equal(function__, "mu[i_0__]", mu[i_0__], pop);
            }
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(b);
                size_t mu_k_0_max__ = n;
                for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                    vars__.push_back(mu[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_seasonal";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b01";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_3";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            size_t mu_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b01";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d_3";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b";
            param_names__.push_back(param_name_stream__.str());
            size_t mu_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_seasonal_namespace::model_seasonal stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
