// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// optimalLinearFixedPointMass
double optimalLinearFixedPointMass(const std::vector<double>& data, double mass_acc);
RcppExport SEXP _RMSNumpress_optimalLinearFixedPointMass(SEXP dataSEXP, SEXP mass_accSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type mass_acc(mass_accSEXP);
    rcpp_result_gen = Rcpp::wrap(optimalLinearFixedPointMass(data, mass_acc));
    return rcpp_result_gen;
END_RCPP
}
// optimalLinearFixedPoint
double optimalLinearFixedPoint(const std::vector<double>& data);
RcppExport SEXP _RMSNumpress_optimalLinearFixedPoint(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(optimalLinearFixedPoint(data));
    return rcpp_result_gen;
END_RCPP
}
// optimalSlofFixedPoint
double optimalSlofFixedPoint(const std::vector<double>& data);
RcppExport SEXP _RMSNumpress_optimalSlofFixedPoint(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(optimalSlofFixedPoint(data));
    return rcpp_result_gen;
END_RCPP
}
// encodeLinear
std::vector<unsigned char> encodeLinear(const std::vector<double>& data, double fixedPoint);
RcppExport SEXP _RMSNumpress_encodeLinear(SEXP dataSEXP, SEXP fixedPointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type fixedPoint(fixedPointSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeLinear(data, fixedPoint));
    return rcpp_result_gen;
END_RCPP
}
// decodeLinear
std::vector<double> decodeLinear(const std::vector<unsigned char>& data);
RcppExport SEXP _RMSNumpress_decodeLinear(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<unsigned char>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(decodeLinear(data));
    return rcpp_result_gen;
END_RCPP
}
// encodeSlof
std::vector<unsigned char> encodeSlof(const std::vector<double>& data, double fixedPoint);
RcppExport SEXP _RMSNumpress_encodeSlof(SEXP dataSEXP, SEXP fixedPointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type fixedPoint(fixedPointSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeSlof(data, fixedPoint));
    return rcpp_result_gen;
END_RCPP
}
// decodeSlof
std::vector<double> decodeSlof(const std::vector<unsigned char>& data);
RcppExport SEXP _RMSNumpress_decodeSlof(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<unsigned char>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(decodeSlof(data));
    return rcpp_result_gen;
END_RCPP
}
// encodePic
std::vector<unsigned char> encodePic(const std::vector<double>& data);
RcppExport SEXP _RMSNumpress_encodePic(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(encodePic(data));
    return rcpp_result_gen;
END_RCPP
}
// decodePic
std::vector<double> decodePic(const std::vector<unsigned char>& data);
RcppExport SEXP _RMSNumpress_decodePic(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<unsigned char>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(decodePic(data));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RMSNumpress_optimalLinearFixedPointMass", (DL_FUNC) &_RMSNumpress_optimalLinearFixedPointMass, 2},
    {"_RMSNumpress_optimalLinearFixedPoint", (DL_FUNC) &_RMSNumpress_optimalLinearFixedPoint, 1},
    {"_RMSNumpress_optimalSlofFixedPoint", (DL_FUNC) &_RMSNumpress_optimalSlofFixedPoint, 1},
    {"_RMSNumpress_encodeLinear", (DL_FUNC) &_RMSNumpress_encodeLinear, 2},
    {"_RMSNumpress_decodeLinear", (DL_FUNC) &_RMSNumpress_decodeLinear, 1},
    {"_RMSNumpress_encodeSlof", (DL_FUNC) &_RMSNumpress_encodeSlof, 2},
    {"_RMSNumpress_decodeSlof", (DL_FUNC) &_RMSNumpress_decodeSlof, 1},
    {"_RMSNumpress_encodePic", (DL_FUNC) &_RMSNumpress_encodePic, 1},
    {"_RMSNumpress_decodePic", (DL_FUNC) &_RMSNumpress_decodePic, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RMSNumpress(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
