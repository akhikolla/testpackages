// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// callRoutines
RObject callRoutines(RObject observations, int routineType, List argumentsListRoutine, int dataType, List argumentsListData, int intervalSystemType, List argumentsListIntervalSystem);
RcppExport SEXP _stepR_callRoutines(SEXP observationsSEXP, SEXP routineTypeSEXP, SEXP argumentsListRoutineSEXP, SEXP dataTypeSEXP, SEXP argumentsListDataSEXP, SEXP intervalSystemTypeSEXP, SEXP argumentsListIntervalSystemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type routineType(routineTypeSEXP);
    Rcpp::traits::input_parameter< List >::type argumentsListRoutine(argumentsListRoutineSEXP);
    Rcpp::traits::input_parameter< int >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< List >::type argumentsListData(argumentsListDataSEXP);
    Rcpp::traits::input_parameter< int >::type intervalSystemType(intervalSystemTypeSEXP);
    Rcpp::traits::input_parameter< List >::type argumentsListIntervalSystem(argumentsListIntervalSystemSEXP);
    rcpp_result_gen = Rcpp::wrap(callRoutines(observations, routineType, argumentsListRoutine, dataType, argumentsListData, intervalSystemType, argumentsListIntervalSystem));
    return rcpp_result_gen;
END_RCPP
}
// colMax
NumericVector colMax(const NumericMatrix& stat);
RcppExport SEXP _stepR_colMax(SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(colMax(stat));
    return rcpp_result_gen;
END_RCPP
}
// criticalValuesWeights
NumericVector criticalValuesWeights(const NumericVector& stat, const NumericVector& beta, const double& alpha);
RcppExport SEXP _stepR_criticalValuesWeights(SEXP statSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type stat(statSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(criticalValuesWeights(stat, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// inOrdered
LogicalVector inOrdered(const IntegerVector& x, const IntegerVector& table);
RcppExport SEXP _stepR_inOrdered(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(inOrdered(x, table));
    return rcpp_result_gen;
END_RCPP
}
