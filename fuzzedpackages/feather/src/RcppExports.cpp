// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "feather_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// metadataFeather
List metadataFeather(const std::string& path);
RcppExport SEXP _feather_metadataFeather(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(metadataFeather(path));
    return rcpp_result_gen;
END_RCPP
}
// openFeather
List openFeather(const std::string& path);
RcppExport SEXP _feather_openFeather(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(openFeather(path));
    return rcpp_result_gen;
END_RCPP
}
// closeFeather
void closeFeather(const List& feather);
RcppExport SEXP _feather_closeFeather(SEXP featherSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type feather(featherSEXP);
    closeFeather(feather);
    return R_NilValue;
END_RCPP
}
// rowsFeather
double rowsFeather(const List& feather);
RcppExport SEXP _feather_rowsFeather(SEXP featherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type feather(featherSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsFeather(feather));
    return rcpp_result_gen;
END_RCPP
}
// coldataFeather
List coldataFeather(const List& feather, const IntegerVector& indexes);
RcppExport SEXP _feather_coldataFeather(SEXP featherSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type feather(featherSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(coldataFeather(feather, indexes));
    return rcpp_result_gen;
END_RCPP
}
// writeFeather
void writeFeather(DataFrame df, const std::string& path);
RcppExport SEXP _feather_writeFeather(SEXP dfSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    writeFeather(df, path);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_feather_metadataFeather", (DL_FUNC) &_feather_metadataFeather, 1},
    {"_feather_openFeather", (DL_FUNC) &_feather_openFeather, 1},
    {"_feather_closeFeather", (DL_FUNC) &_feather_closeFeather, 1},
    {"_feather_rowsFeather", (DL_FUNC) &_feather_rowsFeather, 1},
    {"_feather_coldataFeather", (DL_FUNC) &_feather_coldataFeather, 2},
    {"_feather_writeFeather", (DL_FUNC) &_feather_writeFeather, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_feather(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
