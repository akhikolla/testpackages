// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/empichar.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// ecf_re_cpp
arma::vec ecf_re_cpp(const arma::mat& t, const arma::mat& smp);
static SEXP _empichar_ecf_re_cpp_try(SEXP tSEXP, SEXP smpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type smp(smpSEXP);
    rcpp_result_gen = Rcpp::wrap(ecf_re_cpp(t, smp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _empichar_ecf_re_cpp(SEXP tSEXP, SEXP smpSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_empichar_ecf_re_cpp_try(tSEXP, smpSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ecf_im_cpp
arma::vec ecf_im_cpp(const arma::mat& t, const arma::mat& smp);
static SEXP _empichar_ecf_im_cpp_try(SEXP tSEXP, SEXP smpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type smp(smpSEXP);
    rcpp_result_gen = Rcpp::wrap(ecf_im_cpp(t, smp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _empichar_ecf_im_cpp(SEXP tSEXP, SEXP smpSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_empichar_ecf_im_cpp_try(tSEXP, smpSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ecf_mod_cpp
arma::vec ecf_mod_cpp(const arma::mat& t, const arma::mat& smp);
static SEXP _empichar_ecf_mod_cpp_try(SEXP tSEXP, SEXP smpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type smp(smpSEXP);
    rcpp_result_gen = Rcpp::wrap(ecf_mod_cpp(t, smp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _empichar_ecf_mod_cpp(SEXP tSEXP, SEXP smpSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_empichar_ecf_mod_cpp_try(tSEXP, smpSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ecf_cpp
arma::cx_vec ecf_cpp(const arma::mat& t, const arma::mat& smp);
static SEXP _empichar_ecf_cpp_try(SEXP tSEXP, SEXP smpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type smp(smpSEXP);
    rcpp_result_gen = Rcpp::wrap(ecf_cpp(t, smp));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _empichar_ecf_cpp(SEXP tSEXP, SEXP smpSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_empichar_ecf_cpp_try(tSEXP, smpSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _empichar_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*ecf_re_cpp)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::vec(*ecf_im_cpp)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::vec(*ecf_mod_cpp)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::cx_vec(*ecf_cpp)(const arma::mat&,const arma::mat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _empichar_RcppExport_registerCCallable() { 
    R_RegisterCCallable("empichar", "_empichar_ecf_re_cpp", (DL_FUNC)_empichar_ecf_re_cpp_try);
    R_RegisterCCallable("empichar", "_empichar_ecf_im_cpp", (DL_FUNC)_empichar_ecf_im_cpp_try);
    R_RegisterCCallable("empichar", "_empichar_ecf_mod_cpp", (DL_FUNC)_empichar_ecf_mod_cpp_try);
    R_RegisterCCallable("empichar", "_empichar_ecf_cpp", (DL_FUNC)_empichar_ecf_cpp_try);
    R_RegisterCCallable("empichar", "_empichar_RcppExport_validate", (DL_FUNC)_empichar_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_empichar_ecf_re_cpp", (DL_FUNC) &_empichar_ecf_re_cpp, 2},
    {"_empichar_ecf_im_cpp", (DL_FUNC) &_empichar_ecf_im_cpp, 2},
    {"_empichar_ecf_mod_cpp", (DL_FUNC) &_empichar_ecf_mod_cpp, 2},
    {"_empichar_ecf_cpp", (DL_FUNC) &_empichar_ecf_cpp, 2},
    {"_empichar_RcppExport_registerCCallable", (DL_FUNC) &_empichar_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_empichar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
