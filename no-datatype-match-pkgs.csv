"","pkg.name","fun.name","arg.types","arg.names"
"1","ADMM","multipleinversion","c(""arma::mat "", ""double "", ""arma::mat "", ""arma::mat "", ""arma::vec "")","c("" A"", "" rho"", "" L"", "" R"", "" lambda2"")"
"2","ADMM","admm_tv","c(""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const double "", ""const double "", ""const int "", ""const double "", ""const double "")","c("" b"", "" xinit"", "" lambda"", "" reltol"", "" abstol"", "" maxiter"", "" rho"", "" alpha"")"
"3","ADMM","admm_bp","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const double "", ""const int "", ""const double "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" abstol"", "" maxiter"", "" rho"", "" alpha"")"
"4","ADMM","admm_enet","c(""const arma::mat& "", ""const arma::colvec& "", ""const double "", ""const double "", ""const double "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" lambda"", "" alpha"", "" reltol"", "" abstol"", "" maxiter"", "" rho"")"
"5","ADMM","admm_genlasso","c(""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const double "", ""const double "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" D"", "" lambda"", "" reltol"", "" abstol"", "" maxiter"", "" rho"")"
"6","ADMM","admm_lad","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const double "", ""const int "", ""const double "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" abstol"", "" maxiter"", "" rho"", "" alpha"")"
"7","ADMM","admm_lasso","c(""const arma::mat& "", ""const arma::colvec& "", ""const double "", ""arma::colvec& "", ""const double "", ""const double "", ""const int "", ""const double "", ""const double "")","c("" A"", "" b"", "" lambda"", "" xinit"", "" reltol"", "" abstol"", "" maxiter"", "" rho"", "" alpha"")"
"8","ADMM","admm_rpca","c(""const arma::mat& "", ""const double "", ""const int "", ""double "", ""double "")","c("" M"", "" tol"", "" maxiter"", "" mu"", "" lambda"")"
"9","ADMM","admm_spca","c(""const arma::mat& "", ""const double "", ""const double "", ""const int "", ""double "", ""double "")","c("" Sigma"", "" reltol"", "" abstol"", "" maxiter"", "" mu"", "" rho"")"
"10","ADMM","admm_sdp","c(""arma::mat& "", ""arma::field<arma::mat>& "", ""arma::vec "", ""double "", ""double "", ""double "", ""int "", ""double "", ""bool "")","c("" C"", "" listA"", "" b"", "" mymu"", "" myrho"", "" mygamma"", "" maxiter"", "" abstol"", "" printer"")"
"11","APML0","scaleC","Eigen::MatrixXd "," X"
"12","APML0","OmegaC","c(""Eigen::MatrixXd& "", ""Eigen::VectorXi& "")","c("" Omega"", "" sgn"")"
"13","APML0","OmegaSC","c(""Eigen::SparseMatrix<double>& "", ""Eigen::VectorXi& "")","c("" OmegaS"", "" sgn"")"
"14","APML0","maxLambdaLmC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "")","c("" X"", "" y"", "" alpha"", "" wbeta"", "" N0"", "" p"")"
"15","APML0","cvTrimLmC","c(""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXi "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "")","c("" beta"", "" nn"", "" nn2"", "" loco"", "" X"", "" y"", "" N"", "" p"", "" XF"", "" yF"", "" NF"")"
"16","APML0","EnetLmC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""double "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbeta2"", "" p"", "" N0"", "" thresh"", "" maxit"", "" thresh2"")"
"17","APML0","cvEnetLmC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""double "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbeta2"", "" N"", "" p"", "" thresh"", "" maxit"", "" XF"", "" yF"", "" NF"", "" thresh2"")"
"18","APML0","NetLmC","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd& "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""int "", ""double "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbeta2"", "" Omega"", "" loc"", "" nadj"", "" p"", "" N0"", "" thresh"", "" maxit"", "" thresh2"")"
"19","APML0","cvNetLmC","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd& "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""int "", ""double "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbeta2"", "" Omega"", "" loc"", "" nadj"", "" N"", "" p"", "" thresh"", "" maxit"", "" XF"", "" yF"", "" NF"", "" thresh2"")"
"20","APML0","maxLambdaCoxC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "")","c("" X"", "" tevent"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" alpha"", "" wbeta"", "" N0"", "" p"")"
"21","APML0","pletaCm","c(""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""int& "", ""int& "", ""int& "")","c("" xb"", "" exb"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" ifast"", "" itwo"")"
"22","APML0","cvTrimCoxC","c(""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXi "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "")","c("" beta"", "" nn"", "" nn2"", "" loco"", "" XF"", "" NF"", "" neventF"", "" nevent1F"", "" loc1F"", "" nF"", "" X"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" ifast"", "" itwo"")"
"23","APML0","EnetCoxC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "", ""double "", ""int "", ""int "")","c("" X"", "" tevent"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbeta2"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" p"", "" N0"", "" thresh"", "" maxit"", "" ifast"")"
"24","APML0","cvEnetCoxC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "", ""double "", ""int "", ""int "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "")","c("" X"", "" tevent"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbeta2"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" p"", "" N0"", "" thresh"", "" maxit"", "" ifast"", "" XF"", "" NF"", "" neventF"", "" nevent1F"", "" loc1F"", "" nF"")"
"25","APML0","NetCoxC","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "", ""double "", ""int "", ""int "")","c("" X"", "" tevent"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbeta2"", "" Omega"", "" loc"", "" nadj"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" p"", "" N0"", "" thresh"", "" maxit"", "" ifast"")"
"26","APML0","cvNetCoxC","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "", ""double "", ""int "", ""int "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "")","c("" X"", "" tevent"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbeta2"", "" Omega"", "" loc"", "" nadj"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" p"", "" N0"", "" thresh"", "" maxit"", "" ifast"", "" XF"", "" NF"", "" neventF"", "" nevent1F"", "" loc1F"", "" nF"")"
"27","SCPME","CV_ADMMc","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::colvec& "", ""const double "", ""bool "", ""double "", ""double "", ""const double "", ""const double "", ""const int "", ""std::string "", ""const double "", ""const double "", ""int "", ""int "", ""int "", ""std::string "", ""std::string "", ""std::string "")","c("" X"", "" S"", "" Y"", "" A"", "" B"", "" C"", "" lam"", "" alpha"", "" path"", "" tau"", "" rho"", "" mu"", "" tau_rho"", "" iter_rho"", "" crit"", "" tol_abs"", "" tol_rel"", "" maxit"", "" adjmaxit"", "" K"", "" crit_cv"", "" start"", "" trace"")"
"28","ADMMsigma","CV_RIDGEc","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::colvec& "", ""bool "", ""int "", ""std::string "")","c("" X"", "" S"", "" lam"", "" path"", "" K"", "" trace"")"
"29","SCPME","CVP_ADMMc","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::colvec& "", ""const double "", ""const double "", ""double "", ""const double "", ""const double "", ""const int "", ""std::string "", ""const double "", ""const double "", ""int "", ""int "", ""std::string "", ""std::string "", ""std::string "")","c("" X_train"", "" X_valid"", "" Y_train"", "" Y_valid"", "" A"", "" B"", "" C"", "" lam"", "" alpha"", "" tau"", "" rho"", "" mu"", "" tau_rho"", "" iter_rho"", "" crit"", "" tol_abs"", "" tol_rel"", "" maxit"", "" adjmaxit"", "" crit_cv"", "" start"", "" trace"")"
"30","ADMMsigma","CVP_RIDGEc","c(""const int "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::colvec& "", ""std::string "")","c("" n"", "" S_train"", "" S_valid"", "" lam"", "" trace"")"
"31","SCPME","RIDGEc","c(""const arma::mat& "", ""double "")","c("" S"", "" lam"")"
"32","SCPME","ADMMc","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const double "", ""const double "", ""const double "", ""double "", ""const double "", ""const double "", ""const int "", ""std::string "", ""const double "", ""const double "", ""const int "")","c("" S"", "" A"", "" B"", "" C"", "" initOmega"", "" initZ"", "" initY"", "" lam"", "" alpha"", "" tau"", "" rho"", "" mu"", "" tau_rho"", "" iter_rho"", "" crit"", "" tol_abs"", "" tol_rel"", "" maxit"")"
"33","APML0","cvHardLmC","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "")","c("" beta"", "" betaSTD"", "" cut"", "" wbeta"", "" X"", "" y"", "" N"", "" p"", "" XF"", "" yF"", "" NF"")"
"34","APML0","cvHardCoxC","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "")","c("" beta"", "" betaSTD"", "" cut"", "" wbeta"", "" p"", "" XF"", "" NF"", "" neventF"", "" nevent1F"", "" loc1F"", "" nF"", "" X"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"", "" ifast"", "" itwo"")"
"35","APML0","maxLambdaLogC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "")","c("" X"", "" Z"", "" alpha"", "" wbeta"", "" N0"", "" p"")"
"36","APML0","cvTrimLogC","c(""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXi "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "", ""int "", ""double "")","c("" beta"", "" nn"", "" nn2"", "" loco"", "" X"", "" y"", "" N"", "" XF"", "" yF"", "" NF"", "" thresh"", "" maxit"", "" threshP"")"
"37","APML0","cvHardLogC","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "", ""int "", ""double "")","c("" beta"", "" betaSTD"", "" cut"", "" wbeta"", "" X"", "" y"", "" N"", "" p"", "" XF"", "" yF"", "" NF"", "" thresh"", "" maxit"", "" threshP"")"
"38","APML0","EnetLogC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""int "", ""int "", ""double "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbetai"", "" p"", "" N0"", "" thresh"", "" maxit"", "" threshP"")"
"39","APML0","cvEnetLogC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""int "", ""int "", ""double "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbetai"", "" p"", "" N0"", "" thresh"", "" maxit"", "" XF"", "" yF"", "" NF"", "" threshP"")"
"40","APML0","NetLogC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""int "", ""double "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" ilambda"", "" wbeta"", "" wbetai"", "" Omega"", "" loc"", "" nadj"", "" p"", "" N0"", "" thresh"", "" maxit"", "" threshP"")"
"41","APML0","cvNetLogC","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::SparseMatrix<double>& "", ""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""int "", ""int "", ""double "", ""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""double "")","c("" X"", "" y"", "" alpha"", "" lambda"", "" nlambda"", "" wbeta"", "" wbetai"", "" Omega"", "" loc"", "" nadj"", "" p"", "" N0"", "" thresh"", "" maxit"", "" XF"", "" yF"", "" NF"", "" threshP"")"
"42","ARCokrig","buildcov_deriv","c(""Eigen::VectorXd& "", ""arma::cube& "", ""int "", ""const String& "", ""const bool& "")","c("" beta"", "" dist"", "" l"", "" covmodel"", "" nugget"")"
"43","ARCokrig","log_objective_prior","c(""Eigen::VectorXd& "", ""arma::cube& "", ""Eigen::MatrixXd& "", ""Eigen::MatrixXd& "", ""const String& "", ""const bool& "", ""const String& "")","c("" beta"", "" dist"", "" RInv"", "" X"", "" covmodel"", "" nugget"", "" prior"")"
"44","ARCokrig","buildcov","c(""Eigen::VectorXd& "", ""arma::cube& "", ""const String& "", ""const bool& "")","c("" phi"", "" dist"", "" covmodel"", "" nugget"")"
"45","ARCokrig","compute_distance","c(""arma::mat& "", ""arma::mat& "")","c("" input1"", "" input2"")"
"46","ARCokrig","sample_mvt","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""double "", ""int "")","c("" mu"", "" L"", "" sigma"", "" df"", "" nsample"")"
"47","ARCokrig","compute_S","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" output"", "" Q"")"
"48","ARCokrig","compute_Svec","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" output"", "" Q"")"
"49","ARCokrig","compute_S_sum","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" y_t"", "" H_t"", "" y_t1"", "" RInv"", "" K"")"
"50","ARCokrig","compute_prediction","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" y_t"", "" Ht"", "" y_t1"", "" yhat_t1"", "" vhat_t1"", "" RInv"", "" Hnew"", "" Wnew_t1"", "" Rmo"", "" R_sk"")"
"51","ARCokrig","conditional_simulation","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" y_t"", "" Ht"", "" y_t1"", "" RInv"", "" Hnew"", "" Wnew_t1"", "" Rmo"", "" R_sk"")"
"52","ARCokrig","compute_param","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" y_t"", "" Ht"", "" y_t1"", "" RInv"")"
"53","ASPBay","MHcpp","c(""int "", ""int "", ""IntegerVector "", ""IntegerVector "", ""double "", ""double "", ""arma::rowvec "", ""double "")","c("" N"", "" thin"", "" S"", "" R"", "" sd_freq"", "" sd_psi"", "" p0"", "" psi_prior"")"
"54","AhoCorasickTrie","AhoCorasickSearchList","c(""StringVector "", ""List "", ""std::string "", ""bool "", ""int "")","c("" keywords"", "" textList"", "" alphabet"", "" groupByKeyword"", "" iterationFeedback"")"
"55","AhoCorasickTrie","AhoCorasickSearch","c(""StringVector "", ""StringVector "", ""std::string "", ""bool "", ""int "")","c("" keywords"", "" text"", "" alphabet"", "" groupByKeyword"", "" iterationFeedback"")"
"56","AlphaSimR","callFastRRBLUP","c(""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""double "", ""double "", ""arma::uword "", ""int "")","c("" y"", "" geno"", "" lociPerChr"", "" lociLoc"", "" Vu"", "" Ve"", "" maxIter"", "" nThreads"")"
"57","AlphaSimR","callRRBLUP","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" useReps"", "" nThreads"")"
"58","AlphaSimR","callRRBLUP2","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""double "", ""double "", ""double "", ""int "", ""bool "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" Vu"", "" Ve"", "" tol"", "" maxIter"", "" useEM"", "" useReps"", "" nThreads"")"
"59","AlphaSimR","callRRBLUP_D","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" useReps"", "" nThreads"")"
"60","AlphaSimR","callRRBLUP_D2","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" Va"", "" Vd"", "" Ve"", "" tol"", "" useEM"", "" useReps"", "" nThreads"")"
"61","AlphaSimR","callRRBLUP_MV","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""bool "", ""int "")","c("" Y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" useReps"", "" nThreads"")"
"62","AlphaSimR","callRRBLUP_GCA","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" useReps"", "" nThreads"")"
"63","AlphaSimR","callRRBLUP_GCA2","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" Vu1"", "" Vu2"", "" Ve"", "" tol"", "" useEM"", "" useReps"", "" nThreads"")"
"64","AlphaSimR","callRRBLUP_SCA","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" useReps"", "" nThreads"")"
"65","AlphaSimR","callRRBLUP_SCA2","c(""arma::mat "", ""arma::uvec "", ""arma::vec "", ""arma::field<arma::Cube<unsigned char> >& "", ""arma::Col<int>& "", ""arma::uvec "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "", ""int "")","c("" y"", "" x"", "" reps"", "" geno"", "" lociPerChr"", "" lociLoc"", "" maxIter"", "" Vu1"", "" Vu2"", "" Vu3"", "" Ve"", "" tol"", "" useEM"", "" useReps"", "" nThreads"")"
"66","AlphaSimR","writeASGenotypes","c(""const arma::Cube<unsigned char>& "", ""const arma::field<arma::uvec>& "", ""const arma::uvec& "", ""const arma::vec& "", ""const std::vector<std::string>& "", ""const char "", ""const std::string "")","c("" g"", "" locations"", "" allLocations"", "" snpchips"", "" names"", "" missing"", "" fname"")"
"67","AlphaSimR","writeASHaplotypes","c(""const arma::Cube<unsigned char>& "", ""const arma::field<arma::uvec>& "", ""const arma::uvec& "", ""const arma::vec& "", ""const std::vector<std::string>& "", ""const char "", ""const std::string "")","c("" g"", "" locations"", "" allLocations"", "" snpchips"", "" names"", "" missing"", "" fname"")"
"68","AlphaSimR","calcGenParam","c(""const S4& "", ""const S4& "", ""int "")","c("" trait"", "" pop"", "" nThreads"")"
"69","AlphaSimR","getGeno","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" nThreads"")"
"70","AlphaSimR","getMaternalGeno","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" nThreads"")"
"71","AlphaSimR","getPaternalGeno","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" nThreads"")"
"72","AlphaSimR","getHaplo","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" nThreads"")"
"73","AlphaSimR","getOneHaplo","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" haplo"", "" nThreads"")"
"74","AlphaSimR","getIbdHaplo","c(""const List& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" ibdRecHist"", "" individuals"", "" nLociPerChr"")"
"75","AlphaSimR","writeGeno","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""String "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" filePath"", "" nThreads"")"
"76","AlphaSimR","writeOneHaplo","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "", ""String "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" haplo"", "" filePath"", "" nThreads"")"
"77","AlphaSimR","calcGenoFreq","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::Col<int>& "", ""arma::uvec "", ""int "")","c("" geno"", "" lociPerChr"", "" lociLoc"", "" nThreads"")"
"78","AlphaSimR","calcChrFreq","const arma::Cube<unsigned char>& "," geno"
"79","AlphaSimR","getGv","c(""const S4& "", ""const S4& "", ""int "")","c("" trait"", "" pop"", "" nThreads"")"
"80","AlphaSimR","getHybridGv","c(""const S4& "", ""const S4& "", ""arma::uvec "", ""const S4& "", ""arma::uvec "", ""int "")","c("" trait"", "" females"", "" femaleParents"", "" males"", "" maleParents"", "" nThreads"")"
"81","isqg","cross","c(""int "", ""isqg::seamless::Trap<Specimen> "", ""isqg::seamless::Trap<Specimen> "")","c("" number"", "" female"", "" male"")"
"82","AlphaSimR","createDH2","c(""const arma::field<arma::Cube<unsigned char> >& "", ""arma::uword "", ""const arma::field<arma::vec>& "", ""double "", ""bool "", ""int "")","c("" geno"", "" nDH"", "" genMap"", "" v"", "" trackRec"", "" nThreads"")"
"83","AlphaSimR","createReducedGenome","c(""const arma::field<arma::Cube<unsigned char> >& "", ""arma::uword "", ""const arma::field<arma::vec>& "", ""double "", ""bool "", ""arma::uword "", ""arma::vec& "", ""double "", ""int "")","c("" geno"", "" nProgeny"", "" genMap"", "" v"", "" trackRec"", "" ploidy"", "" centromere"", "" quadProb"", "" nThreads"")"
"84","AlphaSimR","getIbdRecHist","c(""const List& "", ""const IntegerMatrix& "", ""const IntegerVector& "")","c("" recHist"", "" pedigree"", "" nLociPerChr"")"
"85","AlphaSimR","popVar","const arma::mat& "," X"
"86","AlphaSimR","mergeGeno","c(""const arma::field<arma::Cube<unsigned char> >& "", ""const arma::field<arma::Cube<unsigned char> >& "")","c("" x"", "" y"")"
"87","AlphaSimR","mergeMultGeno","c(""List& "", ""arma::uvec "", ""arma::uvec "", ""arma::uword "")","c("" popList"", "" nInd"", "" nBin"", "" ploidy"")"
"88","AlphaSimR","mergeMultIntMat","c(""const arma::field<arma::Mat<int> >& "", ""arma::uvec "", ""arma::uword "")","c("" X"", "" nRow"", "" nCol"")"
"89","AlphaSimR","sampleInt","c(""arma::uword "", ""arma::uword "")","c("" n"", "" N"")"
"90","AlphaSimR","sampAllComb","c(""arma::uword "", ""arma::uword "", ""arma::uword "")","c("" nLevel1"", "" nLevel2"", "" n"")"
"91","AlphaSimR","sampHalfDialComb","c(""arma::uword "", ""arma::uword "")","c("" nLevel"", "" n"")"
"92","AlphaSimR","calcCoef","c(""arma::mat& "", ""arma::mat& "")","c("" X"", "" Y"")"
"93","AlphaSimR","packHaplo","c(""arma::Mat<unsigned char>& "", ""arma::uword "", ""bool "")","c("" haplo"", "" ploidy"", "" inbred"")"
"94","AlphaSimR","writePlinkPed","c(""const DataFrame& "", ""const arma::Mat<unsigned char>& "", ""const arma::uword& "", ""const arma::uword& "", ""const arma::uword& "", ""const String& "")","c("" fam"", "" haplo"", "" nInd"", "" ploidy"", "" nLoc"", "" file"")"
"95","AlphaSimR","MaCS","c(""String "", ""arma::uvec "", ""bool "", ""arma::uword "", ""int "", ""StringVector "")","c("" args"", "" maxSites"", "" inbred"", "" ploidy"", "" nThreads"", "" seed"")"
"96","BCEE","clm","c(""SEXP "", ""SEXP "")","c("" Xarg"", "" yarg"")"
"97","BClustLonG","calSim","arma::mat "," mat"
"98","joineRML","mvrnormArma","c(""const int& "", ""const arma::vec& "", ""const arma::mat& "")","c("" n"", "" mu"", "" sigma"")"
"99","BCSub","samLamV3Cpp","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""double "", ""arma::mat "")","c("" A"", "" eta"", "" sig"", "" sigl"", "" lam"")"
"100","bpgmm","dmvnrm_arma","c(""arma::mat "", ""arma::rowvec "", ""arma::mat "", ""bool "")","c("" x"", "" mean"", "" sigma"", "" logd"")"
"101","BClustLonG","myfind","c(""IntegerVector "", ""int "")","c("" evec"", "" e"")"
"102","BCSub","polyurncpp","c(""IntegerVector "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "")","c("" e"", "" muA0"", "" sigma0"", "" A"", "" sigma"", "" sigmaInv"", "" sigma0Inv"", "" c"")"
"103","BClustLonG","stlSort","IntegerVector "," x"
"104","BClustLonG","myc","c(""IntegerVector "", ""IntegerVector "")","c("" x"", "" y"")"
"105","BClustLonG","dmvnrmArma","c(""arma::mat "", ""arma::rowvec "", ""arma::mat "", ""bool "")","c("" x"", "" mean"", "" sigma"", "" logd"")"
"106","BClustLonG","samLamV2Cpp","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::rowvec "")","c("" A"", "" eta"", "" sig"", "" lam"", "" phi"", "" tau"")"
"107","BClustLonG","polyurncppBoth","c(""IntegerVector "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "")","c("" e"", "" A"", "" muA0"", "" sigmaA"", "" sigmaAInv"", "" sigmaA0"", "" sigmaA0Inv"", "" B"", "" muB0"", "" sigmaB"", "" sigmaBInv"", "" sigmaB0"", "" sigmaB0Inv"", "" c"")"
"108","BClustLonG","polyurncppInt","c(""IntegerVector "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "")","c("" e"", "" muA0"", "" sigma0"", "" A"", "" sigma"", "" sigmaInv"", "" sigma0Inv"", "" c"")"
"109","BET","symmCpp","c(""NumericMatrix& "", ""int "", ""bool "")","c("" X"", "" d"", "" unif"")"
"110","BET","BETCpp","c(""NumericMatrix& "", ""int "", ""bool "", ""bool "")","c("" X"", "" d"", "" unif"", "" asymptotic"")"
"111","BGGM","mean_array","arma::cube "," x"
"112","BGGM","Sigma_i_not_i","c(""arma::mat "", ""int "")","c("" x"", "" index"")"
"113","BGGM","select_col","c(""arma::mat "", ""int "")","c("" x"", "" index"")"
"114","BGGM","select_row","c(""arma::mat "", ""int "")","c("" x"", "" index"")"
"115","BGGM","remove_row","c(""arma::mat "", ""int "")","c("" x"", "" which"")"
"116","BGGM","remove_col","c(""arma::mat "", ""int "")","c("" x"", "" index"")"
"117","BGGM","internal_missing_gaussian","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""int "")","c("" Y"", "" Y_missing"", "" Sigma"", "" iter_missing"")"
"118","BGGM","missing_gaussian","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""int "", ""bool "", ""bool "")","c("" Y"", "" Y_missing"", "" Sigma"", "" iter_missing"", "" progress_impute"", "" store_all"")"
"119","BGGM","Theta_continuous","c(""arma::mat "", ""int "", ""float "", ""float "", ""int "", ""int "", ""arma::mat "", ""bool "", ""bool "", ""arma::mat "")","c("" Y"", "" iter"", "" delta"", "" epsilon"", "" prior_only"", "" explore"", "" start"", "" progress"", "" impute"", "" Y_missing"")"
"120","BGGM","sample_prior","c(""arma::mat "", ""int "", ""float "", ""float "", ""int "", ""int "", ""bool "")","c("" Y"", "" iter"", "" delta"", "" epsilon"", "" prior_only"", "" explore"", "" progress"")"
"121","BGGM","mv_continuous","c(""arma::mat "", ""arma::mat "", ""float "", ""float "", ""int "", ""arma::mat "", ""bool "")","c("" Y"", "" X"", "" delta"", "" epsilon"", "" iter"", "" start"", "" progress"")"
"122","BGGM","trunc_mvn","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::rowvec "")","c("" mu"", "" rinv"", "" z"", "" y"", "" cutpoints"")"
"123","BGGM","mv_binary","c(""arma::mat "", ""arma::mat "", ""float "", ""float "", ""int "", ""float "", ""arma::rowvec "", ""arma::mat "", ""bool "")","c("" Y"", "" X"", "" delta"", "" epsilon"", "" iter"", "" beta_prior"", "" cutpoints"", "" start"", "" progress"")"
"124","BGGM","mv_ordinal_cowles","c(""arma::mat "", ""arma::mat "", ""float "", ""float "", ""int "", ""float "")","c("" Y"", "" X"", "" delta"", "" epsilon"", "" iter"", "" MH"")"
"125","BGGM","mv_ordinal_albert","c(""arma::mat "", ""arma::mat "", ""int "", ""float "", ""float "", ""int "", ""arma::mat "", ""bool "")","c("" Y"", "" X"", "" iter"", "" delta"", "" epsilon"", "" K"", "" start"", "" progress"")"
"126","BGGM","copula","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""float "", ""float "", ""arma::vec "", ""bool "")","c("" z0_start"", "" levels"", "" K"", "" Sigma_start"", "" iter"", "" delta"", "" epsilon"", "" idx"", "" progress"")"
"127","BGGM","pcor_to_cor_internal","c(""arma::cube "", ""int "")","c("" x"", "" p"")"
"128","BGGM","predictability_helper","c(""arma::mat "", ""arma::colvec "", ""arma::cube "", ""arma::mat "", ""int "", ""int "")","c("" Y"", "" y"", "" XX"", "" Xy"", "" n"", "" iter"")"
"129","BGGM","beta_helper_fast","c(""arma::cube "", ""arma::mat "", ""int "", ""int "")","c("" XX"", "" Xy"", "" p"", "" iter"")"
"130","BGGM","pred_helper_latent","c(""arma::mat "", ""arma::cube "", ""arma::mat "", ""arma::vec "", ""int "", ""int "")","c("" Y"", "" XX"", "" Xy"", "" quantiles"", "" n"", "" iter"")"
"131","BGGM","KL_univariate","c(""float "", ""float "")","c("" var_1"", "" var_2"")"
"132","BGGM","ppc_helper_nodewise_fast","c(""arma::cube "", ""int "", ""int "", ""int "")","c("" Theta"", "" n1"", "" n2"", "" p"")"
"133","BGGM","KL_divergnece_mvn","c(""arma::mat "", ""arma::mat "")","c("" Theta_1"", "" Theta_2"")"
"134","BGGM","sum_squares","c(""arma::mat "", ""arma::mat "")","c("" Rinv_1"", "" Rinv_2"")"
"135","BGGM","my_dnorm","c(""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" x"", "" means"", "" sds"")"
"136","BGGM","hamming_distance","c(""arma::mat "", ""arma::mat "", ""float "", ""float "", ""float "", ""int "", ""float "")","c("" Rinv_1"", "" Rinv_2"", "" df1"", "" df2"", "" dens"", "" pcors"", "" BF_cut"")"
"137","BGGM","correlation","c(""arma::mat "", ""arma::mat "")","c("" Rinv_1"", "" Rinv_2"")"
"138","BGGM","ppc_helper_fast","c(""arma::cube "", ""int "", ""int "", ""int "", ""float "", ""float "", ""bool "", ""bool "", ""bool "")","c("" Theta"", "" n1"", "" n2"", "" p"", "" BF_cut"", "" dens"", "" ppc_ss"", "" ppc_cors"", "" ppc_hd"")"
"139","BGGM","mvnrnd","c(""int "", ""arma::vec "", ""arma::mat "")","c("" n"", "" mu"", "" Sigma"")"
"140","BGGM","var","c(""arma::mat "", ""arma::mat "", ""float "", ""float "", ""arma::mat "", ""int "", ""arma::mat "", ""bool "")","c("" Y"", "" X"", "" delta"", "" epsilon"", "" beta_prior"", "" iter"", "" start"", "" progress"")"
"141","BGGM","hft_algorithm","c(""arma::mat "", ""arma::mat "", ""double "", ""double "")","c("" Sigma"", "" adj"", "" tol"", "" max_iter"")"
"142","BGGM","bic_fast","c(""arma::mat "", ""arma::mat "", ""double "", ""float "")","c("" Theta"", "" S"", "" n"", "" prior_prob"")"
"143","BGGM","find_ids","arma::mat "," x"
"144","BGGM","search","c(""arma::mat "", ""float "", ""double "", ""arma::mat "", ""float "", ""float "", ""int "", ""bool "")","c("" S"", "" iter"", "" old_bic"", "" start_adj"", "" n"", "" gamma"", "" stop_early"", "" progress"")"
"145","BGGM","fast_g_matrix_F","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""int "", ""float "", ""float "", ""float "", ""bool "")","c("" Y"", "" adj"", "" mu_samples"", "" cov_samples"", "" iter"", "" p"", "" N"", "" prior_sd"", "" kappa1"", "" progress"")"
"146","BGGM","contrained_helper","c(""arma::cube "", ""arma::mat "", ""int "", ""bool "")","c("" cors"", "" adj"", "" iter"", "" progress"")"
"147","BGVAR","BVAR_linear","c(""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "")","c("" Y_in"", "" W_in"", "" p_in"", "" draws_in"", "" burnin_in"", "" cons_in"", "" trend_in"", "" sv_in"", "" thin_in"", "" prior_in"", "" hyperparam_in"", "" Ex_in"")"
"148","BGVAR","do_rgig1","c(""double "", ""double "", ""double "")","c("" lambda"", "" chi"", "" psi"")"
"149","BGVAR","gvar_stacking","c(""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "", ""const SEXP "")","c("" xglobal_in"", "" plag_in"", "" globalpost_in"", "" draws_in"", "" thin_in"", "" trend_in"", "" eigen_in"", "" verbose_in"")"
"150","BGVAR","globalLik","c(""const SEXP "", ""const SEXP "", ""const arma::cube "", ""const arma::cube "", ""const arma::cube "", ""const SEXP "")","c("" Y_in"", "" X_in"", "" A_in"", "" S_in"", "" Ginv_in"", "" thindraws_in"")"
"151","BGVAR","dmvnrm_arma_fast","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""bool const "")","c("" x"", "" mean"", "" sigma"", "" logd"")"
"152","BLPestimatoR","getSij","c(""const NumericMatrix& "", ""const NumericVector& "", ""const IntegerVector& "")","c("" expmu"", "" expdelta"", "" cdindex"")"
"153","BLPestimatoR","getSjtMod","c(""const NumericMatrix& "", ""const NumericVector& "", ""const int& "", ""const int& "", ""const NumericVector& "")","c("" expmu"", "" expdelta"", "" nprodt"", "" startpos"", "" weights"")"
"154","BLPestimatoR","getExpMu","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const IntegerVector& "", ""const NumericMatrix& "")","c("" theta2Matrix"", "" qv"", "" Xrandom"", "" cdid"", "" demographics"")"
"155","MSGARCH","getDelta","c(""const arma::mat& "", ""const int& "")","c("" gamma"", "" m"")"
"156","BLPestimatoR","dstddelta_c","c(""arma::mat& "", ""arma::mat& "")","c("" sijt"", "" weights"")"
"157","BLPestimatoR","dstdtheta_c","c(""arma::mat& "", ""const NumericMatrix& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "")","c("" sijt_arma"", "" indices"", "" xt_arma"", "" qvt_arma"", "" dt_arma"", "" weights_arma"")"
"158","BLPestimatoR","jacob_c","c(""NumericMatrix& "", ""const NumericMatrix& "", ""const List& "", ""const List& "", ""const List& "", ""const int& "")","c("" sij"", "" indices"", "" blp_data"", "" blp_parameters"", "" blp_integration"", "" printLevel"")"
"159","BLSM","dst","const Eigen::Map<Eigen::MatrixXd> "," M"
"160","BLSM","lpz_dist","Eigen::MatrixXd "," Z"
"161","BLSM","lpY","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""Eigen::MatrixXd "")","c("" Y"", "" lpz"", "" alpha"", "" W"")"
"162","BLSM","mlpY","c(""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" avZ"", "" Y"", "" W"")"
"163","BLSM","lpz_distNODE","c(""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXd "")","c("" Z"", "" node"", "" diag"")"
"164","BLSM","lpYNODE","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""int "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "")","c("" Y"", "" Z"", "" alpha"", "" node"", "" diag"", "" W"")"
"165","BLSM","Z_up","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""double "", ""double "", ""double "")","c("" Y"", "" Z"", "" W"", "" alpha"", "" zdelta"", "" mu_z"", "" sd_z"")"
"166","BLSM","alpha_up","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""double "", ""double "", ""double "")","c("" Y"", "" lpz"", "" W"", "" alpha"", "" adelta"", "" a_a"", "" a_b"")"
"167","BMTME","wishart","c(""unsigned int "", ""const arma::mat& "")","c("" df"", "" S"")"
"168","BMTME","inv_wishart","c(""unsigned int "", ""const arma::mat& "")","c("" df"", "" S"")"
"169","BMTME","MVnormvv","c(""arma::vec "", ""const arma::mat& "")","c("" mean"", "" S"")"
"170","BMTME","MatMul","c(""arma::mat& "", ""arma::mat& "")","c("" X"", "" Y"")"
"171","BMTME","Krone","c(""const arma::mat& "", ""const arma::mat& "")","c("" A"", "" B"")"
"172","BOSSreg","guideQR","c(""arma::mat "", ""arma::vec "", ""int "")","c("" x"", "" y"", "" maxstep"")"
"173","BTLLasso","cumfit","c(""NumericMatrix "", ""double "", ""int "", ""NumericMatrix "", ""double "", ""NumericMatrix "", ""List "", ""NumericMatrix "", ""int "", ""int "", ""double "", ""NumericMatrix "", ""NumericVector "", ""double "", ""double "", ""std::string "", ""int "", ""double "", ""NumericMatrix "")","c("" betanew2"", "" epsilon"", "" maxiter"", "" acoefs2"", "" lambda"", "" weight2"", "" control"", "" design2"", "" N"", "" n"", "" q"", "" resp2"", "" index"", "" c"", "" gama"", "" norm"", "" hatmatrix"", "" lambda2"", "" checktheta2"")"
"174","BTLLasso","binfit","c(""NumericMatrix "", ""double "", ""int "", ""NumericMatrix "", ""double "", ""NumericMatrix "", ""List "", ""NumericMatrix "", ""int "", ""int "", ""int "", ""NumericMatrix "", ""NumericVector "", ""double "", ""double "", ""std::string "", ""int "", ""double "")","c("" betanew2"", "" epsilon"", "" maxiter"", "" acoefs2"", "" lambda"", "" weight2"", "" control"", "" design2"", "" N"", "" n"", "" q"", "" resp2"", "" index"", "" c"", "" gama"", "" norm"", "" hatmatrix"", "" lambda2"")"
"175","BVSNLP","null_mle_lreg","c(""arma::mat& "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""int "")","c("" XX"", "" n"", "" p"", "" cons"", "" a"", "" b"", "" sprob"", "" niters"")"
"176","BVSNLP","logreg_bvs","c(""const arma::mat& "", ""arma::uvec "", ""int "", ""double "", ""double "", ""const int "", ""int "", ""int "", ""int "", ""int "", ""bool "", ""arma::uvec "")","c("" exmat"", "" chain1"", "" nf"", "" tau"", "" r"", "" nlptype"", "" a"", "" b"", "" in_cons"", "" loopcnt"", "" cplng"", "" chain2"")"
"177","BVSNLP","lreg_coef_est","c(""const arma::mat& "", ""arma::uvec "", ""double "", ""double "", ""const int "")","c("" exmat"", "" mod_cols"", "" tau"", "" r"", "" nlptype"")"
"178","BVSNLP","lreg_mod_prob","c(""const arma::mat& "", ""arma::uvec "", ""double "", ""double "", ""int "", ""int "", ""const int "")","c("" exmat"", "" mod_cols"", "" tau"", "" r"", "" a"", "" b"", "" nlptype"")"
"179","BVSNLP","null_mle_cox","c(""arma::mat& "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""int "")","c("" XX"", "" n"", "" p"", "" cons"", "" a"", "" b"", "" csr"", "" niters"")"
"180","BVSNLP","cox_bvs","c(""const arma::mat& "", ""arma::uvec "", ""int "", ""double "", ""double "", ""const int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""arma::vec "")","c("" exmat"", "" cur_cols"", "" nf"", "" tau"", "" r"", "" nlptype"", "" a"", "" b"", "" d"", "" L"", "" J"", "" temps"")"
"181","BVSNLP","inc_prob_calc","c(""arma::vec "", ""List "", ""int "")","c("" all_probs"", "" vis_covs"", "" p"")"
"182","BVSNLP","cox_coef_est","c(""const arma::mat& "", ""arma::uvec "", ""double "", ""double "", ""const int "")","c("" exmat"", "" mod_cols"", "" tau"", "" r"", "" nlptype"")"
"183","BVSNLP","cox_mod_prob","c(""const arma::mat& "", ""arma::uvec "", ""double "", ""double "", ""int "", ""int "", ""const int "")","c("" exmat"", "" mod_cols"", "" tau"", "" r"", "" a"", "" b"", "" nlptype"")"
"184","BVSNLP","aucBMA_logistic","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""double "", ""double "", ""const int "", ""arma::vec "", ""ListOf<IntegerVector> "", ""int "")","c("" X_tr"", "" y_tr"", "" X_te"", "" y_te"", "" tau"", "" r"", "" nlptype"", "" probs"", "" models"", "" k"")"
"185","BVSNLP","aucBMA_survival","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""double "", ""double "", ""const int "", ""arma::vec "", ""arma::vec "", ""ListOf<IntegerVector> "", ""int "")","c("" X_tr"", "" TS_tr"", "" X_te"", "" TS_te"", "" tau"", "" r"", "" nlptype"", "" times"", "" probs"", "" models"", "" k"")"
"186","BayesLN","rmn_mu_S2","c(""Eigen::VectorXd& "", ""const int "", ""const Eigen::VectorXd "", ""const Eigen::MatrixXd "")","c("" rnd_vec"", "" p"", "" mu"", "" S"")"
"187","BayesLN","MCMC_alg","c(""const Eigen::VectorXd "", ""const Eigen::MatrixXd "", ""const List "", ""const List "", ""const Eigen::MatrixXd "", ""double "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""int "", ""int "", ""int "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "")","c("" y"", "" X"", "" Z_list"", "" K_gamma_list"", "" S_beta_pri"", "" l_s"", "" l_t"", "" d_s"", "" d_t"", "" g_s"", "" g_t"", "" s"", "" nsamp"", "" verbose"", "" beta_init"", "" sigma2_init"", "" tau2_init"")"
"188","BayesLN","post_pred","c(""List "", ""Eigen::MatrixXd "", ""List "", ""int "", ""int "")","c("" output"", "" Xrep"", "" Zrep_list"", "" s"", "" nsamp"")"
"189","BayesSPsurv","llikWeibull","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "")","c("" Y"", "" Y0"", "" eXB"", "" delta"", "" C"", "" LY"", "" rho"")"
"190","BayesMFSurv","llikWeibull2","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "")","c("" Y"", "" Y0"", "" eXB"", "" alpha"", "" C"", "" lambda"")"
"191","BayesMRA","rmvn_arma","c(""arma::mat& "", ""arma::vec& "")","c("" A"", "" b"")"
"192","BayesMRA","rmvn_arma_chol","c(""arma::mat& "", ""arma::vec& "")","c("" A_chol"", "" b"")"
"193","BayesMRA","rmvn_arma_scalar","c(""const double& "", ""const double& "")","c("" a"", "" b"")"
"194","BayesProject","bayes_vhat","c(""MatrixXd "", ""VectorXd "", ""double "")","c("" x"", "" timePoints"", "" K"")"
"195","BayesProject","bayes_cpt","c(""MatrixXd "", ""VectorXd "", ""double "")","c("" x"", "" timePoints"", "" K"")"
"196","BayesProject","sum_max_cusum","c(""MatrixXd "", ""bool "")","c("" x"", "" sum_cusum"")"
"197","BayesReversePLLH","ApproxMean","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" Y"", "" s"", "" lam"", "" J"")"
"198","BayesReversePLLH","SurvPLLH","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" Y"", "" s"", "" lam"", "" J"")"
"199","BayesReversePLLH","BayesPiecewiseLinearLogHazardTrt","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "")","c("" Y"", "" I1"", "" Trt"", "" Poi"", "" B"")"
"200","BayesReversePLLH","BayesPiecewiseHazardTrt","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "")","c("" Y"", "" I1"", "" Trt"", "" Poi"", "" B"")"
"201","BayesReversePLLH","BayesPiecewiseHazardCOV","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""int "")","c("" Y"", "" I1"", "" COV"", "" Poi"", "" B"")"
"202","BayesReversePLLH","BayesPiecewiseLinearLogHazardCOV","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""int "")","c("" Y"", "" I1"", "" COV"", "" Poi"", "" B"")"
"203","BayesReversePLLH","BayesPiecewiseHazard","c(""arma::vec "", ""arma::vec "", ""double "", ""int "")","c("" Y"", "" I1"", "" Poi"", "" B"")"
"204","BayesReversePLLH","BayesPiecewiseLinearLogHazard","c(""arma::vec "", ""arma::vec "", ""double "", ""int "")","c("" Y"", "" I1"", "" Poi"", "" B"")"
"205","BayesSPsurv","llikLoglog","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "")","c("" Y"", "" Y0"", "" eXB"", "" delta"", "" C"", "" LY"", "" rho"")"
"206","Bayesrel","csdpArma","c(""int "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::ivec& "", ""const List& "", ""const List& "", ""const arma::dvec& "", ""const arma::cube& "", ""const int "")","c("" n_p"", "" nconstraints_p"", "" nblocks_p"", "" blocktypes_p"", "" blocksizes_p"", "" C_p"", "" A_p"", "" b_p"", "" car"", "" printlevel"")"
"207","Bayesrel","alphaArma","const arma::mat& "," X"
"208","Bayesrel","l2Arma","const arma::mat& "," X"
"209","Bayesrel","l6Arma","const arma::mat& "," X"
"210","Bayesrel","pfaArma","const arma::mat& "," X"
"211","BeSS","bess_lm","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXd "")","c("" X"", "" y"", "" T0"", "" max_steps"", "" beta0"")"
"212","BeSS","get_A","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""double& "", ""int& "", ""Eigen::VectorXi& "", ""Eigen::VectorXd& "")","c("" X"", "" y"", "" beta"", "" coef0"", "" T0"", "" B"", "" weights"")"
"213","BeSS","getcox_A","c(""Eigen::MatrixXd& "", ""Eigen::VectorXd& "", ""int& "", ""Eigen::VectorXi& "", ""Eigen::VectorXd& "", ""Eigen::VectorXd& "")","c("" X"", "" beta"", "" T0"", "" B"", "" status"", "" weights"")"
"214","BeSS","EigenR","Eigen::MatrixXd "," X"
"215","BeSS","gbess_lm","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""List "", ""List "", ""int "", ""int "", ""Eigen::VectorXd "", ""int "", ""int "", ""int "")","c("" X"", "" y"", "" G"", "" index"", "" PhiG"", "" invPhiG"", "" T0"", "" max_steps"", "" beta0"", "" n"", "" p"", "" N"")"
"216","BeSS","gget_A","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""Eigen::VectorXd "", ""double "", ""int "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXi "")","c("" X"", "" y"", "" G"", "" index"", "" T0"", "" beta0"", "" coef0"", "" n"", "" p"", "" N"", "" weights"", "" B00"")"
"217","BeSS","ggetcox_A","c(""Eigen::MatrixXd "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""Eigen::VectorXd "", ""int "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXi "")","c("" X"", "" G"", "" index"", "" T0"", "" beta0"", "" n"", "" p"", "" N"", "" status"", "" weights"", "" B00"")"
"218","BeviMed","bevimed_mc","c(""int "", ""LogicalVector "", ""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""LogicalMatrix "", ""bool "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""bool "", ""NumericVector "", ""double "", ""double "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "", ""int "", ""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""bool "", ""bool "")","c("" its"", "" y"", "" var_block_start_index"", "" var_block_stop_index"", "" cases"", "" counts"", "" min_ac"", "" tau_shape1"", "" tau_shape2"", "" pi_shape1"", "" pi_shape2"", "" z_shape1"", "" z_shape2"", "" z0"", "" estimate_logit_z_rate"", "" logit_z_rates"", "" logit_z_rate_proposal_sds"", "" z_weights"", "" estimate_phi"", "" log_phis"", "" log_phi_mean"", "" log_phi_sd"", "" log_phi_proposal_sds"", "" t"", "" swaps"", "" annealing"", "" tandem_variant_updates"", "" y1_case_block_start_index"", "" y1_case_block_stop_index"", "" y1_variants"", "" return_z_trace"", 
"" return_x_trace"")"
"219","BiProbitPartial","MCMC1","c(""const arma::mat "", ""const arma::mat "", ""const arma::mat "", ""NumericVector "", ""NumericVector "", ""double "", ""bool "", ""int "", ""NumericVector "", ""NumericMatrix "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" X1"", "" X2"", "" Z"", "" beta1"", "" beta2"", "" rho"", "" fixrho"", "" S"", "" beta0"", "" B0inv"", "" rho0"", "" v0"", "" nu"", "" P"", "" tauSq"", "" seed"")"
"220","BigQuic","BigQuicHelper","std::vector<std::string> "," argvPasser"
"221","BinSegBstrap","CVonesided","c(""const NumericVector& "", ""const NumericVector& "")","c("" Y"", "" K"")"
"222","BinSegBstrap","CVtowsided","c(""const NumericVector& "", ""const NumericVector& "")","c("" Y"", "" K"")"
"223","BinSegBstrap","DmaxVec","c(""const NumericVector& "", ""const int "")","c("" Y"", "" bint"")"
"224","BinSegBstrap","kernelSmoothing","c(""const NumericVector& "", ""const NumericVector& "")","c("" Y"", "" K"")"
"225","BinaryDosage","GetLineLocations","std::string& "," filename"
"226","BinaryDosage","ReadBinaryDosageBaseHeader","std::string& "," filename"
"227","BinaryDosage","ReadBinaryDosageHeader3A","std::string& "," filename"
"228","BinaryDosage","ReadBinaryDosageHeader3B","std::string& "," filename"
"229","BinaryDosage","ReadBinaryDosageHeader4A","std::string& "," filename"
"230","BinaryDosage","ReadBinaryDosageHeader4B","std::string& "," filename"
"231","BinaryDosage","ReadBDIndices3C","c(""std::string "", ""int "", ""int "")","c("" filename"", "" numSNPs"", "" indexStart"")"
"232","BinaryDosage","ReadBDIndices4C","c(""std::string "", ""int "", ""int "")","c("" filename"", "" numSNPs"", "" headersize"")"
"233","BinaryDosage","ReadBinaryDosageDataC","c(""std::string& "", ""int "", ""int "", ""int "", ""NumericVector& "", ""IntegerVector& "", ""int "")","c("" filename"", "" headersize"", "" numsub"", "" snp"", "" dosage"", "" us"", "" base"")"
"234","BinaryDosage","ReadBinaryDosageDataP1P2","c(""std::string& "", ""int "", ""int "", ""int "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""IntegerVector& "", ""int "")","c("" filename"", "" headersize"", "" numsub"", "" snp"", "" dosage"", "" p0"", "" p1"", "" p2"", "" us"", "" base"")"
"235","BinaryDosage","ReadBinaryDosageDataCompressed","c(""std::string& "", ""double "", ""double "", ""int "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""IntegerVector& "")","c("" filename"", "" index"", "" datasize"", "" numsub"", "" dosage"", "" p0"", "" p1"", "" p2"", "" us"")"
"236","BinaryDosage","WriteBinaryDosageBaseHeader","c(""std::string& "", ""int "", ""int "")","c("" filename"", "" format"", "" subformat"")"
"237","BinaryDosage","WriteBinaryDosageHeader3A","c(""std::string& "", ""int "")","c("" filename"", "" numSubjects"")"
"238","BinaryDosage","WriteBinaryDosageHeader3B","c(""std::string& "", ""std::string& "", ""std::string& "", ""int "")","c("" filename"", "" md5samples"", "" md5SNPs"", "" numIndices"")"
"239","BinaryDosage","WriteBinaryDosageHeader4A","c(""std::string& "", ""int "", ""int "", ""int "", ""IntegerVector& "", ""std::string& "", ""std::string& "", ""std::string& "", ""std::string& "", ""IntegerVector& "", ""std::string& "", ""std::string& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""IntegerVector& "", ""int "")","c("" filename"", "" headerEntries"", "" numSubjects"", "" numSNPs"", "" groups"", "" sid"", "" fid"", "" snpid"", "" chromosome"", "" location"", "" reference"", "" alternate"", "" aaf"", "" maf"", "" avgCall"", "" rsq"", "" offsets"", "" numIndices"")"
"240","BinaryDosage","WriteBinaryDosageDataC","c(""std::string& "", ""NumericVector& "", ""IntegerVector& "", ""int "")","c("" filename"", "" dosage"", "" us"", "" base"")"
"241","BinaryDosage","WriteBinaryP1P2Data","c(""std::string& "", ""NumericVector& "", ""NumericVector& "", ""IntegerVector& "", ""int "")","c("" filename"", "" p1"", "" p2"", "" us"", "" base"")"
"242","BinaryDosage","WriteBinaryCompressed","c(""std::string& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "")","c("" filename"", "" dosage"", "" p0"", "" p1"", "" p2"", "" snpnumber"", "" datasize"", "" us"")"
"243","BinaryDosage","WriteBinaryDosageIndicesC","c(""std::string& "", ""int "", ""IntegerVector& "")","c("" filename"", "" headersize"", "" datasize"")"
"244","BinaryDosage","updatesnpinfo","c(""std::string& "", ""int "", ""NumericVector& "")","c("" filename"", "" offset"", "" value"")"
"245","Biocomb","fun1_chi","c(""DataFrame "", ""CharacterVector "")","c("" data"", "" classI"")"
"246","Biocomb","fun2_chi","c(""List "", ""NumericMatrix "")","c("" int_l"", "" mat_int"")"
"247","Biocomb","fun3_chi","c(""List "", ""List "", ""DataFrame "", ""double "", ""NumericMatrix "")","c("" chi_s"", "" int_l"", "" datain"", "" chi_value"", "" mat_int"")"
"248","Biocomb","check_incons","c(""DataFrame "", ""DataFrame "", ""CharacterVector "")","c("" data"", "" vrem_nom"", "" cl"")"
"249","Biocomb","fun4_chi","c(""List "", ""List "", ""DataFrame "", ""DataFrame "", ""NumericVector "", ""NumericVector "", ""CharacterVector "", ""NumericMatrix "", ""double "", ""int "", ""double "", ""int "", ""int "")","c("" chi_s"", "" int_l"", "" datain"", "" vrem_nominal"", "" chi_attr"", "" sig_attr"", "" cl"", "" mat_int"", "" threshold"", "" df"", "" step"", "" delta"", "" shag"")"
"250","Biocomb","forward_path","c(""NumericVector "", ""DataFrame "")","c("" features"", "" m3"")"
"251","HUM","CalcGene","c(""List "", ""NumericMatrix "", ""int "")","c("" s_data"", "" seqAll"", "" prodValue"")"
"252","HUM","CalcROC","c(""List "", ""NumericVector "", ""NumericVector "")","c("" s_data"", "" seq"", "" thresholds"")"
"253","BoltzMM","pfvbm","c(""arma::vec "", ""arma::vec "", ""arma::mat "")","c("" xval"", "" bvec"", "" Mmat"")"
"254","BoltzMM","allpfvbm","c(""arma::vec "", ""arma::mat "")","c("" bvec"", "" Mmat"")"
"255","BoltzMM","rfvbm","c(""int "", ""arma::vec "", ""arma::mat "")","c("" num"", "" bvec"", "" Mmat"")"
"256","BoltzMM","fitfvbm","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""int "")","c("" data"", "" bvec"", "" Mmat"", "" delta_crit"", "" max_it"")"
"257","BoltzMM","fvbmpartiald","c(""arma::mat "", ""List "")","c("" data"", "" model"")"
"258","BoltzMM","fvbmcov","c(""arma::mat "", ""List "", ""Function "")","c("" data"", "" model"", "" fvbmHess"")"
"259","Buddle","Buddle_Main","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""int "", ""int "", ""arma::vec "", ""int "", ""int "", ""double "", ""double "", ""double "", ""arma::vec "", ""String "", ""String "", ""int "", ""String "", ""int "")","c("" X_train"", "" T_train"", "" X_test"", "" T_test"", "" nBatch_Size"", "" nTotal_Iterations"", "" HiddenLayer"", "" bBatch"", "" bDrop"", "" drop_ratio"", "" d_learning_rate"", "" d_init_weight"", "" nstrVec"", "" strOpt"", "" strType"", "" bRand"", "" strDist"", "" bDisp"")"
"260","Buddle","Buddle_Predict","c(""arma::mat "", ""List "", ""List "", ""List "")","c("" X"", "" lW"", "" lb"", "" lParam"")"
"261","BuyseTest","GPC_cpp","c(""arma::mat "", ""arma::mat "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< double > "", ""arma::vec "", ""arma::vec "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""arma::vec "", ""std::vector<unsigned int> "", ""std::vector<unsigned int> "", ""std::vector<int> "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", 
""std::vector< arma::mat > "", ""arma::mat "", ""arma::mat "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""double "", ""int "", ""bool "", ""int "", ""bool "", ""bool "", ""int "", ""int "")","c("" endpoint"", "" status"", "" indexC"", "" posC"", "" indexT"", "" posT"", "" threshold"", "" weight"", "" method"", "" D"", "" D_UTTE"", "" n_strata"", "" nUTTE_analyzedPeron_M1"", "" index_endpoint"", "" index_status"", "" index_UTTE"", "" list_survTimeC"", "" list_survTimeT"", "" list_survJumpC"", "" list_survJumpT"", "" list_lastSurv"", "" p_C"", "" p_T"", "" iid_survJumpC"", "" iid_survJumpT"", "" zeroPlus"", "" correctionUninf"", "" hierarchical"", "" hprojection"", "" neutralAsUninf"", "" keepScore"", "" returnIID"", "" debug"")"
"262","BuyseTest","GPC2_cpp","c(""arma::mat "", ""arma::mat "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< arma::uvec > "", ""std::vector< double > "", ""arma::vec "", ""arma::vec "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""arma::vec "", ""std::vector<unsigned int> "", ""std::vector<unsigned int> "", ""std::vector<int> "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", 
""std::vector< arma::mat > "", ""arma::mat "", ""arma::mat "", ""std::vector< std::vector< arma::mat > > "", ""std::vector< std::vector< arma::mat > > "", ""double "", ""int "", ""bool "", ""int "", ""bool "", ""bool "", ""int "", ""int "")","c("" endpoint"", "" status"", "" indexC"", "" posC"", "" indexT"", "" posT"", "" threshold"", "" weight"", "" method"", "" D"", "" D_UTTE"", "" n_strata"", "" nUTTE_analyzedPeron_M1"", "" index_endpoint"", "" index_status"", "" index_UTTE"", "" list_survTimeC"", "" list_survTimeT"", "" list_survJumpC"", "" list_survJumpT"", "" list_lastSurv"", "" p_C"", "" p_T"", "" iid_survJumpC"", "" iid_survJumpT"", "" zeroPlus"", "" correctionUninf"", "" hierarchical"", "" hprojection"", "" neutralAsUninf"", "" keepScore"", "" returnIID"", "" debug"")"
"263","BuyseTest","calcIntegralSurv_cpp","c(""const arma::mat& "", ""double "", ""double "", ""double "", ""bool "", ""int "", ""arma::mat& "", ""arma::mat& "")","c("" survival"", "" start"", "" lastSurv"", "" lastdSurv"", "" returnDeriv"", "" column"", "" derivSurv"", "" derivSurvD"")"
"264","BuyseTest","calcIntegralCif_cpp","c(""const arma::mat& "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" cif"", "" start_val"", "" stop_val"", "" CIF_t"", "" lastCIF"", "" type"")"
"265","CASMAP","lib_delete_search_e","SEXP "," inst"
"266","CASMAP","lib_delete_search_chi","SEXP "," inst"
"267","CASMAP","lib_delete_search_fastcmh","SEXP "," inst"
"268","CASMAP","lib_delete_search_facs","SEXP "," inst"
"269","CASMAP","lib_read_eth_files","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"", "" encoding"")"
"270","CASMAP","lib_read_eth_files_with_cov_fastcmh","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"", "" covfilename"", "" encoding"")"
"271","CASMAP","lib_read_eth_files_with_cov_facs","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"", "" covfilename"", "" encoding"")"
"272","CASMAP","lib_read_plink_files","c(""SEXP "", ""std::string "", ""std::string "")","c("" inst"", "" base_filename"", "" encoding"")"
"273","CASMAP","lib_read_plink_files_with_cov_fastcmh","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" base_filename"", "" covfilename"", "" encoding"")"
"274","CASMAP","lib_read_plink_files_with_cov_facs","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" base_filename"", "" covfilename"", "" encoding"")"
"275","CASMAP","lib_read_covariates_file_fastcmh","c(""SEXP "", ""std::string "")","c("" inst"", "" cov_filename"")"
"276","CASMAP","lib_read_covariates_file_facs","c(""SEXP "", ""std::string "")","c("" inst"", "" cov_filename"")"
"277","CASMAP","lib_write_eth_files_iset","c(""SEXP "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"")"
"278","CASMAP","lib_write_eth_files_int","c(""SEXP "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"")"
"279","CASMAP","lib_write_eth_files_with_cov_fastcmh","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"", "" covfilename"")"
"280","CASMAP","lib_write_eth_files_with_cov_facs","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "")","c("" inst"", "" x_filename"", "" y_filename"", "" covfilename"")"
"281","CASMAP","lib_execute_iset","c(""SEXP "", ""double "", ""longint "")","c("" inst"", "" alpha"", "" l_max"")"
"282","CASMAP","lib_execute_int","c(""SEXP "", ""double "", ""longint "")","c("" inst"", "" alpha"", "" l_max"")"
"283","CASMAP","lib_summary_write_to_file_fais","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"284","CASMAP","lib_summary_write_to_file_fastcmh","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"285","CASMAP","lib_summary_write_to_file_facs","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"286","CASMAP","lib_profiler_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"287","CASMAP","lib_filter_intervals_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"288","CASMAP","lib_pvals_testable_ints_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"289","CASMAP","lib_pvals_significant_ints_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"290","CASMAP","lib_pvals_testable_isets_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"291","CASMAP","lib_pvals_significant_isets_write_to_file","c(""SEXP "", ""std::string "")","c("" inst"", "" output_file"")"
"292","CASMAP","lib_get_significant_intervals","SEXP "," inst"
"293","CASMAP","lib_get_filtered_intervals","SEXP "," inst"
"294","CASMAP","lib_get_significant_itemsets","SEXP "," inst"
"295","CASMAP","lib_get_result_fais","SEXP "," inst"
"296","CASMAP","lib_get_result_int","SEXP "," inst"
"297","CASMAP","lib_get_result_iset","SEXP "," inst"
"298","CASMAP","lib_get_result_facs","SEXP "," inst"
"299","CB2","quant","c(""std::string "", ""std::vector<std::string> "", ""bool "")","c("" ref_path"", "" fastq_path"", "" verbose"")"
"300","CB2","fit_ab","c(""const arma::mat& "", ""const arma::mat& "")","c("" xvec"", "" nvec"")"
"301","CFC","cscr_samples_Cpp","c(""List "", ""List "", ""List "", ""List "", ""arma::vec "", ""int "", ""double "", ""int "", ""int "")","c("" func_list"", "" init_list"", "" free_list"", "" arg_list"", "" tout"", "" Nmax"", "" rel_tol"", "" nsmp"", "" ncore"")"
"302","CLVTools","bgnbd_nocov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha"", "" a"", "" b"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"")"
"303","CLVTools","bgnbd_staticcov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha"", "" a"", "" b"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_trans"", "" mCov_life"")"
"304","CLVTools","bgnbd_nocov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"305","CLVTools","bgnbd_nocov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"306","CLVTools","bgnbd_staticcov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"307","CLVTools","bgnbd_staticcov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"308","CLVTools","bgnbd_staticcov_alpha_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" alpha_0"", "" vCovParams_trans"", "" mCov_trans"")"
"309","CLVTools","bgnbd_staticcov_a_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" a_0"", "" vCovParams_life"", "" mCov_life"")"
"310","CLVTools","bgnbd_staticcov_b_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" b_0"", "" vCovParams_life"", "" mCov_life"")"
"311","CLVTools","bgnbd_nocov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha"", "" a"", "" b"", "" vX"", "" vT_x"", "" vT_cal"")"
"312","CLVTools","bgnbd_staticcov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha"", "" a"", "" b"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_trans"", "" mCov_life"")"
"313","CLVTools","bgnbd_nocov_expectation","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "")","c("" r"", "" alpha"", "" a"", "" b"", "" vT_i"")"
"314","CLVTools","bgnbd_staticcov_expectation","c(""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" vAlpha_i"", "" vA_i"", "" vB_i"", "" vT_i"")"
"315","CLVTools","vec_gsl_hyp2f0_e","c(""const RcppGSL::Vector& "", ""const RcppGSL::Vector& "", ""const RcppGSL::Vector& "")","c("" vA"", "" vB"", "" vZ"")"
"316","CLVTools","vec_gsl_hyp2f1_e","c(""const RcppGSL::Vector& "", ""const RcppGSL::Vector& "", ""const RcppGSL::Vector& "", ""const RcppGSL::Vector& "")","c("" vA"", "" vB"", "" vC"", "" vZ"")"
"317","CLVTools","gg_LL","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vM_x"")"
"318","CLVTools","ggomnbd_nocov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" b"", "" s"", "" beta_0"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"")"
"319","CLVTools","ggomnbd_staticcov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha_0"", "" b"", "" s"", "" beta_0"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_life"", "" mCov_trans"")"
"320","CLVTools","ggomnbd_nocov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"321","CLVTools","ggomnbd_nocov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"322","CLVTools","ggomnbd_staticcov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"323","CLVTools","ggomnbd_staticcov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"324","CLVTools","ggomnbd_staticcov_alpha_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" alpha_0"", "" vCovParams_trans"", "" mCov_trans"")"
"325","CLVTools","ggomnbd_staticcov_beta_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" beta_0"", "" vCovParams_life"", "" mCov_life"")"
"326","CLVTools","ggomnbd_staticcov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha_0"", "" b"", "" s"", "" beta_0"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_life"", "" mCov_trans"")"
"327","CLVTools","ggomnbd_nocov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" b"", "" s"", "" beta_0"", "" vX"", "" vT_x"", "" vT_cal"")"
"328","CLVTools","ggomnbd_nocov_expectation","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" b"", "" s"", "" beta_0"", "" vT_i"")"
"329","CLVTools","ggomnbd_staticcov_expectation","c(""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" b"", "" s"", "" vAlpha_i"", "" vBeta_i"", "" vT_i"")"
"330","CLVTools","pnbd_nocov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"")"
"331","CLVTools","pnbd_staticcov_CET","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" dPeriods"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_trans"", "" mCov_life"")"
"332","CLVTools","pnbd_nocov_DERT","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" continuous_discount_factor"", "" vX"", "" vT_x"", "" vT_cal"")"
"333","CLVTools","pnbd_staticcov_DERT","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" continuous_discount_factor"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"", "" vCovParams_life"", "" vCovParams_trans"")"
"334","CLVTools","pnbd_nocov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"335","CLVTools","pnbd_nocov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" vLogparams"", "" vX"", "" vT_x"", "" vT_cal"")"
"336","CLVTools","pnbd_staticcov_LL_ind","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"337","CLVTools","pnbd_staticcov_LL_sum","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" vParams"", "" vX"", "" vT_x"", "" vT_cal"", "" mCov_life"", "" mCov_trans"")"
"338","CLVTools","pnbd_staticcov_alpha_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" alpha_0"", "" vCovParams_trans"", "" mCov_trans"")"
"339","CLVTools","pnbd_staticcov_beta_i","c(""const double "", ""const arma::vec& "", ""const arma::mat& "")","c("" beta_0"", "" vCovParams_life"", "" mCov_life"")"
"340","CLVTools","pnbd_nocov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" vX"", "" vT_x"", "" vT_cal"")"
"341","CLVTools","pnbd_staticcov_PAlive","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" r"", "" alpha_0"", "" s"", "" beta_0"", "" vX"", "" vT_x"", "" vT_cal"", "" vCovParams_trans"", "" vCovParams_life"", "" mCov_trans"", "" mCov_life"")"
"342","CLVTools","pnbd_nocov_expectation","c(""const double "", ""const double "", ""const double "", ""const double "", ""const arma::vec& "")","c("" r"", "" s"", "" alpha_0"", "" beta_0"", "" vT_i"")"
"343","CLVTools","pnbd_staticcov_expectation","c(""const double "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" r"", "" s"", "" vAlpha_i"", "" vBeta_i"", "" vT_i"")"
"344","Ckmeans.1d.dp","Ckmeans_1d_dp","c(""const NumericVector& "", ""const size_t "", ""const NumericVector& "", ""const size_t "", ""const size_t "", ""const size_t "", ""IntegerVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""const std::string& "", ""const std::string& "")","c("" x"", "" length"", "" y"", "" ylength"", "" minK"", "" maxK"", "" cluster"", "" centers"", "" withinss"", "" size"", "" BICs"", "" estimate_k"", "" method"")"
"345","Ckmeans.1d.dp","Ckmedian_1d_dp","c(""const NumericVector& "", ""const size_t "", ""const NumericVector& "", ""const size_t "", ""const size_t "", ""const size_t "", ""IntegerVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""const std::string& "", ""const std::string& "")","c("" x"", "" length"", "" y"", "" ylength"", "" minK"", "" maxK"", "" cluster"", "" centers"", "" withinss"", "" size"", "" BICs"", "" estimate_k"", "" method"")"
"346","Ckmeans.1d.dp","Cksegs_1d_dp","c(""const NumericVector& "", ""const size_t "", ""const NumericVector& "", ""const size_t "", ""const size_t "", ""const size_t "", ""IntegerVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""const std::string& "", ""const std::string& "")","c("" x"", "" length"", "" y"", "" ylength"", "" minK"", "" maxK"", "" cluster"", "" centers"", "" withinss"", "" size"", "" BICs"", "" estimate_k"", "" method"")"
"347","Ckmeans.1d.dp","MCW_main","c(""const NumericVector& "", ""const NumericMatrix& "", ""size_t "", ""size_t "", ""const std::string "", ""const std::string "")","c("" x"", "" y"", "" Kmin"", "" Kmax"", "" estimate_k"", "" method"")"
"348","ClustVarLV","critcpp","c(""SEXP "", ""SEXP "")","c("" a"", "" b"")"
"349","ClustVarLV","mincpp","SEXP "," a"
"350","ClustVarLV","powerEigen","Eigen::MatrixXd& "," X"
"351","CoMiRe","labelling_b_C","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" w"", "" phi"", "" f0i"", "" f1i"")"
"352","CoMiRe","labelling_bb_C","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" w"", "" phi"", "" P0"", "" P1"")"
"353","CoMiRe","labelling_c_C","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" y"", "" logpi"", "" mu"", "" tau"")"
"354","CoMiRe","mixdensity_C","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" y"", "" pi"", "" mu"", "" tau"")"
"355","Compack","ALM_GMD","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""arma::mat "", ""arma::vec "", ""arma::umat "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" y"", "" Z"", "" Zc"", "" Zc_proj"", "" beta"", "" lambda"", "" pf"", "" dfmax"", "" pfmax"", "" A"", "" b"", "" group_index"", "" inner_maxiter"", "" outer_maxiter"", "" inner_eps"", "" outer_eps"", "" mu_ratio"", "" u_ini"", "" tol"")"
"356","Compack","ALM_CD","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" y"", "" Z"", "" Zc"", "" Zc_proj"", "" beta"", "" lambda"", "" pf"", "" b"", "" A"", "" dfmax"", "" pfmax"", "" inner_maxiter"", "" outer_maxiter"", "" inner_eps"", "" outer_eps"", "" mu_ratio"", "" u_ini"", "" tol"")"
"357","Compack","ALM_CD_comp","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" y"", "" Z"", "" Zc"", "" Zc_proj"", "" beta"", "" lambda"", "" pf"", "" dfmax"", "" pfmax"", "" inner_maxiter"", "" outer_maxiter"", "" inner_eps"", "" outer_eps"", "" mu_ratio"", "" u_ini"", "" tol"")"
"358","Countr","sWeibull","c(""double "", ""const List "")","c("" t"", "" distPars"")"
"359","Countr","sBurr","c(""double "", ""const List "")","c("" t"", "" distPars"")"
"360","Countr","sgamma","c(""double "", ""const List "")","c("" t"", "" distPars"")"
"361","Countr","sgengamma","c(""double "", ""const List "")","c("" t"", "" distPars"")"
"362","Countr","surv","c(""double "", ""const List "", ""const std::string "")","c("" t"", "" distPars"", "" dist"")"
"363","Countr","dCount_allProbs_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"364","Countr","dCount_allProbs_user","c(""arma::Col<unsigned> "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"365","Countr","dCount_allProbs_scalar_bi","c(""unsigned "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"366","Countr","dCount_allProbs_vec_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"367","Countr","dCount_allProbs_scalar_user","c(""unsigned "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"368","Countr","dCount_allProbs_vec_user","c(""arma::Col<unsigned> "", ""const List "", ""const List "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"369","Countr","dCount_dePril_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"370","Countr","dCount_dePril_user","c(""arma::Col<unsigned> "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"371","Countr","dCount_dePril_scalar_bi","c(""unsigned "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"372","Countr","dCount_dePril_vec_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"373","Countr","dCount_dePril_scalar_user","c(""unsigned "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"374","Countr","dCount_dePril_vec_user","c(""arma::Col<unsigned> "", ""const List "", ""const List "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"375","Countr","dCount_naive_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"376","Countr","dCount_naive_user","c(""arma::Col<unsigned> "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"377","Countr","dCount_naive_scalar_bi","c(""unsigned "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"378","Countr","dCount_naive_vec_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"379","Countr","dCount_naive_scalar_user","c(""unsigned "", ""const List "", ""arma::vec "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"380","Countr","dCount_naive_vec_user","c(""arma::Col<unsigned> "", ""const List "", ""const List "", ""Function "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" extrapolPars"", "" survR"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"381","Countr","getProbsmodified_dePril","c(""unsigned "", ""const List "", ""const std::string "", ""const List "", ""const std::string "", ""arma::vec "", ""const unsigned& "", ""double "", ""bool "")","c("" xnum"", "" distPars"", "" dist"", "" distPars0"", "" dist0"", "" extrapolPars"", "" nsteps"", "" time"", "" extrap"")"
"382","Countr","dmodifiedCount_bi","c(""arma::Col<unsigned> "", ""const List "", ""const std::string "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" distPars0"", "" dist0"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"383","Countr","dmodifiedCount_user","c(""arma::Col<unsigned> "", ""const List "", ""Function "", ""const List "", ""Function "", ""arma::vec "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" survR"", "" distPars0"", "" survR0"", "" extrapolPars"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"384","Countr","dmodifiedCount_scalar_bi","c(""unsigned "", ""const List "", ""const std::string "", ""const List "", ""const std::string "", ""const unsigned& "", ""double "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" dist"", "" distPars0"", "" dist0"", "" nsteps"", "" time"", "" extrap"", "" logFlag"")"
"385","Countr","dmodifiedCount_scalar_user","c(""unsigned "", ""const List "", ""Function "", ""const List "", ""Function "", ""arma::vec "", ""const unsigned& "", ""double "", ""bool "", ""bool "", ""bool "")","c("" x"", "" distPars"", "" survR"", "" distPars0"", "" survR0"", "" extrapolPars"", "" nsteps"", "" time"", "" extrap"", "" cdfout"", "" logFlag"")"
"386","Countr","dWeibullgammaCount_mat","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" shape"", "" r"", "" alpha"", "" time"", "" logFlag"", "" jmax"")"
"387","Countr","dWeibullgammaCount_mat_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" shape"", "" r"", "" alpha"", "" time"", "" logFlag"", "" jmax"")"
"388","Countr","dWeibullgammaCount_mat_Covariates","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""arma::mat "", ""arma::vec "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" cc"", "" r"", "" alpha"", "" Xcovar"", "" beta"", "" t"", "" logFlag"", "" jmax"")"
"389","Countr","dWeibullgammaCount_mat_Covariates_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""double "", ""double "", ""arma::mat "", ""arma::vec "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" cc"", "" r"", "" alpha"", "" Xcovar"", "" beta"", "" t"", "" logFlag"", "" jmax"")"
"390","Countr","dWeibullgammaCount_acc","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" shape"", "" r"", "" alpha"", "" time"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"391","Countr","dWeibullgammaCount_acc_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" shape"", "" r"", "" alpha"", "" time"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"392","Countr","dWeibullgammaCount_acc_Covariates","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""arma::mat "", ""arma::vec "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" cc"", "" r"", "" alpha"", "" Xcovar"", "" beta"", "" t"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"393","Countr","dWeibullgammaCount_acc_Covariates_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""double "", ""double "", ""arma::mat "", ""arma::vec "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" cc"", "" r"", "" alpha"", "" Xcovar"", "" beta"", "" t"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"394","Countr","alphagen","c(""double "", ""unsigned "", ""unsigned "")","c("" cc"", "" jrow"", "" ncol"")"
"395","Countr","dWeibullCount_mat","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" shape"", "" scale"", "" time"", "" logFlag"", "" jmax"")"
"396","Countr","dWeibullCount_mat_scalar","c(""unsigned "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" shape"", "" scale"", "" time"", "" logFlag"", "" jmax"")"
"397","Countr","dWeibullCount_mat_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""arma::vec "", ""double "", ""bool "", ""unsigned "")","c("" x"", "" shape"", "" scale"", "" time"", "" logFlag"", "" jmax"")"
"398","Countr","dWeibullCount_acc","c(""arma::Col<unsigned> "", ""double "", ""double "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" shape"", "" scale"", "" time"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"399","Countr","dWeibullCount_acc_vec","c(""arma::Col<unsigned> "", ""arma::vec "", ""arma::vec "", ""double "", ""bool "", ""unsigned "", ""int "", ""double "", ""bool "")","c("" x"", "" shape"", "" scale"", "" time"", "" logFlag"", "" jmax"", "" nmax"", "" eps"", "" printa"")"
"400","Cyclops","cyclopsGetComputeDevice","SEXP "," inRcppCcdInterface"
"401","Cyclops","cyclopsSetBeta","c(""SEXP "", ""const std::vector<double>& "")","c("" inRcppCcdInterface"", "" beta"")"
"402","Cyclops","cyclopsSetFixedBeta","c(""SEXP "", ""int "", ""bool "")","c("" inRcppCcdInterface"", "" beta"", "" fixed"")"
"403","Cyclops","cyclopsGetIsRegularized","c(""SEXP "", ""const int "")","c("" inRcppCcdInterface"", "" index"")"
"404","Cyclops","cyclopsSetWeights","c(""SEXP "", ""NumericVector& "")","c("" inRcppCcdInterface"", "" weights"")"
"405","Cyclops","cyclopsSetCensorWeights","c(""SEXP "", ""NumericVector& "")","c("" inRcppCcdInterface"", "" weights"")"
"406","Cyclops","cyclopsGetPredictiveLogLikelihood","c(""SEXP "", ""NumericVector& "")","c("" inRcppCcdInterface"", "" weights"")"
"407","Cyclops","cyclopsGetNewPredictiveLogLikelihood","c(""SEXP "", ""NumericVector& "")","c("" inRcppCcdInterface"", "" weights"")"
"408","Cyclops","cyclopsGetLogLikelihood","SEXP "," inRcppCcdInterface"
"409","Cyclops","cyclopsGetFisherInformation","c(""SEXP "", ""const SEXP "")","c("" inRcppCcdInterface"", "" sexpCovariates"")"
"410","Cyclops","cyclopsSetPrior","c(""SEXP "", ""const std::vector<std::string>& "", ""const std::vector<double>& "", ""SEXP "", ""SEXP "", ""List "")","c("" inRcppCcdInterface"", "" priorTypeName"", "" variance"", "" excludeNumeric"", "" sexpGraph"", "" sexpNeighborhood"")"
"411","Cyclops","cyclopsTestParameterizedPrior","c(""Function& "", ""const std::vector<double>& "", ""const std::vector<int>& "", ""const std::vector<double>& "")","c("" priorFunction"", "" startingParameters"", "" indices"", "" values"")"
"412","Cyclops","cyclopsSetParameterizedPrior","c(""SEXP "", ""const std::vector<std::string>& "", ""Function& "", ""const std::vector<double>& "", ""SEXP "")","c("" inRcppCcdInterface"", "" priorTypeName"", "" priorFunction"", "" startingParameters"", "" excludeNumeric"")"
"413","Cyclops","cyclopsGetProfileLikelihood","c(""SEXP "", ""SEXP "", ""const std::vector<double> "", ""int "", ""bool "")","c("" inRcppCcdInterface"", "" inCovariate"", "" points"", "" threads"", "" includePenalty"")"
"414","Cyclops","cyclopsProfileModel","c(""SEXP "", ""SEXP "", ""int "", ""double "", ""bool "", ""bool "")","c("" inRcppCcdInterface"", "" sexpCovariates"", "" threads"", "" threshold"", "" override"", "" includePenalty"")"
"415","Cyclops","cyclopsPredictModel","SEXP "," inRcppCcdInterface"
"416","Cyclops","cyclopsSetControl","c(""SEXP "", ""int "", ""double "", ""const std::string& "", ""bool "", ""int "", ""int "", ""double "", ""double "", ""int "", ""const std::string& "", ""int "", ""int "", ""bool "", ""double "", ""bool "", ""int "", ""const std::string& "", ""double "", ""int "", ""const std::string& "")","c("" inRcppCcdInterface"", "" maxIterations"", "" tolerance"", "" convergenceType"", "" useAutoSearch"", "" fold"", "" foldToCompute"", "" lowerLimit"", "" upperLimit"", "" gridSteps"", "" noiseLevel"", "" threads"", "" seed"", "" resetCoefficients"", "" startingVariance"", "" useKKTSwindle"", "" swindleMultipler"", "" selectorType"", "" initialBound"", "" maxBoundCount"", "" algorithm"")"
"417","Cyclops","cyclopsRunCrossValidationl","SEXP "," inRcppCcdInterface"
"418","Cyclops","cyclopsFitModel","SEXP "," inRcppCcdInterface"
"419","Cyclops","cyclopsLogModel","SEXP "," inRcppCcdInterface"
"420","Cyclops","cyclopsInitializeModel","c(""SEXP "", ""const std::string& "", ""const std::string& "", ""bool "")","c("" inModelData"", "" modelType"", "" computeDevice"", "" computeMLE"")"
"421","Cyclops","isSorted","c(""const DataFrame& "", ""const std::vector<std::string>& "", ""const std::vector<bool>& "")","c("" dataFrame"", "" indexes"", "" ascending"")"
"422","Cyclops","isSortedVectorList","c(""const List& "", ""const std::vector<bool>& "")","c("" vectorList"", "" ascending"")"
"423","Cyclops","cyclopsPrintRowIds","Environment "," object"
"424","Cyclops","isRcppPtrNull","SEXP "," x"
"425","Cyclops","cyclopsGetNumberOfStrata","Environment "," object"
"426","Cyclops","cyclopsGetCovariateIds","Environment "," object"
"427","Cyclops","cyclopsGetCovariateType","c(""Environment "", ""const std::vector<double>& "")","c("" object"", "" bitCovariateLabel"")"
"428","Cyclops","cyclopsGetFloatingPointSize","Environment "," object"
"429","Cyclops","cyclopsGetNumberOfColumns","Environment "," object"
"430","Cyclops","cyclopsPrintMatrixMarket","c(""Environment "", ""const std::string& "")","c("" object"", "" file"")"
"431","Cyclops","cyclopsGetNumberOfRows","Environment "," object"
"432","Cyclops","cyclopsGetNumberOfTypes","Environment "," object"
"433","Cyclops","cyclopsUnivariableCorrelation","c(""Environment "", ""const std::vector<long>& "")","c("" x"", "" covariateLabel"")"
"434","Cyclops","cyclopsUnivariableSeparability","c(""Environment "", ""const std::vector<long>& "")","c("" x"", "" covariateLabel"")"
"435","Cyclops","cyclopsSumByGroup","c(""Environment "", ""const std::vector<long>& "", ""const long "", ""const int "")","c("" x"", "" covariateLabel"", "" groupByLabel"", "" power"")"
"436","Cyclops","cyclopsSumByStratum","c(""Environment "", ""const std::vector<long>& "", ""const int "")","c("" x"", "" covariateLabel"", "" power"")"
"437","Cyclops","cyclopsSum","c(""Environment "", ""const std::vector<long>& "", ""const int "")","c("" x"", "" covariateLabel"", "" power"")"
"438","Cyclops","cyclopsNewSqlData","c(""const std::string& "", ""const std::string& "", ""int "")","c("" modelTypeName"", "" noiseLevel"", "" floatingPoint"")"
"439","Cyclops","cyclopsMedian","const NumericVector& "," vector"
"440","Cyclops","cyclopsQuantile","c(""const NumericVector& "", ""double "")","c("" vector"", "" q"")"
"441","Cyclops","cyclopsNormalizeCovariates","c(""Environment "", ""const std::string& "")","c("" x"", "" normalizationName"")"
"442","Cyclops","cyclopsSetHasIntercept","c(""Environment "", ""bool "")","c("" x"", "" hasIntercept"")"
"443","Cyclops","cyclopsGetHasIntercept","Environment "," x"
"444","Cyclops","cyclopsGetHasOffset","Environment "," x"
"445","Cyclops","cyclopsGetMeanOffset","Environment "," x"
"446","Cyclops","cyclopsGetYVector","Environment "," object"
"447","Cyclops","cyclopsGetTimeVector","Environment "," object"
"448","Cyclops","cyclopsFinalizeData","c(""Environment "", ""bool "", ""SEXP "", ""bool "", ""bool "", ""SEXP "", ""bool "")","c("" x"", "" addIntercept"", "" sexpOffsetCovariate"", "" offsetAlreadyOnLogScale"", "" sortCovariates"", "" sexpCovariatesDense"", "" magicFlag"")"
"449","Cyclops","cyclopsLoadDataY","c(""Environment "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "")","c("" x"", "" stratumId"", "" rowId"", "" y"", "" time"")"
"450","Cyclops","cyclopsLoadDataMultipleX","c(""Environment "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const bool "", ""const bool "", ""const bool "", ""const bool "")","c("" x"", "" covariateId"", "" rowId"", "" covariateValue"", "" checkCovariateIds"", "" checkCovariateBounds"", "" append"", "" forceSparse"")"
"451","Cyclops","cyclopsLoadDataX","c(""Environment "", ""const double "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const bool "", ""const bool "", ""const bool "")","c("" x"", "" bitCovariateId"", "" rowId"", "" covariateValue"", "" replace"", "" append"", "" forceSparse"")"
"452","Cyclops","cyclopsAppendSqlData","c(""Environment "", ""const std::vector<int64_t>& "", ""const std::vector<int64_t>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<int64_t>& "", ""const std::vector<int64_t>& "", ""const std::vector<double>& "")","c("" x"", "" oStratumId"", "" oRowId"", "" oY"", "" oTime"", "" cRowId"", "" cCovariateId"", "" cCovariateValue"")"
"453","Cyclops","cyclopsGetInterceptLabel","Environment "," x"
"454","Cyclops","cyclopsReadFileData","c(""const std::string& "", ""const std::string& "")","c("" fileName"", "" modelTypeName"")"
"455","Cyclops","cyclopsModelData","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""const std::string& "", ""bool "", ""int "", ""int "")","c("" pid"", "" y"", "" z"", "" offs"", "" dx"", "" sx"", "" ix"", "" modelTypeName"", "" useTimeAsOffset"", "" numTypes"", "" floatingPoint"")"
"456","DDRTree","pca_projection","c(""SEXP "", ""int "")","c("" R_C"", "" dimensions"")"
"457","DDRTree","sqdist","c(""SEXP "", ""SEXP "")","c("" R_a"", "" R_b"")"
"458","DDRTree","DDRTree_reduce_dim","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" R_X"", "" R_Z"", "" R_Y"", "" R_W"", "" R_dimensions"", "" R_maxiter"", "" R_num_clusters"", "" R_sigma"", "" R_lambda"", "" R_gamma"", "" R_eps"", "" R_verbose"")"
"459","DatAssim","datassimcpp","c(""arma::mat& "", ""arma::mat& "", ""arma::mat "")","c("" pred"", "" var"", "" Corr"")"
"460","DataGraph","writeDTable","c(""const std::string& "", ""SEXP "")","c("" path"", "" data"")"
"461","DataGraph","openDTable","const std::string& "," path"
"462","DataGraph","syncDTable","const std::string& "," path"
"463","DataGraph","closeDTable","const std::string& "," path"
"464","DataGraph","addDTable","c(""const std::string& "", ""SEXP "")","c("" path"", "" data"")"
"465","DataGraph","openDTBin","const std::string& "," path"
"466","DataGraph","closeDTBin","const std::string& "," path"
"467","DataGraph","syncDTBin","const std::string& "," path"
"468","DataGraph","infoDTBin","const std::string& "," path"
"469","DataGraph","addDTBin","c(""const std::string& "", ""const std::string& "", ""SEXP "", ""double "")","c("" path"", "" name"", "" data"", "" time"")"
"470","DataViz","rcpp_forcelayout","c(""DataFrame "", ""String "")","c("" schedule"", "" path"")"
"471","DataViz","rcpp_throwchart","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""int "", ""String "")","c("" before"", "" after"", "" col"", "" id"", "" lwd"", "" xlim"", "" ylim"", "" offSet"", "" path"")"
"472","DiffNet","GHD_Fast","c(""Eigen::SparseMatrix<double> "", ""Eigen::SparseMatrix<double> "")","c("" A"", "" B"")"
"473","DiffNet","MU_Fast","c(""Eigen::SparseMatrix<double> "", ""Eigen::SparseMatrix<double> "")","c("" A"", "" B"")"
"474","DiffNet","STD_Fast","c(""Eigen::SparseMatrix<double> "", ""Eigen::SparseMatrix<double> "")","c("" A"", "" B"")"
"475","DiscreteFDR","kernel_DBH_fast","c(""const List& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const NumericVector& "")","c("" pCDFlist"", "" pvalues"", "" stepUp"", "" alpha"", "" support"")"
"476","DiscreteFDR","kernel_DBH_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" stepUp"", "" alpha"")"
"477","DiscreteFDR","kernel_ADBH_fast","c(""const List& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const NumericVector& "")","c("" pCDFlist"", "" pvalues"", "" stepUp"", "" alpha"", "" support"")"
"478","DiscreteFDR","kernel_ADBH_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" stepUp"", "" alpha"")"
"479","DiscreteFDR","kernel_DBR_fast","c(""const List& "", ""const NumericVector& "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" lambda"")"
"480","DiscreteFDR","kernel_DBR_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" lambda"", "" alpha"")"
"481","DstarM","simpsonC","c(""const arma::vec& "", ""const arma::mat& "")","c("" x"", "" fx"")"
"482","DstarM","dunifc","c(""const arma::vec& "", ""const double& "", ""const double& "")","c("" x"", "" a"", "" b"")"
"483","DstarM","convolveC","c(""const arma::vec& "", ""const arma::vec& "")","c("" x"", "" y"")"
"484","DstarM","convolveC2","c(""arma::mat& "", ""arma::mat& "")","c("" x"", "" y"")"
"485","DstarM","chisqC","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" tt"", "" a"", "" b"")"
"486","DstarM","rObjC3","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "")","c("" r"", "" tt"", "" a"", "" bb"", "" lenPre"", "" lenPost"")"
"487","DstarM","rObjC2","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "")","c("" r"", "" tt"", "" a"", "" bb"", "" lenPre"")"
"488","DstarM","rObjC1","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "")","c("" r"", "" tt"", "" a"", "" bb"", "" lenPost"")"
"489","DstarM","rObjC0","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "")","c("" r"", "" tt"", "" a"", "" bb"")"
"490","DstarM","nthMomentSC","c(""const arma::vec& "", ""const arma::vec& "", ""const int& "")","c("" x"", "" fx"", "" nth"")"
"491","DstarM","nthCMomentSC","c(""const arma::vec& "", ""const arma::vec& "", ""const int& "")","c("" x"", "" fx"", "" nth"")"
"492","DstarM","getVarC","c(""arma::mat "", ""const arma::vec& "", ""const arma::mat& "")","c("" Pdf"", "" tt"", "" mm2"")"
"493","DstarM","oscCheckC","const arma::mat& "," x"
"494","DstarM","getVoss","c(""arma::vec& "", ""arma::mat& "", ""const double& "")","c("" rt"", "" pars"", "" precision"")"
"495","DstarM","imposeFixationsC","c(""arma::vec& "", ""const arma::mat "")","c("" pars"", "" fixed"")"
"496","DstarM","getPdfC","c(""arma::vec& "", ""arma::mat "", ""const arma::mat& "", ""const bool& "", ""const bool& "", ""const double& "")","c("" tt"", "" pars"", "" mm"", "" DstarM"", "" oscPdf"", "" precision"")"
"497","DstarM","totalobjectiveC","c(""arma::vec "", ""arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""arma::mat "", ""const arma::mat& "", ""const arma::mat& "", ""const bool& "", ""const bool& "", ""const bool& "", ""double "", ""const bool& "", ""arma::mat "")","c("" pars"", "" tt"", "" ql"", "" ii"", "" jj"", "" varData"", "" g"", "" restr"", "" mm"", "" mm2"", "" DstarM"", "" oscPdf"", "" forceRestriction"", "" precision"", "" anyFixed"", "" fixed"")"
"498","DysPIA","calcDyspiaStatCumulativeBatch","c(""NumericVector const& "", ""double "", ""NumericVector const& "", ""IntegerVector const& "", ""int "", ""int "")","c("" stats"", "" DyspiaParam"", "" pathwayScores"", "" pathwaysSizes"", "" iterations"", "" seed"")"
"499","DysPIA","calcDyspiaStatCumulative","c(""NumericVector const& "", ""IntegerVector const& "", ""double "")","c("" stats"", "" selectedStats"", "" DyspiaParam"")"
"500","EAinference","grlasso","c(""NumericMatrix "", ""NumericVector "", ""NumericMatrix "", ""NumericVector "", ""arma::rowvec "", ""double "", ""NumericVector "", ""NumericVector "", ""double "")","c("" X"", "" Y"", "" XY"", "" weights"", "" group"", "" lbd"", "" Gamma"", "" initBeta"", "" eps"")"
"501","ECctmc","sample_path_mr","c(""const int "", ""const int "", ""const double "", ""const double "", ""const NumericMatrix& "")","c("" a"", "" b"", "" t0"", "" t1"", "" Q"")"
"502","ECctmc","sample_path_unif","c(""const int "", ""const int "", ""const double "", ""const double "", ""const arma::mat& "")","c("" a"", "" b"", "" t0"", "" t1"", "" Q"")"
"503","ECctmc","sample_path_unif2","c(""const int "", ""const int "", ""const double "", ""const double "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "")","c("" a"", "" b"", "" t0"", "" t1"", "" Q"", "" eigen_vals"", "" eigen_vecs"", "" inverse_vecs"")"
"504","ECctmc","sample_path_unif3","c(""const int "", ""const int "", ""const double "", ""const double "", ""const arma::mat& "", ""const arma::mat& "")","c("" a"", "" b"", "" t0"", "" t1"", "" Q"", "" P"")"
"505","ECctmc","comp_expmat","const arma::mat& "," Q"
"506","EMVS","conj_EMVS","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" Y_"", "" X_"", "" v0s_"", "" v1_"", "" type_"", "" beta_init_"", "" sigma_init_"", "" epsilon_"", "" temperature_"", "" theta_"", "" a_"", "" b_"", "" v1_g_"", "" direction_"")"
"507","EMVS","ind_EMVS","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" Y_"", "" X_"", "" v0s_"", "" v1_"", "" type_"", "" beta_init_"", "" sigma_init_"", "" epsilon_"", "" temperature_"", "" theta_"", "" a_"", "" b_"", "" direction_"")"
"508","Eagle","ReadBlock","c(""std::string "", ""long "", ""long "", ""long "")","c("" asciifname"", "" start_row"", "" numcols"", "" numrows_in_block"")"
"509","Eagle","ReadBlockBin","c(""std::string "", ""long "", ""long "", ""long "")","c("" binfname"", "" start_row"", "" numcols"", "" numrows_in_block"")"
"510","Eagle","ReshapeM_rcpp","c(""CharacterVector "", ""CharacterVector "", ""std::vector <long> "", ""std::vector <long> "")","c("" fnameM"", "" fnameMt"", "" indxNA"", "" dims"")"
"511","Eagle","calculateMMt_rcpp","c(""CharacterVector "", ""double "", ""int "", ""NumericVector "", ""std::vector<long> "", ""bool "", ""Function "")","c("" f_name"", "" max_memory_in_Gbytes"", "" num_cores"", "" selected_loci"", "" dims"", "" quiet"", "" message"")"
"512","Eagle","calculate_a_and_vara_batch_rcpp","c(""long "", ""CharacterVector "", ""NumericVector "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""std::vector <long> "", ""Eigen::Map<Eigen::MatrixXd> "", ""bool "", ""Function "")","c("" numreps"", "" f_name"", "" selected_loci"", "" inv_MMt_sqrt"", "" dim_reduced_vara"", "" max_memory_in_Gbytes"", "" dims"", "" a"", "" quiet"", "" message"")"
"513","Eagle","calculate_a_and_vara_rcpp","c(""CharacterVector "", ""NumericVector "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""std::vector <long> "", ""Eigen::VectorXd "", ""bool "", ""Function "")","c("" f_name"", "" selected_loci"", "" inv_MMt_sqrt"", "" dim_reduced_vara"", "" max_memory_in_Gbytes"", "" dims"", "" a"", "" quiet"", "" message"")"
"514","Eagle","calculate_reduced_a_rcpp","c(""CharacterVector "", ""double "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""std::vector <long> "", ""NumericVector "", ""bool "", ""Function "")","c("" f_name_ascii"", "" varG"", "" P"", "" y"", "" max_memory_in_Gbytes"", "" dims"", "" selected_loci"", "" quiet"", "" message"")"
"515","Eagle","createM_ASCII_rcpp","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""std::string "", ""std::string "", ""std::string "", ""double "", ""std::vector <long> "", ""bool "", ""Function "", ""std::string "")","c("" f_name"", "" f_name_ascii"", "" type"", "" AA"", "" AB"", "" BB"", "" max_memory_in_Gbytes"", "" dims"", "" quiet"", "" message"", "" missing"")"
"516","Eagle","createM_BIN_rcpp","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""std::string "", ""std::string "", ""std::string "", ""double "", ""std::vector <long> "", ""bool "", ""Function "", ""std::string "")","c("" f_name"", "" f_name_bin"", "" type"", "" AA"", "" AB"", "" BB"", "" max_memory_in_Gbytes"", "" dims"", "" quiet"", "" message"", "" missing"")"
"517","Eagle","createMt_ASCII_rcpp","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""double "", ""std::vector <long> "", ""bool "", ""Function "")","c("" f_name"", "" f_name_ascii"", "" type"", "" max_memory_in_Gbytes"", "" dims"", "" quiet"", "" message"")"
"518","Eagle","createMt_BIN_rcpp","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""double "", ""std::vector <long> "", ""bool "", ""Function "")","c("" f_name_in"", "" f_name_out"", "" type"", "" max_memory_in_Gbytes"", "" dims"", "" quiet"", "" message"")"
"519","Eagle","create_vcf_BIN_rcpp","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""double "", ""bool "", ""Function "")","c("" f_name"", "" f_name_bin_M"", "" f_name_bin_Mt"", "" max_memory_in_Gbytes"", "" quiet"", "" message"")"
"520","Eagle","extract_geno_Mt_rcpp","c(""CharacterVector "", ""long "", ""std::vector<long> "")","c("" f_name"", "" selected_locus"", "" dims"")"
"521","Eagle","extract_geno_rcpp","c(""CharacterVector "", ""double "", ""long "", ""std::vector<long> "")","c("" f_name_ascii"", "" max_memory_in_Gbytes"", "" selected_locus"", "" dims"")"
"522","Eagle","getRowColumn","std::string "," fname"
"523","EigenR","EigenR_det_real","const Eigen::MatrixXd& "," M"
"524","EigenR","EigenR_det_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"525","EigenR","EigenR_det_sparse_real","c(""const std::vector<size_t>& "", ""const std::vector<size_t>& "", ""const std::vector<double>& "", ""const size_t "", ""const size_t "")","c("" i"", "" j"", "" Mij"", "" nrows"", "" ncols"")"
"526","EigenR","EigenR_det_sparse_cplx","c(""const std::vector<size_t>& "", ""const std::vector<size_t>& "", ""const std::vector<std::complex<double>>& "", ""const size_t "", ""const size_t "")","c("" i"", "" j"", "" Mij"", "" nrows"", "" ncols"")"
"527","EigenR","EigenR_rank_real","const Eigen::MatrixXd& "," M"
"528","EigenR","EigenR_rank_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"529","EigenR","EigenR_inverse_real","const Eigen::MatrixXd& "," M"
"530","EigenR","EigenR_inverse_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"531","EigenR","EigenR_kernel_COD_real","const Eigen::MatrixXd& "," M"
"532","EigenR","EigenR_kernel_COD_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"533","EigenR","EigenR_kernel_LU_real","const Eigen::MatrixXd& "," M"
"534","EigenR","EigenR_kernel_LU_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"535","EigenR","EigenR_image_LU_real","const Eigen::MatrixXd& "," M"
"536","EigenR","EigenR_image_LU_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"537","EigenR","EigenR_image_QR_real","const Eigen::MatrixXd& "," M"
"538","EigenR","EigenR_image_QR_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"539","EigenR","EigenR_image_COD_real","const Eigen::MatrixXd& "," M"
"540","EigenR","EigenR_image_COD_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"541","EigenR","EigenR_QR_real","const Eigen::MatrixXd& "," M"
"542","EigenR","EigenR_QR_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"543","EigenR","EigenR_chol_real","const Eigen::MatrixXd& "," M"
"544","EigenR","EigenR_chol_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"545","EigenR","EigenR_chol_sparse_real","c(""const std::vector<size_t>& "", ""const std::vector<size_t>& "", ""const std::vector<double>& "", ""const size_t "", ""const size_t "")","c("" i"", "" j"", "" Mij"", "" nrows"", "" ncols"")"
"546","EigenR","EigenR_chol_sparse_cplx","c(""const std::vector<size_t>& "", ""const std::vector<size_t>& "", ""const std::vector<std::complex<double>>& "", ""const size_t "", ""const size_t "")","c("" i"", "" j"", "" Mij"", "" nrows"", "" ncols"")"
"547","EigenR","EigenR_UtDU_real","const Eigen::MatrixXd& "," M"
"548","EigenR","EigenR_UtDU_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Re"", "" Im"")"
"549","EigenR","EigenR_lsSolve_real","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" A"", "" b"")"
"550","EigenR","EigenR_lsSolve_cplx","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" ReA"", "" ImA"", "" Reb"", "" Imb"")"
"551","EstHer","prod_cpp","const arma::mat& "," Z"
"552","FDRreg","FDRregCPP","c(""NumericVector "", ""const arma::mat& "", ""NumericVector "", ""NumericVector "", ""const arma::mat& "", ""const arma::vec& "", ""int "", ""int "")","c("" z"", "" X"", "" M0"", "" MTot"", "" PriorPrecision"", "" PriorMean"", "" nmc"", "" nburn"")"
"553","FDX","kernel_DLR_fast","c(""const List& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const bool "", ""const double "", ""const NumericVector& "")","c("" pCDFlist"", "" pvalues"", "" adaptive"", "" alpha"", "" stepUp"", "" zeta"", "" support"")"
"554","FDX","kernel_DLR_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const double "", ""const bool "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" adaptive"", "" alpha"", "" zeta"", "" stepUp"")"
"555","FDX","kernel_DGR_fast","c(""const List& "", ""const NumericVector& "", ""const bool "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" adaptive"", "" alpha"")"
"556","FDX","kernel_DGR_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const double "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" adaptive"", "" alpha"", "" zeta"")"
"557","FDX","kernel_DPB_fast","c(""const List& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const bool "")","c("" pCDFlist"", "" pvalues"", "" adaptive"", "" alpha"", "" exact"")"
"558","FDX","kernel_DPB_crit","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const double "", ""const double "", ""const bool "")","c("" pCDFlist"", "" pvalues"", "" sorted_pv"", "" adaptive"", "" alpha"", "" zeta"", "" exact"")"
"559","FDX","geom_weight","c(""const NumericVector& "", ""const NumericVector& "")","c("" pvalues"", "" weights"")"
"560","FDX","kernel_wLR_fast","c(""const NumericVector& "", ""const NumericVector& "", ""double "", ""bool "")","c("" qvalues"", "" weights"", "" alpha"", "" geom_weighting"")"
"561","FDX","kernel_wGR_fast","c(""const NumericVector& "", ""const NumericVector& "", ""double "", ""bool "")","c("" qvalues"", "" weights"", "" alpha"", "" geom_weighting"")"
"562","FDX","kernel_wPB_fast","c(""const NumericVector& "", ""const NumericVector& "", ""double "", ""bool "", ""bool "")","c("" qvalues"", "" weights"", "" alpha"", "" geom_weighting"", "" exact"")"
"563","FIT","initParamsAndDevs","c(""NumericMatrix const "", ""NumericMatrix const "", ""DataFrame const "", ""DataFrame const "", ""CharacterVector const "", ""List const "", ""IntegerVector const "", ""IntegerVector const "")","c("" exprs"", "" weights"", "" attribute_data"", "" weather_data"", "" env_factors"", "" grid_coordinates"", "" data_step"", "" time_step"")"
"564","FIT","inputVars","c(""NumericVector const "", ""CharacterVector const "", ""DataFrame const "", ""DataFrame const "", ""IntegerVector const "", ""IntegerVector const "")","c("" params"", "" env"", "" attribute_data"", "" weather_data"", "" data_step"", "" time_step"")"
"565","FIT","devLm","c(""NumericVector const "", ""CharacterVector const "", ""NumericVector const "", ""NumericVector const "", ""DataFrame const "", ""DataFrame const "", ""IntegerVector const "", ""IntegerVector const "")","c("" params"", "" env"", "" expr"", "" weight"", "" attribute_data"", "" weather_data"", "" data_step"", "" time_step"")"
"566","FIT","coefsLm","c(""NumericVector const "", ""CharacterVector const "", ""NumericVector const "", ""NumericVector const "", ""DataFrame const "", ""DataFrame const "", ""IntegerVector const "", ""IntegerVector const "")","c("" params"", "" env"", "" expr"", "" weight"", "" attribute_data"", "" weather_data"", "" data_step"", "" time_step"")"
"567","FMCCSD","likelihoodi","c(""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const double& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" b"", "" parameters"", "" Delta"", "" X"", "" Z"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"568","FMCCSD","weightfunction","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const arma::field<arma::mat>& "", ""const int& "", ""const int& "")","c("" parameters"", "" rules"", "" Delta"", "" X"", "" Z"", "" n"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"569","FMCCSD","MMfunctioni","c(""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const double& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" b"", "" parameters"", "" lastpar"", "" Delta"", "" X"", "" Z"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"570","FMCCSD","targetfunc","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const arma::field<arma::mat>& "", ""const int& "", ""const int& "", ""const arma::mat& "", ""const double& "")","c("" parameters"", "" lastpar"", "" rules"", "" C"", "" Delta"", "" X"", "" Z"", "" n"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"", "" R"", "" lambda"")"
"571","FMCCSD","MMfunctioninofrailty","c(""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const double& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" b"", "" parameters"", "" lastpar"", "" Delta"", "" X"", "" Z"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"572","FMCCSD","targetfuncfrailty","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const arma::field<arma::mat>& "", ""const int& "", ""const int& "", ""const arma::mat& "", ""const double& "")","c("" parameters"", "" lastpar"", "" rules"", "" C"", "" Delta"", "" X"", "" Z"", "" n"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"", "" R"", "" lambda"")"
"573","FMCCSD","likelihoodfunc1current","c(""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const double& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" b"", "" parameters"", "" C"", "" Delta"", "" X"", "" Z"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"574","FMCCSD","testquadrature1current","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const arma::field<arma::mat>& "", ""const int& "", ""const int& "", ""const arma::mat& "", ""const double& "")","c("" parameters"", "" rules"", "" C"", "" Delta"", "" X"", "" Z"", "" n"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"", "" R"", "" lambda"")"
"575","FMCCSD","penaltyterm","c(""const arma::vec& "", ""const double& "", ""const arma::mat& "")","c("" psi"", "" lambda"", "" R"")"
"576","FMCCSD","likelihoodfunc1currentnofrailty","c(""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const double& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" b"", "" parameters"", "" C"", "" Delta"", "" X"", "" Z"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"")"
"577","FMCCSD","testquadrature1currentnofrailty","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::field<arma::vec>& "", ""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const arma::field<arma::mat>& "", ""const int& "", ""const int& "", ""const arma::mat& "", ""const double& "")","c("" parameters"", "" rules"", "" C"", "" Delta"", "" X"", "" Z"", "" n"", "" ni"", "" r"", "" blC"", "" betadim"", "" gammadim"", "" R"", "" lambda"")"
"578","FSInteract","RIT_1class","c(""SEXP "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""bool "")","c("" z"", "" L"", "" branch"", "" depth"", "" n_trees"", "" min_inter_sz"", "" n_cores"", "" is_sparse"")"
"579","FSInteract","RIT_2class","c(""SEXP "", ""SEXP "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""bool "")","c("" z"", "" z0"", "" L"", "" branch"", "" depth"", "" n_trees"", "" theta0"", "" theta1"", "" min_inter_sz"", "" n_cores"", "" is_sparse"")"
"580","FSelectorRcpp","cutOff_k","c(""std::vector< std::string >& "", ""std::vector<double>& "", ""double "")","c("" x1"", "" x2"", "" k"")"
"581","FSelectorRcpp","discretize_cpp","c(""const NumericVector& "", ""const IntegerVector& "", ""const List& "")","c("" x"", "" y"", "" discControl"")"
"582","FSelectorRcpp","information_gain_cpp","c(""List "", ""IntegerVector "", ""bool "", ""int "")","c("" xx"", "" y"", "" discIntegers"", "" threads"")"
"583","FSelectorRcpp","sparse_information_gain_cpp","c(""arma::sp_mat "", ""IntegerVector "", ""bool "")","c("" x"", "" y"", "" discIntegers"")"
"584","FSelectorRcpp","fs_count_levels","SEXP "," x"
"585","FSelectorRcpp","fs_order","SEXP "," x"
"586","FSelectorRcpp","fs_entropy1d","SEXP "," x"
"587","FSelectorRcpp","fs_table1d","SEXP& "," x"
"588","FSelectorRcpp","fs_table_numeric2d","c(""NumericVector& "", ""NumericVector& "")","c("" x"", "" y"")"
"589","FastBandChol","BandCholcpp","c(""arma::mat "", ""int "")","c("" x"", "" k"")"
"590","FastSF","l0fused_c","c(""arma::vec "", ""int "", ""int "")","c("" y"", "" T0"", "" max_steps"")"
"591","FastSF","l0gen_c","c(""arma::vec "", ""arma::mat "", ""int "", ""int "", ""arma::mat "")","c("" y"", "" D"", "" T0"", "" max_steps"", "" ddinv"")"
"592","FastSF","l0tf_c","c(""arma::vec "", ""int "", ""int "", ""int "")","c("" y"", "" k0"", "" T0"", "" max_steps"")"
"593","FastSF","sl0fused_c","c(""arma::vec "", ""int "", ""int "", ""int "")","c("" y"", "" T0"", "" T02"", "" max_steps"")"
"594","FisHiCal","smacof","c(""NumericMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""int "", ""double "", ""bool "")","c("" diss"", "" w"", "" initConf"", "" niter"", "" eps"", "" verbose"")"
"595","FunChisq","EFTDP","const IntegerMatrix& "," nm"
"596","FunChisq","EFTDQP","const IntegerMatrix& "," nm"
"597","FunChisq","ExactFunctionalTest","c(""const IntegerMatrix& "", ""const LogicalVector& "")","c("" nm"", "" BoundSwitch"")"
"598","FunChisq","interactions","c(""const IntegerMatrix& "", ""const List& "", ""const IntegerVector& "", ""const String& "")","c("" expression_matrix"", "" parent_index"", "" child_index"", "" index_kind"")"
"599","GADAG","gradientdescent","c(""arma::mat "", ""int "", ""arma::mat "", ""float "", ""float "", ""int "", ""float "")","c("" P"", "" n"", "" XtX"", "" L"", "" lambda"", "" maxite"", "" tolobj"")"
"600","GCSM","cmsc","c(""arma::vec "", ""arma::vec "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"601","GCSM","cmsc_sw","c(""arma::mat "", ""arma::mat "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" ksize"", "" globe"", "" comp"")"
"602","GCSM","cmsc_tw","c(""arma::cube "", ""arma::cube "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" xxx"", "" yyy"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"603","GCSM","cmsc_e1","c(""arma::vec "", ""arma::vec "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"604","GCSM","cmsc_e1_sw","c(""arma::mat "", ""arma::mat "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" ksize"", "" globe"", "" comp"")"
"605","GCSM","cmsc_e1_tw","c(""arma::cube "", ""arma::cube "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" xxx"", "" yyy"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"606","GCSM","cmsc_e2","c(""arma::vec "", ""arma::vec "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"607","GCSM","cmsc_e2_sw","c(""arma::mat "", ""arma::mat "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" ksize"", "" globe"", "" comp"")"
"608","GCSM","cmsc_e2_tw","c(""arma::cube "", ""arma::cube "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" xxx"", "" yyy"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"609","GCSM","gcsm","c(""arma::vec "", ""arma::vec "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"610","GCSM","gcsm_sw","c(""arma::mat "", ""arma::mat "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" ksize"", "" globe"", "" comp"")"
"611","GCSM","gcsm_tw","c(""arma::cube "", ""arma::cube "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""std::string "")","c("" xxx"", "" yyy"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" comp"")"
"612","GCSM","ssim_sw","c(""arma::mat "", ""arma::mat "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""std::string "")","c("" x"", "" y"", "" rescale"", "" xmin"", "" xmax"", "" ymin"", "" ymax"", "" ksize"", "" sigma"", "" globe"", "" comp"")"
"613","GLMcat","Discrete_CM","c(""Formula "", ""String "", ""String "", ""CharacterVector "", ""CharacterVector "", ""DataFrame "", ""std::string "", ""double "")","c("" formula"", "" case_id"", "" alternatives"", "" reference"", "" alternative_specific"", "" data"", "" distribution"", "" freedom_degrees"")"
"614","GLMcat","GLMcat","c(""Formula "", ""DataFrame "", ""std::string "", ""std::string "", ""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""double "", ""std::string "", ""Eigen::VectorXd "")","c("" formula"", "" data"", "" ratio"", "" distribution"", "" proportional"", "" categories_order"", "" ref_category"", "" freedom_degrees"", "" threshold"", "" beta_init"")"
"615","GLMcat","predict_glmcat","c(""List "", ""DataFrame "", ""String "")","c("" model_object"", "" data"", "" type"")"
"616","GLMcat","Cat_ref1","c(""CharacterVector "", ""RObject "")","c("" categories_order"", "" response_categories"")"
"617","GMCM","colSdsArma","c(""const arma::mat& "", ""const int "")","c("" X"", "" norm_type"")"
"618","GMCM","rowSdsArma","c(""const arma::mat& "", ""const int "")","c("" X"", "" norm_type"")"
"619","GMCM","dmvnormal","c(""arma::mat& "", ""arma::rowvec "", ""arma::mat "")","c("" x"", "" mu"", "" sigma"")"
"620","GMCM","rmvnormal","c(""const int "", ""arma::rowvec "", ""arma::mat "")","c("" n"", "" mu"", "" sigma"")"
"621","GMCM","dgmm_loglik","c(""List "", ""List "", ""NumericVector "", ""arma::mat& "", ""bool "")","c("" mus"", "" sigmas"", "" pie"", "" z"", "" marginal_loglik"")"
"622","GMCM","dgmm_loglik_marginal","c(""List "", ""List "", ""NumericVector "", ""arma::mat& "", ""bool "")","c("" mus"", "" sigmas"", "" pie"", "" z"", "" marginal_loglik"")"
"623","GMCM","approx_pnorm","c(""arma::colvec& "", ""const double "", ""const double "")","c("" z"", "" mu"", "" sd"")"
"624","GMCM","pgmm_marginal","c(""arma::mat& "", ""List "", ""List "", ""NumericVector "")","c("" z"", "" mus"", "" sigmas"", "" pie"")"
"625","GMCM","EStepRcpp","c(""arma::mat& "", ""List "", ""List "", ""NumericVector "")","c("" z"", "" mus"", "" sigmas"", "" pie"")"
"626","GPCMlasso","loglikPCMlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"627","GPCMlasso","scorePCMlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"628","GPCMlasso","loglikDIFlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"629","GPCMlasso","scoreDIFlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"630","GPCMlasso","loglikscorePCMlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"631","GPCMlasso","loglikscoreDIFlasso","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""arma::vec "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Z"", "" Q"", "" q"", "" n"", "" I"", "" px"", "" GHweights"", "" GHnodes"", "" acoefs"", "" lambda"", "" lambda2"", "" cvalue"", "" cores"", "" weight"", "" n_sigma"", "" scale_fac"")"
"632","GUTS","guts_engine","c(""List "", ""NumericVector "", ""Nullable<NumericVector > "")","c("" gobj"", "" par"", "" z_dist"")"
"633","GiniDistance","VectorSum","NumericVector "," x"
"634","GiniDistance","orderc","NumericVector "," x"
"635","GiniDistance","rcpp_Eu_distance","NumericMatrix "," mat"
"636","GiniDistance","rcpp_covg","c(""NumericVector "", ""NumericVector "")","c("" x"", "" y"")"
"637","GiniDistance","rcpp_covg_alpha","c(""NumericVector "", ""NumericVector "", ""double "")","c("" x"", "" y"", "" alpha"")"
"638","GiniDistance","rcpp_Kernel_Distance","c(""NumericVector "", ""double "")","c("" x"", "" sigma"")"
"639","GiniDistance","Rcpp_Covg","c(""NumericMatrix "", ""NumericVector "")","c("" x"", "" y"")"
"640","GiniDistance","Rcpp_Covg_Alpha","c(""NumericMatrix "", ""NumericVector "", ""double "")","c("" x"", "" y"", "" alpha"")"
"641","GiniDistance","Rcpp_gCov","NumericMatrix "," x"
"642","GiniDistance","Rcpp_gCov_Alpha","c(""NumericMatrix "", ""double "")","c("" x"", "" alpha"")"
"643","GiniDistance","Rcpp_KgCov_Alpha","c(""NumericMatrix "", ""double "", ""double "")","c("" x"", "" alpha"", "" sigma"")"
"644","GiniDistance","Rcpp_KgCor_Alpha","c(""NumericMatrix "", ""double "", ""double "")","c("" x"", "" alpha"", "" sigma"")"
"645","GiniDistance","Rcpp_gCor_Alpha","c(""NumericMatrix "", ""double "")","c("" x"", "" alpha"")"
"646","GiniDistance","Rcpp_gCor","NumericMatrix "," x"
"647","GofKmt","KmtMain","c(""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""String "", ""int "", ""int "")","c("" X"", "" bModified"", "" NormalMat"", "" LogisMat"", "" ReMat"", "" CauchyMat"", "" strDist"", "" bGraph"", "" nNum"")"
"648","GreedyEPL","p__MinimiseAverageVI","c(""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" sample_of_partitions"", "" weights"", "" decision_init"")"
"649","GreedyEPL","p__MinimiseAverageB","c(""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" sample_of_partitions"", "" weights"", "" decision_init"")"
"650","GreedyEPL","p__MinimiseAverageNVI","c(""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" sample_of_partitions"", "" weights"", "" decision_init"")"
"651","GreedyEPL","p__MinimiseAverageNID","c(""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" sample_of_partitions"", "" weights"", "" decision_init"")"
"652","GreedyEPL","p__CollapseLabelsCpp","arma::vec "," decision"
"653","GreedySBTM","cpp_ICLExact","c(""arma::cube "", ""arma::mat "", ""bool "")","c("" adj"", "" z"", "" verbose"")"
"654","GreedySBTM","cpp_GreedyICL","c(""arma::cube "", ""arma::mat "", ""unsigned int "", ""bool "")","c("" adj"", "" z"", "" max_n_iter"", "" verbose"")"
"655","GreedySBTM","cpp_GreedyMerge","c(""arma::cube "", ""arma::mat "", ""bool "")","c("" adj"", "" z"", "" verbose"")"
"656","GreedySBTM","cpp_CollapseLabels","arma::vec "," vec"
"657","GridOnClusters","findgrid","c(""List "", ""int "", ""int "", ""int "", ""int "")","c("" cluster_info"", "" k"", "" nobs"", "" ndims"", "" bin_limit"")"
"658","GxEScanR","initlslinreg","c(""const arma::vec& "", ""const arma::mat& "")","c("" y"", "" x"")"
"659","GxEScanR","lslinreg","c(""const arma::vec& "", ""const arma::mat& "", ""arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""int "", ""const LogicalVector& "", ""int "", ""int "", ""double "", ""double "", ""arma::vec& "", ""arma::mat& "")","c("" y"", "" x"", "" xr"", "" ql"", "" rtl"", "" k"", "" q"", "" skipped"", "" skipoffset"", "" maxn"", "" minsum"", "" maxsum"", "" loglike"", "" beta"")"
"660","GxEScanR","initlslogreg","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "")","c("" y"", "" xl"", "" beta"")"
"661","GxEScanR","lslogreg","c(""arma::vec& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""int "", ""const LogicalVector& "", ""int "", ""int "", ""double "", ""double "", ""arma::vec& "", ""arma::mat& "")","c("" y"", "" xl"", "" xr"", "" beta0"", "" yp0"", "" ql"", "" rtl"", "" k0"", "" w"", "" winv"", "" q"", "" skipped"", "" skipoffset"", "" maxn"", "" minsum"", "" maxsum"", "" loglike"", "" beta"")"
"662","GxEScanR","readblock","c(""StringVector& "", ""const double "", ""const double "", ""arma::ivec& "")","c("" filename"", "" blkloc"", "" blkbytes"", "" blkbuffer"")"
"663","GxEScanR","getdosages","c(""arma::mat& "", ""arma::ivec& "", ""double "", ""arma::vec& "", ""int "", ""int "", ""int "")","c("" dosages"", "" blkbuffer"", "" fileloc"", "" indices"", "" firstsnp"", "" lastsnp"", "" base"")"
"664","GxEScanR","stdmat","c(""arma::mat& "", ""arma::mat& "", ""arma::rowvec& "", ""arma::rowvec& "")","c("" m1"", "" m2"", "" means"", "" stddevs"")"
"665","GxEScanR","makegxr","c(""arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "")","c("" dest"", "" src"", "" idx"")"
"666","GxEScanR","xrgweis2","c(""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::vec& "")","c("" xr1"", "" xr2"", "" xr3"", "" xr4"", "" xr5"", "" idx"", "" src1"", "" src2"")"
"667","GxEScanR","lrtgweis2","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const int "")","c("" lrtg"", "" lrtgxe"", "" lrt2df"", "" lrteg"", "" lrt3df"", "" lrtcase"", "" lrtctrl"", "" loglike0"", "" loglhg"", "" loglhgxe"", "" loglheg"", "" loglhcase"", "" loglhctrl"", "" offset"")"
"668","GxEScanR","betagweis2","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const double "", ""const int "")","c("" betag"", "" betagxe"", "" betaeg"", "" betacase"", "" betactrl"", "" tmpbetag"", "" tmpbetagxe"", "" tmpbetaeg"", "" tmpbetacase"", "" tmpbetactrl"", "" estddev"", "" offset"")"
"669","GxEScanR","makegxexr","c(""arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" dest"", "" src1"", "" src2"")"
"670","GxEScanR","copybeta","c(""arma::vec& "", ""const arma::mat& "", ""int "", ""int "", ""int "")","c("" dest"", "" src"", "" colnum"", "" startrow"", "" numrows"")"
"671","GxEScanR","calculatelrt","c(""arma::vec& "", ""int "", ""int "", ""const arma::vec& "", ""double "")","c("" lrt"", "" idx1"", "" idx2"", "" loglike"", "" loglike0"")"
"672","GxEScanR","calculatelrtgxe","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int "", ""int "", ""const arma::vec& "", ""const arma::vec& "", ""double "")","c("" lrtg"", "" lrtgxe"", "" lrt2df"", "" idx1"", "" idx2"", "" loglikeg"", "" loglikegxe"", "" loglike0"")"
"673","HACSim","accumulate","c(""const arma::Cube<int>& "", ""const IntegerVector& "", ""int "", ""int "")","c("" pop"", "" specs"", "" perms"", "" K"")"
"674","HDclust","rcpp_findModes","c(""NumericMatrix "", ""S4 "", ""IntegerVector "")","c("" dataTranspose"", "" HmmVb"", "" nthread"")"
"675","HDclust","rcpp_clust","c(""NumericMatrix "", ""S4 "", ""Nullable<List> "", ""List "", ""IntegerVector "")","c("" dataTranspose"", "" HmmVb"", "" rfsClust_"", "" control"", "" nthread"")"
"676","HDclust","rcpp_trainHmmVb","c(""NumericMatrix "", ""const RObject& "", ""const List& "", ""const List& "", ""IntegerVector "", ""Function "", ""Function "", ""Function "", ""bool "")","c("" dataTranspose"", "" VbStructure"", "" searchControl"", "" trainControl"", "" nthread"", "" VB"", "" HMM"", "" HMMVB"", "" bprint"")"
"677","HMB","cpp_ghmb","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" y_S"", "" X_S"", "" X_Sa"", "" Z_Sa"", "" Z_U"", "" Omega_S"", "" Sigma_Sa"")"
"678","HMB","cpp_gtsmb","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""NumericVector& "")","c("" y_S"", "" X_S"", "" X_Sa"", "" Z_Sa"", "" Z_U"", "" Omega_S"", "" Phi_Sa"")"
"679","HMB","cpp_hmb","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" Y_S"", "" X_S"", "" X_Sa"", "" Z_Sa"", "" Z_U"")"
"680","HMB","cpp_tsmb","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" Y_S"", "" X_S"", "" X_Sa"", "" Z_Sa"", "" Z_U"")"
"681","HMMmlselect","HMMll","List "," tuningparameters"
"682","HMMmlselect","HMMfitting","List "," tuningparameters"
"683","HMMmlselect","HMMrepsim","List "," tuningparameters"
"684","HMMmlselect","HMMsimulate","List "," tuningparameters"
"685","HSAR","hsar_cpp_arma","c(""arma::mat "", ""arma::vec "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""int "", ""int "", ""int "", ""float "", ""float "", ""float "", ""float "", ""arma::vec "")","c("" X"", "" y"", "" W"", "" M"", "" Z"", "" detval"", "" detvalM"", "" Unum"", "" burnin"", "" Nsim"", "" thinning"", "" rho_start"", "" lambda_start"", "" sigma2e_start"", "" sigma2u_start"", "" betas_start"")"
"686","HSAR","hsar_cpp_arma_lambda_0","c(""arma::mat "", ""arma::vec "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::mat "", ""arma::vec "", ""int "", ""int "", ""int "", ""float "", ""float "", ""float "", ""arma::vec "")","c("" X"", "" y"", "" W"", "" Z"", "" detval"", "" Unum"", "" burnin"", "" Nsim"", "" thinning"", "" rho_start"", "" sigma2e_start"", "" sigma2u_start"", "" betas_start"")"
"687","HSAR","hsar_cpp_arma_rho_0","c(""arma::mat "", ""arma::vec "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::mat "", ""arma::vec "", ""int "", ""int "", ""int "", ""float "", ""float "", ""float "", ""arma::vec "")","c("" X"", "" y"", "" M"", "" Z"", "" detvalM"", "" Unum"", "" burnin"", "" Nsim"", "" thinning"", "" lambda_start"", "" sigma2e_start"", "" sigma2u_start"", "" betas_start"")"
"688","HSAR","sar_cpp_arma","c(""arma::mat "", ""arma::vec "", ""arma::sp_mat "", ""arma::mat "", ""int "", ""int "", ""int "", ""float "", ""float "", ""arma::vec "")","c("" X"", "" y"", "" W"", "" detval"", "" burnin"", "" Nsim"", "" thinning"", "" rho_start"", "" sigma2e_start"", "" betas_start"")"
"689","HTLR","sample_trunc_norm","c(""const int "", ""const double "", ""const double "", ""const bool "")","c("" n"", "" lb"", "" ub"", "" verbose"")"
"690","HTLR","sample_post_ichi","c(""const int "", ""const NumericVector& "", ""const double "", ""const double "", ""const double "", ""const bool "")","c("" n"", "" sigmasq"", "" alpha1"", "" alpha0"", "" w0"", "" verbose"")"
"691","HTLR","sample_trunc_beta","c(""const int "", ""const double "", ""const double "", ""const double "", ""const double "", ""const bool "")","c("" n"", "" alpha"", "" beta"", "" lb"", "" ub"", "" verbose"")"
"692","HTLR","htlr_fit_helper","c(""int "", ""int "", ""int "", ""arma::mat& "", ""arma::mat& "", ""arma::uvec& "", ""std::string "", ""double "", ""double "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""int "", ""bool "")","c("" p"", "" K"", "" n"", "" X"", "" ymat"", "" ybase"", "" ptype"", "" alpha"", "" s"", "" eta"", "" iters_rmc"", "" iters_h"", "" thin"", "" leap_L"", "" leap_L_h"", "" leap_step"", "" hmc_sgmcut"", "" deltas"", "" sigmasbt"", "" keep_warmup_hist"", "" silence"", "" legacy"")"
"693","HTLR","log_sum_exp","const arma::mat& "," A"
"694","HTLR","spl_sgm_ig","c(""double "", ""int "", ""double "", ""const arma::vec& "")","c("" alpha"", "" K"", "" w"", "" vardeltas"")"
"695","HTLR","std_helper","const arma::mat& "," A"
"696","HTLR","comp_vardeltas","const arma::mat& "," deltas"
"697","HTLR","comp_lsl","arma::mat& "," A"
"698","HTLR","log_normcons","arma::mat& "," A"
"699","HTLR","gendata_FAM_helper","c(""int "", ""arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""double "", ""bool "")","c("" n"", "" muj"", "" muj_rep"", "" A"", "" sd_g"", "" stdx"")"
"700","HypergeoMat","hypergeom_Cplx_Cplx","c(""int "", ""arma::cx_rowvec "", ""arma::cx_rowvec "", ""arma::cx_rowvec "", ""double "")","c("" m"", "" a"", "" b"", "" x"", "" alpha"")"
"701","HypergeoMat","hypergeom_R_R","c(""int "", ""arma::rowvec "", ""arma::rowvec "", ""arma::rowvec "", ""double "")","c("" m"", "" a"", "" b"", "" x"", "" alpha"")"
"702","HypergeoMat","hypergeom_Cplx_R","c(""int "", ""arma::cx_rowvec "", ""arma::cx_rowvec "", ""arma::rowvec "", ""double "")","c("" m"", "" a"", "" b"", "" x"", "" alpha"")"
"703","HypergeoMat","hypergeom_R_Cplx","c(""int "", ""arma::rowvec "", ""arma::rowvec "", ""arma::cx_rowvec "", ""double "")","c("" m"", "" a"", "" b"", "" x"", "" alpha"")"
"704","ICAOD","FIM_2par_exp_censor1","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const double "")","c("" x"", "" w"", "" param"", "" tcensor"")"
"705","ICAOD","FIM_2par_exp_censor2","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const double "")","c("" x"", "" w"", "" param"", "" tcensor"")"
"706","ICAOD","FIM_3par_exp_censor1","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const double "")","c("" x"", "" w"", "" param"", "" tcensor"")"
"707","ICAOD","FIM_3par_exp_censor2","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const double "")","c("" x"", "" w"", "" param"", "" tcensor"")"
"708","ICAOD","FIM_exp_2par","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x"", "" w"", "" param"")"
"709","ICAOD","FIM_kinetics_alcohol","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x1"", "" x2"", "" w"", "" param"")"
"710","ICAOD","FIM_logistic","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x"", "" w"", "" param"")"
"711","ICAOD","FIM_logistic_2pred","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x1"", "" x2"", "" w"", "" param"")"
"712","ICAOD","FIM_logistic_4par","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x"", "" w"", "" param"")"
"713","ICAOD","FIM_loglin","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x"", "" w"", "" param"")"
"714","ICAOD","FIM_mixed_inhibition","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" S"", "" I"", "" w"", "" param"")"
"715","ICAOD","FIM_power_logistic","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "", ""const double "")","c("" x"", "" w"", "" param"", "" s"")"
"716","ICAOD","FIM_sig_emax","c(""const std::vector<double> "", ""const std::vector<double> "", ""const std::vector<double> "")","c("" x"", "" w"", "" param"")"
"717","ICAOD","det2","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const bool "")","c("" mat"", "" logarithm"")"
"718","ICRanks","PartitioningRankingLevelEqSig","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" n"", "" trace"")"
"719","ICRanks","PartitioningRankingLevelEqSigRescaled","c(""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""NumericMatrix "", ""int "", ""int "", ""int "", ""double "", ""int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" SampleCoverage"", "" MM"", "" n"", "" NbOfPermut"", "" alpha"", "" gridSize"", "" trace"")"
"720","ICRanks","PartitioningRankingLevelUneqSig","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "", ""const int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" n"", "" trace"", "" NbOfPermut"", "" SwapPerm"")"
"721","ICRanks","PartitioningRankingBlockCorrectOrder","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" MinBlock"", "" MaxBlock"", "" Lower"", "" Upper"", "" n"", "" trace"")"
"722","ICRanks","OnlyBlockRanking","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "", ""const int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" n"", "" trace"", "" NbOfPermut"", "" SwapPerm"")"
"723","ICRanks","ApproximatePartitionPermutations","c(""NumericVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""int "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""const bool "", ""const int "")","c("" yInit"", "" sigmaInit"", "" LowerInit"", "" UpperInit"", "" n"", "" Slop"", "" Intercept"", "" minY"", "" maxY"", "" trace"", "" SwapPerm"", "" NbOfPermut"")"
"724","ICRanks","TukeyRankingLevelEqSigRescaled","c(""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""NumericMatrix "", ""int "", ""int "", ""int "", ""double "", ""int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" SampleCoverage"", "" MM"", "" n"", "" NbOfPermut"", "" alpha"", "" gridSize"", "" trace"")"
"725","ICRanks","TukeyRankingLevelUneqSigRescaled","c(""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""NumericMatrix "", ""int "", ""int "", ""int "", ""double "", ""int "", ""bool "")","c("" y"", "" sigma"", "" crit"", "" SampleCoverage"", "" MM"", "" n"", "" NbOfPermut"", "" alpha"", "" gridSize"", "" trace"")"
"726","PQLseq","AI","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" Yin"", "" Xin"", "" numKin"", "" Phiin"", "" Din"", "" tauin"", "" fixtauin"", "" tolin"")"
"727","wCorr","rcpparma_outerproduct","const arma::colvec& "," x"
"728","wCorr","rcpparma_innerproduct","const arma::colvec& "," x"
"729","wCorr","rcpparma_bothproducts","const arma::colvec& "," x"
"730","IOHexperimenter","cpp_init_suite","c(""String "", ""const std::vector<int>& "", ""const std::vector<int>& "", ""const std::vector<int>& "")","c("" suite_name"", "" problem_id"", "" instance_id"", "" dimension"")"
"731","IOHexperimenter","cpp_init_logger","c(""String "", ""String "", ""String "", ""String "", ""bool "", ""bool "", ""int "", ""int "")","c("" output_directory"", "" result_folder"", "" algorithm_name"", "" algorithm_info"", "" dat"", "" cdat"", "" tdat"", "" idat"")"
"732","IOHexperimenter","cpp_int_evaluate","const std::vector<int>& "," x"
"733","IOHexperimenter","cpp_double_evaluate","const std::vector<double>& "," x"
"734","IOHexperimenter","cpp_write_line","const std::vector<double>& "," line_info"
"735","IOHexperimenter","cpp_do_log","const std::vector<double>& "," line_info"
"736","IOHexperimenter","cpp_set_parameters_name","const std::vector<std::string>& "," parameters_name"
"737","IOHexperimenter","cpp_set_parameters","c(""const std::vector<std::string>& "", ""const std::vector<double>& "")","c("" parameters_name"", "" parameters"")"
"738","IOHexperimenter","cpp_add_double_attribute","c(""std::string "", ""double "")","c("" name"", "" value"")"
"739","IOHexperimenter","cpp_add_int_attribute","c(""std::string "", ""int "")","c("" name"", "" value"")"
"740","IOHexperimenter","cpp_add_string_attribute1","c(""std::string "", ""std::string "")","c("" name"", "" value"")"
"741","IOHexperimenter","cpp_delete_attribute","std::string "," name"
"742","ISOpureR","rcppeigen_max_over_columns_or_rows","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""int& "")","c("" A"", "" dimen"")"
"743","IceCast","RunMCMC","c(""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::colvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::uvec "", ""arma::uvec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""int "")","c("" n_iter"", "" dists"", "" x"", "" xU_vecs"", "" xU_years"", "" xU_prop_sd"", "" xU_lb"", "" xU_ub"", "" mu"", "" mu0"", "" lambda0"", "" sigma"", "" sigma_ind_1"", "" sigma_ind_2"", "" sigma_prop_cov"", "" rho"", "" rho0_lb"", "" rho0_ub"", "" rho_prop_sd"", "" sigma0_lb"", "" sigma0_ub"", "" w"")"
"744","Immigrate","BIMCpp","c(""Function "", ""NumericMatrix "", ""NumericVector "", ""int "", ""int "", ""bool "", ""double "", ""double "")","c("" oneboostImmigrate"", "" train_xx"", "" train_yy"", "" nIter"", "" max_iter"", "" removesmall"", "" sigstart"", "" sigend"")"
"745","Immigrate","IM4ECpp","c(""Function "", ""NumericMatrix "", ""NumericVector "", ""double "", ""double "", ""double "", ""int "", ""bool "")","c("" oneIM4E"", "" train_xx"", "" train_yy"", "" epsilon"", "" sig"", "" lambda"", "" max_iter"", "" removesmall"")"
"746","Immigrate","ImmigrateCpp","c(""Function "", ""NumericMatrix "", ""NumericVector "", ""NumericMatrix "", ""double "", ""double "", ""int "", ""bool "")","c("" oneImmigrate"", "" train_xx"", "" train_yy"", "" w0"", "" epsilon"", "" sig"", "" max_iter"", "" removesmall"")"
"747","Immigrate","ImmigrateSampleCpp","c(""Function "", ""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""double "", ""double "", ""int "", ""bool "")","c("" onesampleImmigrate"", "" train_xx"", "" train_yy"", "" sample_wt"", "" W"", "" epsilon"", "" sig"", "" max_iter"", "" removesmall"")"
"748","IrishDirectorates","cpp_dblpm_posterior","c(""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""arma::mat "", ""arma::mat "", ""arma::cube "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" T"", "" N"", "" M"", "" L"", "" D"", "" edgelist"", "" x"", "" w"", "" gamma"", "" beta"", "" tauw"", "" tauw0"", "" taugamma"", "" taugamma0"", "" taubeta"", "" taubeta0"", "" taux"", "" delta"", "" aw"", "" bw"", "" agamma"", "" bgamma"", "" abeta"", "" bbeta"")"
"749","IrishDirectorates","cpp_dblpm_mcmc","c(""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""arma::mat "", ""arma::mat "", ""arma::cube "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "", ""bool "")","c("" T"", "" N"", "" M"", "" L"", "" D"", "" edgelist"", "" x"", "" w"", "" gamma"", "" beta"", "" tauw"", "" tauw0"", "" taugamma"", "" taugamma0"", "" taubeta"", "" taubeta0"", "" taux"", "" delta"", "" aw"", "" bw"", "" agamma"", "" bgamma"", "" abeta"", "" bbeta"", "" niter"", "" burnin"", "" thin"", "" x_var"", "" w_var"", "" gamma_var"", "" beta_var"", "" verbose"")"
"750","IsoSpecR","Rinterface","c(""const IntegerVector& "", ""const DataFrame& "", ""double "", ""int "", ""int "", ""int "", ""double "", ""bool "", ""bool "")","c("" molecule"", "" isotopes"", "" stopCondition"", "" algo"", "" tabSize"", "" hashSize"", "" step"", "" showCounts"", "" trim"")"
"751","JMI","mJMICpp","c(""const arma::mat& "", ""const arma::mat& "", ""const int "")","c("" x"", "" y"", "" BN"")"
"752","JMbayes","lap_rwm_C","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""bool "", ""bool "")","c("" initials"", "" Data"", "" priors"", "" scales"", "" Covs"", "" control"", "" interval_cens"", "" multiState"")"
"753","JMbayes","lap_rwm_C_woRE","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" initials"", "" Data"", "" priors"", "" scales"", "" Covs"", "" control"")"
"754","JMbayes","lap_rwm_C_woRE_nogammas","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" initials"", "" Data"", "" priors"", "" scales"", "" Covs"", "" control"")"
"755","JMbayes","dmvnorm2","c(""const arma::mat& "", ""const arma::rowvec& "", ""const arma::mat& "", ""bool "")","c("" x"", "" mean"", "" sigma"", "" logd"")"
"756","JMbayes","logPosterior","c(""double "", ""arma::vec "", ""arma::uvec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "")","c("" temp"", "" event"", "" idGK_fast"", "" W1"", "" W1s"", "" Bs_gammas"", "" W2"", "" W2s"", "" gammas"", "" Wlong"", "" Wlongs"", "" alphas"", "" Pw"", "" mean_Bs_gammas"", "" Tau_Bs_gammas"", "" mean_gammas"", "" Tau_gammas"", "" mean_alphas"", "" Tau_alphas"", "" tauBs"", "" A_tauBs"", "" B_tauBs"")"
"757","JMbayes","logPosterior_nogammas","c(""double "", ""arma::vec "", ""arma::uvec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "")","c("" temp"", "" event"", "" idGK_fast"", "" W1"", "" W1s"", "" Bs_gammas"", "" Wlong"", "" Wlongs"", "" alphas"", "" Pw"", "" mean_Bs_gammas"", "" Tau_Bs_gammas"", "" mean_alphas"", "" Tau_alphas"", "" tauBs"", "" A_tauBs"", "" B_tauBs"")"
"758","JMbayes","gradient_logPosterior","c(""double "", ""arma::vec "", ""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "")","c("" temp"", "" event"", "" idGK_fast"", "" event_colSumsW1"", "" W1s"", "" Bs_gammas"", "" event_colSumsW2"", "" W2s"", "" gammas"", "" event_colSumsWlong"", "" Wlongs"", "" alphas"", "" Pw"", "" mean_Bs_gammas"", "" Tau_Bs_gammas"", "" mean_gammas"", "" Tau_gammas"", "" mean_alphas"", "" Tau_alphas"", "" tauBs"", "" A_tauBs"", "" B_tauBs"")"
"759","JMbayes","gradient_logPosterior_nogammas","c(""double "", ""arma::vec "", ""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "")","c("" temp"", "" event"", "" idGK_fast"", "" event_colSumsW1"", "" W1s"", "" Bs_gammas"", "" event_colSumsWlong"", "" Wlongs"", "" alphas"", "" Pw"", "" mean_Bs_gammas"", "" Tau_Bs_gammas"", "" mean_alphas"", "" Tau_alphas"", "" tauBs"", "" A_tauBs"", "" B_tauBs"")"
"760","JMbayes","log_post_RE_svft","c(""arma::vec "", ""List "")","c("" b"", "" Data"")"
"761","JMbayes","survPred_svft_2","c(""arma::vec "", ""List "")","c("" b"", "" Data"")"
"762","JMcmprsk","jmc_main","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" k"", "" n1"", "" p1"", "" p2"", "" maxl"", "" p1a"", "" maxiterations"", "" point"", "" xs"", "" ws"", "" yfile"", "" cfile"", "" mfile"", "" trace"")"
"763","JMcmprsk","jmo_main","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" k"", "" n1"", "" p1"", "" p2"", "" p1a"", "" bq"", "" K_num"", "" j_max"", "" point"", "" xs"", "" ws"", "" betas"", "" thetas"", "" maxiterations"", "" yfile"", "" cfile"", "" mfile"", "" trace"")"
"764","JMcmprsk","SimDataC","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" k_val"", "" p1_val"", "" p1a_val"", "" p2_val"", "" g_val"", "" truebeta"", "" truegamma"", "" randeffect"", "" yfn"", "" cfn"", "" mfn"")"
"765","JMcmprsk","SimDataO","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" k_val"", "" p1_val"", "" p1a_val"", "" p2_val"", "" g_val"", "" truebeta"", "" truetheta"", "" truegamma"", "" randeffect"", "" yfn"", "" cfn"", "" mfn"")"
"766","JOUSBoost","grid_probs","c(""IntegerMatrix "", ""NumericVector "", ""double "", ""int "")","c("" X"", "" q"", "" delta"", "" median_loc"")"
"767","JSM","calc_M1_M2_Hadamard","c(""Eigen::Map<Eigen::ArrayXd>& "", ""const Eigen::Map<Eigen::ArrayXd>& "")","c("" M1"", "" M2"")"
"768","JSM","calc_M1_M2_Hadamard_a","c(""Eigen::Map<Eigen::ArrayXXd>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const int "")","c("" A1"", "" A2"", "" v3"", "" a"")"
"769","JSM","calc_M1_M2_M3_Hadamard","c(""Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::VectorXi>& "")","c("" M1"", "" M2"", "" M3"", "" v"")"
"770","JSM","calc_M1_a_M2_Hadamard","c(""Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const double "", ""const Eigen::Map<Eigen::VectorXi>& "")","c("" M1"", "" M2"", "" a"", "" v"")"
"771","JSM","calc_M1timesM2v","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::ArrayXd>& "")","c("" M1"", "" M2"", "" v"")"
"772","JSM","calc_MVND","c(""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" x"", "" mu"", "" K"")"
"773","JSM","calc_M_v","c(""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" v"", "" M"")"
"774","JSM","calc_VB","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" M1"", "" M2"", "" M3"")"
"775","JSM","calc_VY","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const double "")","c("" M"", "" A"", "" b"")"
"776","JSM","calc_bi_st","c(""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" v0"", "" m"", "" M"")"
"777","JSM","calc_expM2","Eigen::Map<Eigen::ArrayXd>& "," A"
"778","JSM","calc_muB","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "")","c("" BSold"", "" VY"", "" Xst"", "" Zst"", "" Yst"", "" betaold"")"
"779","JSM","calc_muBMult","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "")","c("" BSold"", "" VY"", "" BTg"", "" Yst"")"
"780","JSM","calc_mult_rowsum1","c(""const Eigen::Map<Eigen::VectorXi>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "")","c("" v"", "" u"", "" M"", "" A"")"
"781","JSM","calc_mult_rowsum2","c(""const Eigen::Map<Eigen::VectorXi>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "")","c("" v"", "" L"", "" M"", "" A"")"
"782","JSM","calc_mult_rowsum3","c(""const Eigen::Map<Eigen::ArrayXi>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "", ""const Eigen::Map<Eigen::ArrayXXd>& "", ""const double "")","c("" v"", "" B"", "" M"", "" A"", "" ncb2"")"
"783","JSM","calc_rowsum","c(""const Eigen::Map<Eigen::VectorXi>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" v"", "" M"")"
"784","JSM","calc_rowsum_mult","c(""const Eigen::Map<Eigen::VectorXi>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" v"", "" u"", "" M"")"
"785","JSM","calc_tapply_vect_sum","c(""const Eigen::Map<Eigen::ArrayXd>& "", ""const Eigen::Map<Eigen::ArrayXi>& "")","c("" v1"", "" v2"")"
"786","JSM","calc_v_a","c(""Eigen::Map<Eigen::ArrayXd>& "", ""const double& "")","c("" v"", "" a"")"
"787","JSM","fast_lapply_length","c(""List const "", ""List const "", ""NumericVector const "")","c("" input1"", "" input2"", "" Ind"")"
"788","JSM","fast_rbind_lapply_outerprod","List const "," input"
"789","JacobiEigen","JacobiCpp","c(""NumericMatrix "", ""bool "", ""double "")","c("" x"", "" only_values"", "" eps"")"
"790","JacobiEigen","JacobiSCpp","c(""NumericMatrix "", ""bool "", ""double "")","c("" x"", "" only_values"", "" eps"")"
"791","JumpTest","lp","c(""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "")","c("" n"", "" p0"", "" mu"", "" v0"", "" dt"", "" alpha"", "" c0"", "" z"", "" z1"", "" M0"", "" x0"")"
"792","JumpTest","lp2","c(""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "")","c("" n"", "" p0"", "" mu"", "" v0"", "" dt"", "" alpha"", "" c0"", "" z"", "" z1"", "" x0"")"
"793","JumpTest","pvc","c(""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "")","c("" n"", "" p0"", "" mt"", "" beta0"", "" beta1"", "" v0"", "" st"", "" vxs"", "" z"", "" m"")"
"794","JumpTest","pvc0","c(""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Eigen::MatrixXd "")","c("" n"", "" p0"", "" mt"", "" beta0"", "" beta1"", "" v0"", "" st"", "" vxs"", "" z"")"
"795","JumpTest","pv2","c(""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Eigen::MatrixXd "", ""double "", ""double "", ""double "")","c("" n"", "" mt"", "" b0"", "" b1"", "" b2"", "" p0"", "" v10"", "" v20"", "" st"", "" z"", "" v1xs"", "" v2xs"", "" bv2"")"
"796","fmf","knn_index_dist_rcpp","c(""arma::mat& "", ""arma::mat& "", ""int "", ""std::string& "", ""int "", ""double "")","c("" MATRIX"", "" TEST_DATA"", "" k"", "" method"", "" threads"", "" eps"")"
"797","fmf","DIST_MATRIX_knn","c(""arma::mat& "", ""Nullable<NumericVector> "", ""bool "", ""int "", ""int "", ""bool "")","c("" DIST_MAT"", "" TEST_IDX"", "" is_min"", "" k"", "" threads"", "" rcpp_list_names"")"
"798","L0Learn","L0LearnCV","c(""const arma::mat& "", ""const arma::vec& "", ""const std::string "", ""const std::string "", ""const std::string "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const double "", ""const double "", ""const bool "", ""const unsigned int "", ""const double "", ""const bool "", ""const unsigned int "", ""const unsigned int "", ""const double "", ""unsigned int "", ""const bool "", ""const std::vector< std::vector<double> > "", ""const unsigned int "", ""const double "", ""const unsigned int "", ""const bool "")","c("" X"", "" y"", "" Loss"", "" Penalty"", "" Algorithm"", "" NnzStopNum"", "" G_ncols"", "" G_nrows"", "" Lambda2Max"", "" Lambda2Min"", "" PartialSort"", "" MaxIters"", "" Tol"", "" ActiveSet"", "" ActiveSetNum"", "" MaxNumSwaps"", "" ScaleDownFactor"", "" ScreenSize"", "" LambdaU"", "" Lambdas"", "" nfolds"", "" seed"", "" ExcludeFirstK"", "" Intercept"")"
"799","L0Learn","L0LearnFit","c(""const arma::mat& "", ""const arma::vec& "", ""const std::string "", ""const std::string "", ""const std::string "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const double "", ""const double "", ""const bool "", ""const unsigned int "", ""const double "", ""const bool "", ""const unsigned int "", ""const unsigned int "", ""const double "", ""unsigned int "", ""const bool "", ""const std::vector< std::vector<double> > "", ""const unsigned int "", ""const bool "")","c("" X"", "" y"", "" Loss"", "" Penalty"", "" Algorithm"", "" NnzStopNum"", "" G_ncols"", "" G_nrows"", "" Lambda2Max"", "" Lambda2Min"", "" PartialSort"", "" MaxIters"", "" Tol"", "" ActiveSet"", "" ActiveSetNum"", "" MaxNumSwaps"", "" ScaleDownFactor"", "" ScreenSize"", "" LambdaU"", "" Lambdas"", "" ExcludeFirstK"", "" Intercept"")"
"800","L1mstate","scaleQ","Eigen::MatrixXd "," X"
"801","L1mstate","pletaQ","c(""Eigen::VectorXd& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""int& "")","c("" xb"", "" nevent"", "" nevent1"", "" loc1"", "" n"")"
"802","L1mstate","d1Q","c(""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""int& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""int& "")","c("" xb"", "" tevent"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"")"
"803","L1mstate","d2Q","c(""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""int& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""Eigen::VectorXi& "", ""int& "")","c("" xb"", "" tevent"", "" N"", "" nevent"", "" nevent1"", "" loc1"", "" n"")"
"804","L1mstate","max_lambdaQ","List& "," x"
"805","L1mstate","l1msQ","c(""List& "", ""Eigen::VectorXd "", ""int "", ""int "", ""double "", ""int "")","c("" x"", "" lambda"", "" nlambda"", "" p"", "" thresh"", "" maxit"")"
"806","L1mstate","cvl1msQ","c(""List& "", ""Eigen::VectorXd "", ""int "", ""int "", ""double "", ""int "", ""List& "")","c("" x"", "" lambda"", "" nlambda"", "" p"", "" thresh"", "" maxit"", "" xF"")"
"807","LDheatmap","GT_to_SnpMatrix","c(""CharacterMatrix "", ""bool "")","c("" GT"", "" phased"")"
"808","LambertW","W_Cpp","c(""const NumericVector& "", ""int "")","c("" z"", "" branch"")"
"809","LambertW","W_delta_Cpp","c(""const NumericVector& "", ""double "")","c("" z"", "" delta"")"
"810","LambertW","W_delta_alpha_Cpp","c(""const NumericVector& "", ""double "", ""double "")","c("" z"", "" delta"", "" alpha"")"
"811","LambertW","W_gamma_Cpp","c(""const NumericVector& "", ""double "", ""int "")","c("" z"", "" gamma"", "" branch"")"
"812","LambertW","kurtosis","const NumericVector& "," x"
"813","LambertW","lp_norm_Cpp","c(""const NumericVector& "", ""double "")","c("" x"", "" p"")"
"814","LambertW","lp_norm_complex_Cpp","c(""const ComplexVector& "", ""double "")","c("" x"", "" p"")"
"815","LambertW","normalize_by_tau_Cpp","c(""const NumericVector& "", ""double "", ""double "", ""bool "")","c("" x"", "" mu_x"", "" sigma_x"", "" inverse"")"
"816","LambertW","skewness","const NumericVector& "," x"
"817","Langevin","Langevin1D","c(""const arma::vec& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const int& "", ""int "")","c("" data"", "" bins"", "" steps"", "" sf"", "" bin_min"", "" reqThreads"")"
"818","Langevin","Langevin2D","c(""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const int& "", ""int "")","c("" data"", "" bins"", "" steps"", "" sf"", "" bin_min"", "" reqThreads"")"
"819","Langevin","timeseries1D","c(""const unsigned int& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""double "")","c("" N"", "" startpoint"", "" d13"", "" d12"", "" d11"", "" d10"", "" d22"", "" d21"", "" d20"", "" sf"", "" dt"")"
"820","Langevin","timeseries2D","c(""const unsigned int& "", ""const double& "", ""const double& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const double& "", ""double "")","c("" N"", "" startpointx"", "" startpointy"", "" D1_1"", "" D1_2"", "" g_11"", "" g_12"", "" g_21"", "" g_22"", "" sf"", "" dt"")"
"821","LassoGEE","SHM","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::cube "", ""int "", ""double "")","c("" X"", "" y"", "" mu"", "" mu_eta"", "" vari"", "" nt"", "" index"", "" Rhat"", "" N"", "" fihat"")"
"822","LeMaRns","calc_M2","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""NumericVector "", ""List "")","c("" N"", "" ration"", "" wgt"", "" nfish"", "" nsc"", "" other"", "" sc_Linf"", "" suit_M2"")"
"823","LocalControl","newLC","c(""DataFrame& "", ""std::vector<double> "", ""unsigned int "")","c("" patients"", "" limits"", "" numThreads"")"
"824","LocalControl","newCRLC","c(""DataFrame& "", ""std::vector<double> "", ""std::vector<double> "", ""int "", ""unsigned int "")","c("" patients"", "" limits"", "" fTimes"", "" cenCode"", "" numThreads"")"
"825","LocalControl","getMaxDist","DataFrame& "," df"
"826","LowWAFOMNX","rcppLowWAFOMNXPoints","c(""DataFrame "", ""int "", ""int "", ""int "", ""NumericVector "")","c("" df"", "" dimR"", "" dimF2"", "" count"", "" shiftVector"")"
"827","LowWAFOMSobol","rcppLowWAFOMSobolPoints","c(""DataFrame "", ""int "", ""int "", ""int "", ""NumericVector "")","c("" df"", "" dimR"", "" dimF2"", "" count"", "" shiftVector"")"
"828","MABOUST","MCMC_MABOUST","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "")","c("" Y"", "" T1"", "" X"", "" B"", "" NTreat"", "" NOUT"", "" PSPIKE"")"
"829","MAT","score_cpp","c(""arma::mat "", ""arma::rowvec "", ""arma::colvec "", ""const int "", ""arma::mat "", ""const int "", ""const double "", ""const double "", ""bool "")","c("" ipar"", "" resp"", "" th"", "" p"", "" sigma"", "" maxIter"", "" conv"", "" D"", "" Fisher"")"
"830","MAT","SCORE_cpp","c(""arma::mat "", ""arma::mat "", ""const int "", ""arma::mat "", ""const int "", ""const double "", ""const double "", ""bool "")","c("" ipar"", "" resp_full"", "" p"", "" sigma"", "" maxIter"", "" conv"", "" D"", "" Fisher"")"
"831","MAT","selectItem_cpp","c(""arma::mat "", ""arma::uvec "", ""arma::uvec "", ""arma::colvec "", ""const int "", ""arma::mat "", ""const double "", ""String "", ""String "", ""arma::colvec "", ""bool "", ""int "")","c("" ipar"", "" available"", "" given"", "" th"", "" p"", "" sigma"", "" D"", "" method"", "" selectionType"", "" c_weights"", "" content_balancing"", "" topN"")"
"832","MCPModPack","MCPModFitDRModels","c(""const int& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "", ""const int& "", ""const NumericVector& "")","c("" endpoint_index_arg"", "" selected_models_arg"", "" x_arg"", "" y_arg"", "" delta_arg"", "" direction_index_arg"", "" maxit_arg"", "" theta_vector_arg"")"
"833","MCPModPack","MCPModRunSimulations","c(""const int& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const int& "", ""const List& "", ""const NumericVector& "", ""const List& "", ""const List& "", ""const double& "", ""const double& "", ""const int& "", ""const int& "")","c("" endpoint_index_arg"", "" selected_models_arg"", "" theta_arg"", "" theta_vector_arg"", "" delta_arg"", "" model_selection_index_arg"", "" opt_contrast_arg"", "" crit_value_arg"", "" sim_parameter_list_arg"", "" sim_model_list_arg"", "" direction_index_arg"", "" go_threshold_arg"", "" n_points_arg"", "" maxit_arg"")"
"834","MCPModPack","TestDoseResponseFunction","c(""const double& "", ""const double& "", ""const NumericVector& "")","c("" x"", "" model"", "" coef"")"
"835","MCPModPack","TestFindTargetDose","c(""const double& "", ""const int& "", ""const NumericVector& "")","c("" delta"", "" model"", "" coef"")"
"836","MEGENA","planaritytest","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" N"", "" rows"", "" cols"")"
"837","MGDrivE","rDirichlet","const NumericVector& "," migrationPoint"
"838","MGDrivE","quantileC","c(""const IntegerMatrix& "", ""const NumericVector& "")","c("" Trials"", "" Probs"")"
"839","MGDrivE","calcCos","c(""const NumericMatrix& "", ""const double& "")","c("" latLongs"", "" r"")"
"840","MGDrivE","calcHaversine","c(""const NumericMatrix& "", ""const double& "")","c("" latLongs"", "" r"")"
"841","MGDrivE","calcVinSph","c(""const NumericMatrix& "", ""const double& "")","c("" latLongs"", "" r"")"
"842","MGDrivE","calcVinEll","c(""const NumericMatrix& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "")","c("" latLongs"", "" a"", "" b"", "" f"", "" eps"", "" iter"")"
"843","MGDrivE","calcLognormalKernel","c(""const NumericMatrix& "", ""const double& "", ""const double& "")","c("" distMat"", "" meanlog"", "" sdlog"")"
"844","MGDrivE","calcGammaKernel","c(""const NumericMatrix& "", ""const double& "", ""const double& "")","c("" distMat"", "" shape"", "" rate"")"
"845","MGDrivE","calcExpKernel","c(""const NumericMatrix& "", ""const double& "")","c("" distMat"", "" rate"")"
"846","MGDrivE","calcHurdleExpKernel","c(""const NumericMatrix& "", ""const double& "", ""const double& "")","c("" distMat"", "" rate"", "" p0"")"
"847","MHMM","EMmhmmCPP","c(""const S4 "", ""List "", ""const double "", ""const double "", ""const double "")","c("" yiR"", "" paramR"", "" tolR"", "" nbKeepR"", "" itersmallR"")"
"848","MHMM","oneEMgammaCPP","c(""const NumericVector& "", ""const NumericVector& "", ""const int "", ""const NumericVector& "")","c("" my_xs"", "" my_ws"", "" g"", "" val"")"
"849","MIDASwrappeR","getMIDASScore","c(""List "", ""int "", ""int "", ""double "", ""bool "", ""bool "")","c("" input"", "" rows"", "" buckets"", "" alpha"", "" norelations"", "" undirected"")"
"850","MPTinR","determinant","c(""int "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::VectorXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""int "")","c("" S"", "" M"", "" A"", "" B"", "" c"", "" pattern"", "" Ineq"", "" s"")"
"851","MPTinR","determinant_c","c(""int "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::VectorXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""int "", ""int "")","c("" S"", "" M"", "" A"", "" B"", "" c"", "" pattern"", "" Ineq"", "" s"", "" cc"")"
"852","MRS","fitMRScpp","c(""arma::mat "", ""arma::vec "", ""int "", ""arma::vec "", ""arma::mat "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "", ""int "")","c("" X"", "" G"", "" n_groups"", "" init_state"", "" Omega"", "" K"", "" alpha"", "" beta"", "" gamma"", "" delta"", "" eta"", "" return_global_null"", "" return_tree"", "" min_n_node"")"
"853","MRS","fitMRSNESTEDcpp","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "", ""arma::Col<int> "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "")","c("" X"", "" G"", "" H"", "" n_groups"", "" n_subgroups"", "" init_state"", "" Omega"", "" nu_vec"", "" K"", "" alpha"", "" beta"", "" gamma"", "" delta"", "" eta"", "" return_global_null"", "" return_tree"")"
"854","MSGARCH","Decoding_HMM","c(""const arma::mat& "", ""const arma::mat& "", ""const int& "", ""const int& "")","c("" allprobs"", "" mGamma"", "" T"", "" K"")"
"855","MSGARCH","Viterbi","c(""const arma::mat& "", ""const arma::mat& "", ""const int& "")","c("" mLLK"", "" mGamma"", "" iK"")"
"856","MSGARCH","EM_HMM","c(""const arma::vec& "", ""const int& "", ""const int& "", ""const double& "", ""const bool& "")","c("" vY"", "" K"", "" maxIter"", "" tol"", "" constraintZero"")"
"857","MSGARCH","EM_MM","c(""const arma::vec& "", ""const int& "", ""const int& "", ""const double& "", ""const bool& "")","c("" vY"", "" K"", "" maxIter"", "" tol"", "" constraintZero"")"
"858","MSGARCH","MapParameters_univ","c(""const arma::vec& "", ""const std::string& "", ""const bool& "")","c("" vTheta_tilde"", "" Dist"", "" bSkew"")"
"859","MSGARCH","UnmapParameters_univ","c(""const arma::vec& "", ""const std::string& "", ""const bool& "")","c("" vTheta"", "" Dist"", "" bSkew"")"
"860","MSGARCH","SimplexUnmapping","c(""const arma::vec& "", ""const int& "")","c("" vOmega"", "" iK"")"
"861","MSGARCH","SimplexMapping","c(""const arma::vec& "", ""const int& "")","c("" vPhi"", "" iK"")"
"862","MSGARCH","f_RCPP_adaptMCMC","c(""const arma::rowvec "", ""Function "", ""double "", ""arma::mat "", ""int "")","c("" theta0"", "" func"", "" acc_rate"", "" sigma"", "" n_mcmc"")"
"863","MSGARCH","dUnivLike","c(""const arma::vec& "", ""const std::string& "", ""const bool& "", ""const double& "", ""const double& "")","c("" vZ"", "" sDist"", "" bSkew"", "" dXi"", "" dNu"")"
"864","MTLR","mtlr_objVal","c(""arma::rowvec "", ""arma::mat "", ""arma::mat "", ""double "", ""arma::vec "")","c("" params"", "" yval"", "" featureValue"", "" C1"", "" delta"")"
"865","MTLR","mtlr_grad","c(""arma::rowvec "", ""arma::mat "", ""arma::mat "", ""double "", ""arma::vec "")","c("" params"", "" yval"", "" featureValue"", "" C1"", "" delta"")"
"866","MTLR","mtlr_predict","c(""arma::rowvec "", ""arma::mat "")","c("" params"", "" featureValue"")"
"867","MatchIt","nn_matchC","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const bool& "", ""const LogicalVector& "", ""const Nullable<NumericVector>& "", ""const Nullable<IntegerVector>& "", ""const Nullable<double>& "", ""const Nullable<NumericVector>& "", ""const Nullable<NumericMatrix>& "", ""const Nullable<NumericMatrix>& "", ""const Nullable<NumericMatrix>& "", ""const bool& "")","c("" treat"", "" ord"", "" ratio"", "" replace"", "" discarded"", "" distance_"", "" exact_"", "" caliper_dist_"", "" caliper_covs_"", "" calcovs_covs_mat_"", "" mah_covs_"", "" mahSigma_inv_"", "" disl_prog"")"
"868","MatchIt","pairdistsubC","c(""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int& "")","c("" x_"", "" t_"", "" s_"", "" num_sub"")"
"869","MatchIt","subclass2mmC","c(""const IntegerVector& "", ""const IntegerVector& "", ""const int& "")","c("" subclass"", "" treat"", "" focal"")"
"870","MatchIt","tabulateC","c(""const IntegerVector& "", ""const Nullable<int>& "")","c("" bins"", "" nbins"")"
"871","MatchIt","weights_matrixC","c(""const IntegerMatrix& "", ""const IntegerVector& "")","c("" mm"", "" treat"")"
"872","MatrixLDA","M_Update_Rcpp","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""int "", ""int "", ""double "")","c("" Mean"", "" D"", "" Uinv"", "" Vinv"", "" nc"", "" weightmat"", "" rho"", "" lambda"", "" C"", "" r"", "" mtol"")"
"873","MediaK","permute","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""SEXP "", ""SEXP "")","c("" iTest"", "" jTest"", "" times"", "" selectvec"")"
"874","MediaK","dis_value","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""SEXP "")","c("" iTest"", "" jTest"", "" select"")"
"875","Mega2R","getgenotypes_1","c(""NumericVector "", ""NumericVector "", ""List "", ""List "", ""CharacterVector "", ""NumericVector "")","c("" locus_arg"", "" hocus_arg"", "" genotype_arg"", "" allele_arg"", "" miscC_arg"", "" miscN_arg"")"
"876","Mega2R","getgenotypes_2","c(""NumericVector "", ""List "", ""List "", ""CharacterVector "", ""NumericVector "")","c("" locus_arg"", "" genotype_arg"", "" allele_arg"", "" miscC_arg"", "" miscN_arg"")"
"877","Mega2R","getgenotypesraw_1","c(""NumericVector "", ""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" hocus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"878","Mega2R","getgenotypesraw_2","c(""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"879","Mega2R","getgenotypes_Ri","c(""NumericVector "", ""NumericVector "", ""List "", ""List "", ""CharacterVector "", ""NumericVector "")","c("" locus_arg"", "" hocus_arg"", "" genotype_arg"", "" allele_arg"", "" miscC_arg"", "" miscN_arg"")"
"880","Mega2R","getgenotypes_forperson","RawVector "," raw_arg"
"881","Mega2R","getgenotypesgenabel_1","c(""NumericVector "", ""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" hocus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"882","Mega2R","getgenotypesgenabel_2","c(""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"883","Mega2R","getgenotypesdos_1","c(""NumericVector "", ""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" hocus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"884","Mega2R","getgenotypesdos_2","c(""NumericVector "", ""List "", ""List "", ""NumericVector "")","c("" locus_arg"", "" genotype_arg"", "" allele_arg"", "" miscN_arg"")"
"885","MetaheuristicFPA","fpa_optim","c(""double "", ""double "", ""double "", ""double "", ""int "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Function "")","c("" N"", "" p"", "" beta"", "" eta"", "" maxiter"", "" randEta"", "" gloMin"", "" objfit"", "" D"", "" Lower"", "" Upper"", "" FUN"")"
"886","MrSGUIDE","characterToInteger","c(""const CharacterVector& "", ""const CharacterVector& "")","c("" x"", "" levels"")"
"887","MrSGUIDE","dataFramToNumeric","const DataFrame& "," numX"
"888","MrSGUIDE","characterDict","c(""const DataFrame& "", ""const List& "")","c("" charX"", "" levels"")"
"889","MrSGUIDE","GiStepWisePure","c(""const arma::mat& "", ""const arma::imat& "", ""const arma::mat& "", ""const arma::ivec "", ""const arma::uvec& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""const double& "", ""const bool& "", ""const bool& "", ""const std::vector<std::string>& "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""const std::string& "")","c("" numX"", "" catX"", "" Y"", "" trt"", "" splitIndex"", "" fitIndex"", "" holdIndex"", "" bestK"", "" maxDepth"", "" minData"", "" minTrt"", "" batchNum"", "" CVFold"", "" CVSE"", "" bootNum"", "" alpha"", "" faster"", "" display"", "" varName"", "" treeName"", "" nodeName"", "" bootName"", "" impName"")"
"890","MultiBD","SIR_Cpp","c(""const double "", ""const double "", ""const double "", ""const long int "", ""const long int "", ""const int "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const int "")","c("" t"", "" alpha"", "" beta"", "" S0"", "" I0"", "" Ap1"", "" Bp1"", "" direction"", "" nblocks"", "" tol"", "" computeMode"", "" nThreads"")"
"891","MultiBD","bb_lt_invert_Cpp","c(""double "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const int "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const int "")","c("" t"", "" lambda1"", "" lambda2"", "" Ap1"", "" Bp1"", "" direction"", "" nblocks"", "" tol"", "" computeMode"", "" nThreads"")"
"892","MultiBD","bbd_lt_invert_Cpp","c(""double "", ""const int "", ""const int "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const int "", ""const int "")","c("" t"", "" a0"", "" b0"", "" lambda1"", "" lambda2"", "" mu2"", "" gamma"", "" x"", "" y"", "" A"", "" Bp1"", "" nblocks"", "" tol"", "" computeMode"", "" nThreads"", "" maxdepth"")"
"893","MultiFit","discretizeCpp","c(""arma::mat "", ""arma::mat "", ""arma::rowvec "", ""arma::uvec "", ""arma::umat "", ""int "", ""int "")","c("" a"", "" b"", "" w"", "" mask"", "" ij"", "" Dx"", "" Dy"")"
"894","MultiFit","make_CDF","c(""int "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""List "", ""bool "", ""double "")","c("" lp"", "" col0_tot"", "" row1_tot"", "" min_margin"", "" ALL_PROBS"", "" compute_all_holm"", "" min_p"")"
"895","MultiFit","single_Fisher_test","c(""arma::rowvec "", ""bool "", ""bool "")","c("" t"", "" correct"", "" ret_all_probs"")"
"896","MultiFit","genStepFunCpp","c(""List "", ""NumericVector "", ""int "", ""int "")","c("" SPS"", "" sort_p"", "" lc"", "" lp"")"
"897","N2R","n2Knn","c(""const NumericMatrix& "", ""int64_t "", ""int64_t "", ""bool "", ""std::string "", ""int64_t "", ""int64_t "", ""float "", ""bool "")","c("" m"", "" k"", "" nThreads"", "" verbose"", "" indexType"", "" M"", "" MaxM0"", "" ef_search_multiplier"", "" quiet"")"
"898","N2R","n2CrossKnn","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""int64_t "", ""int64_t "", ""bool "", ""std::string "", ""int64_t "", ""int64_t "", ""float "", ""bool "")","c("" mA"", "" mB"", "" k"", "" nThreads"", "" verbose"", "" indexType"", "" M"", "" MaxM0"", "" ef_search_multiplier"", "" quiet"")"
"899","NetworkInference","netinf_","c(""List& "", ""List& "", ""int& "", ""std::string& "", ""NumericVector& "", ""bool "", ""bool& "", ""double& "")","c("" cascade_nodes"", "" cascade_times"", "" n_edges"", "" model"", "" params"", "" quiet"", "" auto_edges"", "" cutoff"")"
"900","NetworkInference","count_possible_edges_","c(""List& "", ""List& "", ""bool "")","c("" cascade_nodes"", "" cascade_times"", "" quiet"")"
"901","OptCirClust","lin_polylog_framed_clust","c(""std::vector<double>& "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" X"", "" K"", "" frame_width"", "" first_frame"", "" last_frame"", "" prev_k_f"", "" next_k_f"")"
"902","Orcs","nrowC","DataFrame "," x"
"903","Orcs","ncolC","DataFrame "," x"
"904","Orcs","dimC","DataFrame "," x"
"905","Orcs","substrC","c(""StringVector "", ""int "", ""int "")","c("" x"", "" pos"", "" len"")"
"906","PAC","BSPLeaveCenterCpp","c(""NumericMatrix "", ""SEXP "", ""SEXP "")","c("" data"", "" numleaves"", "" methodr"")"
"907","PAFit","normalized_constant","c(""NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const double& "")","c("" norm"", "" degree"", "" theta"", "" f"", "" offset_tk"", "" offset"")"
"908","PAFit","normalized_constant_alpha","c(""NumericVector& "", ""const double& "", ""const double& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const double& "")","c("" norm"", "" alpha"", "" PA_offset"", "" degree"", "" theta"", "" f"", "" offset_tk"", "" offset"")"
"909","PAFit","get_stats","c(""CharacterVector& "", ""CharacterVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const long "", ""const int "", ""const int "", ""CharacterVector& "", ""NumericVector& "", ""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericMatrix& "", ""NumericVector& "", ""NumericMatrix& "", ""NumericMatrix& "", ""const int "", ""const long "", ""NumericVector& "", ""NumericVector& "")","c("" time_stamp"", "" unique_stamp"", "" in_node"", "" out_node"", "" all_node"", "" ok_node"", "" bin_vector"", "" max_node_id"", "" undirected"", "" only_PA"", "" time_vector"", "" Sum_m_k"", "" n_tk"", "" m_tk"", "" m_t"", "" offset_tk"", "" z_j"", "" node_degree"", "" offset_m_tk"", "" only_true_deg"", "" deg_max"", "" center_bin"", "" appear_time"")"
"910","PAFit","update_f","c(""NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "", ""const double "")","c("" f"", "" non_zero_f"", "" degree"", "" theta"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"", "" rate"", "" offset"")"
"911","PAFit","update_offset","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "")","c("" offset_n_tk"", "" offset_m_tk"", "" theta"", "" normalized_const"", "" m_t"", "" shape"", "" rate"")"
"912","PAFit","update_f_alpha","c(""NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "")","c("" f"", "" non_zero_f"", "" alpha"", "" PA_offset"", "" degree"", "" theta"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"", "" rate"")"
"913","PAFit","update_f_new","c(""NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "", ""const double "", ""const NumericVector& "")","c("" f"", "" non_zero_f"", "" degree"", "" theta"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"", "" rate"", "" offset"", "" weight_f"")"
"914","PAFit","update_f_alpha_new","c(""NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const double "", ""const NumericVector& "")","c("" f"", "" non_zero_f"", "" alpha"", "" PA_offset"", "" degree"", "" theta"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"", "" rate"", "" weight_f"")"
"915","PAFit","update_alpha_fast","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const double& "", ""const double "")","c("" non_zero_theta"", "" norm"", "" f"", "" PA_offset"", "" theta"", "" degree"", "" m_t"", "" Sum_m_k"", "" offset_tk"", "" offset"", "" alpha_old"")"
"916","PAFit","var_alpha","c(""const double "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const double& "")","c("" alpha"", "" non_zero_theta"", "" norm"", "" f"", "" PA_offset"", "" theta"", "" degree"", "" m_t"", "" Sum_m_k"", "" offset_tk"", "" offset"")"
"917","PAFit","coeff_theta","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const int "")","c("" degree"", "" f"", "" normalized_const"", "" m_t"", "" length_theta"")"
"918","PAFit","coeff_var","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const int "")","c("" degree"", "" f"", "" normalized_const"", "" m_t"", "" offset"", "" length_theta"")"
"919","PAFit","cal_var_f","c(""NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "")","c("" cov_f"", "" non_zero_f"", "" degree"", "" theta"", "" f"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"")"
"920","PAFit","cal_var_f_new","c(""NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double "", ""const NumericVector& "")","c("" cov_f"", "" non_zero_f"", "" degree"", "" theta"", "" f"", "" z_j"", "" normalized_const"", "" m_t"", "" shape"", "" weight_f"")"
"921","PCMRS","scoreEPCM","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""int "", ""double "")","c("" alpha"", "" Y"", "" X"", "" Q"", "" q"", "" n"", "" I"", "" pall"", "" pX"", "" GHprobs"", "" GHweights"", "" GHnodes"", "" scaled"", "" cores"")"
"922","PCMRS","loglikEPCM","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""int "", ""int "")","c("" alpha"", "" Y"", "" X"", "" Q"", "" q"", "" n"", "" I"", "" pall"", "" pX"", "" GHprobs"", "" GHweights"", "" GHnodes"", "" scaled"", "" cores"")"
"923","PINSPlus","mat_mul_para","c(""arma::mat& "", ""arma::mat& "")","c("" A"", "" B"")"
"924","PINSPlus","c_transpose","arma::mat& "," A"
"925","PLNmodels","optim_spherical","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" options"")"
"926","PLNmodels","optim_diagonal","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" options"")"
"927","PLNmodels","optim_full","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" options"")"
"928","PLNmodels","optim_rank","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" q"", "" options"")"
"929","PLNmodels","optim_sparse","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" Omega"", "" options"")"
"930","PLNmodels","VEstep_PLN_full","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" Theta"", "" Omega"", "" options"")"
"931","PLNmodels","VEstep_PLN_diagonal","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" Theta"", "" Omega"", "" options"")"
"932","PLNmodels","VEstep_PLN_spherical","c(""arma::vec "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""List "")","c("" par"", "" Y"", "" X"", "" O"", "" w"", "" Theta"", "" Omega"", "" options"")"
"933","PO.EN","sum_compute_single_rcpp","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const double& "", ""const arma::vec& "", ""unsigned int& "")","c("" y"", "" start_beta"", "" ytx"", "" XtX_reduce"", "" lambda"", "" alpha"", "" xtx"", "" i_iter"")"
"934","PPMR","PMR_summary","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" betaxin"", "" betayin"", "" Sigma1sin"", "" Sigma2sin"", "" samplen1"", "" samplen2"", "" gammain"", "" alphain"", "" max_iterin"", "" epsin"")"
"935","PPMR","PMR_individual","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" yin"", "" zin"", "" x1in"", "" x2in"", "" gammain"", "" alphain"", "" max_iterin"", "" epsin"")"
"936","PRDA","cohen_loop","c(""double "", ""double "", ""double "", ""String "", ""String "", ""double "", ""double "", ""int "")","c("" sample_n1"", "" mean_diff"", "" sample_n2"", "" test_method"", "" alternative"", "" ratio_sd"", "" mu"", "" B"")"
"937","PRDA","cor_loop","c(""int "", ""String "", ""int "", ""arma::mat "")","c("" n"", "" alternative"", "" B"", "" Eigen_matrix"")"
"938","PRIMME","primme_free_rcpp","PrimmeParams "," primme"
"939","PRIMME","primme_set_method_rcpp","c(""std::string "", ""PrimmeParams "")","c("" methodstr"", "" primme"")"
"940","PRIMME","primme_get_member_rcpp","c(""std::string "", ""PrimmeParams "")","c("" labelstr"", "" primme"")"
"941","PRIMME","primme_set_member_rcpp","c(""std::string "", ""SEXP "", ""PrimmeParams "")","c("" labelstr"", "" value"", "" primme"")"
"942","PRIMME","dprimme_rcpp","c(""NumericMatrix "", ""NumericMatrix "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""PrimmeParams "")","c("" ortho"", "" init"", "" A"", "" B"", "" prec"", "" convTest"", "" primme"")"
"943","PRIMME","zprimme_rcpp","c(""ComplexMatrix "", ""ComplexMatrix "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""PrimmeParams "")","c("" ortho"", "" init"", "" A"", "" B"", "" prec"", "" convTest"", "" primme"")"
"944","PRIMME","primme_svds_free_rcpp","PrimmeSvdsParams "," primme_svds"
"945","PRIMME","primme_svds_set_method_rcpp","c(""std::string "", ""std::string "", ""std::string "", ""PrimmeSvdsParams "")","c("" methodstr"", "" methodStage1str"", "" methodStage2str"", "" primme_svds"")"
"946","PRIMME","primme_svds_get_member_rcpp","c(""std::string "", ""PrimmeSvdsParams "")","c("" labelstr"", "" primme_svds"")"
"947","PRIMME","primme_svds_set_member_rcpp","c(""std::string "", ""SEXP "", ""PrimmeSvdsParams "")","c("" labelstr"", "" value"", "" primme_svds"")"
"948","PRIMME","dprimme_svds_rcpp","c(""NumericMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""SEXP "", ""SEXP "", ""PrimmeSvdsParams "")","c("" orthol"", "" orthor"", "" initl"", "" initr"", "" A"", "" prec"", "" primme_svds"")"
"949","PRIMME","zprimme_svds_rcpp","c(""ComplexMatrix "", ""ComplexMatrix "", ""ComplexMatrix "", ""ComplexMatrix "", ""SEXP "", ""SEXP "", ""PrimmeSvdsParams "")","c("" orthol"", "" orthor"", "" initl"", "" initr"", "" A"", "" prec"", "" primme_svds"")"
"950","PUlasso","LU_dense_cpp","c(""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""Eigen::ArrayXd& "", ""Eigen::ArrayXd& "", ""Eigen::ArrayXd& "", ""bool "", ""int "", ""double "", ""double "", ""int "", ""int "", ""Eigen::VectorXd& "", ""bool "", ""double "", ""double "", ""bool "", ""bool "", ""double "", ""double "", ""int "", ""int "", ""std::vector<double> "", ""bool "", ""std::string "", ""int "", ""bool "")","c("" X_"", "" z_"", "" icoef_"", "" gsize_"", "" pen_"", "" lambdaseq_"", "" user_lambdaseq_"", "" pathLength_"", "" lambdaMinRatio_"", "" pi_"", "" max_nUpdates_"", "" maxit_"", "" wei_"", "" weiOption_"", "" tol_"", "" inner_tol_"", "" useStrongSet_"", "" verbose_"", "" stepSize_"", "" stepSizeAdj_"", "" batchSize_"", "" updateFreq_"", "" samplingProbabilities_"", "" useLipschitz_"", "" method_"", "" trace_"", "" skipFitting_"")"
"951","PUlasso","LU_sparse_cpp","c(""Eigen::SparseMatrix<double>& "", ""Eigen::VectorXd& "", ""Eigen::VectorXd& "", ""Eigen::ArrayXd& "", ""Eigen::ArrayXd& "", ""Eigen::ArrayXd& "", ""bool "", ""int "", ""double "", ""double "", ""int "", ""int "", ""Eigen::VectorXd& "", ""bool "", ""double "", ""double "", ""bool "", ""bool "", ""double "", ""double "", ""int "", ""int "", ""std::vector<double> "", ""bool "", ""std::string "", ""int "", ""bool "")","c("" X_"", "" z_"", "" icoef_"", "" gsize_"", "" pen_"", "" lambdaseq_"", "" user_lambdaseq_"", "" pathLength_"", "" lambdaMinRatio_"", "" pi_"", "" max_nUpdates_"", "" maxit_"", "" wei_"", "" weiOption_"", "" tol_"", "" inner_tol_"", "" useStrongSet_"", "" verbose_"", "" stepSize_"", "" stepSizeAdj_"", "" batchSize_"", "" updateFreq_"", "" samplingProbabilities_"", "" useLipschitz_"", "" method_"", "" trace_"", "" skipFitting_"")"
"952","PUlasso","deviances_dense_cpp","c(""Eigen::MatrixXd& "", ""Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXd& "", ""double "", ""const Eigen::VectorXd& "", ""bool "")","c("" coefMat_"", "" X_"", "" z_"", "" pi_"", "" wei_"", "" weiOption_"")"
"953","PUlasso","deviances_sparse_cpp","c(""Eigen::MatrixXd& "", ""Eigen::SparseMatrix<double>& "", ""Eigen::VectorXd& "", ""double "", ""const Eigen::VectorXd& "", ""bool "")","c("" coefMat_"", "" X_"", "" z_"", "" pi_"", "" wei_"", "" weiOption_"")"
"954","Peptides","chargeList","c(""std::vector< std::string > "", ""NumericVector "", ""std::string "")","c("" seq"", "" pH"", "" pKscale"")"
"955","Peptides","absoluteCharge","c(""std::string "", ""double "", ""std::string "")","c("" seq"", "" pH"", "" pKscale"")"
"956","Phase123","RunAdaptiveEffToxTrial","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "")","c("" DoseStart"", "" Dose"", "" Hypermeans"", "" Hypervars"", "" Contour"", "" PiLim"", "" ProbLim"", "" cohort"", "" NET"", "" NF"", "" B"", "" nSims"", "" PETrue"", "" PTTrue"")"
"957","Phase123","AssignEffTox","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" YE"", "" YT"", "" Doses"", "" Dose"", "" DosesTried"", "" Hypermeans"", "" Hypervars"", "" Contour"", "" PiLim"", "" ProbLim"", "" B"")"
"958","Phase123","RandomEffTox","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" YE"", "" YT"", "" Doses"", "" Dose"", "" DosesTried"", "" Hypermeans"", "" Hypervars"", "" Contour"", "" PiLim"", "" ProbLim"", "" B"")"
"959","Phase123","PieceMCMC","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "")","c("" Y"", "" I"", "" YE"", "" YT"", "" Doses"", "" Dose"", "" B"", "" prob"", "" MaxObs"")"
"960","Phase123","EFFTOX","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" YE"", "" YT"", "" Doses"", "" Dose"", "" Hypermeans"", "" Hypervars"", "" B"")"
"961","PhenotypeSimulator","read_lines","c(""std::string const& "", ""NumericVector const& "", ""char "")","c("" filename"", "" lines"", "" sep"")"
"962","PhylogeneticEM","upward_downward_BM","c(""arma::mat const& "", ""arma::umat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""List "")","c("" data"", "" ed"", "" Delta"", "" Variance"", "" edge_length"", "" root_state_list"")"
"963","PhylogeneticEM","upward_downward_OU","c(""arma::mat const& "", ""arma::umat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""arma::mat const& "", ""List "")","c("" data"", "" ed"", "" Beta"", "" Stationary_Var"", "" edge_length"", "" Alpha"", "" root_state_list"")"
"964","PhylogeneticEM","log_likelihood_BM","c(""arma::mat const& "", ""arma::umat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""List "")","c("" data"", "" ed"", "" Delta"", "" Variance"", "" edge_length"", "" root_state_list"")"
"965","PhylogeneticEM","log_likelihood_OU","c(""arma::mat const& "", ""arma::umat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""arma::mat const& "", ""List "")","c("" data"", "" ed"", "" Beta"", "" Stationary_Var"", "" edge_length"", "" Alpha"", "" root_state_list"")"
"966","PieceExpIntensity","PieceExpIntensity2","c(""arma::vec "", ""arma::vec "", ""int "", ""double "")","c("" Y"", "" Rates"", "" B"", "" Poi"")"
"967","Pijavski","Pijavski","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fn"", "" Lips"", "" x1"", "" x2"", "" iter"", "" prec"", "" rho"")"
"968","ProcData","calculate_dissimilarity_cpp","c(""StringVector "", ""StringVector "")","c("" seq1"", "" seq2"")"
"969","ProcData","calculate_tdissimilarity_cpp","c(""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "")","c("" seq1"", "" seq2"", "" ts1"", "" ts2"")"
"970","ProcData","group_score_cpp","c(""List "", ""List "")","c("" list1"", "" list2"")"
"971","ProcData","calculate_dist_cpp","List "," seqs"
"972","ProcData","calculate_tdist_cpp","c(""List "", ""List "")","c("" action_seqs"", "" time_seqs"")"
"973","ProcData","calculate_group_dist_cpp","List "," seqs"
"974","ProcData","calculate_common_event_proportion","c(""StringVector "", ""StringVector "")","c("" seq1"", "" seq2"")"
"975","ProcData","paste_seq","c(""StringVector "", ""int "")","c("" seq"", "" k"")"
"976","ProcData","calculate_common_ngram_proportion","c(""StringVector "", ""StringVector "", ""int "")","c("" seq1"", "" seq2"", "" k"")"
"977","ProcData","calculate_ngram_dissimilarity","c(""StringVector "", ""StringVector "", ""IntegerVector "")","c("" seq1"", "" seq2"", "" L_set"")"
"978","ProcData","calculate_ngram_dist_cpp","c(""List "", ""IntegerVector "")","c("" seqs"", "" L_set"")"
"979","ProcData","MDS","c(""NumericMatrix "", ""NumericMatrix "", ""int "", ""double "", ""double "", ""unsigned int "")","c("" D"", "" Theta"", "" n_epoch"", "" step_size"", "" tot"", "" seed"")"
"980","ProcData","MDS_subset","c(""NumericMatrix "", ""NumericMatrix "", ""int "", ""double "", ""double "", ""IntegerMatrix "", ""IntegerMatrix "")","c("" D"", "" Theta"", "" n_epoch"", "" step_size"", "" tot"", "" train_set"", "" valid_set"")"
"981","RCSF","R_CSF","c(""DataFrame "", ""bool "", ""double "", ""double "", ""int "", ""int "", ""double "")","c("" data"", "" sloop_smooth"", "" class_threshold"", "" cloth_resolution"", "" rigidness"", "" interations"", "" time_step"")"
"982","RClickhouse","fetch","c(""XPtr<Result> "", ""ssize_t "")","c("" res"", "" n"")"
"983","RClickhouse","clearResult","XPtr<Result> "," res"
"984","RClickhouse","hasCompleted","XPtr<Result> "," res"
"985","RClickhouse","getRowCount","XPtr<Result> "," res"
"986","RClickhouse","getRowsAffected","XPtr<Result> "," res"
"987","RClickhouse","getStatement","XPtr<Result> "," res"
"988","RClickhouse","resultTypes","XPtr<Result> "," res"
"989","RClickhouse","connect","c(""String "", ""int "", ""String "", ""String "", ""String "", ""String "")","c("" host"", "" port"", "" db"", "" user"", "" password"", "" compression"")"
"990","RClickhouse","disconnect","XPtr<Client> "," conn"
"991","RClickhouse","select","c(""XPtr<Client> "", ""String "")","c("" conn"", "" query"")"
"992","RClickhouse","insert","c(""XPtr<Client> "", ""String "", ""DataFrame "")","c("" conn"", "" tableName"", "" df"")"
"993","RClickhouse","validPtr","SEXP "," ptr"
"994","REndo","copulaCorrection_LL_rcpp","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "")","c("" params"", "" vec_y"", "" m_data_exo_endo"", "" vec_data_endo_pstar"", "" param_pos_data"", "" param_pos_sigma"", "" param_pos_rho"")"
"995","RJcluster","getIndividualList","c(""const arma::colvec& "", ""const arma::colvec& "", ""int "")","c("" classification"", "" temp_index"", "" i"")"
"996","RJcluster","getCCmatrix_c","c(""const arma::colvec& "", ""const arma::colvec& "", ""int "")","c("" classification"", "" temp_index"", "" G"")"
"997","RJcluster","getMatrixMeans_c","c(""const List "", ""const arma::mat "", ""const int "")","c("" CC"", "" X"", "" d"")"
"998","RJcluster","assignGroups_c","c(""const int "", ""const int "", ""const arma::colvec& "", ""const List "")","c("" N"", "" G"", "" classification"", "" CC"")"
"999","RJcluster","getFinalMeans_c","c(""const int "", ""const arma::vec& "", ""const arma::mat& "")","c("" G"", "" Group"", "" X"")"
"1000","RJcluster","tcrossprod_c","c(""const arma::mat& "", ""const arma::mat& "")","c("" X"", "" Y"")"
"1001","RJcluster","scale_c","c(""const arma::mat& "", ""bool "")","c("" X"", "" medians"")"
"1002","RKHSMetaMod","RKHSMetMod","c(""NumericVector "", ""NumericMatrix "", ""String "", ""int "", ""NumericVector "", ""NumericVector "", ""bool "")","c("" Y"", "" X"", "" kernel"", "" Dmax"", "" gamma"", "" frc"", "" verbose"")"
"1003","RKHSMetaMod","RKHSMetMod_qmax","c(""NumericVector "", ""NumericMatrix "", ""String "", ""int "", ""NumericVector "", ""int "", ""double "", ""int "", ""bool "")","c("" Y"", "" X"", "" kernel"", "" Dmax"", "" gamma"", "" qmax"", "" rat"", "" Num"", "" verbose"")"
"1004","RKHSMetaMod","PredErr","c(""NumericMatrix "", ""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""List "", ""String "", ""int "")","c("" X"", "" XT"", "" YT"", "" mu"", "" gamma"", "" res"", "" kernel"", "" Dmax"")"
"1005","RKHSMetaMod","grplasso_q","c(""NumericVector "", ""List "", ""int "", ""double "", ""int "")","c("" Y"", "" Kv"", "" q"", "" rat"", "" Num"")"
"1006","RKHSMetaMod","calc_Kv","c(""NumericMatrix "", ""String "", ""int "", ""bool "", ""bool "", ""double "")","c("" X"", "" kernel"", "" Dmax"", "" correction"", "" verbose"", "" tol"")"
"1007","RKHSMetaMod","RKHSgrplasso","c(""NumericVector "", ""List "", ""double "", ""int "", ""bool "")","c("" Y"", "" Kv"", "" mu"", "" maxIter"", "" verbose"")"
"1008","RKHSMetaMod","grplasso","c(""NumericVector "", ""List "", ""List "", ""double "", ""int "", ""double "", ""bool "")","c("" Y"", "" Kv"", "" k_v"", "" mu"", "" maxIter"", "" eps"", "" verbose"")"
"1009","RKHSMetaMod","mu_max","c(""NumericVector "", ""List "")","c("" Y"", "" matZ"")"
"1010","RKHSMetaMod","pen_MetMod","c(""NumericVector "", ""List "", ""NumericVector "", ""NumericVector "", ""List "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "", ""bool "")","c("" Y"", "" Kv"", "" gamma"", "" mu"", "" resg"", "" gama_v"", "" mu_v"", "" maxIter"", "" verbose"", "" calcStwo"")"
"1011","RKHSMetaMod","penMetaMod_cpp","c(""NumericVector "", ""List "", ""List "", ""StringVector "", ""List "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""int "", ""bool "", ""bool "")","c("" Y"", "" matZ"", "" k_v"", "" namG"", "" resg"", "" gamma"", "" mu"", "" gama_v"", "" mu_v"", "" maxIter"", "" verbose"", "" calcStwo"")"
"1012","RLRsim","RLRsimCpp","c(""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""NumericVector "", ""NumericVector "", ""double "", ""NumericVector "", ""bool "")","c("" p"", "" k"", "" n"", "" nsim"", "" g"", "" q"", "" mu"", "" lambda"", "" lambda0"", "" xi"", "" REML"")"
"1013","RLumCarlo","MC_C_CW_IRSL_LOC","c(""arma::vec "", ""int "", ""double "", ""double "")","c("" times"", "" n_filled"", "" r"", "" A"")"
"1014","RLumCarlo","MC_C_CW_IRSL_TUN","c(""arma::vec "", ""int "", ""arma::vec "", ""double "", ""double "")","c("" times"", "" N_e"", "" r"", "" rho"", "" A"")"
"1015","RLumCarlo","MC_C_CW_OSL_DELOC","c(""arma::vec "", ""int "", ""int "", ""double "", ""double "")","c("" times"", "" N_e"", "" n_filled"", "" R"", "" A"")"
"1016","RLumCarlo","MC_C_ISO_DELOC","c(""arma::vec "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" N_e"", "" n_filled"", "" R"", "" E"", "" s"", "" T"")"
"1017","RLumCarlo","MC_C_ISO_LOC","c(""arma::vec "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" n_filled"", "" r"", "" E"", "" s"", "" T"")"
"1018","RLumCarlo","MC_C_ISO_TUN","c(""arma::vec "", ""int "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" N_e"", "" r"", "" rho"", "" E"", "" s"", "" T"")"
"1019","RLumCarlo","MC_C_LM_OSL_DELOC","c(""arma::vec "", ""int "", ""int "", ""double "", ""double "")","c("" times"", "" N_e"", "" n_filled"", "" R"", "" A"")"
"1020","RLumCarlo","MC_C_LM_OSL_LOC","c(""arma::vec "", ""int "", ""double "", ""double "")","c("" times"", "" n_filled"", "" r"", "" A"")"
"1021","RLumCarlo","MC_C_LM_OSL_TUN","c(""arma::vec "", ""int "", ""arma::vec "", ""double "", ""double "")","c("" times"", "" N_e"", "" r"", "" rho"", "" A"")"
"1022","RLumCarlo","MC_C_TL_DELOC","c(""arma::vec "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" N_e"", "" n_filled"", "" R"", "" E"", "" s"", "" b"")"
"1023","RLumCarlo","MC_C_TL_LOC","c(""arma::vec "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" n_filled"", "" r"", "" E"", "" s"", "" b"")"
"1024","RLumCarlo","MC_C_TL_TUN","c(""arma::vec "", ""int "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "")","c("" times"", "" N_e"", "" r"", "" rho"", "" E"", "" s"", "" b"")"
"1025","RLumModel","set_ODE_Rcpp","c(""double "", ""arma::vec "", ""List "")","c("" t"", "" n"", "" parameters"")"
"1026","RLumModel","set_ODE_Rcpp_LM_OSL","c(""double "", ""arma::vec "", ""List "")","c("" t"", "" n"", "" parameters"")"
"1027","RMKL","SpicySVM","c(""arma::cube "", ""arma::vec "", ""double "", ""double "", ""double "", ""int "", ""int "", ""double "")","c("" K"", "" yapp"", "" C"", "" tol"", "" tolInner"", "" OuterMaxIter"", "" InnerMaxIter"", "" calpha"")"
"1028","RMKL","SpicyLogit","c(""arma::cube "", ""arma::vec "", ""double "", ""double "", ""double "", ""int "", ""int "", ""double "")","c("" K"", "" yapp"", "" C"", "" tol"", "" tolInner"", "" OuterMaxIter"", "" InnerMaxIter"", "" calpha"")"
"1029","RMKL","predictspicy","c(""arma::mat "", ""double "", ""arma::cube "")","c("" alpha"", "" b"", "" k0"")"
"1030","RMSNumpress","optimalLinearFixedPointMass","c(""const std::vector<double>& "", ""double "")","c("" data"", "" mass_acc"")"
"1031","RMSNumpress","optimalLinearFixedPoint","const std::vector<double>& "," data"
"1032","RMSNumpress","optimalSlofFixedPoint","const std::vector<double>& "," data"
"1033","RMSNumpress","encodeLinear","c(""const std::vector<double>& "", ""double "")","c("" data"", "" fixedPoint"")"
"1034","RMSNumpress","decodeLinear","const std::vector<unsigned char>& "," data"
"1035","RMSNumpress","encodeSlof","c(""const std::vector<double>& "", ""double "")","c("" data"", "" fixedPoint"")"
"1036","RMSNumpress","decodeSlof","const std::vector<unsigned char>& "," data"
"1037","RMSNumpress","encodePic","const std::vector<double>& "," data"
"1038","RMSNumpress","decodePic","const std::vector<unsigned char>& "," data"
"1039","RPostgres","connection_create","c(""std::vector<std::string> "", ""std::vector<std::string> "", ""bool "")","c("" keys"", "" values"", "" check_interrupts"")"
"1040","odbc","connection_valid","connection_ptr const& "," p"
"1041","odbc","connection_release","connection_ptr "," p"
"1042","odbc","connection_info","connection_ptr const& "," p"
"1043","RPostgres","connection_quote_string","c(""DbConnection* "", ""CharacterVector "")","c("" con"", "" xs"")"
"1044","RMariaDB","connection_begin_transaction","XPtr<DbConnectionPtr> "," con"
"1045","odbc","connection_commit","connection_ptr const& "," p"
"1046","odbc","connection_rollback","connection_ptr const& "," p"
"1047","RPostgres","connection_is_transacting","DbConnection* "," con"
"1048","bindrcpp","init_logging","const std::string& "," log_level"
"1049","RSQLite","result_create","c(""XPtr<DbConnectionPtr> "", ""std::string "")","c("" con"", "" sql"")"
"1050","odbc","result_release","result_ptr "," r"
"1051","RSQLite","result_valid","XPtr<DbResult> "," res_"
"1052","odbc","result_fetch","c(""result_ptr const& "", ""const int "")","c("" r"", "" n_max"")"
"1053","odbc","result_bind","c(""result_ptr const& "", ""List const& "", ""size_t "")","c("" r"", "" params"", "" batch_rows"")"
"1054","RSQLite","result_has_completed","DbResult* "," res"
"1055","RSQLite","result_rows_fetched","DbResult* "," res"
"1056","odbc","result_rows_affected","result_ptr const& "," r"
"1057","odbc","result_column_info","result_ptr const& "," r"
"1058","RMixtCompIO","UTest4","const List& "," l"
"1059","RMixtCompIO","UTest5","const List& "," l"
"1060","RMixtCompIO","rmc","c(""List "", ""List "", ""List "", ""List "")","c("" algoR"", "" dataR"", "" descR"", "" resLearnR"")"
"1061","RNewsflow","term_union_cpp","c(""SpMat& "", ""SpMat& "", ""std::vector<std::string> "", ""std::vector<bool> "", ""bool "", ""std::string "")","c("" m"", "" simmat"", "" terms"", "" parentheses"", "" verbose"", "" sep"")"
"1062","RNewsflow","term_intersect_cpp","c(""SpMat& "", ""SpMat& "", ""std::vector<std::string> "", ""std::vector<bool> "", ""bool "", ""std::string "")","c("" m"", "" simmat"", "" terms"", "" parentheses"", "" verbose"", "" sep"")"
"1063","RNewsflow","batched_tcrossprod_cpp","c(""SpMat& "", ""SpMat& "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""const SpMat& "", ""bool "", ""NumericVector "", ""bool "", ""NumericVector "", ""int "", ""bool "", ""bool "", ""bool "", ""std::string "", ""double "", ""std::string "", ""std::string "", ""int "", ""int "", ""bool "", ""bool "", ""bool "", ""bool "", ""int "")","c("" m1"", "" m2"", "" group1"", "" group2"", "" order1"", "" order2"", "" simmat"", "" use_min"", "" min_value"", "" use_max"", "" max_value"", "" top_n"", "" diag"", "" only_upper"", "" rowsum_div"", "" pvalue"", "" max_p"", "" normalize"", "" crossfun"", "" lwindow"", "" rwindow"", "" row_attr"", "" col_attr"", "" lag_attr"", "" verbose"", "" batchsize"")"
"1064","RNewsflow","window_corp_comp","c(""SpMat& "", ""SpMat& "", ""NumericVector "", ""NumericVector "", ""int "", ""int "", ""double "", ""double "", ""double "")","c("" m1"", "" m2"", "" order1"", "" order2"", "" lwindow"", "" rwindow"", "" min_chi"", "" min_ratio"", "" smooth"")"
"1065","RPostgres","connection_quote_identifier","c(""DbConnection* "", ""CharacterVector "")","c("" con"", "" xs"")"
"1066","RPostgres","connection_set_transacting","c(""DbConnection* "", ""bool "")","c("" con"", "" transacting"")"
"1067","RPostgres","connection_copy_data","c(""DbConnection* "", ""std::string "", ""List "")","c("" con"", "" sql"", "" df"")"
"1068","RPostgres","encode_vector","RObject "," x"
"1069","RPostgres","encode_data_frame","List "," x"
"1070","RPostgres","encrypt_password","c(""String "", ""String "")","c("" password"", "" user"")"
"1071","RPresto","check_names","c(""List "", ""int "")","c("" x"", "" column_count"")"
"1072","RPresto","transpose","c(""List "", ""List "")","c("" input"", "" output"")"
"1073","stepR","colMax","const NumericMatrix& "," stat"
"1074","RQuantLib","affineWithRebuiltCurveEngine","c(""List "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""NumericVector "", ""NumericVector "", ""NumericVector "")","c("" rparam"", "" legparams"", "" dateVec"", "" zeroVec"", "" swaptionMat"", "" swapLengths"", "" swaptionVols"")"
"1075","RQuantLib","asianOptionEngine","c(""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""size_t "")","c("" averageType"", "" type"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" first"", "" length"", "" fixings"")"
"1076","RQuantLib","binaryOptionEngine","c(""std::string "", ""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" binType"", "" type"", "" excType"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" cashPayoff"")"
"1077","RQuantLib","binaryOptionImpliedVolatilityEngine","c(""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" type"", "" value"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" cashPayoff"")"
"1078","RQuantLib","barrierOptionEngine","c(""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" barrType"", "" type"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" barrier"", "" rebate"")"
"1079","RQuantLib","bermudanFromYieldEngine","c(""List "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericMatrix "")","c("" rparam"", "" yield"", "" swaptionMat"", "" swapLengths"", "" swaptionVols"")"
"1080","RQuantLib","bermudanWithRebuiltCurveEngine","c(""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""NumericVector "", ""NumericVector "", ""NumericMatrix "")","c("" rparam"", "" dateVec"", "" zeroVec"", "" swaptionMat"", "" swapLengths"", "" swaptionVols"")"
"1081","RQuantLib","zeroPriceByYieldEngine","c(""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""QuantLib::Date "", ""QuantLib::Date "")","c("" yield"", "" faceAmount"", "" dayCounter"", "" frequency"", "" businessDayConvention"", "" compound"", "" maturityDate"", "" issueDate"")"
"1082","RQuantLib","zeroYieldByPriceEngine","c(""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""QuantLib::Date "", ""QuantLib::Date "")","c("" price"", "" faceAmount"", "" dayCounter"", "" frequency"", "" businessDayConvention"", "" compound"", "" maturityDate"", "" issueDate"")"
"1083","RQuantLib","fixedRateBondYieldByPriceEngine","c(""double "", ""double "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""QuantLib::Date "", ""QuantLib::Date "", ""QuantLib::Date "", ""std::vector<double> "")","c("" settlementDays"", "" price"", "" cal"", "" faceAmount"", "" businessDayConvention"", "" compound"", "" redemption"", "" dayCounter"", "" frequency"", "" maturityDate"", "" issueDate"", "" effectiveDate"", "" rates"")"
"1084","RQuantLib","fixedRateBondPriceByYieldEngine","c(""double "", ""double "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""QuantLib::Date "", ""QuantLib::Date "", ""QuantLib::Date "", ""std::vector<double> "")","c("" settlementDays"", "" yield"", "" cal"", "" faceAmount"", "" businessDayConvention"", "" compound"", "" redemption"", "" dayCounter"", "" frequency"", "" maturityDate"", "" issueDate"", "" effectiveDate"", "" rates"")"
"1085","RQuantLib","FloatBond1","c(""List "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""List "", ""List "", ""List "", ""List "")","c("" bond"", "" gearings"", "" caps"", "" spreads"", "" floors"", "" indexparams"", "" index"", "" discountCurve"", "" dateparams"")"
"1086","RQuantLib","FloatBond2","c(""List "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" bond"", "" gearings"", "" caps"", "" spreads"", "" floors"", "" indexparams"", "" index_params"", "" index_tsQuotes"", "" index_times"", "" discountCurve"", "" dateparams"")"
"1087","RQuantLib","FloatBond3","c(""List "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" bond"", "" gearings"", "" caps"", "" spreads"", "" floors"", "" indexparams"", "" index"", "" disc_params"", "" disc_tsQuotes"", "" disc_times"", "" dateparams"")"
"1088","RQuantLib","FloatBond4","c(""List "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" bond"", "" gearings"", "" caps"", "" spreads"", "" floors"", "" indexparams"", "" index_params"", "" index_tsQuotes"", "" index_times"", "" disc_params"", "" disc_tsQuotes"", "" disc_times"", "" dateparams"")"
"1089","RQuantLib","floatingWithRebuiltCurveEngine","c(""List "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""std::vector<double> "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""List "")","c("" bondparams"", "" gearings"", "" spreads"", "" caps"", "" floors"", "" indexparams"", "" iborDateVec"", "" iborzeroVec"", "" dateVec"", "" zeroVec"", "" dateparams"")"
"1090","RQuantLib","FixedRateWithYield","c(""List "", ""std::vector<double> "", ""List "", ""List "", ""double "")","c("" bondparam"", "" ratesVec"", "" scheduleparam"", "" calcparam"", "" yield"")"
"1091","RQuantLib","FixedRateWithPrice","c(""List "", ""std::vector<double> "", ""List "", ""List "", ""double "")","c("" bondparam"", "" ratesVec"", "" scheduleparam"", "" calcparam"", "" price"")"
"1092","RQuantLib","FixedRateWithRebuiltCurve","c(""List "", ""std::vector<double> "", ""List "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "")","c("" bondparam"", "" ratesVec"", "" scheduleparam"", "" calcparam"", "" dateVec"", "" zeroVec"")"
"1093","RQuantLib","ZeroBondWithRebuiltCurve","c(""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""List "")","c("" bond"", "" dateVec"", "" zeroVec"", "" dateparams"")"
"1094","RQuantLib","convertibleZeroBondEngine","c(""List "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""DataFrame "", ""DataFrame "", ""List "")","c("" rparam"", "" processParam"", "" dividendYieldDateVec"", "" dividendYieldZeroVec"", "" rffDateVec"", "" rffZeroVec"", "" dividendScheduleFrame"", "" callabilityScheduleFrame"", "" datemisc"")"
"1095","RQuantLib","convertibleFixedBondEngine","c(""List "", ""NumericVector "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""DataFrame "", ""DataFrame "", ""List "")","c("" rparam"", "" rates"", "" processParam"", "" dividendYieldDateVec"", "" dividendYieldZeroVec"", "" rffDateVec"", "" rffZeroVec"", "" dividendScheduleFrame"", "" callabilityScheduleFrame"", "" datemisc"")"
"1096","RQuantLib","convertibleFloatingBondEngine","c(""List "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""List "", ""std::vector<double> "", ""DataFrame "", ""DataFrame "", ""List "")","c("" rparam"", "" processParam"", "" dividendYieldDateVec"", "" dividendYieldZeroVec"", "" rffDateVec"", "" rffZeroVec"", "" iborIndexDateVec"", "" iborIndexZeroVec"", "" iborparams"", "" spreads"", "" dividendScheduleFrame"", "" callabilityScheduleFrame"", "" datemisc"")"
"1097","RQuantLib","callableBondEngine","c(""List "", ""List "", ""NumericVector "", ""DataFrame "", ""List "")","c("" rparam"", "" hwparam"", "" coupon"", "" callabilityScheduleFrame"", "" datemisc"")"
"1098","RQuantLib","fittedBondCurveEngine","c(""List "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""List "")","c("" curveparam"", "" length"", "" coupons"", "" marketQuotes"", "" datemisc"")"
"1099","RQuantLib","setCalendarContext","c(""std::string "", ""int "", ""QuantLib::Date "")","c("" calendar"", "" fixingDays"", "" settleDate"")"
"1100","RcppQuantuccia","isBusinessDay","DateVector "," dates"
"1101","RcppQuantuccia","isHoliday","DateVector "," dates"
"1102","RcppQuantuccia","isWeekend","DateVector "," dates"
"1103","RcppQuantuccia","isEndOfMonth","DateVector "," dates"
"1104","RcppQuantuccia","getEndOfMonth","DateVector "," dates"
"1105","RQuantLib","adjust","c(""std::string "", ""std::vector<QuantLib::Date> "", ""int "")","c("" calendar"", "" dates"", "" bdc"")"
"1106","RQuantLib","advance1","c(""std::string "", ""double "", ""double "", ""int "", ""double "", ""std::vector<QuantLib::Date> "")","c("" calendar"", "" amount"", "" unit"", "" bdcVal"", "" emr"", "" dates"")"
"1107","RQuantLib","advance2","c(""std::string "", ""double "", ""int "", ""double "", ""std::vector<QuantLib::Date> "")","c("" calendar"", "" period"", "" bdcVal"", "" emr"", "" dates"")"
"1108","RcppQuantuccia","businessDaysBetween","c(""DateVector "", ""DateVector "", ""bool "", ""bool "")","c("" from"", "" to"", "" includeFirst"", "" includeLast"")"
"1109","RQuantLib","getHolidayList","c(""std::string "", ""QuantLib::Date "", ""QuantLib::Date "", ""bool "")","c("" calendar"", "" from"", "" to"", "" includeWeekends"")"
"1110","RQuantLib","addHolidays","c(""std::string "", ""std::vector<QuantLib::Date> "")","c("" calendar"", "" dates"")"
"1111","RQuantLib","removeHolidays","c(""std::string "", ""std::vector<QuantLib::Date> "")","c("" calendar"", "" dates"")"
"1112","RcppQuantuccia","advanceDate","c(""Date "", ""int "")","c("" rd"", "" days"")"
"1113","RQuantLib","dayCount","c(""std::vector<QuantLib::Date> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "")","c("" startDates"", "" endDates"", "" dayCounters"")"
"1114","RQuantLib","yearFraction","c(""std::vector<QuantLib::Date> "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "")","c("" startDates"", "" endDates"", "" dayCounters"")"
"1115","RQuantLib","setEvaluationDate","QuantLib::Date "," evalDate"
"1116","RQuantLib","discountCurveEngine","c(""List "", ""List "", ""NumericVector "", ""List "")","c("" rparams"", "" tslist"", "" times"", "" legParams"")"
"1117","RQuantLib","calibrateHullWhiteUsingCapsEngine","c(""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""DataFrame "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::string "", ""QuantLib::Date "")","c("" termStrcDateVec"", "" termStrcZeroVec"", "" capDF"", "" iborDateVec"", "" iborZeroVec"", "" iborType"", "" evalDate"")"
"1118","RQuantLib","calibrateHullWhiteUsingSwapsEngine","c(""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""DataFrame "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""std::string "", ""QuantLib::Date "")","c("" termStrcDateVec"", "" termStrcZeroVec"", "" swapDF"", "" iborDateVec"", "" iborZeroVec"", "" iborType"", "" evalDate"")"
"1119","RQuantLib","europeanOptionImpliedVolatilityEngine","c(""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" type"", "" value"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"")"
"1120","RQuantLib","americanOptionImpliedVolatilityEngine","c(""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "", ""int "")","c("" type"", "" value"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volguess"", "" timesteps"", "" gridpoints"")"
"1121","RQuantLib","sabrengine","c(""List "", ""List "", ""std::vector<QuantLib::Date> "", ""std::vector<double> "", ""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""NumericVector "", ""NumericMatrix "")","c("" rparam"", "" legParams"", "" dateVec"", "" zeroVec"", "" swaptionMat"", "" swapLengths"", "" atmVols"", "" strikes"", "" smirkVols"")"
"1122","RQuantLib","CreateSchedule","List "," params"
"1123","RQuantLib","europeanOptionEngine","c(""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""Nullable<NumericVector> "", ""Nullable<NumericVector> "")","c("" type"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" discreteDividends"", "" discreteDividendsTimeUntil"")"
"1124","RQuantLib","americanOptionEngine","c(""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "", ""int "", ""std::string "", ""Nullable<NumericVector> "", ""Nullable<NumericVector> "")","c("" type"", "" underlying"", "" strike"", "" dividendYield"", "" riskFreeRate"", "" maturity"", "" volatility"", "" timeSteps"", "" gridPoints"", "" engine"", "" discreteDividends"", "" discreteDividendsTimeUntil"")"
"1125","RQuantLib","europeanOptionArraysEngine","c(""std::string "", ""NumericMatrix "")","c("" type"", "" par"")"
"1126","RQuantLib","zeroprice","c(""double "", ""QuantLib::Date "", ""QuantLib::Date "", ""int "", ""int "")","c("" yield"", "" maturity"", "" settle"", "" period"", "" basis"")"
"1127","RQuantLib","zeroyield","c(""double "", ""QuantLib::Date "", ""QuantLib::Date "", ""int "", ""int "")","c("" price"", "" maturity"", "" settle"", "" period"", "" basis"")"
"1128","RcppGSL","fastLm","c(""const RcppGSL::Matrix& "", ""const RcppGSL::Vector& "")","c("" X"", "" y"")"
"1129","RRI","OLS_c","c(""arma::vec "", ""arma::mat "")","c("" y"", "" X"")"
"1130","RRI","restricted_OLS_c","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""double "")","c("" y"", "" X"", "" bhat"", "" Q"", "" c"")"
"1131","RRI","r_test_c","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""List "", ""bool "", ""bool "", ""int "")","c("" y"", "" X"", "" lam"", "" lam0"", "" cluster_eps_r"", "" use_perm"", "" use_sign"", "" num_R"")"
"1132","RSQLite","connection_connect","c(""const std::string& "", ""const bool "", ""const int "", ""const std::string& "")","c("" path"", "" allow_ext"", "" flags"", "" vfs"")"
"1133","RSQLite","connection_copy_database","c(""const XPtr<DbConnectionPtr>& "", ""const XPtr<DbConnectionPtr>& "")","c("" from"", "" to"")"
"1134","RSQLite","connection_import_file","c(""const XPtr<DbConnectionPtr>& "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""const int "")","c("" con"", "" name"", "" value"", "" sep"", "" eol"", "" skip"")"
"1135","RSQLite","extension_load","c(""XPtr<DbConnectionPtr> "", ""const std::string& "", ""const std::string& "")","c("" con"", "" file"", "" entry_point"")"
"1136","RSQLite","result_get_placeholder_names","SqliteResult* "," res"
"1137","RVowpalWabbit","Rvw","SEXP "," args"
"1138","RWDataPlyr","rdf_to_rwtbl_cpp","c(""std::vector<std::string> "", ""std::vector<std::string> "", ""String const "", ""bool "")","c("" rdf"", "" keep_cols"", "" scenario"", "" add_ym"")"
"1139","Radviz","optimizeAnchors","c(""arma::mat "", ""NumericVector "", ""arma::mat "", ""double "", ""double "", ""int "", ""int "", ""bool "")","c("" scaledData"", "" Rclasses"", "" anchors"", "" attractG"", "" repelG"", "" law"", "" steps"", "" normalizeExamples"")"
"1140","Radviz","optimizeAnchors2","c(""arma::mat "", ""NumericVector "", ""arma::mat "", ""NumericVector "", ""double "", ""double "", ""int "", ""int "", ""bool "")","c("" scaledData"", "" Rclasses"", "" anchors"", "" RclustWeights"", "" attractG"", "" repelG"", "" law"", "" steps"", "" normalizeExamples"")"
"1141","Radviz","optimizeAnchorsGraph","c(""arma::mat "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""arma::mat "", ""double "", ""double "", ""int "", ""int "", ""bool "")","c("" scaledData"", "" RedgesInds"", "" RedgeWeights"", "" RdegreeVect"", "" anchors"", "" attractG"", "" repelG"", "" law"", "" steps"", "" normalizeExamples"")"
"1142","Rblpapi","authenticate_Impl","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" con_"", "" uuid_"", "" ip_address_"")"
"1143","Rblpapi","bdh_Impl","c(""SEXP "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::string "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""bool "")","c("" con_"", "" securities"", "" fields"", "" start_date_"", "" end_date_"", "" options_"", "" overrides_"", "" verbose"", "" identity_"", "" int_as_double"")"
"1144","Rblpapi","bdp_Impl","c(""SEXP "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "")","c("" con_"", "" securities"", "" fields"", "" options_"", "" overrides_"", "" verbose"", "" identity_"")"
"1145","Rblpapi","bds_Impl","c(""SEXP "", ""std::vector<std::string> "", ""std::string "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "")","c("" con_"", "" securities"", "" field"", "" options_"", "" overrides_"", "" verbose"", "" identity_"")"
"1146","Rblpapi","getPortfolio_Impl","c(""SEXP "", ""std::vector<std::string> "", ""std::string "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "")","c("" con_"", "" securities"", "" field"", "" options_"", "" overrides_"", "" verbose"", "" identity_"")"
"1147","Rblpapi","beqs_Impl","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "", ""std::string "", ""std::string "", ""bool "")","c("" con"", "" screenName"", "" screenType"", "" group"", "" pitdate"", "" languageId"", "" verbose"")"
"1148","Rblpapi","blpConnect_Impl","c(""const std::string "", ""const int "", ""SEXP "")","c("" host"", "" port"", "" app_name_"")"
"1149","Rblpapi","bsrch_Impl","c(""SEXP "", ""std::string "", ""std::string "", ""bool "")","c("" con"", "" domain"", "" limit"", "" verbose"")"
"1150","Rblpapi","fieldSearch_Impl","c(""SEXP "", ""std::string "", ""std::string "")","c("" con"", "" searchterm"", "" excludeterm"")"
"1151","Rblpapi","getBars_Impl","c(""SEXP "", ""std::string "", ""std::string "", ""int "", ""std::string "", ""std::string "", ""Nullable<CharacterVector> "", ""bool "")","c("" con"", "" security"", "" eventType"", "" barInterval"", "" startDateTime"", "" endDateTime"", "" options"", "" verbose"")"
"1152","Rblpapi","fieldInfo_Impl","c(""SEXP "", ""std::vector<std::string> "")","c("" con_"", "" fields"")"
"1153","Rblpapi","getTicks_Impl","c(""SEXP "", ""std::string "", ""std::vector<std::string> "", ""std::string "", ""std::string "", ""bool "", ""bool "")","c("" con"", "" security"", "" eventType"", "" startDateTime"", "" endDateTime"", "" setCondCodes"", "" verbose"")"
"1154","Rblpapi","lookup_Impl","c(""SEXP "", ""std::string "", ""std::string "", ""std::string "", ""int "", ""bool "")","c("" con"", "" query"", "" yellowKeyFilter"", "" languageOverride"", "" maxResults"", "" verbose"")"
"1155","Rblpapi","subscribe_Impl","c(""SEXP "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""Function "", ""SEXP "", ""SEXP "")","c("" con_"", "" securities"", "" fields"", "" fun"", "" options_"", "" identity_"")"
"1156","RcppAlgos","CheckReturn","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "")","c("" Rv"", "" f1"", "" f2"", "" Rtarget"", "" IsFactor"", "" RKeepRes"", "" stdFun"")"
"1157","RcppAlgos","CombinatoricsStndrd","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""bool "", ""SEXP "", ""SEXP "", ""int "")","c("" Rv"", "" Rm"", "" RisRep"", "" RFreqs"", "" Rlow"", "" Rhigh"", "" IsComb"", "" IsFactor"", "" Rparallel"", "" RNumThreads"", "" maxThreads"")"
"1158","RcppAlgos","CombinatoricsApply","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "")","c("" Rv"", "" Rm"", "" RisRep"", "" RFreqs"", "" Rlow"", "" Rhigh"", "" IsComb"", "" stdFun"", "" myEnv"")"
"1159","RcppAlgos","CombinatoricsCount","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "")","c("" Rv"", "" Rm"", "" RisRep"", "" RFreqs"", "" IsComb"")"
"1160","RcppAlgos","ComboGroupsCountCpp","c(""SEXP "", ""SEXP "")","c("" Rv"", "" RNumGroups"")"
"1161","RcppAlgos","ComboGroupsRcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "", ""int "", ""bool "", ""SEXP "", ""SEXP "", ""SEXP "", ""Function "", ""SEXP "")","c("" Rv"", "" RNumGroups"", "" RRetType"", "" Rlow"", "" Rhigh"", "" IsFactor"", "" Rparallel"", "" RNumThreads"", "" maxThreads"", "" IsSample"", "" RindexVec"", "" RmySeed"", "" RNumSamp"", "" baseSample"", "" RNamed"")"
"1162","RcppAlgos","CombinatoricsCnstrt","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""SEXP "")","c("" Rv"", "" Rm"", "" RisRep"", "" RFreqs"", "" Rlow"", "" Rhigh"", "" f1"", "" f2"", "" Rtarget"", "" IsComb"", "" RKeepRes"", "" Rparallel"", "" RnThreads"", "" maxThreads"", "" Rtolerance"")"
"1163","RcppAlgos","DivNumSieve","c(""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "", ""int "")","c("" Rb1"", "" Rb2"", "" bDivSieve"", "" RNamed"", "" RNumThreads"", "" maxThreads"")"
"1164","RcppAlgos","GetClassVals","c(""bool "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""bool "", ""SEXP "")","c("" IsStdRet"", "" Rv"", "" Rm"", "" RisRep"", "" RFreqs"", "" IsComb"", "" IsFactor"", "" stdFun"")"
"1165","RcppAlgos","MotleyContainer","c(""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""SEXP "", ""int "")","c("" Rb1"", "" Rb2"", "" isEuler"", "" RNamed"", "" RNumThreads"", "" maxThreads"")"
"1166","RcppAlgos","PollardRhoContainer","c(""SEXP "", ""SEXP "", ""bool "", ""bool "", ""SEXP "", ""int "")","c("" Rv"", "" RNamed"", "" bPrimeFacs"", "" bAllFacs"", "" RNumThreads"", "" maxThreads"")"
"1167","RcppAlgos","PrimeCountRcpp","c(""SEXP "", ""SEXP "", ""int "")","c("" Rn"", "" RNumThreads"", "" maxThreads"")"
"1168","RcppAlgos","EratosthenesRcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""int "")","c("" Rb1"", "" Rb2"", "" RNumThreads"", "" maxCores"", "" maxThreads"")"
"1169","RcppAlgos","SampleRcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""bool "", ""SEXP "", ""SEXP "", ""Function "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""SEXP "")","c("" Rv"", "" Rm"", "" Rrepetition"", "" RFreqs"", "" RindexVec"", "" IsComb"", "" IsFactor"", "" RmySeed"", "" RNumSamp"", "" baseSample"", "" stdFun"", "" myEnv"", "" Rparallel"", "" RNumThreads"", "" maxThreads"", "" RNamed"")"
"1170","RcppArmadillo","armadillo_version","bool "," single"
"1171","RcppArmadillo","armadillo_set_seed","unsigned int "," val"
"1172","RcppArmadillo","fastLm_impl","c(""const arma::mat& "", ""const arma::colvec& "")","c("" X"", "" y"")"
"1173","RcppBigIntAlgos","GetDivisorsC","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "")","c("" Rv"", "" RNamed"", "" RShowStats"", "" RSkipExtPR"", "" RSkipECM"", "" RNumThreads"", "" maxThreads"")"
"1174","RcppBigIntAlgos","PrimeFactorization","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "")","c("" Rv"", "" RNamed"", "" RShowStats"", "" RSkipExtPR"", "" RSkipECM"", "" RNumThreads"", "" maxThreads"")"
"1175","RcppCCTZ","helloMoon","bool "," verbose"
"1176","RcppCCTZ","tzDiff","c(""const std::string "", ""const std::string "", ""const NumericVector& "", ""bool "")","c("" tzfrom"", "" tzto"", "" dt"", "" verbose"")"
"1177","RcppCCTZ","toTz","c(""DatetimeVector "", ""const std::string "", ""const std::string "", ""bool "")","c("" dtv"", "" tzfrom"", "" tzto"", "" verbose"")"
"1178","RcppCCTZ","formatDatetime","c(""DatetimeVector "", ""std::string "", ""std::string "", ""std::string "")","c("" dtv"", "" fmt"", "" lcltzstr"", "" tgttzstr"")"
"1179","RcppCCTZ","parseDatetime","c(""CharacterVector "", ""std::string "", ""std::string "")","c("" svec"", "" fmt"", "" tzstr"")"
"1180","RcppCCTZ","formatDouble","c(""NumericVector "", ""NumericVector "", ""std::string "", ""std::string "")","c("" secv"", "" nanov"", "" fmt"", "" tgttzstr"")"
"1181","RcppCCTZ","parseDouble","c(""CharacterVector "", ""std::string "", ""std::string "")","c("" svec"", "" fmt"", "" tzstr"")"
"1182","RcppDE","DEoptim_impl","c(""const arma::colvec& "", ""const arma::colvec& "", ""SEXP "", ""const List& "", ""SEXP "")","c("" minbound"", "" maxbound"", "" fnS"", "" control"", "" rhoS"")"
"1183","RcppDE","putFunPtrInXPtr","SEXP "," funname"
"1184","RcppEigenAD","marshal_faa_di_bruno","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" Jf"", "" Hf"", "" Jg"", "" Hg"")"
"1185","RcppEnsmallen","lin_reg_lbfgs","c(""const arma::mat& "", ""const arma::vec& "")","c("" X"", "" y"")"
"1186","RcppFaddeeva","Faddeeva_w","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1187","RcppFaddeeva","erfcx","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1188","RcppFaddeeva","erf","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1189","RcppFaddeeva","erfi","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1190","RcppFaddeeva","erfc","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1191","RcppFaddeeva","Dawson","c(""const std::vector< std::complex<double> >& "", ""double "")","c("" z"", "" relerr"")"
"1192","RcppGetconf","getAll","const std::string& "," path"
"1193","RcppGetconf","getConfig","c(""const std::string& "", ""const std::string& "")","c("" var"", "" path"")"
"1194","RcppGreedySetCover","greedy_set_cover2","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" i0"", "" i1"", "" group_sizes_i0"", "" group_sizes_i1"")"
"1195","RcppMLPACK","kmeans","c(""SEXP "", ""const int& "")","c("" data"", "" clusters"")"
"1196","RcppMeCab","posLoopRcpp","c(""std::vector< std::string > "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1197","RcppMeCab","posLoopJoinRcpp","c(""std::vector< std::string > "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1198","RcppMeCab","posDFRcpp","c(""StringVector "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1199","RcppMeCab","posParallelJoinRcpp","c(""std::vector<std::string> "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1200","RcppMeCab","posParallelDFRcpp","c(""StringVector "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1201","RcppMeCab","posParallelRcpp","c(""std::vector<std::string> "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1202","RmecabKo","posRcpp","c(""const CharacterVector& "", ""const CharacterVector& "", ""const LogicalVector& "")","c("" phrase"", "" dic"", "" join"")"
"1203","RcppMeCab","posJoinRcpp","c(""std::string "", ""std::string "", ""std::string "")","c("" text"", "" sys_dic"", "" user_dic"")"
"1204","RcppMsgPack","c_pack","SEXP "," root_obj"
"1205","RcppMsgPack","c_unpack","c(""std::vector<unsigned char> "", ""bool "")","c("" char_message"", "" simplify"")"
"1206","RcppMsgPack","c_timestamp_encode","c(""double "", ""uint32_t "")","c("" seconds"", "" nanoseconds"")"
"1207","RcppMsgPack","c_timestamp_decode","std::vector<unsigned char> "," v"
"1208","RcppNLoptExample","testConstrainedProblem","c(""std::string "", ""bool "")","c("" method"", "" verbose"")"
"1209","RcppQuantuccia","setCalendar","std::string "," calstr"
"1210","RcppQuantuccia","adjust_cpp","c(""DateVector "", ""int "")","c("" dates"", "" bdc"")"
"1211","RcppQuantuccia","advanceUnits_cpp","c(""DateVector "", ""int "", ""int "", ""int "", ""bool "")","c("" dates"", "" n"", "" unit"", "" bdc"", "" emr"")"
"1212","RcppQuantuccia","getHolidays","c(""Date "", ""Date "", ""bool "")","c("" from"", "" to"", "" includeWeekends"")"
"1213","RcppSMC","LinReg_impl","c(""arma::mat "", ""unsigned long "")","c("" Data"", "" lNumber"")"
"1214","RcppSMC","LinRegLA_impl","c(""arma::mat "", ""arma::vec "", ""unsigned long "")","c("" Data"", "" intemps"", "" lNumber"")"
"1215","RcppSMC","LinRegLA_adapt_impl","c(""arma::mat "", ""unsigned long "", ""double "", ""double "")","c("" Data"", "" lNumber"", "" resampTol"", "" tempTol"")"
"1216","RcppSMC","blockpfGaussianOpt_impl","c(""arma::vec "", ""long "", ""long "")","c("" data"", "" part"", "" lag"")"
"1217","RcppSMC","nonLinPMMH_impl","c(""arma::vec "", ""unsigned long "", ""unsigned long "")","c("" data"", "" lNumber"", "" lMCMCits"")"
"1218","RcppSMC","pfLineartBS_impl","c(""arma::mat "", ""unsigned long "", ""bool "", ""Function "")","c("" data"", "" part"", "" usef"", "" fun"")"
"1219","RcppSMC","pfNonlinBS_impl","c(""arma::vec "", ""long "")","c("" data"", "" part"")"
"1220","RcppSimdJson","deserialize","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""const bool "", ""SEXP "", ""const bool "", ""SEXP "", ""const int "", ""const int "", ""const int "")","c("" json"", "" query"", "" empty_array"", "" empty_object"", "" single_null"", "" parse_error_ok"", "" on_parse_error"", "" query_error_ok"", "" on_query_error"", "" simplify_to"", "" type_policy"", "" int64_r_type"")"
"1221","RcppSimdJson","load","c(""const CharacterVector& "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""const bool "", ""SEXP "", ""const bool "", ""SEXP "", ""const int "", ""const int "", ""const int "")","c("" json"", "" query"", "" empty_array"", "" empty_object"", "" single_null"", "" parse_error_ok"", "" on_parse_error"", "" query_error_ok"", "" on_query_error"", "" simplify_to"", "" type_policy"", "" int64_r_type"")"
"1222","RcppSimdJson","dispatch_is_valid_json","SEXP "," json"
"1223","RcppSimdJson","dispatch_is_valid_utf8","SEXP "," x"
"1224","RcppSimdJson","dispatch_fminify","SEXP "," json"
"1225","RcppSimdJson","is_valid_json_arg","SEXP "," json"
"1226","RcppSimdJson","is_valid_query_arg","SEXP "," query"
"1227","RcppSimdJson","diagnose_input","const CharacterVector& "," x"
"1228","RcppSimdJson","validateJSON","const std::string "," filename"
"1229","RcppSpdlog","setLogLevel","const std::string& "," name"
"1230","RcppTOML","tomlparseImpl","c(""const std::string "", ""bool "", ""bool "", ""bool "", ""bool "")","c("" input"", "" verbose"", "" fromfile"", "" includize"", "" escape"")"
"1231","RcppUUID","uuid_generate_name","StringVector "," x"
"1232","RcppUUID","uuid_generate_nil","size_t "," n"
"1233","RcppUUID","uuid_generate_random","size_t "," n"
"1234","RcppUUID","uuid_validate","StringVector "," x"
"1235","Rdca","exponential","c(""List "", ""arma::vec "")","c("" lst"", "" time"")"
"1236","Rdca","harmonic","c(""List "", ""arma::vec "")","c("" lst"", "" time"")"
"1237","Rdca","hyperbolic","c(""List "", ""arma::vec "")","c("" lst"", "" time"")"
"1238","Rdca","modified_hyperbolic","c(""List "", ""arma::vec "")","c("" lst"", "" time"")"
"1239","Rdca","decline_predict_cpp","c(""List "", ""List "")","c("" decline_lst"", "" time_lst"")"
"1240","Rdtq","rdtq","c(""double "", ""double "", ""int "", ""NumericVector "", ""double "", ""SEXP "", ""SEXP "", ""double "")","c("" h"", "" k"", "" bigm"", "" init"", "" T"", "" drift"", "" diffusion"", "" thresh"")"
"1241","Rdtq","rdtqgrid","c(""double "", ""double "", ""double "", ""unsigned int "", ""NumericVector "", ""double "", ""SEXP "", ""SEXP "", ""double "")","c("" h"", "" a"", "" b"", "" veclen"", "" init"", "" T"", "" drift"", "" diffusion"", "" thresh"")"
"1242","RecAssoRules","transactiontoBitmax","c(""std::vector<std::string> "", ""char "")","c("" transac"", "" deli"")"
"1243","RecAssoRules","prefrecset","c(""std::vector<std::vector<short>> "", ""std::vector<std::string> "", ""float "")","c("" Bitmax"", "" varnames"", "" relativeSup"")"
"1244","RecAssoRules","prefrecrules","c(""std::vector<std::vector<short>> "", ""std::vector<std::string> "", ""float "", ""float "")","c("" Bitmax"", "" varnames"", "" relativeSup"", "" Minconf"")"
"1245","ReorderCluster","OrderingJosephC","c(""int "", ""NumericMatrix "", ""List "", ""NumericMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""CharacterVector "", ""double "")","c("" ind"", "" hc"", "" node"", "" A"", "" r"", "" maxI"", "" maxJ"", "" nclass"", "" coef"")"
"1246","RiemBase","engine_pdist","c(""arma::cube "", ""std::string "")","c("" data"", "" name"")"
"1247","RiemBase","engine_pdist_openmp","c(""arma::cube "", ""std::string "", ""int "")","c("" data"", "" name"", "" nCores"")"
"1248","RiemBase","engine_pdist2","c(""arma::cube "", ""arma::cube "", ""std::string "")","c("" data1"", "" data2"", "" name"")"
"1249","RiemBase","engine_pdist2_openmp","c(""arma::cube "", ""arma::cube "", ""std::string "", ""int "")","c("" data1"", "" data2"", "" name"", "" nCores"")"
"1250","RiemBase","engine_median","c(""arma::cube "", ""std::string "", ""int "", ""double "", ""arma::mat "")","c("" data"", "" name"", "" maxiter"", "" eps"", "" init"")"
"1251","RiemBase","engine_median_openmp","c(""arma::cube "", ""std::string "", ""int "", ""double "", ""int "", ""arma::mat "")","c("" data"", "" name"", "" maxiter"", "" eps"", "" nCores"", "" init"")"
"1252","RiemBase","engine_mean","c(""arma::cube "", ""std::string "", ""int "", ""double "")","c("" data"", "" name"", "" maxiter"", "" eps"")"
"1253","RiemBase","engine_mean_openmp","c(""arma::cube "", ""std::string "", ""int "", ""double "", ""int "")","c("" data"", "" name"", "" maxiter"", "" eps"", "" nCores"")"
"1254","RiemBase","engine_curvedist","c(""arma::cube "", ""arma::cube "", ""arma::vec "", ""std::string "", ""double "")","c("" data1"", "" data2"", "" vect"", "" name"", "" p"")"
"1255","Rlabkey","listToMatrix","c(""List "", ""List "")","c("" data"", "" names"")"
"1256","Rlinsolve","single_bicg","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::mat& "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1257","Rlinsolve","single_bicg_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::sp_mat "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1258","Rlinsolve","single_bicgstab","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::mat& "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1259","Rlinsolve","single_bicgstab_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::sp_mat "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1260","Rlinsolve","single_cg","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::mat& "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1261","Rlinsolve","single_cg_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::sp_mat "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1262","Rlinsolve","single_cgs","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::mat& "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1263","Rlinsolve","single_cgs_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::sp_mat "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1264","Rlinsolve","single_cheby","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""arma::mat& "", ""const double "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"", "" eigmax"", "" eigmin"")"
"1265","Rlinsolve","single_cheby_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""arma::sp_mat "", ""const double "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"", "" eigmax"", "" eigmin"")"
"1266","Rlinsolve","single_gmres","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""arma::mat& "", ""const int "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"", "" restrt"")"
"1267","Rlinsolve","single_gmres_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""arma::sp_mat "", ""const int "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"", "" restrt"")"
"1268","Rlinsolve","single_qmr","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::mat& "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"")"
"1269","Rlinsolve","single_qmr_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const arma::sp_mat "", ""const arma::sp_mat "", ""const arma::sp_mat "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" M"", "" M1"", "" M2"")"
"1270","Rlinsolve","single_gs","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const int "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" dflagval"")"
"1271","Rlinsolve","single_gs_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const int "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" dflagval"")"
"1272","Rlinsolve","single_jacobi","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" weight"")"
"1273","Rlinsolve","single_jacobi_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" weight"")"
"1274","Rlinsolve","single_sor","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" w"")"
"1275","Rlinsolve","single_sor_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" w"")"
"1276","Rlinsolve","single_ssor","c(""const arma::mat& "", ""const arma::colvec& "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" w"")"
"1277","Rlinsolve","single_ssor_sparse","c(""const arma::sp_mat "", ""const arma::sp_mat "", ""arma::colvec& "", ""const double "", ""const int "", ""const double "")","c("" A"", "" b"", "" xinit"", "" reltol"", "" maxiter"", "" w"")"
"1278","RmecabKo","simple_ngrams","c(""const ListOf<const CharacterVector> "", ""const int "", ""CharacterVector "", ""const String "")","c("" tokenized_list"", "" n"", "" stopwords"", "" ngram_delim"")"
"1279","RmecabKo","nounsRcpp","c(""const CharacterVector& "", ""const CharacterVector& "")","c("" phrase"", "" dic"")"
"1280","RmecabKo","wordsRcpp","c(""const CharacterVector& "", ""const CharacterVector& "")","c("" phrase"", "" dic"")"
"1281","Rnmr1D","SDL","c(""SEXP "", ""double "")","c("" x"", "" Sigma"")"
"1282","Rnmr1D","C_write_pack","c(""SEXP "", ""double "", ""double "", ""SEXP "")","c("" x"", "" pmin"", "" pmax"", "" ff"")"
"1283","Rnmr1D","C_read_pack","SEXP "," ff"
"1284","Rnmr1D","C_GlobSeg","c(""SEXP "", ""int "", ""double "")","c("" v"", "" dN"", "" sig"")"
"1285","Rnmr1D","lowpass1","c(""SEXP "", ""double "")","c("" x"", "" alpha"")"
"1286","Rnmr1D","WinMoy","c(""SEXP "", ""int "", ""int "")","c("" v"", "" n1"", "" n2"")"
"1287","Rnmr1D","Smooth","c(""SEXP "", ""int "")","c("" v"", "" n"")"
"1288","Rnmr1D","Ajust_LB","c(""SEXP "", ""SEXP "", ""int "", ""int "")","c("" s"", "" b"", "" n1"", "" n2"")"
"1289","Rnmr1D","C_Estime_LB","c(""SEXP "", ""int "", ""int "", ""double "", ""double "", ""double "")","c("" s"", "" istart"", "" iend"", "" WS"", "" NEIGH"", "" sig"")"
"1290","Rnmr1D","C_Estime_LB2","c(""SEXP "", ""int "", ""int "", ""double "", ""double "", ""double "")","c("" s"", "" istart"", "" iend"", "" WS"", "" NEIGH"", "" sig"")"
"1291","Rnmr1D","C_noise_estimate","c(""SEXP "", ""int "", ""int "", ""int "")","c("" x"", "" n1"", "" n2"", "" flg"")"
"1292","Rnmr1D","C_spec_ref_interval","c(""SEXP "", ""int "", ""int "", ""IntegerVector "")","c("" x"", "" istart"", "" iend"", "" v"")"
"1293","Rnmr1D","C_spec_ref","c(""SEXP "", ""IntegerVector "")","c("" x"", "" v"")"
"1294","Rnmr1D","C_MedianSpec","SEXP "," x"
"1295","Rnmr1D","C_Derive1","SEXP "," v"
"1296","Rnmr1D","C_Derive","SEXP "," x"
"1297","Rnmr1D","C_Integre","c(""SEXP "", ""int "", ""int "")","c("" x"", "" istart"", "" iend"")"
"1298","Rnmr1D","C_segment_shifts","c(""SEXP "", ""int "", ""int "", ""int "", ""int "", ""IntegerVector "")","c("" x"", "" idx_vref"", "" decal_max"", "" istart"", "" iend"", "" v"")"
"1299","Rnmr1D","C_align_segment","c(""SEXP "", ""SEXP "", ""int "", ""int "", ""IntegerVector "")","c("" x"", "" s"", "" istart"", "" iend"", "" v"")"
"1300","Rnmr1D","C_noise_estimation","c(""SEXP "", ""int "", ""int "")","c("" x"", "" n1"", "" n2"")"
"1301","Rnmr1D","C_aibin_buckets","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""int "")","c("" x"", "" b"", "" v"", "" l"", "" n1"", "" n2"")"
"1302","Rnmr1D","C_spectra_integrate","c(""SEXP "", ""int "", ""int "")","c("" x"", "" istart"", "" iend"")"
"1303","Rnmr1D","C_buckets_integrate","c(""SEXP "", ""SEXP "", ""int "")","c("" x"", "" b"", "" mode"")"
"1304","Rnmr1D","C_all_buckets_integrate","c(""SEXP "", ""SEXP "", ""int "")","c("" x"", "" b"", "" mode"")"
"1305","Rnmr1D","C_maxval_buckets","c(""SEXP "", ""SEXP "")","c("" x"", "" b"")"
"1306","Rnmr1D","C_ppmIntMax_buckets","c(""SEXP "", ""SEXP "")","c("" x"", "" b"")"
"1307","Rnmr1D","C_buckets_CSN_normalize","SEXP "," b"
"1308","Rnmr1D","C_estime_sd","c(""SEXP "", ""int "")","c("" x"", "" cut"")"
"1309","Rnmr1D","ajustBL","c(""SEXP "", ""int "")","c("" x"", "" flg"")"
"1310","Rnmr1D","C_corr_spec_re","SEXP "," l"
"1311","Rnmr1D","Fmin","c(""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""double "", ""int "")","c("" par"", "" re"", "" im"", "" blphc"", "" B"", "" flg"")"
"1312","Rnmr1D","Fentropy","c(""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""double "", ""double "")","c("" par"", "" re"", "" im"", "" blphc"", "" B"", "" gamma"")"
"1313","Rnmr1D","C_SDL_convolution","c(""SEXP "", ""SEXP "", ""double "")","c("" x"", "" y"", "" sigma"")"
"1314","RobKF","Robust_filter","c(""const std::list<std::list<Eigen::MatrixXd> >& "", ""const std::list<Eigen::MatrixXd>& "", ""const std::list<Eigen::MatrixXd>& "", ""const std::list<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double& "", ""const int& "", ""const int& "", ""const std::list<std::vector<int> >& "", ""const std::vector<int>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const int& "", ""const std::vector <double>& "", 
""const std::vector <double>& "", ""int "", ""const std::list<Eigen::MatrixXd>& "")","c("" Y_expanded"", "" C_list"", "" Sigma_Add_list"", "" Sigma_Inn_Contribution"", "" A"", "" Sigma_Inn"", "" Sigma_Add"", "" s"", "" Num_Descendents"", "" Num_Particles"", "" to_sample"", "" Number_of_resamples"", "" sigma_tilde"", "" sigma_hat"", "" mu_0"", "" Sigma_0"", "" horizon"", "" prob_inn"", "" prob_add"", "" Particle_Number"", "" Y_Full_list"")"
"1315","RobKF","Sigma_Limit","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "")","c("" Sigma0"", "" C"", "" A"", "" Sigma_Inn"", "" Sigma_Add"", "" epsilon"")"
"1316","RobKF","aorkf_huber_list","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const std::list<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double& "")","c("" mu_init"", "" Sigma_init"", "" ys"", "" A"", "" b"", "" C"", "" d"", "" R"", "" Q"", "" h"")"
"1317","RobKF","aorkf_t_list","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const std::list<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double& "", ""const double& "")","c("" mu_init"", "" Sigma_init"", "" ys"", "" A"", "" b"", "" C"", "" d"", "" R"", "" Q"", "" s"", "" epsilon"")"
"1318","RobKF","iorkf_huber_list","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const std::list<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double& "")","c("" mu_init"", "" Sigma_init"", "" ys"", "" A"", "" b"", "" C"", "" d"", "" R"", "" Q"", "" h"")"
"1319","RobKF","iorkf_huber_matrix","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double& "")","c("" mu_old"", "" Sigma_old"", "" y"", "" A"", "" b"", "" C"", "" d"", "" R"", "" Q"", "" h"")"
"1320","RobKF","kf_list","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const std::list<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" mu_init"", "" Sigma_init"", "" ys"", "" A"", "" b"", "" C"", "" d"", "" R"", "" Q"")"
"1321","RobustGaSP","matern_5_2_funct","c(""const MapMat& "", ""double "")","c("" d"", "" beta_i"")"
"1322","RobustGaSP","matern_3_2_funct","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""double "")","c("" d"", "" beta_i"")"
"1323","RobustGaSP","pow_exp_funct","c(""const MapMat& "", ""double "", ""double "")","c("" d"", "" beta_i"", "" alpha_i"")"
"1324","RobustGaSP","periodic_gauss_funct","c(""const MapMat& "", ""double "")","c("" d"", "" beta_i"")"
"1325","RobustGaSP","periodic_exp_funct","c(""const MapMat& "", ""double "")","c("" d"", "" beta_i"")"
"1326","RobustGaSP","matern_5_2_deriv","c(""const MapMat& "", ""const Mat "", ""double "")","c("" R0_i"", "" R"", "" beta_i"")"
"1327","RobustGaSP","matern_3_2_deriv","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::MatrixXd "", ""double "")","c("" R0_i"", "" R"", "" beta_i"")"
"1328","RobustGaSP","pow_exp_deriv","c(""const MapMat& "", ""const Eigen::MatrixXd "", ""const double "", ""const double "")","c("" R0_i"", "" R"", "" beta_i"", "" alpha_i"")"
"1329","RobustGaSP","periodic_gauss_deriv","c(""const MapMat& "", ""const Eigen::MatrixXd& "", ""double "")","c("" R0_i"", "" R"", "" beta_i"")"
"1330","RobustGaSP","periodic_exp_deriv","c(""const MapMat& "", ""const Eigen::MatrixXd& "", ""double "")","c("" R0_i"", "" R"", "" beta_i"")"
"1331","RobustGaSP","separable_kernel","c(""List "", ""Eigen::VectorXd "", ""String "", ""Eigen::VectorXd "")","c("" R0"", "" beta"", "" kernel_type"", "" alpha"")"
"1332","RobustGaSP","separable_multi_kernel","c(""List "", ""Eigen::VectorXd "", ""Eigen::VectorXi "", ""Eigen::VectorXd "")","c("" R0"", "" beta"", "" kernel_type"", "" alpha"")"
"1333","RobustGaSP","separable_multi_kernel_pred_periodic","c(""const List "", ""const Eigen::VectorXd "", ""const Eigen::VectorXi "", ""const Eigen::VectorXd "", ""const Eigen::VectorXd "")","c("" R0"", "" beta"", "" kernel_type"", "" alpha"", "" perid_const"")"
"1334","RobustGaSP","euclidean_distance","c(""const MapMat& "", ""const MapMat& "")","c("" input1"", "" input2"")"
"1335","RobustGaSP","log_marginal_lik","c(""const Vec "", ""double "", ""const bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1336","RobustGaSP","log_profile_lik","c(""const Vec "", ""double "", ""const bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1337","RobustGaSP","log_approx_ref_prior","c(""const Vec "", ""double "", ""bool "", ""const Eigen::VectorXd "", ""const double "", ""const double "")","c("" param"", "" nugget"", "" nugget_est"", "" CL"", "" a"", "" b"")"
"1338","RobustGaSP","log_marginal_lik_deriv","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1339","RobustGaSP","log_profile_lik_deriv","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1340","RobustGaSP","log_approx_ref_prior_deriv","c(""const Vec "", ""double "", ""bool "", ""const Eigen::VectorXd "", ""const double "", ""const double "")","c("" param"", "" nugget"", "" nugget_est"", "" CL"", "" a"", "" b"")"
"1341","RobustGaSP","log_ref_marginal_post","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1342","RobustGaSP","construct_rgasp","c(""const Eigen::VectorXd "", ""const double "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" beta"", "" nu"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1343","RobustGaSP","pred_rgasp","c(""const Eigen::VectorXd "", ""const double "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::VectorXd>& "", ""double "", ""double "", ""double "", ""List "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "", ""const String "", ""const bool "")","c("" beta"", "" nu"", "" input"", "" X"", "" zero_mean"", "" output"", "" testing_input"", "" X_testing"", "" L"", "" LX"", "" theta_hat"", "" sigma2_hat"", "" q_025"", "" q_975"", "" r0"", "" kernel_type"", "" alpha"", "" method"", "" interval_data"")"
"1344","RobustGaSP","generate_predictive_mean_cov","c(""const Eigen::VectorXd "", ""const double "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::VectorXd>& "", ""double "", ""List "", ""List "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "", ""const String "", ""const bool "")","c("" beta"", "" nu"", "" input"", "" X"", "" zero_mean"", "" output"", "" testing_input"", "" X_testing"", "" L"", "" LX"", "" theta_hat"", "" sigma2_hat"", "" rr0"", "" r0"", "" kernel_type"", "" alpha"", "" method"", "" sample_data"")"
"1345","RobustGaSP","log_marginal_lik_ppgasp","c(""const Vec "", ""double "", ""const bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1346","RobustGaSP","log_profile_lik_ppgasp","c(""const Vec "", ""double "", ""const bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1347","RobustGaSP","log_ref_marginal_post_ppgasp","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1348","RobustGaSP","log_marginal_lik_deriv_ppgasp","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1349","RobustGaSP","log_profile_lik_deriv_ppgasp","c(""const Eigen::VectorXd "", ""double "", ""bool "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" param"", "" nugget"", "" nugget_est"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1350","RobustGaSP","construct_ppgasp","c(""const Eigen::VectorXd "", ""const double "", ""const List "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "")","c("" beta"", "" nu"", "" R0"", "" X"", "" zero_mean"", "" output"", "" kernel_type"", "" alpha"")"
"1351","RobustGaSP","pred_ppgasp","c(""const Eigen::VectorXd "", ""const double "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const String "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::MatrixXd>& "", ""Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""double "", ""double "", ""List "", ""Eigen::VectorXi "", ""const Eigen::VectorXd "", ""const String "", ""const bool ""
)","c("" beta"", "" nu"", "" input"", "" X"", "" zero_mean"", "" output"", "" testing_input"", "" X_testing"", "" L"", "" LX"", "" theta_hat"", "" sigma2_hat"", "" q_025"", "" q_975"", "" r0"", "" kernel_type"", "" alpha"", "" method"", "" interval_data"")"
"1352","RobustGaSP","test_const_column","const MapMat& "," d"
"1353","Ropj","read_opj","c(""const std::string& "", ""const char * "", ""bool "")","c("" file"", "" encoding"", "" tree"")"
"1354","RoughSets","compute_indiscernibility","c(""List "", ""CharacterVector "", ""CharacterVector "")","c("" input"", "" attr_val"", "" unique_attr_val"")"
"1355","RoughSets","compute_chaos","c(""List "", ""CharacterVector "", ""CharacterVector "")","c("" input"", "" dec_val"", "" unique_dec_val"")"
"1356","Rquefts","quefts","c(""List "", ""List "", ""List "")","c("" soil"", "" crop"", "" fertilizer"")"
"1357","RstoxData","readXmlCpp","c(""CharacterVector "", ""List "", ""Nullable<CharacterVector> "", ""Nullable<CharacterVector> "", ""bool "")","c("" inputFile"", "" xsdObjects"", "" xsdOverride"", "" xmlEncoding"", "" verbose"")"
"1358","RstoxData","readXmlCppStream","c(""CharacterVector "", ""List "", ""Nullable<std::string> "", ""Nullable<std::string> "", ""bool "")","c("" inputFile"", "" xsdObjects"", "" xsdOverride"", "" xmlEncoding"", "" verbose"")"
"1359","Rwofost","wofost","c(""List "", ""DataFrame "", ""List "", ""List "")","c("" crop"", "" weather"", "" soil"", "" control"")"
"1360","Ryacas","yacas_init_force_path","c(""std::string "", ""bool "")","c("" path"", "" ryacas_init"")"
"1361","Ryacas0","yacas_init_force","std::string "," path"
"1362","Ryacas","yac_core","std::string "," expr"
"1363","Ryacas0","yacas_evaluate","std::string "," expr"
"1364","SAGMM","mahalanobis_HD","c(""arma::rowvec "", ""arma::rowvec "", ""arma::mat "")","c("" y"", "" mu"", "" sigma"")"
"1365","SAGMM","norm_HD","c(""arma::rowvec "", ""arma::rowvec "", ""arma::mat "")","c("" y"", "" mu"", "" sigma"")"
"1366","optimization","main_loop","c(""double "", ""double "", ""double "", ""int "", ""int "", ""NumericVector "", ""NumericVector "", ""Function "", ""bool "", ""bool "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""Function "", ""double "", ""double "", ""double "", ""NumericVector "", ""bool "", ""double "", ""double "", ""int "", ""bool "")","c("" temp"", "" t_min"", "" r"", "" fun_length"", "" nlimit"", "" para_0"", "" para_i"", "" var_func"", "" vf_user"", "" trace"", "" rf"", "" lower"", "" upper"", "" fun"", "" loss_0"", "" k"", "" loss_opt"", "" para_opt"", "" dyn_rf"", "" maxgood"", "" ac_acc"", "" stopac"", "" maximization"")"
"1367","SAMM","loglikfuncmmmkmv","c(""const arma::mat& "", ""const arma::mat& "", ""const List& "", ""const List& "", ""const List& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" Y"", "" X"", "" Zlist"", "" Klist"", "" sigmahatlist"", "" B"", "" W"", "" R"")"
"1368","SAMM","SAMM","c(""const arma::mat& "", ""const arma::mat& "", ""const List& "", ""const List& "", ""double "", ""const arma::mat& "", ""const List& "", ""const List& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const std::string "", ""const double& "", ""const double& "", ""const int& "", ""bool "", ""bool "")","c("" Y"", "" X"", "" Zlist"", "" Klist"", "" lambda"", "" W"", "" R"", "" Siglist"", "" corfunc"", "" corfuncfixed"", "" sigfunc"", "" mmalg"", "" tolparconv"", "" tolparinv"", "" maxiter"", "" geterrors"", "" Hinv"")"
"1369","SAMM","ar1cov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1370","SAMM","ar1hetcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1371","SAMM","arma11cov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1372","SAMM","compsymmcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1373","SAMM","compsymmhetcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1374","SAMM","lincombcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1375","SAMM","unstrcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1376","SAMM","diagcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1377","SAMM","unstrKronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1378","SAMM","diagKronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1379","SAMM","ar1KronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1380","SAMM","ar1hetKronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1381","SAMM","arma11KronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1382","SAMM","compsymmKronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1383","SAMM","compsymmhetKronKcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1384","SAMM","UnstrKronUnstrcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1385","SAMM","rbfcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1386","SAMM","expcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1387","SAMM","rbfdistcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1388","SAMM","expdistcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1389","SAMM","relmatcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1390","SAMM","ConstMatcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1391","SAMM","KKronunstrcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1392","SAMM","KKrondiagcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1393","SAMM","KKronar1cov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1394","SAMM","KKronar1hetcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1395","SAMM","KKronarma11cov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1396","SAMM","KKroncompsymmcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1397","SAMM","KKroncompsymmhetcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1398","SAMM","sppowcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1399","SAMM","splincov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1400","SAMM","splinlogcov_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1401","SAMM","diagSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1402","SAMM","IdentSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1403","SAMM","UnstrKronIdentSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1404","SAMM","IdentKronUnstrSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1405","SAMM","FA1hetSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1406","SAMM","FA1homSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1407","SAMM","compsymmhomSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1408","SAMM","compsymmhetSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1409","SAMM","FAhetSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1410","SAMM","FAhomSig_cppforR","c(""const arma::vec& "", ""const arma::mat& "")","c("" params"", "" data"")"
"1411","SAR","make_similarity_matrix_sp","c(""int "", ""List "", ""IntegerVector "")","c("" n_items"", "" groups"", "" items"")"
"1412","SAR","rescale_to_jaccard","arma::sp_mat& "," mat"
"1413","SAR","rescale_to_lift","arma::sp_mat& "," mat"
"1414","SAR","user_predict_ranking","c(""arma::sp_mat& "", ""arma::sp_mat& "", ""const int "", ""const bool "", ""const bool "", ""const IntegerVector& "")","c("" aff"", "" sim"", "" n_recs"", "" include_seed_items"", "" backfill"", "" pop_items"")"
"1415","SBmedian","engine_main","c(""List "", ""double "", ""unsigned int "", ""double "", ""bool "", ""std::string "")","c("" subsetAtomsList"", "" sigma"", "" maxit"", "" tol"", "" showprog"", "" myfname"")"
"1416","SCORNET","kernelSmoothen","c(""arma::vec "", ""arma::vec "", ""double "")","c("" hC0"", "" C"", "" b"")"
"1417","SDMtune","scaleClamp","c(""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""LogicalVector "", ""LogicalVector "")","c("" x"", "" min"", "" max"", "" do_clamp"", "" scale"")"
"1418","SEERaBomb","fillPYM","c(""SEXP "", ""SEXP "")","c("" PYin"", "" PYM"")"
"1419","SELF","AddDelReverseLine","c(""IntegerMatrix "", ""int "", ""int "")","c("" G"", "" i"", "" j"")"
"1420","SFS","read","c(""SEXP "", ""double "", ""bool "", ""bool "")","c("" data"", "" zero_epsilon"", "" symmetric"", "" identical_val"")"
"1421","SFS","sfs","c(""SEXP "", ""double "", ""bool "", ""bool "", ""int "")","c("" matrix"", "" sfs_epsilon"", "" dissimilarity"", "" Robinsonian"", "" num_sweeps"")"
"1422","SILGGM","SILGGMCpp","c(""NumericMatrix "", ""Nullable<CharacterVector> "", ""Nullable<double> "", ""bool "", ""Nullable<NumericVector> "", ""Nullable<double> "", ""Nullable<NumericMatrix> "")","c("" x"", "" method"", "" lambda"", "" global"", "" alpha"", "" ndelta"", "" true_graph"")"
"1423","SITH","simulate_tumor","List "," input"
"1424","SLOPE","sparseSLOPE","c(""arma::sp_mat "", ""arma::mat "", ""const List "")","c("" x"", "" y"", "" control"")"
"1425","SLOPE","denseSLOPE","c(""arma::mat "", ""arma::mat "", ""const List "")","c("" x"", "" y"", "" control"")"
"1426","SLOPE","sorted_l1_prox","c(""const arma::mat& "", ""const arma::vec& "")","c("" x"", "" lambda"")"
"1427","SMITIDvisu","mstCompute","const NumericMatrix& "," mat"
"1428","SMMA","pga","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""NumericVector "", ""std::string "", ""double "", ""double "", ""arma::vec "", ""int "", ""int "", ""double "", ""arma::mat "", ""double "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""double "")","c("" Phi1"", "" Phi2"", "" Phi3"", "" resp"", "" penalty"", "" zeta"", "" c"", "" lambda"", "" nlambda"", "" makelamb"", "" lambdaminratio"", "" penaltyfactor"", "" reltol"", "" maxiter"", "" steps"", "" btmax"", "" mem"", "" tau"", "" nu"", "" alg"", "" ll"", "" Lmin"")"
"1429","SMUT","eigenMapMatMult","c(""const Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" A"", "" B"")"
"1430","STARTdesign","crejprob","c(""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" pe"", "" ps"", "" x1"", "" n1"", "" n2"", "" zalpha"")"
"1431","STARTdesign","rejprob","c(""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" pe"", "" ps"", "" r1"", "" n1"", "" n2"", "" zalpha"")"
"1432","SeqKat","cget_nucleotide_chunk_counts","c(""std::vector<std::string> "", ""std::string "", ""const unsigned int "", ""const unsigned int "", ""long "", ""long "")","c("" key"", "" chr"", "" up_stream"", "" down_stream"", "" start"", "" end"")"
"1433","SeqKat","cget_trinucleotide_counts","c(""std::vector<std::string> "", ""std::string "", ""const int "", ""long int "", ""long int "")","c("" key"", "" chr"", "" length"", "" start"", "" end"")"
"1434","SeqKat","cpp_get_context","c(""std::string "", ""NumericVector "", ""unsigned long "")","c("" chr"", "" pos"", "" pos_length"")"
"1435","SequenceSpikeSlab","HierarchicalPriorC","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""bool "", ""bool "")","c("" logphi"", "" logpsi"", "" logprior"", "" showProgress"", "" divideByBinom"")"
"1436","SequenceSpikeSlab","DiscreteSpikeSlabPriorC","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""bool "")","c("" logphi"", "" logpsi"", "" grid"", "" logGridPrior"", "" showProgress"")"
"1437","Seurat","RunModularityClusteringCpp","c(""Eigen::SparseMatrix<double> "", ""int "", ""double "", ""int "", ""int "", ""int "", ""int "", ""bool "", ""std::string "")","c("" SNN"", "" modularityFunction"", "" resolution"", "" algorithm"", "" nRandomStarts"", "" nIterations"", "" randomSeed"", "" printOutput"", "" edgefilename"")"
"1438","Seurat","RunUMISampling","c(""Eigen::SparseMatrix<double> "", ""int "", ""bool "", ""bool "")","c("" data"", "" sample_val"", "" upsample"", "" display_progress"")"
"1439","Seurat","RunUMISamplingPerCell","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""bool "", ""bool "")","c("" data"", "" sample_val"", "" upsample"", "" display_progress"")"
"1440","Seurat","RowMergeMatrices","c(""Eigen::SparseMatrix<double, Eigen::RowMajor> "", ""Eigen::SparseMatrix<double, Eigen::RowMajor> "", ""std::vector< std::string > "", ""std::vector< std::string > "", ""std::vector< std::string > "")","c("" mat1"", "" mat2"", "" mat1_rownames"", "" mat2_rownames"", "" all_rownames"")"
"1441","Seurat","RowMergeMatricesList","c(""List "", ""List "", ""std::vector< std::string > "")","c("" mat_list"", "" mat_rownames"", "" all_rownames"")"
"1442","Seurat","LogNorm","c(""Eigen::SparseMatrix<double> "", ""int "", ""bool "")","c("" data"", "" scale_factor"", "" display_progress"")"
"1443","Seurat","Standardize","c(""Eigen::Map<Eigen::MatrixXd> "", ""bool "")","c("" mat"", "" display_progress"")"
"1444","Seurat","FastSparseRowScale","c(""Eigen::SparseMatrix<double> "", ""bool "", ""bool "", ""double "", ""bool "")","c("" mat"", "" scale"", "" center"", "" scale_max"", "" display_progress"")"
"1445","Seurat","FastSparseRowScaleWithKnownStats","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""NumericVector "", ""bool "", ""bool "", ""double "", ""bool "")","c("" mat"", "" mu"", "" sigma"", "" scale"", "" center"", "" scale_max"", "" display_progress"")"
"1446","Seurat","FastCov","c(""Eigen::MatrixXd "", ""bool "")","c("" mat"", "" center"")"
"1447","Seurat","FastCovMats","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""bool "")","c("" mat1"", "" mat2"", "" center"")"
"1448","Seurat","FastRBind","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" mat1"", "" mat2"")"
"1449","Seurat","FastExpMean","c(""Eigen::SparseMatrix<double> "", ""bool "")","c("" mat"", "" display_progress"")"
"1450","Seurat","SparseRowVar2","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""bool "")","c("" mat"", "" mu"", "" display_progress"")"
"1451","Seurat","SparseRowVarStd","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""NumericVector "", ""double "", ""bool "")","c("" mat"", "" mu"", "" sd"", "" vmax"", "" display_progress"")"
"1452","Seurat","FastLogVMR","c(""Eigen::SparseMatrix<double> "", ""bool "")","c("" mat"", "" display_progress"")"
"1453","Seurat","RowVar","Eigen::Map<Eigen::MatrixXd> "," x"
"1454","Seurat","SparseRowVar","c(""Eigen::SparseMatrix<double> "", ""bool "")","c("" mat"", "" display_progress"")"
"1455","Seurat","ReplaceColsC","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""Eigen::SparseMatrix<double> "")","c("" mat"", "" col_idx"", "" replacement"")"
"1456","Seurat","GraphToNeighborHelper","Eigen::SparseMatrix<double> "," mat"
"1457","Seurat","FindWeightsC","c(""Eigen::SparseMatrix<double> "", ""NumericVector "", ""Eigen::MatrixXd "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""double "", ""double "", ""bool "")","c("" integration_matrix"", "" cells2"", "" distances"", "" anchor_cells2"", "" integration_matrix_rownames"", "" cell_index"", "" anchor_score"", "" min_dist"", "" sd"", "" display_progress"")"
"1458","Seurat","IntegrateDataC","c(""Eigen::SparseMatrix<double> "", ""Eigen::SparseMatrix<double> "", ""Eigen::SparseMatrix<double> "")","c("" integration_matrix"", "" weights"", "" expression_cells2"")"
"1459","Seurat","ComputeSNN","c(""Eigen::MatrixXd "", ""double "")","c("" nn_ranked"", "" prune"")"
"1460","Seurat","WriteEdgeFile","c(""Eigen::SparseMatrix<double> "", ""String "", ""bool "")","c("" snn"", "" filename"", "" display_progress"")"
"1461","Seurat","DirectSNNToFile","c(""Eigen::MatrixXd "", ""double "", ""bool "", ""String "")","c("" nn_ranked"", "" prune"", "" display_progress"", "" filename"")"
"1462","Signac","filterCells","c(""std::string "", ""std::string "", ""std::vector<std::string> "", ""int "", ""bool "")","c("" fragments"", "" outfile"", "" keep_cells"", "" buffer_length"", "" verbose"")"
"1463","Signac","groupCommand","c(""std::string "", ""Nullable<StringVector> "", ""std::size_t "", ""bool "")","c("" fragments"", "" some_whitelist_cells"", "" max_lines"", "" verbose"")"
"1464","Signac","splitFragments","c(""std::string "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::string "", ""std::string "", ""int "", ""bool "", ""bool "")","c("" fragments"", "" cells"", "" idents"", "" unique_idents"", "" outdir"", "" suffix"", "" buffer_length"", "" append"", "" verbose"")"
"1465","Signac","validateCells","c(""std::string "", ""std::vector<std::string> "", ""std::size_t "", ""std::size_t "", ""bool "")","c("" fragments"", "" cells"", "" find_n"", "" max_lines"", "" verbose"")"
"1466","SimBIID","bootstrapPartFilterState","c(""int "", ""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""SEXP "")","c("" N"", "" pars"", "" dataset"", "" iniStates"", "" func_"")"
"1467","SimBIID","PMCMC_cpp","c(""NumericMatrix "", ""NumericMatrix "", ""CharacterVector "", ""NumericVector "", ""NumericMatrix "", ""int "", ""int "", ""double "", ""int "", ""int "", ""int "", ""int "", ""IntegerVector "", ""SEXP "")","c("" dataset"", "" priors"", "" parnames"", "" iniPars"", "" propVar_R"", "" niter"", "" npart"", "" scale"", "" nprintsum"", "" nupdate"", "" fixpars"", "" adapt"", "" iniStates"", "" func_"")"
"1468","SimSurvNMarker","eval_marker","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" B"", "" m"", "" Sout"")"
"1469","SimSurvNMarker","get_commutation","c(""unsigned const "", ""unsigned const "")","c("" n"", "" m"")"
"1470","SimSurvNMarker","get_gl_rule","unsigned const "," n"
"1471","SimSurvNMarker","glq","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lb"", "" ub"", "" nodes"", "" weights"", "" f"", "" rho"")"
"1472","SimSurvNMarker","get_ns_ptr","c(""const arma::vec& "", ""arma::vec const& "", ""bool const "")","c("" knots"", "" boundary_knots"", "" intercept"")"
"1473","SimSurvNMarker","ns_cpp","c(""arma::vec const& "", ""SEXP "")","c("" x"", "" ns_ptr"")"
"1474","SmartSVA","prodCpp","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" B"", "" C"")"
"1475","SmartSVA","crossprodCpp","const Eigen::Map<Eigen::MatrixXd>& "," A"
"1476","SmartSVA","tcrossprodCpp","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "")","c("" B"", "" C"")"
"1477","SobolSequence","rcppSobolPoints","c(""std::string "", ""int "", ""int "", ""int "", ""NumericVector "")","c("" filename"", "" dimR"", "" dimF2"", "" count"", "" shiftVector"")"
"1478","SpaCCr","SpaCC","c(""arma::mat "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const bool& "", ""const double& "", ""const int& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" X"", "" w"", "" gamma"", "" nu"", "" verbose"", "" tol"", "" maxiter"", "" Uinit"", "" Vinit"", "" Laminit"")"
"1479","SpaTimeClus","SpaTimeClusCpp","c(""S4 "", ""List "", ""NumericMatrix "")","c("" input"", "" inputparam"", "" matT"")"
"1480","SparseFactorAnalysis","hmc4sfa","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""arma::mat "", ""arma::imat "", ""arma::vec "", ""double "", ""arma::vec "")","c("" num_HMC"", "" q"", "" p"", "" params"", "" del"", "" step_size"", "" Theta_last_0"", "" votes_mat"", "" cutoff_seq"", "" current_U"", "" q0"")"
"1481","SparseLPM","cpp_SLPM_ELBO","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::cube "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "")","c("" adj"", "" var_alpha_u"", "" var_alpha_v"", "" var_beta_u"", "" var_beta_v"", "" var_lambda"", "" var_delta"", "" var_a"", "" var_b"", "" delta"", "" a_gamma"", "" b_gamma"", "" verbose"")"
"1482","SparseLPM","cpp_SLPM_Optimisation","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::cube "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""unsigned int "", ""bool "", ""double "", ""double "", ""bool "")","c("" adj"", "" var_alpha_u"", "" var_alpha_v"", "" var_beta_u"", "" var_beta_v"", "" var_lambda"", "" var_delta"", "" var_a"", "" var_b"", "" delta"", "" a_gamma"", "" b_gamma"", "" tol"", "" n_iter_max"", "" natural_gradient"", "" learning_rate_factor_up"", "" learning_rate_factor_down"", "" verbose"")"
"1483","SpatialBSS","idw","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const int& "")","c("" coords_pred"", "" coords_vals"", "" vals"", "" p"")"
"1484","SpatialBSS","k_mat_ball","c(""const arma::mat& "", ""const double& "")","c("" coords"", "" h"")"
"1485","SpatialBSS","k_mat_ring","c(""const arma::mat& "", ""const double& "", ""const double& "")","c("" coords"", "" h1"", "" h2"")"
"1486","SpatialBSS","k_mat_exp","c(""const arma::mat& "", ""const double& "")","c("" coords"", "" h"")"
"1487","SpatialBSS","sp_lcov_sparse","c(""const arma::mat& "", ""const arma::mat& "")","c("" x"", "" k"")"
"1488","SpatialBSS","sp_ldiff_sparse","c(""const arma::mat& "", ""const arma::mat& "")","c("" x"", "" k"")"
"1489","SpatialKDE","kde_estimate","c(""NumericMatrix "", ""NumericMatrix "", ""double "", ""String "", ""bool "", ""double "", ""NumericVector "")","c("" fishnet"", "" points"", "" bw"", "" kernel"", "" scaled"", "" decay"", "" weights"")"
"1490","SplitReg","Ensemble_EN_Objective","c(""const arma::mat& "", ""const arma::mat& "", ""const double& "", ""const double& "", ""const double& "")","c("" current_res"", "" beta"", "" lambda_sparsity"", "" lambda_diversity"", "" alpha"")"
"1491","SplitReg","Prediction_Grid","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::cube& "")","c("" x_test"", "" x_train"", "" y_train"", "" grid_betas"")"
"1492","SplitReg","Ensemble_EN_Grid","c(""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const arma::uword& "", ""const double& "", ""unsigned long& "")","c("" x"", "" y"", "" which_lambda"", "" lambdas_grid"", "" lambda_fixed"", "" alpha"", "" num_groups"", "" tolerance"", "" max_iter"")"
"1493","SplitReg","CV_Ensemble_EN","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::uword& "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const arma::uword& "", ""const arma::uword& "", ""const double& "", ""unsigned long& "", ""const arma::uword& "")","c("" x"", "" y"", "" which_lambda"", "" lambdas_grid"", "" lambda_fixed"", "" alpha"", "" num_groups"", "" num_folds"", "" tolerance"", "" max_iter"", "" num_threads"")"
"1494","SplitReg","Main_Ensemble_EN","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::uword "", ""const arma::uword "", ""const double& "", ""const arma::uword& "", ""const double& "", ""unsigned long& "", ""const arma::uword& "", ""const arma::uword& "")","c("" x_perm"", "" y_perm"", "" num_lambdas_sparsity"", "" num_lambdas_diversity"", "" alpha"", "" num_groups"", "" tolerance"", "" max_iter"", "" num_folds"", "" num_threads"")"
"1495","SubTite","LikeStoppedCluster","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "", ""arma::vec "")","c("" Y"", "" I"", "" Dose"", "" Group"", "" mu"", "" slope"", "" a"", "" b"", "" T1"", "" nPats"", "" GroupMem1"", "" Stopped"")"
"1496","SubTite","LikeStoppedSeparate","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "")","c("" Y"", "" I"", "" Dose"", "" Group"", "" a"", "" b"", "" T1"", "" nPats"", "" Stopped"")"
"1497","SubTite","GetRandGroup","c(""arma::vec "", ""arma::vec "")","c("" INC"", "" Stopped"")"
"1498","SubTite","MCMC","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""arma::vec "", ""int "", ""int "", ""double "")","c("" Y"", "" I"", "" Doses"", "" Groups"", "" T1"", "" Target"", "" Upper"", "" Dose"", "" meanmu"", "" meanslope"", "" MeanInts"", "" MeanSlopes"", "" varint"", "" varbeta"", "" phetero"", "" Stopped"", "" NumPat"", "" SubRout"", "" B"")"
"1499","SubTite","MCMCSIM","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""arma::vec "", ""int "", ""int "", ""double "")","c("" Y"", "" I"", "" Doses"", "" Groups"", "" T1"", "" Target"", "" Upper"", "" Dose"", "" meanmu"", "" meanslope"", "" MeanInts"", "" MeanSlopes"", "" varint"", "" varbeta"", "" phetero"", "" Stopped"", "" NumPat"", "" SubRout"", "" B"")"
"1500","SubTite","SimTrial1","c(""int "", ""int "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "", ""int "")","c("" nSims"", "" Nmax"", "" T1"", "" Target"", "" Dose"", "" DoseStart"", "" Upper"", "" Accrue"", "" groupprob"", "" Family"", "" Param1"", "" Param2"", "" meanmu"", "" meanslope"", "" MeanInts"", "" MeanSlopes"", "" varint"", "" varbeta"", "" phetero"", "" NSep"", "" NBorrow"", "" cohort"", "" FULLY"")"
"1501","SuperRanker","overlap","IntegerMatrix "," rankMat"
"1502","SuperRanker","sracpp","c(""IntegerMatrix "", ""int "", ""int "", ""IntegerVector "", ""int "", ""NumericVector "")","c("" rankMat"", "" maxlength"", "" B"", "" cens"", "" type"", "" epsilon"")"
"1503","SuperRanker","sracppfull","c(""IntegerMatrix "", ""int "", ""NumericVector "")","c("" rankMat"", "" type"", "" epsilon"")"
"1504","SurvBoost","boosting_stratify_core","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int& "", ""arma::mat& "", ""int& "", ""double& "", ""int "")","c("" sample"", "" delta"", "" facility"", "" num_facility"", "" X"", "" M_stop"", "" rate"", "" adj_variables"")"
"1505","SurvBoost","boosting_stratify_path","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int& "", ""arma::mat& "", ""int& "", ""double& "", ""int "")","c("" sample"", "" delta"", "" facility"", "" num_facility"", "" X"", "" M_stop"", "" rate"", "" adj_variables"")"
"1506","SurvBoost","boosting_stratify_numselected1","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int& "", ""arma::mat& "", ""double& "", ""double& "", ""int "")","c("" sample"", "" delta"", "" facility"", "" num_facility"", "" X"", "" num_selected"", "" rate"", "" adj_variables"")"
"1507","SurvBoost","boosting_stratify_likelihood1","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int& "", ""arma::mat& "", ""double& "", ""double "", ""int "")","c("" sample"", "" delta"", "" facility"", "" num_facility"", "" X"", "" rate"", "" delta_likelihood"", "" adj_variables"")"
"1508","SurvBoost","boosting_stratify_BIC1","c(""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int& "", ""arma::mat& "", ""double& "", ""bool& "", ""int "", ""double "", ""bool "")","c("" sample"", "" delta"", "" facility"", "" num_facility"", "" X"", "" rate"", "" early_stop"", "" adj_variables"", "" gamma"", "" aic"")"
"1509","SurvBoost","cross_validation_func_update","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""int "", ""int "", ""int "")","c("" K"", "" time"", "" delta"", "" z"", "" facility"", "" rate"", "" track"", "" M_stop"", "" adj_variables"")"
"1510","T4transport","compute_pdist2","c(""arma::mat& "", ""arma::mat& "")","c("" X"", "" Y"")"
"1511","T4transport","cpp_barysinkhorn14","c(""arma::field<arma::mat>& "", ""arma::field<arma::vec>& "", ""arma::vec "", ""double "", ""double "", ""int "", ""double "", ""bool "", ""arma::vec "")","c("" listdXY"", "" marginals"", "" weights"", "" p"", "" lambda"", "" maxiter"", "" abstol"", "" printer"", "" initvec"")"
"1512","T4transport","cpp_sinkhorn13","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""int "", ""double "")","c("" a"", "" b"", "" dab"", "" lambda"", "" p"", "" maxiter"", "" abstol"")"
"1513","T4transport","image_barysinkhorn14","c(""arma::mat& "", ""arma::field<arma::vec>& "", ""arma::vec "", ""double "", ""double "", ""int "", ""double "", ""bool "", ""arma::vec "", ""int "")","c("" dxy"", "" marginals"", "" weights"", "" p"", "" lambda"", "" maxiter"", "" abstol"", "" printer"", "" initvec"", "" nthread"")"
"1514","TBRDist","uspr_dist","c(""const StringVector "", ""const StringVector "", ""const LogicalVector "", ""const LogicalVector "", ""const LogicalVector "")","c("" tree1"", "" tree2"", "" useTbrApproxEstimate"", "" useTbrEstimate"", "" useReplugEstimate"")"
"1515","TBRDist","tbr_dist","c(""const StringVector "", ""const StringVector "", ""const LogicalVector "", ""const LogicalVector "", ""const LogicalVector "", ""const LogicalVector "", ""const LogicalVector "", ""const LogicalVector "")","c("" tree1"", "" tree2"", "" printMafs"", "" countMafs"", "" optimize"", "" protectB"", "" exact"", "" approximate"")"
"1516","TBRDist","replug_dist","c(""StringVector "", ""StringVector "")","c("" tree1"", "" tree2"")"
"1517","ripserr","ripser_cpp","c(""const NumericMatrix& "", ""int "", ""float "", ""int "", ""int "")","c("" input_points"", "" dim"", "" thresh"", "" p"", "" format"")"
"1518","TESS","equations_pSurvival_rateshift_CPP","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""NumericVector "", ""double "", ""double "", ""bool "")","c("" lambda"", "" mu"", "" rateChangeTimes"", "" massExtinctionSurvivalProbabilities"", "" samplingProbability"", "" t_low"", "" t_high"", "" T"", "" log"")"
"1519","TESS","equations_p1_rateshift_CPP","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""NumericVector "", ""double "", ""bool "")","c("" lambda"", "" mu"", "" rateChangeTimes"", "" massExtinctionSurvivalProbabilities"", "" samplingProbability"", "" t"", "" T"", "" log"")"
"1520","TSDFGS","r_score","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" x"", "" x0"")"
"1521","TSDFGS","pev_score","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" X"", "" X0"")"
"1522","TSDFGS","cd_score","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" x"", "" x0"")"
"1523","TestCor","vectorize","const NumericMatrix& "," mat"
"1524","TestCor","unvectorize","const NumericVector& "," vect"
"1525","TestCor","covDcor","const NumericMatrix& "," r"
"1526","TestCor","covD2nd","const NumericMatrix& "," r"
"1527","TexExamRandomizer","CompileDocument","c(""const StringVector& "", ""const StringVector& "", ""const StringVector& "")","c("" x"", "" layersNames"", "" layersCmd"")"
"1528","TreeBUGS","betampt","c(""int "", ""int "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" M"", "" L"", "" nthin"", "" H"", "" a"", "" b"", "" c"", "" map"", "" shape"", "" rate"")"
"1529","TreeBUGS","simplempt","c(""int "", ""int "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" M"", "" L"", "" nthin"", "" H"", "" a"", "" b"", "" c"", "" map"", "" alpha"", "" beta"")"
"1530","TreeBUGS","loglikMPT","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "")","c("" theta"", "" h"", "" a"", "" b"", "" c"", "" map"")"
"1531","TreeLS","thinCloud","c(""NumericMatrix& "", ""double "")","c("" las"", "" voxel"")"
"1532","TreeLS","RCropCloud","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""bool "", ""bool "")","c("" las"", "" xCenter"", "" yCenter"", "" len"", "" circle"", "" negative"")"
"1533","TreeLS","getHoughCircle","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" pixel"", "" rad_max"", "" min_den"", "" min_votes"")"
"1534","TreeLS","singleStack","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" pixel"", "" rad_max"", "" min_den"", "" min_votes"")"
"1535","TreeLS","stackMap","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" hmin"", "" hmax"", "" hstep"", "" pixel"", "" rad_max"", "" min_den"", "" min_votes"")"
"1536","TreeLS","houghStemPoints","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" h1"", "" h2"", "" hstep"", "" radius"", "" pixel"", "" density"", "" votes"")"
"1537","TreeLS","houghStemPlot","c(""NumericMatrix& "", ""NumericVector& "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" ptIds"", "" h1"", "" h2"", "" hstep"", "" radius"", "" pixel"", "" density"", "" votes"")"
"1538","TreeLS","getCircleRansac","c(""NumericMatrix& "", ""unsigned int "", ""double "", ""double "")","c("" las"", "" nSamples"", "" pConfidence"", "" pInliers"")"
"1539","TreeLS","ransacStemCircle","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "")","c("" las"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" tolerance"")"
"1540","TreeLS","irlsStemCylinder","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "")","c("" las"", "" segs"", "" rads"", "" nPoints"", "" tolerance"")"
"1541","TreeLS","irlsStemCircle","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "")","c("" las"", "" segs"", "" rads"", "" nSamples"", "" tolerance"")"
"1542","TreeLS","ransacStemCylinder","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "")","c("" las"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" tolerance"")"
"1543","TreeLS","ransacPlotCircles","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "")","c("" las"", "" tId"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" tolerance"")"
"1544","TreeLS","ransacPlotCylinders","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "")","c("" las"", "" tId"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" tolerance"")"
"1545","TreeLS","irlsPlotCylinders","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "")","c("" las"", "" tId"", "" segs"", "" rads"", "" nPoints"", "" tolerance"")"
"1546","TreeLS","irlsPlotCircles","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "")","c("" las"", "" tId"", "" segs"", "" rads"", "" nPoints"", "" tolerance"")"
"1547","TreeLS","pointMetricsCpp","c(""NumericMatrix& "", ""NumericMatrix& "", ""LogicalVector& "")","c("" las"", "" kIds"", "" whichMetrics"")"
"1548","TreeLS","voxelIndex","c(""NumericMatrix& "", ""double "")","c("" las"", "" d"")"
"1549","TreeLS","voxelMetrics","c(""NumericMatrix& "", ""List& "", ""LogicalVector& "")","c("" las"", "" voxelIds"", "" whichMetrics"")"
"1550","TreeLS","treeEigenHough","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""double "", ""double "", ""bool "", ""bool "")","c("" las"", "" ids"", "" split_by"", "" voxel"", "" rad"", "" is2d"", "" getSpace"")"
"1551","TreeLS","plotEigenHough","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""double "", ""double "", ""bool "", ""bool "")","c("" las"", "" ids"", "" split_by"", "" resplit_by"", "" voxel"", "" rad"", "" is2d"", "" getSpace"")"
"1552","TreeLS","cppFastApply","c(""NumericMatrix& "", ""StringVector& "")","c("" matrix"", "" funcList"")"
"1553","TreeLS","cppCircleFit","c(""NumericMatrix& "", ""std::string "", ""unsigned int "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" method"", "" n"", "" p"", "" inliers"", "" nbest"")"
"1554","TreeLS","cppCylinderFit","c(""NumericMatrix& "", ""std::string "", ""unsigned int "", ""double "", ""double "", ""double "", ""unsigned int "")","c("" las"", "" method"", "" n"", "" p"", "" inliers"", "" max_angle"", "" n_best"")"
"1555","TreeLS","treeIdsFromMap","c(""NumericMatrix& "", ""NumericMatrix& "", ""NumericVector& "", ""double "", ""bool "")","c("" las"", "" xycenters"", "" uniqueIds"", "" length"", "" circle"")"
"1556","TreeLS","bruteForceRansacCylinder","c(""NumericMatrix& "", ""unsigned int "", ""double "", ""double "", ""unsigned int "", ""double "")","c("" las"", "" nSamples"", "" pConfidence"", "" pInliers"", "" nBest"", "" maxAngle"")"
"1557","TreeLS","bfStemCylinder","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "")","c("" las"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" max_angle"", "" tolerance"")"
"1558","TreeLS","bfPlotCylinders","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "")","c("" las"", "" tId"", "" segs"", "" rads"", "" nSamples"", "" pConfidence"", "" pInliers"", "" max_angle"", "" tolerance"")"
"1559","UComp","UCompC","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" commands"", "" ys"", "" us"", "" models"", "" periodss"", "" rhoss"", "" hs"", "" tTests"", "" criterions"", "" ps"", "" rubbish2s"", "" rubbishs"", "" verboses"", "" stepwises"", "" estimOks"", "" p0s"", "" vs"", "" yFitVs"", "" nonStationaryTermss"", "" rubbish3s"", "" harmonicss"", "" criterias"", "" cycleLimitss"", "" betass"", "" typeOutlierss"")"
"1560","UniDOE","CritEval","c(""NumericMatrix "", ""int "", ""int "")","c("" X0"", "" q"", "" crit"")"
"1561","UniDOE","SATA_UD","c(""int "", ""int "", ""int "", ""StringVector "", ""NumericMatrix "", ""int "", ""int "", ""double "")","c("" n"", "" s"", "" q"", "" init"", "" initX"", "" crit"", "" maxiter"", "" hits_ratio"")"
"1562","UniDOE","SATA_AUD","c(""NumericMatrix "", ""int "", ""int "", ""int "", ""StringVector "", ""NumericMatrix "", ""int "", ""int "", ""double "")","c("" XP"", "" n"", "" s"", "" q"", "" init"", "" initX"", "" crit"", "" maxiter"", "" hits_ratio"")"
"1563","UniDOE","SATA_LP","c(""NumericMatrix "", ""int "", ""int "", ""int "", ""double "")","c("" X0"", "" q"", "" crit"", "" maxiter"", "" hits_ratio"")"
"1564","UniIsoRegression","reg_1d_l1","c(""std::vector<double>& "", ""std::vector<double>& "", ""std::vector<double>& "", ""bool "")","c("" ycoords"", "" weights"", "" error"", "" decreasing"")"
"1565","UniIsoRegression","uni_1d_l1","c(""std::vector<double>& "", ""std::vector<double>& "")","c("" ycoords"", "" weights"")"
"1566","UniIsoRegression","reg_1d_l2","c(""std::vector<double>& "", ""std::vector<double>& "", ""bool "")","c("" y_vec"", "" w_vec"", "" decreasing"")"
"1567","UniIsoRegression","uni_1d_l2","c(""std::vector<double>& "", ""std::vector<double>& "")","c("" y_vec"", "" w_vec"")"
"1568","UniIsoRegression","reg_1d_linf","c(""std::vector<double>& "", ""bool "")","c("" y"", "" decreasing"")"
"1569","UniIsoRegression","uni_1d_linf","std::vector<double>& "," y_vec"
"1570","UniIsoRegression","pre_2d_l1_inc","c(""NumericMatrix& "", ""NumericMatrix& "")","c("" w"", "" data"")"
"1571","UniIsoRegression","pre_2d_l2_inc","c(""NumericMatrix& "", ""NumericMatrix& "")","c("" w"", "" data"")"
"1572","UniIsoRegression","reg_1d","c(""std::vector<double>& "", ""std::vector<double>& "", ""int "", ""bool "", ""bool "")","c("" y_vec"", "" w_vec"", "" metric"", "" unimodal"", "" decreasing"")"
"1573","UniIsoRegression","reg_2d","c(""NumericMatrix& "", ""NumericMatrix& "", ""int "")","c("" y_vec"", "" w_vec"", "" metric"")"
"1574","UtilityFrailtyPH12","GetDesire","c(""double "", ""double "", ""arma::vec "")","c("" PE"", "" PT"", "" Contour"")"
"1575","UtilityFrailtyPH12","UTEFFTOX","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" YE"", "" YT"", "" Doses"", "" HypermeansEFF"", "" HypermeansTOX"", "" Hypervars"", "" B"")"
"1576","V8","context_eval","c(""String "", ""XPtr< v8::Persistent<v8::Context> > "", ""bool "")","c("" src"", "" ctx"", "" serialize"")"
"1577","V8","write_array_buffer","c(""String "", ""RawVector "", ""XPtr< v8::Persistent<v8::Context> > "")","c("" key"", "" data"", "" ctx"")"
"1578","V8","context_validate","c(""String "", ""XPtr< v8::Persistent<v8::Context> > "")","c("" src"", "" ctx"")"
"1579","V8","context_null","XPtr< v8::Persistent<v8::Context>> "," ctx"
"1580","V8","make_context","bool "," set_console"
"1581","V8","context_enable_typed_arrays","XPtr< v8::Persistent<v8::Context> > "," ctx"
"1582","WRI","Rcpp_D_4cell","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" Xmat"", "" Q_res"", "" q_res"")"
"1583","WRI","Rcpp_D_cell","c(""const arma::mat& "", ""const arma::mat& "")","c("" Xmat"", "" Q_res"")"
"1584","WRI","kernel_partialF","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""int "")","c("" Xc"", "" Q_res"", "" left_mat"", "" r"")"
"1585","WaveSampling","IB","c(""const arma::sp_mat& "", ""const arma::vec& "")","c("" W"", "" s"")"
"1586","WaveSampling","distUnitk","c(""arma::mat "", ""int "", ""bool "", ""double "")","c("" X"", "" k"", "" tore"", "" toreBound"")"
"1587","WaveSampling","sb_vk","c(""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" pik"", "" X"", "" s"")"
"1588","WaveSampling","wave","c(""const arma::mat& "", ""const arma::vec& "", ""double "", ""bool "", ""bool "", ""double "", ""bool "", ""bool "")","c("" X"", "" pik"", "" bound"", "" tore"", "" shift"", "" toreBound"", "" comment"", "" fixedSize"")"
"1589","WaveSampling","wpik","c(""arma::mat "", ""arma::vec "", ""double "", ""bool "", ""bool "", ""double "")","c("" X"", "" pik"", "" bound"", "" tore"", "" shift"", "" toreBound"")"
"1590","WaveSampling","wpikInv","c(""arma::mat "", ""arma::vec "", ""bool "", ""bool "", ""double "")","c("" X"", "" pik"", "" tore"", "" shift"", "" toreBound"")"
"1591","acrt","testvals","c(""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::VectorXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""int "", ""int "", ""int "", ""int "", ""bool "")","c("" y"", "" Coefpremult"", "" partial"", "" X"", "" Wmat"", "" Bmat"", "" R"", "" dim"", "" Nrep"", "" q"", "" cores"", "" Eicker"")"
"1592","acrt","ctestE","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""int "")","c("" umat"", "" Rbmat"", "" Wmat"", "" Bmat"", "" cores"")"
"1593","wbsd","ctest","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""int "", ""double "")","c("" umat"", "" Rbmat"", "" Wvec"", "" Bmat"", "" cores"", "" tol"")"
"1594","adpss","work_test_norm_c","c(""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const int "", ""const int "", ""NumericVector "", ""NumericVector "", ""const double "", ""const double "", ""const double "", ""const double "", ""const bool "", ""const bool "", ""const int "", ""const double "", ""const double "")","c("" overall_sig_level"", "" work_beta"", "" cond_alpha"", "" cost_type_1_err"", "" cost_type_2_err"", "" prev_cost"", "" min_effect_size"", "" effect_size"", "" basic_schedule_num"", "" basic_schedule_power"", "" basic_schedule"", "" prior_dist"", "" prev_time"", "" time"", "" next_time"", "" stat"", "" input_check"", "" out_process"", "" simpson_div"", "" tol_boundary"", "" tol_cost"")"
"1595","adpss","sample_size_norm_c","c(""List "", ""const bool "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const bool "")","c("" initial_test"", "" sample_size"", "" effect_size"", "" time"", "" target_power"", "" final_time"", "" tol_sample_size"", "" input_check"")"
"1596","adpss","exact_est_norm_c","c(""List "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""const bool "", ""const bool "", ""const double "", ""const double "", ""const bool "")","c("" initial_test"", "" times"", "" stats"", "" costs"", "" final_analysis"", "" estimate"", "" ci_coef"", "" tol_est"", "" input_check"")"
"1597","afCEC","UpdateMeansForQuadraticFunction","List& "," res"
"1598","afCEC","CalculateEllipsesOfConfidenceForQuadraticFunction","c(""List "", ""double "", ""int "")","c("" res"", "" confidence"", "" segments"")"
"1599","afCEC","CalculateEllipsoidsOfConfidenceForQuadraticFunction","c(""List "", ""double "", ""int "")","c("" res"", "" confidence"", "" gridRes"")"
"1600","afCEC","afCECCppRoutine","c(""const arma::mat& "", ""int "", ""const SEXP& "", ""double "", ""double "", ""int "", ""int "", ""int "", ""const std::string& "", ""const arma::mat& "", ""bool "")","c("" points"", "" maxClusters"", "" initialLabels"", "" cardMin"", "" costThreshold"", "" minIterations"", "" maxIterations"", "" numberOfStarts"", "" method"", "" values"", "" interactive"")"
"1601","alakazam","seqEqual","c(""std::string "", ""std::string "", ""CharacterVector "")","c("" seq1"", "" seq2"", "" ignore"")"
"1602","alakazam","pairwiseEqual","StringVector "," seq"
"1603","alakazam","seqDistRcpp","c(""std::string "", ""std::string "", ""NumericMatrix "")","c("" seq1"", "" seq2"", "" dist_mat"")"
"1604","alakazam","pairwiseDistRcpp","c(""StringVector "", ""NumericMatrix "")","c("" seq"", "" dist_mat"")"
"1605","alakazam","nonsquareDistRcpp","c(""StringVector "", ""NumericVector "", ""NumericMatrix "")","c("" seq"", "" indx"", "" dist_mat"")"
"1606","alpaca","CenterVariables","c(""const arma::mat& "", ""const arma::vec& "", ""const List& "", ""const double "")","c("" V"", "" w"", "" klist"", "" tol"")"
"1607","alpaca","GetAlpha","c(""const arma::vec& "", ""const List& "", ""const double "")","c("" pi"", "" klist"", "" tol"")"
"1608","alpaca","GroupSums","c(""const arma::mat& "", ""const arma::vec& "", ""const List& "")","c("" M"", "" w"", "" jlist"")"
"1609","alpaca","GroupSumsSpectral","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const int "", ""const List& "")","c("" M"", "" v"", "" w"", "" L"", "" jlist"")"
"1610","alpaca","GroupSumsVar","c(""const arma::mat& "", ""const List& "")","c("" M"", "" jlist"")"
"1611","alpaca","GroupSumsCov","c(""const arma::mat& "", ""const arma::mat& "", ""const List& "")","c("" M"", "" N"", "" jlist"")"
"1612","ampir","rcpp_paac","c(""CharacterVector "", ""NumericMatrix "", ""int "", ""float "")","c("" seq"", "" H"", "" lambda"", "" w"")"
"1613","anMC","trmvrnorm_rej_cpp","c(""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "")","c("" n"", "" mu"", "" sigma"", "" lower"", "" upper"", "" verb"")"
"1614","anomaly","marshall_MeanVarAnomaly","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"")"
"1615","anomaly","marshall_MeanAnomaly","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"")"
"1616","anomaly","marshall_RobustMeanAnomaly","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"")"
"1617","anomaly","marshall_recursive_anomalies","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"")"
"1618","anomaly","marshall_recursive_mvanomalies","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"")"
"1619","anomaly","marshall_MeanVarAnomalyMV","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"", "" h"", "" i"")"
"1620","anomaly","marshall_RobustMeanAnomalyMV","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"", "" h"", "" i"")"
"1621","anomaly","marshall_MeanAnomalyMV","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" b"", "" c"", "" d"", "" e"", "" f"", "" g"", "" h"", "" i"")"
"1622","anomaly","marshall_sequential_ests","c(""const std::vector<double>& "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" data"", "" n"", "" burnin"", "" lqs"", "" lqf0"", "" meds"", "" medf0"", "" uqs"", "" uqf0"")"
"1623","anomaly","marshall_pass","c(""const std::list<std::vector<double> >& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "")","c("" Xi"", "" Lmax"", "" Lmin"", "" alpha"", "" lambda"")"
"1624","anomaly","tukey_mean","c(""std::vector<double> "", ""double "")","c("" x"", "" th"")"
"1625","ape","bipartition2","c(""IntegerMatrix "", ""int "")","c("" orig"", "" nTips"")"
"1626","ape","prop_part2","c(""SEXP "", ""int "")","c("" trees"", "" nTips"")"
"1627","ape","reorderRcpp","c(""IntegerMatrix "", ""int "", ""int "", ""int "")","c("" orig"", "" nTips"", "" root"", "" order"")"
"1628","armspp","armsGibbs","c(""int "", ""NumericVector "", ""Function "", ""NumericVector "", ""NumericVector "", ""List "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""bool "", ""bool "")","c("" nSamples"", "" previous"", "" logPdf"", "" lower"", "" upper"", "" initial"", "" convex"", "" maxPoints"", "" metropolis"", "" includeNEvaluations"", "" showProgress"")"
"1629","armspp","arms","c(""int "", ""List "", ""NumericVector "", ""NumericVector "", ""List "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""List "", ""bool "")","c("" nSamples"", "" logPdf"", "" lower"", "" upper"", "" initial"", "" convex"", "" maxPoints"", "" metropolis"", "" previous"", "" arguments"", "" includeNEvaluations"")"
"1630","arrApply","arrApply","c(""NumericVector "", ""unsigned int "", ""std::string "", ""List "")","c("" arr"", "" idim"", "" fun"", "" dots"")"
"1631","ashr","cxxMixSquarem","c(""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""List "")","c("" matrix_lik"", "" prior"", "" pi_init"", "" control"")"
"1632","autoFRK","getASCeigens","const Eigen::Map<Eigen::MatrixXd> "," A"
"1633","autoFRK","mrtsrcpp","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const int "")","c("" Xu"", "" xobs_diag"", "" k"")"
"1634","autoFRK","mrtsrcpp_predict0","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const int "")","c("" Xu"", "" xobs_diag"", "" xnew"", "" k"")"
"1635","autoFRK","mrtsrcpp_predict","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const int "")","c("" Xu"", "" xobs_diag"", "" xnew"", "" BBBH"", "" UZ"", "" nconst"", "" k"")"
"1636","avar","avar_to_cpp","arma::vec "," x"
"1637","avar","avar_mo_cpp","arma::vec "," x"
"1638","bama","run_bama_mcmc","c(""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" Y"", "" A"", "" M"", "" C1"", "" C2"", "" beta_m_init"", "" alpha_a_init"", "" burnin"", "" ndraws"", "" k"", "" lm0"", "" lm1"", "" l"")"
"1639","batman","to_logical_","c(""std::vector < std::string > "", ""std::vector < std::string > "", ""std::vector < std::string > "")","c("" x"", "" trues"", "" falses"")"
"1640","bayesDP","sigma2marginal","c(""int "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" n"", "" grid"", "" XtX"", "" SigmaBetaInv"", "" Xstar"", "" Xty"", "" mu0"", "" ystar"")"
"1641","bayesDP","sigma2marginalmc","c(""int "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" n"", "" grid"", "" XtX"", "" SigmaBetaInv"", "" Xstar"", "" Xty"", "" mu0"", "" ystar"")"
"1642","bayesDP","betaRegSampler","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""int "")","c("" sigma2"", "" XtX"", "" SigmaBetaInv"", "" mu0"", "" Xty"", "" nsamples"")"
"1643","bayesDP","betaRegSamplermc","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""int "")","c("" sigma2"", "" XtX"", "" SigmaBetaInv"", "" SigmaBetaInvID"", "" mu0"", "" Xty"", "" nsamples"")"
"1644","bayesDP","ppexpV","c(""double "", ""const arma::vec& "", ""const arma::vec& "")","c("" q"", "" x"", "" cuts"")"
"1645","bayesDP","ppexpM","c(""double "", ""const arma::mat& "", ""const arma::vec& "")","c("" q"", "" x"", "" cuts"")"
"1646","bcf","bcfoverparRcppClean","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""List "", ""List "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""CharacterVector "", ""int "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""double "")","c("" y_"", "" z_"", "" x_con_"", "" x_mod_"", "" x_mod_est_"", "" x_con_info_list"", "" x_mod_info_list"", "" random_des"", "" random_var"", "" random_var_ix"", "" random_var_df"", "" burn"", "" nd"", "" thin"", "" ntree_mod"", "" ntree_con"", "" lambda"", "" nu"", "" con_sd"", "" mod_sd"", "" con_alpha"", "" con_beta"", "" mod_alpha"", "" mod_beta"", "" treef_name_"", "" status_interval"", "" RJ"", "" use_mscale"", "" use_bscale"", "" b_half_normal"", "" prior_sample"", "" trt_init"")"
"1647","bcp","rcpp_bcpR","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" py"", "" px"", "" pgrpinds"", "" pid"", "" pmcmcreturn"", "" pburnin"", "" pmcmc"", "" pa"", "" pw"", "" pba"", "" pnreg"")"
"1648","bcp","rcpp_bcpM","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" pdata"", "" pid"", "" pmcmcreturn"", "" pburnin"", "" pmcmc"", "" pa"", "" pw"")"
"1649","bcp","rcpp_ppm","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" pdata"", "" pid"", "" padj"", "" pmcmcreturn"", "" pburnin"", "" pmcmc"", "" pa"", "" pc"", "" pmembs"", "" pboundaryType"", "" p1"", "" pfreqAPP"")"
"1650","bcp","rcpp_ppmR","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" py"", "" px"", "" pgrpinds"", "" pid"", "" padj"", "" pmcmcreturn"", "" pburnin"", "" pmcmc"", "" pa"", "" pc"", "" pmembs"", "" pboundaryType"", "" pba"", "" p1"", "" pfreqAPP"", "" pnreg"")"
"1651","bcpa","GetL","c(""NumericVector "", ""NumericVector "", ""double "", ""bool "")","c("" x"", "" t"", "" rho"", "" tau"")"
"1652","beam","beam","c(""arma::mat "", ""std::string "", ""arma::colvec "", ""arma::mat "", ""bool "")","c("" X"", "" type"", "" ronly"", "" D"", "" verbose"")"
"1653","beam","lightbeam","c(""arma::mat "", ""const double "", ""bool "")","c("" X"", "" thres"", "" verbose"")"
"1654","belg","get_boltzmann_default","c(""arma::mat "", ""std::string "", ""bool "")","c("" x"", "" base"", "" relative"")"
"1655","belg","get_boltzmann_aggregation","c(""arma::mat "", ""std::string "", ""bool "")","c("" x"", "" base"", "" relative"")"
"1656","belg","not_na_prop","const IntegerMatrix& "," x"
"1657","benchr","timer_error","std::size_t "," rounds"
"1658","benchr","do_timing","c(""const RObject& "", ""const Environment& "")","c("" expr"", "" env"")"
"1659","benchr","do_benchmark","c(""const List& "", ""const Environment& "", ""const IntegerVector& "", ""bool "", ""bool "")","c("" exprs"", "" env"", "" order"", "" gc"", "" progress"")"
"1660","bife","group_sums","c(""const arma::vec& "", ""const arma::ivec& "")","c("" kv"", "" kT"")"
"1661","bife","group_sums_bias","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::ivec& "")","c("" kM"", "" kw"", "" kT"")"
"1662","bife","group_sums_cov","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::ivec& "")","c("" kM1"", "" kM2"", "" kT"")"
"1663","bife","group_sums_spectral","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const int "", ""const arma::ivec& "")","c("" kM"", "" kv"", "" kw"", "" kL"", "" kT"")"
"1664","bife","group_sums_var","c(""const arma::mat& "", ""const arma::ivec& "")","c("" kM"", "" kT"")"
"1665","bife","center_variables","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::ivec& "")","c("" kM"", "" kw"", "" kT"")"
"1666","dina","update_alpha","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::mat& "", ""const arma::vec& "")","c("" Amat"", "" Q"", "" ss"", "" gs"", "" Y"", "" PIs"", "" ALPHAS"", "" delta0"")"
"1667","bife","variance_alpha","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::ivec& "")","c("" kV"", "" kX"", "" kw"", "" kT"")"
"1668","bigMap","grid_init","c(""arma::Col<double> "", ""arma::Col<double> "")","c("" X"", "" Y"")"
"1669","bigMap","grid_p2cell","c(""double "", ""double "", ""arma::Mat<double> "")","c("" x"", "" y"", "" grid"")"
"1670","bigMap","grid_D2cell","c(""arma::Mat<double> "", ""arma::Mat<double> "")","c("" D"", "" grid"")"
"1671","bigMap","grid_n2cell","c(""int "", ""arma::Mat<double> "")","c("" n"", "" grid"")"
"1672","bigMap","grid_N2cell","arma::Mat<double> "," grid"
"1673","bigMap","grid_M2cell","c(""arma::Col<int> "", ""arma::Mat<double> "")","c("" M"", "" grid"")"
"1674","bigMap","grid_bound","c(""int "", ""arma::Mat<double> "")","c("" n"", "" grid"")"
"1675","bigMap","grid_cross","c(""int "", ""arma::Mat<double> "")","c("" n"", "" grid"")"
"1676","bigMap","grid_peaks","c(""arma::Mat<double> "", ""arma::Mat<double> "")","c("" Z"", "" grid"")"
"1677","bigMap","wtt_cpp","c(""arma::Col<double> "", ""arma::Col<double> "", ""arma::Mat<double> "")","c("" X"", "" Y"", "" Z"")"
"1678","bigMap","distk","c(""int "", ""SEXP "", ""bool "")","c("" k"", "" X"", "" is_distance"")"
"1679","bigMap","zBeta","c(""int "", ""int "", ""SEXP "", ""bool "", ""double "", ""double "", ""int "")","c("" thread_rank"", "" threads"", "" X"", "" is_distance"", "" ppx"", "" tol"", "" mxI"")"
"1680","bigMap","sckt_zTSNE","c(""int "", ""int "", ""int "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""double "", ""double "", ""bool "")","c("" thread_rank"", "" threads"", "" layers"", "" X"", "" B"", "" Y"", "" I"", "" iters"", "" alpha"", "" isDistance"")"
"1681","bigMap","zChnks","c(""List& "", ""const arma::Mat<double>& "", ""const arma::Col<int>& "", ""const List& "")","c("" Z_list"", "" Y"", "" I"", "" brks_list"")"
"1682","bigMap","updateY","c(""arma::Mat<double>& "", ""const arma::Col<int>& "", ""const List& "", ""const List& "")","c("" Y"", "" I"", "" zMap_list"", "" brks_list"")"
"1683","bigMap","eSize","arma::Mat<double>& "," Y"
"1684","bigMap","mpi_zTSNE","c(""SEXP "", ""SEXP "", ""arma::Mat<double>& "", ""const arma::Col<int>& "", ""double "", ""double "", ""bool "")","c("" X"", "" B"", "" Y"", "" I"", "" iters"", "" alpha"", "" isDistance"")"
"1685","bigSurvSGD","lambdaMaxC","c(""NumericMatrix "", ""int "", ""std::string "", ""NumericVector "", ""NumericVector "")","c("" subDataa"", "" strata_size"", "" norm_method"", "" features_mean"", "" features_sd"")"
"1686","bigSurvSGD","oneChunkC","c(""NumericMatrix "", ""NumericVector "", ""std::string "", ""int "", ""int "", ""int "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""double "", ""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""double "", ""NumericVector "", ""NumericVector "")","c("" subData"", "" Beta"", "" beta_type"", "" strata_size"", "" batch_size"", "" t"", "" m"", "" v"", "" vHat"", "" lr_const"", "" lr_tau"", "" opt_method"", "" norm_method"", "" b1"", "" b2"", "" eps"", "" lambda"", "" alpha"", "" features_mean"", "" features_sd"")"
"1687","bigSurvSGD","oneObsPlugingC","c(""NumericMatrix "", ""NumericVector "", ""int "", ""std::string "", ""NumericVector "", ""NumericVector "")","c("" subDataa"", "" Beta"", "" strata_size"", "" norm_method"", "" features_mean"", "" features_sd"")"
"1688","biglasso","standardize_bm","c(""SEXP "", ""SEXP "")","c("" xP"", "" row_idx_"")"
"1689","biglasso","get_eta","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" xP"", "" row_idx_"", "" beta"", "" idx_p"", "" idx_l"")"
"1690","bigmemory","to_int_checked","SEXP "," x"
"1691","bigmemory","GetIndivMatrixElements","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"", "" row"")"
"1692","bigmemory","GetIndivVectorMatrixElements","c(""SEXP "", ""NumericVector "")","c("" bigMatAddr"", "" elems"")"
"1693","bigmemory","ReorderRIntMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" ncol"", "" orderVec"")"
"1694","bigmemory","ReorderRNumericMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" ncol"", "" orderVec"")"
"1695","bigmemory","ReorderBigMatrix","c(""SEXP "", ""SEXP "")","c("" address"", "" orderVec"")"
"1696","bigmemory","ReorderRIntMatrixCols","c(""IntegerMatrix "", ""SEXP "", ""SEXP "", ""IntegerVector "")","c("" matrixVector"", "" nrow"", "" ncol"", "" orderVec"")"
"1697","bigmemory","ReorderRNumericMatrixCols","c(""NumericMatrix "", ""SEXP "", ""SEXP "", ""IntegerVector "")","c("" matrixVector"", "" nrow"", "" ncol"", "" orderVec"")"
"1698","bigmemory","ReorderRRawMatrixCols","c(""RawMatrix "", ""SEXP "", ""SEXP "", ""IntegerVector "")","c("" matrixVector"", "" nrow"", "" ncol"", "" orderVec"")"
"1699","bigmemory","ReorderBigMatrixCols","c(""SEXP "", ""SEXP "")","c("" address"", "" orderVec"")"
"1700","bigmemory","OrderRIntMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" columns"", "" naLast"", "" decreasing"")"
"1701","bigmemory","OrderRNumericMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" columns"", "" naLast"", "" decreasing"")"
"1702","bigmemory","OrderBigMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" address"", "" columns"", "" naLast"", "" decreasing"")"
"1703","bigmemory","OrderRIntMatrixCols","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" ncol"", "" rows"", "" naLast"", "" decreasing"")"
"1704","bigmemory","OrderRNumericMatrixCols","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" ncol"", "" rows"", "" naLast"", "" decreasing"")"
"1705","bigmemory","OrderBigMatrixCols","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" address"", "" rows"", "" naLast"", "" decreasing"")"
"1706","bigmemory","CCleanIndices","c(""SEXP "", ""SEXP "")","c("" indices"", "" rc"")"
"1707","bigmemory","HasRowColNames","SEXP "," address"
"1708","bigmemory","GetIndexRowNames","c(""SEXP "", ""SEXP "")","c("" address"", "" indices_"")"
"1709","bigmemory","GetIndexColNames","c(""SEXP "", ""SEXP "")","c("" address"", "" indices_"")"
"1710","bigmemory","GetColumnNamesBM","SEXP "," address"
"1711","bigmemory","GetRowNamesBM","SEXP "," address"
"1712","bigmemory","SetColumnNames","c(""SEXP "", ""SEXP "")","c("" address"", "" columnNames"")"
"1713","bigmemory","SetRowNames","c(""SEXP "", ""SEXP "")","c("" address"", "" rowNames"")"
"1714","bigmemory","IsReadOnly","SEXP "," bigMatAddr"
"1715","bigmemory","CIsSubMatrix","SEXP "," bigMatAddr"
"1716","bigmemory","CGetNrow","SEXP "," bigMatAddr"
"1717","bigmemory","CGetNcol","SEXP "," bigMatAddr"
"1718","bigmemory","CGetType","SEXP "," bigMatAddr"
"1719","bigmemory","IsSharedMemoryBigMatrix","SEXP "," bigMatAddr"
"1720","bigmemory","IsFileBackedBigMatrix","SEXP "," bigMatAddr"
"1721","bigmemory","IsSeparated","SEXP "," bigMatAddr"
"1722","bigmemory","SetRowOffsetInfo","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" rowOffset"", "" numRows"")"
"1723","bigmemory","SetColumnOffsetInfo","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" colOffset"", "" numCols"")"
"1724","bigmemory","GetRowOffset","SEXP "," bigMatAddr"
"1725","bigmemory","GetColOffset","SEXP "," bigMatAddr"
"1726","bigmemory","GetTotalColumns","SEXP "," bigMatAddr"
"1727","bigmemory","GetTotalRows","SEXP "," bigMatAddr"
"1728","bigmemory","GetTypeString","SEXP "," bigMatAddr"
"1729","bigmemory","GetMatrixSize","SEXP "," bigMat"
"1730","bigmemory","MWhichBigMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" selectColumn"", "" minVal"", "" maxVal"", "" chkMin"", "" chkMax"", "" opVal"")"
"1731","bigmemory","MWhichRIntMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" selectColumn"", "" minVal"", "" maxVal"", "" chkMin"", "" chkMax"", "" opVal"")"
"1732","bigmemory","MWhichRNumericMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matrixVector"", "" nrow"", "" selectColumn"", "" minVal"", "" maxVal"", "" chkMin"", "" chkMax"", "" opVal"")"
"1733","bigmemory","CCountLines","SEXP "," fileName"
"1734","bigmemory","ReadMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fileName"", "" bigMatAddr"", "" firstLine"", "" numLines"", "" numCols"", "" separator"", "" hasRowNames"", "" useRowNames"")"
"1735","bigmemory","WriteMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" fileName"", "" rowNames"", "" colNames"", "" sep"")"
"1736","bigmemory","GetMatrixElements","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"", "" row"")"
"1737","bigmemory","GetMatrixRows","c(""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" row"")"
"1738","bigmemory","GetMatrixCols","c(""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"")"
"1739","bigmemory","GetMatrixAll","SEXP "," bigMatAddr"
"1740","bigmemory","SetMatrixElements","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"", "" row"", "" values"")"
"1741","bigmemory","SetIndivVectorMatrixElements","c(""SEXP "", ""NumericVector "", ""NumericVector "")","c("" bigMatAddr"", "" elems"", "" inVec"")"
"1742","bigmemory","SetIndivMatrixElements","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"", "" row"", "" values"")"
"1743","bigmemory","SetMatrixAll","c(""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" values"")"
"1744","bigmemory","SetMatrixCols","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" col"", "" values"")"
"1745","bigmemory","SetMatrixRows","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" bigMatAddr"", "" row"", "" values"")"
"1746","bigmemory","CreateSharedMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" row"", "" col"", "" colnames"", "" rownames"", "" typeLength"", "" ini"", "" separated"")"
"1747","bigmemory","CreateLocalMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" row"", "" col"", "" colnames"", "" rownames"", "" typeLength"", "" ini"", "" separated"")"
"1748","bigmemory","CreateFileBackedBigMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fileName"", "" filePath"", "" row"", "" col"", "" colnames"", "" rownames"", "" typeLength"", "" ini"", "" separated"")"
"1749","bigmemory","CAttachSharedBigMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" sharedName"", "" rows"", "" cols"", "" rowNames"", "" colNames"", "" typeLength"", "" separated"", "" readOnly"")"
"1750","bigmemory","CAttachFileBackedBigMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fileName"", "" filePath"", "" rows"", "" cols"", "" rowNames"", "" colNames"", "" typeLength"", "" separated"", "" readOnly"")"
"1751","bigmemory","SharedName","SEXP "," address"
"1752","bigmemory","FileName","SEXP "," address"
"1753","bigmemory","DirName","SEXP "," address"
"1754","bigmemory","Flush","SEXP "," address"
"1755","bigmemory","IsShared","SEXP "," address"
"1756","bigmemory","isnil","SEXP "," address"
"1757","bigmemory","CDeepCopy","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" inAddr"", "" outAddr"", "" rowInds"", "" colInds"", "" typecast_warning"")"
"1758","bigreadr","nlines_cpp","std::string "," file"
"1759","bigreadr","split_every_nlines","c(""std::string "", ""std::string "", ""int "", ""bool "")","c("" name_in"", "" prefix_out"", "" every_nlines"", "" repeat_header"")"
"1760","bigrquery","bq_parse","c(""std::string "", ""std::string "")","c("" meta_s"", "" data_s"")"
"1761","bigrquery","bq_field_init","c(""std::string "", ""std::string "")","c("" json"", "" value"")"
"1762","bigrquery","bq_parse_files","c(""std::string "", ""std::vector<std::string> "", ""int "", ""bool "")","c("" schema_path"", "" file_paths"", "" n"", "" quiet"")"
"1763","bigsnpr","r2_bgen","c(""std::string "", ""NumericVector "", ""LogicalVector "", ""NumericVector "", ""NumericVector "")","c("" filename"", "" offsets"", "" use_ind"", "" decode"", "" y"")"
"1764","bigsnpr","bedXPtr","c(""std::string "", ""int "", ""int "")","c("" path"", "" n"", "" p"")"
"1765","bigsnpr","bed_colstats","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" ncores"")"
"1766","bigsnpr","bed_col_counts_cpp","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" ncores"")"
"1767","bigsnpr","bed_row_counts_cpp","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" obj_bed"", "" ind_row"", "" ind_col"")"
"1768","bigsnpr","read_bed_scaled","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" center"", "" scale"")"
"1769","bigsnpr","prod_and_rowSumsSq","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" center"", "" scale"", "" V"")"
"1770","bigsnpr","bed_pMatVec4","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""int "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" center"", "" scale"", "" x"", "" ncores"")"
"1771","bigsnpr","bed_cpMatVec4","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""int "")","c("" obj_bed"", "" ind_row"", "" ind_col"", "" center"", "" scale"", "" x"", "" ncores"")"
"1772","bigsnpr","bed_clumping_chr","c(""Environment "", ""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""double "", ""double "", ""int "")","c("" obj_bed"", "" BM2"", "" ind_row"", "" ind_col"", "" center"", "" scale"", "" ordInd"", "" rankInd"", "" pos"", "" size"", "" thr"", "" ncores"")"
"1773","bigsnpr","clumping_chr_cached","c(""Environment "", ""Environment "", ""arma::sp_mat "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""double "", ""double "", ""int "")","c("" BM"", "" BM2"", "" sqcor"", "" spInd"", "" rowInd"", "" colInd"", "" ordInd"", "" rankInd"", "" pos"", "" sumX"", "" denoX"", "" size"", "" thr"", "" ncores"")"
"1774","bigsnpr","clumping_chr","c(""Environment "", ""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""double "", ""double "", ""int "")","c("" BM"", "" BM2"", "" rowInd"", "" colInd"", "" ordInd"", "" rankInd"", "" pos"", "" sumX"", "" denoX"", "" size"", "" thr"", "" ncores"")"
"1775","bigsnpr","snp_colstats","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" BM"", "" rowInd"", "" colInd"", "" ncores"")"
"1776","bigsnpr","replaceSNP","c(""Environment "", ""Environment "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" BM2"", "" rowInd"", "" colInd"")"
"1777","bigsnpr","corMat","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""double "", ""const NumericVector& "", ""const NumericVector& "", ""int "")","c("" BM"", "" rowInd"", "" colInd"", "" size"", "" thr"", "" pos"", "" ncores"")"
"1778","bigsnpr","impute","c(""Environment "", ""int "", ""int "")","c("" BM"", "" method"", "" ncores"")"
"1779","bigsnpr","ldpred2_gibbs_auto","c(""Environment "", ""const NumericVector& "", ""const NumericVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""double "", ""double "", ""int "", ""int "", ""bool "")","c("" corr"", "" beta_hat"", "" beta_init"", "" order"", "" n_vec"", "" p_init"", "" h2_init"", "" burn_in"", "" num_iter"", "" verbose"")"
"1780","bigsnpr","ldpred2_gibbs","c(""Environment "", ""const NumericVector& "", ""const NumericVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const LogicalVector& "", ""int "", ""int "", ""int "")","c("" corr"", "" beta_hat"", "" beta_init"", "" order"", "" n_vec"", "" h2"", "" p"", "" sparse"", "" burn_in"", "" num_iter"", "" ncores"")"
"1781","bigsnpr","multLinReg","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericMatrix& "", ""int "")","c("" obj"", "" ind_row"", "" ind_col"", "" U"", "" ncores"")"
"1782","bigsnpr","read_bgen","c(""std::string "", ""NumericVector "", ""Environment "", ""IntegerVector "", ""IntegerVector "", ""RawVector "", ""bool "", ""int "", ""int "")","c("" filename"", "" offsets"", "" BM"", "" ind_row"", "" ind_col"", "" decode"", "" dosage"", "" N"", "" ncores"")"
"1783","bigsnpr","readbina","c(""const char * "", ""Environment "", ""const RawMatrix& "")","c("" filename"", "" BM"", "" tab"")"
"1784","bigsnpr","readbina2","c(""Environment "", ""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" BM"", "" obj_bed"", "" ind_row"", "" ind_col"", "" ncores"")"
"1785","bigsnpr","sp_colSumsSq_sym","c(""std::vector<size_t> "", ""const IntegerVector& "", ""const NumericVector& "")","c("" p"", "" i"", "" x"")"
"1786","bigsnpr","writebina","c(""const char * "", ""Environment "", ""const RawVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" filename"", "" BM"", "" tab"", "" rowInd"", "" colInd"")"
"1787","bigsnpr","testWrite","c(""const RawVector& "", ""const char * "")","c("" v"", "" filename"")"
"1788","bigsparser","getXPtrSFBM","c(""std::string "", ""int "", ""int "", ""std::vector<size_t> "")","c("" path"", "" n"", "" m"", "" p"")"
"1789","bigsparser","prodVec","c(""Environment "", ""const NumericVector& "")","c("" X"", "" y"")"
"1790","bigsparser","cprodVec","c(""Environment "", ""const NumericVector& "")","c("" X"", "" y"")"
"1791","bigsparser","sp_solve_sym_eigen","c(""Environment "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""double "", ""int "")","c("" X"", "" b"", "" add_to_diag"", "" tol"", "" maxiter"")"
"1792","bigsparser","write_indval","c(""std::string "", ""const IntegerVector& "", ""const NumericVector& "", ""size_t "", ""int "")","c("" filename"", "" i"", "" x"", "" offset_p"", "" offset_i"")"
"1793","bigsparser","col_count_sym","c(""std::vector<size_t> "", ""const IntegerVector& "")","c("" p"", "" i"")"
"1794","bigsparser","write_indval_sym","c(""std::string "", ""std::vector<size_t> "", ""const IntegerVector& "", ""const NumericVector& "", ""size_t "", ""int "")","c("" filename"", "" p"", "" i"", "" x"", "" offset_p"", "" offset_i"")"
"1795","bigstatsr","auc_sorted","c(""const NumericVector& "", ""const LogicalVector& "")","c("" x"", "" y"")"
"1796","bigstatsr","auc_sorted_tab","c(""const NumericVector& "", ""const LogicalVector& "", ""const IntegerVector& "")","c("" x"", "" y"", "" w"")"
"1797","bigstatsr","boot_auc_sorted_tab","c(""const NumericVector& "", ""const LogicalVector& "", ""int "")","c("" x"", "" y"", "" n_boot"")"
"1798","bigstatsr","conv_NA_float","NumericVector& "," source"
"1799","mmapcharr","extractVec","c(""Environment "", ""const IntegerMatrix& "")","c("" e"", "" elemInd"")"
"1800","mmapcharr","extractMat","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" e"", "" rowInd"", "" colInd"")"
"1801","bigstatsr","createFile","c(""std::string "", ""std::size_t "", ""std::size_t "", ""int "")","c("" fileName"", "" nrow"", "" ncol"", "" type"")"
"1802","bigstatsr","addColumns","c(""std::string "", ""std::size_t "", ""std::size_t "", ""int "")","c("" fileName"", "" nrow"", "" ncol_add"", "" type"")"
"1803","bigstatsr","replaceVecOne","c(""SEXP "", ""const NumericVector& "", ""SEXP "")","c("" xpbm"", "" elemInd"", "" val"")"
"1804","bigstatsr","replaceVec","c(""SEXP "", ""const NumericVector& "", ""SEXP "")","c("" xpbm"", "" elemInd"", "" vec"")"
"1805","bigstatsr","replaceMatOne","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" xpbm"", "" rowInd"", "" colInd"", "" val"")"
"1806","bigstatsr","replaceMat","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" xpbm"", "" rowInd"", "" colInd"", "" mat"")"
"1807","bigstatsr","replaceDF","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""const DataFrame& "")","c("" xpbm"", "" rowInd"", "" colInd"", "" df"")"
"1808","bigstatsr","getXPtrFBM","c(""std::string "", ""std::size_t "", ""std::size_t "", ""int "")","c("" path"", "" n"", "" m"", "" type"")"
"1809","bigstatsr","getXPtrFBM_RW","c(""std::string "", ""std::size_t "", ""std::size_t "", ""int "")","c("" path"", "" n"", "" m"", "" type"")"
"1810","bigstatsr","increment_scaled_tcrossprod","c(""Environment "", ""arma::mat& "", ""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" K"", "" part_temp"", "" BM"", "" rowInd"", "" colInd"", "" center"", "" scale"")"
"1811","bigstatsr","prod_FBM_block_mat","c(""Environment "", ""const arma::mat& "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" BM"", "" Y"", "" rowInd"", "" colInd"", "" max_size"")"
"1812","bigstatsr","cprod_FBM_block_mat","c(""Environment "", ""const arma::mat& "", ""const IntegerVector& "", ""const IntegerVector& "", ""int "")","c("" BM"", "" Y"", "" rowInd"", "" colInd"", "" max_size"")"
"1813","bigstatsr","prod_FBM_mat","c(""Environment "", ""const arma::mat& "")","c("" BM"", "" A"")"
"1814","bigstatsr","prod_mat_FBM","c(""const arma::mat& "", ""Environment "")","c("" A"", "" BM"")"
"1815","bigstatsr","crossprod_FBM","Environment "," BM"
"1816","bigstatsr","crossprod_FBM_mat","c(""Environment "", ""const arma::mat& "")","c("" BM"", "" A"")"
"1817","bigstatsr","crossprod_mat_FBM","c(""const arma::mat& "", ""Environment "")","c("" A"", "" BM"")"
"1818","bigstatsr","tcrossprod_FBM","Environment "," BM"
"1819","bigstatsr","tcrossprod_FBM_mat","c(""Environment "", ""const arma::mat& "")","c("" BM"", "" A"")"
"1820","bigstatsr","tcrossprod_mat_FBM","c(""const arma::mat& "", ""Environment "")","c("" A"", "" BM"")"
"1821","bigstatsr","COPY_cdfit_gaussian_hsr","c(""Environment "", ""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""NumericVector& "", ""double "", ""double "", ""int "", ""int "", ""const IntegerVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""int "", ""int "")","c("" BM"", "" y"", "" row_idx"", "" col_idx"", "" covar"", "" lambda"", "" center"", "" scale"", "" pf"", "" resid"", "" alpha"", "" eps"", "" max_iter"", "" dfmax"", "" row_idx_val"", "" covar_val"", "" y_val"", "" n_abort"", "" nlam_min"")"
"1822","bigstatsr","COPY_cdfit_binomial_hsr","c(""Environment "", ""const NumericVector& "", ""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""NumericVector& "", ""double "", ""double "", ""int "", ""int "", ""const IntegerVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""int "", ""int "")","c("" BM"", "" y"", "" base"", "" row_idx"", "" col_idx"", "" covar"", "" lambda"", "" center"", "" scale"", "" pf"", "" resid"", "" alpha"", "" eps"", "" max_iter"", "" dfmax"", "" row_idx_val"", "" covar_val"", "" y_val"", "" base_val"", "" n_abort"", "" nlam_min"")"
"1823","bigstatsr","bigsummaries","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const IntegerVector& "", ""int "")","c("" BM"", "" row_idx"", "" col_idx"", "" covar"", "" y"", "" which_set"", "" K"")"
"1824","bigstatsr","bigcolvars","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" rowInd"", "" colInd"")"
"1825","bigstatsr","mycount1","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" rowInd"", "" colInd"", "" codeInd"")"
"1826","bigstatsr","mycount2","c(""Environment "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" rowInd"", "" colInd"", "" codeInd"")"
"1827","bigstatsr","pMatVec4","c(""Environment "", ""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" x"", "" rowInd"", "" colInd"")"
"1828","bigstatsr","cpMatVec4","c(""Environment "", ""const NumericVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" x"", "" rowInd"", "" colInd"")"
"1829","bigstatsr","transpose3","c(""Environment "", ""Environment "")","c("" BM"", "" BM2"")"
"1830","bigstatsr","univLinReg5","c(""Environment "", ""const arma::mat& "", ""const arma::vec& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" BM"", "" covar_U"", "" y"", "" rowInd"", "" colInd"")"
"1831","samurais","IRLS","c(""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""bool "")","c("" X"", "" Tau"", "" Gamma"", "" Winit"", "" verbose"")"
"1832","bigstatsr","centering","c(""NumericMatrix& "", ""const NumericVector& "")","c("" source"", "" mean"")"
"1833","bigstatsr","incr_FBM_mat","c(""Environment "", ""const NumericMatrix& "")","c("" BM"", "" mat"")"
"1834","bigstatsr","incr_FBM_vec","c(""Environment "", ""const NumericVector& "")","c("" BM"", "" vec"")"
"1835","bigstatsr","scaleK","c(""Environment "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""int "")","c("" BM"", "" sums"", "" mu"", "" delta"", "" nrow"")"
"1836","bigutilsr","sum_in_temp","c(""const NumericVector& "", ""const NumericVector& "", ""NumericVector& "")","c("" x"", "" y"", "" tmp_vec"")"
"1837","bigutilsr","sub_in_temp","c(""const NumericVector& "", ""const NumericVector& "", ""NumericVector& "")","c("" x"", "" y"", "" tmp_vec"")"
"1838","bigutilsr","scaleTau2_vector_rcpp","c(""const NumericVector& "", ""NumericVector& "", ""NumericVector& "")","c("" x"", "" tmp_dev"", "" tmp_med"")"
"1839","bigutilsr","dist_scaleTau2_matrix_rcpp","const NumericMatrix& "," Z"
"1840","roll","roll_mean","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"1841","bigutilsr","rowSumsSq","const NumericMatrix& "," source"
"1842","wCorr","theta","const arma::vec& "," M"
"1843","binGroup2","eff_nomaster_1","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" p"", "" SE"", "" SP"", "" n"")"
"1844","binGroup2","eff_nomaster_2","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "")","c("" p"", "" SE"", "" SP"", "" n"")"
"1845","binGroup2","ARRAY_nomaster","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""double "")","c("" p"", "" SE"", "" SP"", "" n"")"
"1846","binGroup2","ARRAY_master","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""double "")","c("" p"", "" SE"", "" SP"", "" n"")"
"1847","binGroup2","EFF_HIER","c(""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "")","c("" p"", "" S"", "" SE"", "" SP"", "" ns"")"
"1848","binGroup2","prob","c(""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "")","c("" p"", "" S"", "" SE"", "" SP"", "" ns"")"
"1849","binGroup2","ACCU_HIER","c(""arma::vec "", ""int "", ""arma::mat "", ""arma::mat "", ""arma::vec "")","c("" p"", "" S"", "" SE"", "" SP"", "" ns"")"
"1850","binGroup2","OPT","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""int "", ""std::string "", ""std::string "")","c("" p"", "" SE"", "" SP"", "" MAMPS"", "" obj"", "" algorithm"")"
"1851","binGroup2","optimal_stage","c(""double "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "", ""std::string "", ""std::string "")","c("" rho"", "" SE"", "" SP"", "" pi1"", "" pi2"", "" MAMPS"", "" obj"", "" algorithm"")"
"1852","binaryGP","PQPL_estimate","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""int "")","c("" M"", "" X"", "" w"", "" etaTilde"", "" R"", "" sigma2"", "" T"")"
"1853","binaryGP","likelihood_fun","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""int "")","c("" M"", "" X"", "" w"", "" etaTilde"", "" R"", "" sigma2"", "" T"")"
"1854","bindrcpp","create_env_string_typed_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING_TYPED "", ""bindrcpp::PAYLOAD "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1855","bindrcpp","populate_env_string_typed_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING_TYPED "", ""bindrcpp::PAYLOAD "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1856","bindrcpp","create_env_symbol_typed_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL_TYPED "", ""bindrcpp::PAYLOAD "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1857","bindrcpp","populate_env_symbol_typed_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL_TYPED "", ""bindrcpp::PAYLOAD "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1858","bindrcpp","create_env_string_wrapped_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING_WRAPPED "", ""List "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1859","bindrcpp","populate_env_string_wrapped_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING_WRAPPED "", ""List "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1860","bindrcpp","create_env_symbol_wrapped_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL_WRAPPED "", ""List "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1861","bindrcpp","populate_env_symbol_wrapped_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL_WRAPPED "", ""List "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1862","bindrcpp","create_env_string_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING "", ""bindrcpp::PAYLOAD "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1863","bindrcpp","populate_env_string_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_STRING "", ""bindrcpp::PAYLOAD "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1864","bindrcpp","create_env_symbol_imp","c(""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL "", ""bindrcpp::PAYLOAD "", ""Environment "")","c("" names"", "" fun"", "" payload"", "" enclos"")"
"1865","bindrcpp","populate_env_symbol_imp","c(""Environment "", ""CharacterVector "", ""bindrcpp::GETTER_FUNC_SYMBOL "", ""bindrcpp::PAYLOAD "")","c("" env"", "" names"", "" fun"", "" payload"")"
"1866","bindrcpp","callback_string_typed","c(""Symbol "", ""bindrcpp::GETTER_FUNC_STRING_TYPED "", ""bindrcpp::PAYLOAD "")","c("" name"", "" fun"", "" payload"")"
"1867","bindrcpp","callback_symbol_typed","c(""Symbol "", ""bindrcpp::GETTER_FUNC_SYMBOL_TYPED "", ""bindrcpp::PAYLOAD "")","c("" name"", "" fun"", "" payload"")"
"1868","bindrcpp","callback_string_wrapped","c(""Symbol "", ""bindrcpp::GETTER_FUNC_STRING_WRAPPED "", ""List "")","c("" name"", "" fun"", "" payload"")"
"1869","bindrcpp","callback_symbol_wrapped","c(""Symbol "", ""bindrcpp::GETTER_FUNC_SYMBOL_WRAPPED "", ""List "")","c("" name"", "" fun"", "" payload"")"
"1870","bindrcpp","do_test_create_environment","c(""CharacterVector "", ""String "", ""Environment "")","c("" names"", "" xform"", "" parent"")"
"1871","bio3d","read_cif","c(""std::string "", ""int "", ""bool "")","c("" filename"", "" maxlines"", "" multi"")"
"1872","bio3d","read_crd","std::string "," filename"
"1873","bio3d","read_pdb","c(""std::string "", ""bool "", ""bool "", ""int "", ""bool "")","c("" filename"", "" multi"", "" hex"", "" maxlines"", "" atoms_only"")"
"1874","bio3d","read_prmtop","std::string "," filename"
"1875","bioacoustics","threshold_detection_impl","c(""const std::vector<int>& "", ""size_t "", ""size_t "", ""double "", ""double "", ""double "", ""double "", ""double "", ""size_t "", ""size_t "", ""double "", ""double "", ""double "", ""size_t "", ""double "", ""double "", ""double "", ""const size_t "", ""double "", ""double "")","c("" audio_samples"", "" sample_rate"", "" threshold"", "" min_d"", "" max_d"", "" min_TBE"", "" max_TBE"", "" EDG"", "" LPF"", "" HPF"", "" dur_t"", "" snr_t"", "" angl_t"", "" FFT_size"", "" FFT_overlap"", "" start_t"", "" end_t"", "" NWS"", "" KPE"", "" KME"")"
"1876","bioacoustics","blob_detection_impl","c(""const std::vector<int>& "", ""size_t "", ""size_t "", ""double "", ""double "", ""double "", ""size_t "", ""size_t "", ""double "", ""double "", ""size_t "", ""double "", ""double "", ""double "", ""double "")","c("" audio_samples"", "" sample_rate"", "" FFT_size"", "" FFT_overlap"", "" min_TBE"", "" max_TBE"", "" HPF"", "" LPF"", "" min_d"", "" max_d"", "" area"", "" blur_f"", "" bg_substract"", "" EDG"", "" boost"")"
"1877","bioacoustics","read_wac_impl","c(""const std::string "", ""const std::string "")","c("" filepath"", "" filename"")"
"1878","bioacoustics","resample_impl","c(""std::vector<float>& "", ""double "")","c("" audio_samples"", "" ratio"")"
"1879","bioacoustics","fspec_impl","c(""const std::vector<int>& "", ""const size_t& "", ""const double& "", ""const std::string& "", ""const size_t& "", ""const size_t& "", ""const size_t& "", ""const size_t& "", ""const bool& "")","c("" audio_samples"", "" fft_size"", "" fft_overlap"", "" win"", "" HPF_bin"", "" LPF_bin"", "" FLL_bin"", "" FUL_bin"", "" rotate"")"
"1880","blackbox","newCSmooth","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" xy"", "" nrowxy"", "" ncolxy"", "" nuniquerows"", "" GCV"", "" optimiseBool"", "" verbosity"")"
"1881","blackbox","GCV_lamVar_covFix_Wrapper","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" a"", "" fixedSmoothness"", "" returnFnvalue"")"
"1882","blackbox","Krig_coef_Wrapper","c(""SEXP "", ""SEXP "")","c("" aA"", "" lambdaP"")"
"1883","blackbox","CcovFocal","c(""SEXP "", ""SEXP "")","c("" focal"", "" CKrigidxP"")"
"1884","bmrm","hclust_fca","c(""List "", ""IntegerVector "", ""IntegerVector "")","c("" hc"", "" a"", "" b"")"
"1885","bootUR","adf_tests_panel_cpp","c(""const arma::mat& "", ""const int& "", ""const int& "", ""const int& "", ""const arma::vec& "", ""const arma::vec& "", ""const bool& "", ""const double& "", ""const arma::umat& "")","c("" y"", "" pmin"", "" pmax"", "" ic"", "" dc"", "" detr"", "" ic_scale"", "" h_rs"", "" range"")"
"1886","bootUR","adf_panel_bootstrap_dgp_cpp","c(""const arma::mat& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const double& "", ""const arma::umat& "")","c("" y"", "" pmin"", "" pmax"", "" ic"", "" dc"", "" QD"", "" trim"", "" ic_scale"", "" h_rs"", "" range"")"
"1887","bootUR","bootstrap_cpp","c(""const int& "", ""const arma::mat& "", ""const arma::mat& "", ""const int& "", ""const int& "", ""const arma::mat& "", ""const double& "", ""const arma::mat& "", ""const arma::mat& "", ""const int& "", ""const int& "", ""const int& "", ""const arma::vec& "", ""const arma::vec& "", ""const bool& "", ""const double& "", ""const arma::umat& "", ""const bool& "", ""const bool& "", ""const int& "", ""const bool& "")","c("" B"", "" u"", "" e"", "" boot"", "" l"", "" s"", "" ar"", "" ar_est"", "" y0"", "" pmin"", "" pmax"", "" ic"", "" dc"", "" detr"", "" ic_scale"", "" h_rs"", "" range"", "" joint"", "" do_parallel"", "" nc"", "" show_progress"")"
"1888","bootUR","scaling_factors_cpp","c(""const arma::cube& "", ""const double& "")","c("" u"", "" prob"")"
"1889","bootUR","union_tests_cpp","c(""const arma::cube& "", ""arma::mat& "")","c("" t"", "" s"")"
"1890","bootUR","union_test_cpp","c(""const arma::mat& "", ""arma::vec& "")","c("" t"", "" s"")"
"1891","bootUR","BSQT_cpp","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const double& "")","c("" pvec"", "" test_i"", "" t_star"", "" level"")"
"1892","bootUR","iADF_cpp","c(""const arma::mat& "", ""const arma::mat& "", ""const double& "")","c("" test_i"", "" t_star"", "" level"")"
"1893","bootUR","FDR_cpp","c(""const arma::mat& "", ""const arma::mat& "", ""const double& "")","c("" test_i"", "" t_star"", "" level"")"
"1894","bpgmm","Calculate_Cxy","c(""int "", ""int "", ""S4 "", ""S4 "", ""arma::vec "", ""arma::vec "", ""arma::mat "")","c("" m"", "" n"", "" hparam"", "" thetaYList"", "" ZOneDim"", "" qVec"", "" X"")"
"1895","bpgmm","Calculate_PostLambdaPsy","c(""int "", ""int "", ""S4 "", ""List "", ""S4 "", ""arma::vec "", ""arma::vec "")","c("" m"", "" p"", "" hparam"", "" CxyList"", "" thetaYList"", "" qVec"", "" constraint"")"
"1896","bpgmm","update_PostZ","c(""arma::mat "", ""int "", ""int "", ""S4 "")","c("" X"", "" m"", "" n"", "" thetaYList"")"
"1897","bpgmm","update_Hyperparameter","c(""int "", ""int "", ""int "", ""S4 "", ""S4 "", ""arma::vec "", ""arma::vec "")","c("" m"", "" p"", "" q"", "" hparam"", "" thetaYList"", "" dVec"", "" sVec"")"
"1898","bpgmm","get_Z_mat","c(""arma::vec "", ""int "", ""int "")","c("" ZOneDim"", "" m"", "" n"")"
"1899","bpgmm","calculate_Ratio","c(""double "", ""arma::vec "")","c("" logDeno"", "" logNume"")"
"1900","cIRT","direct_sum","arma::field<arma::mat> "," x"
"1901","cIRT","center_matrix","const arma::mat& "," x"
"1902","cIRT","TwoPLChoicemcmc","c(""/* New Parameters */                            const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""/* Old Parameters */                            const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "")","c("" unique_subject_ids"", "" subject_ids"", "" choices_nk"", "" fixed_effects"", "" B"", "" rv_effects_design"", "" gamma"", "" beta"", "" zeta_rv"", "" Sigma_zeta_inv"", "" Y"", "" theta0"", "" a0"", "" b0"", "" mu_xi0"", "" Sig_xi0"")"
"1903","cIRT","probitHLM","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""/* Trading Memory for Speed */           const arma::field<arma::mat>& "", ""const arma::vec "", ""const arma::vec "", ""/* Bunch of priors */           const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "")","c("" unique_subject_ids"", "" subject_ids"", "" choices_nk"", "" fixed_effects_design"", "" rv_effects_design"", "" B_elem_plus1"", "" gamma"", "" beta"", "" theta"", "" zeta_rv"", "" WtW"", "" Z_c"", "" Wzeta_0"", "" inv_Sigma_gamma"", "" mu_gamma"", "" Sigma_zeta_inv"", "" S0"", "" mu_beta"", "" sigma_beta_inv"")"
"1904","cIRT","cIRT","c(""arma::vec "", ""arma::mat "", ""arma::uvec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""unsigned int "", ""unsigned int "")","c("" subject_ids"", "" fixed_effects"", "" B_elem_plus1"", "" rv_effects"", "" trial_matrix"", "" choices_nk"", "" burnit"", "" chain_length"")"
"1905","fourPNO","rmvnorm","c(""unsigned int "", ""const arma::vec& "", ""const arma::mat& "")","c("" n"", "" mu"", "" sigma"")"
"1906","cIRT","rwishart","c(""unsigned int "", ""const arma::mat& "")","c("" df"", "" S"")"
"1907","cIRT","riwishart","c(""unsigned int "", ""const arma::mat& "")","c("" df"", "" S"")"
"1908","fourPNO","Total_Tabulate","c(""unsigned int "", ""unsigned int "", ""const arma::mat "")","c("" N"", "" J"", "" Y"")"
"1909","cIRT","Generate_Choice","c(""unsigned int "", ""unsigned int "", ""unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "")","c("" N"", "" J"", "" K"", "" theta"", "" as"", "" bs"", "" zeta"", "" gamma"", "" X"", "" W"", "" subject_ids"", "" unique_subject_ids"")"
"1910","cattonum","mean_cattonum","const NumericVector& "," x"
"1911","ccdrAlgorithm","gridCCDr","c(""NumericVector "", ""List "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""IntegerVector "", ""NumericVector "", ""int "")","c("" cors"", "" init_betas"", "" init_sigmas"", "" nj"", "" indexj"", "" aj"", "" lambdas"", "" weights"", "" params"", "" verbose"")"
"1912","ccdrAlgorithm","singleCCDr","c(""NumericVector "", ""List "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""double "", ""IntegerVector "", ""NumericVector "", ""int "")","c("" cors"", "" init_betas"", "" init_sigmas"", "" nj"", "" indexj"", "" aj"", "" lambda"", "" weights"", "" params"", "" verbose"")"
"1913","cctools","eval_mvkde","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "")","c("" xev"", "" x"", "" b"")"
"1914","cctools","lcv_mvkde_disc","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "")","c("" x"", "" x_cc"", "" b"")"
"1915","ced","ced_enc_detect","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" enc_hint"", "" lang_hint"")"
"1916","cellWise","DDC_cpp","c(""arma::mat& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""unsigned int& "", ""const unsigned int& "", ""const double& "", ""const int& "", ""const int& "", ""const unsigned int& "", ""const unsigned int& "", ""arma::uvec& "")","c("" X"", "" tolProbCell"", "" tolProbRow"", "" tolProbReg"", "" tolProbCorr"", "" corrlim"", "" combinRule"", "" includeSelf"", "" fastDDC"", "" qdim"", "" transFun"", "" k"", "" numiter"", "" precScale"", "" standType"", "" corrType"", "" nCorr"", "" nLocScale"", "" goodCols"")"
"1917","cellWise","Wrap_cpp","c(""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""double "")","c("" X"", "" loc"", "" scale"", "" precScale"")"
"1918","cellWise","estLocScale_cpp","c(""arma::mat& "", ""unsigned int "", ""int "", ""double "", ""const int "", ""const double "")","c("" X"", "" nLocScale"", "" type"", "" precScale"", "" center"", "" alpha"")"
"1919","cellWise","unimcd_cpp","c(""arma::vec& "", ""const double "")","c("" y"", "" alpha"")"
"1920","cellWise","findCellPath_cpp","c(""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""const arma::uvec& "")","c("" predictors"", "" response"", "" weights"", "" Sigmai"", "" naMask"")"
"1921","cglm","llfun","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" b"", "" y"", "" design"", "" nidcumsum"")"
"1922","changepoint.mv","rcppeigen_peltuv","c(""const std::vector<double>& "", ""const std::string& "", ""const double& "", ""const int& "")","c("" data"", "" str_cost_func"", "" alpha"", "" m"")"
"1923","changepoint.mv","rcppeigen_tail_costs","c(""const std::vector<double>& "", ""const std::string& "", ""const int& "")","c("" data"", "" str_cost_func"", "" m"")"
"1924","chillR","PhenoFlex","c(""NumericVector "", ""NumericVector "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const int "", ""const double "", ""bool "", ""bool "", ""bool "")","c("" temp"", "" times"", "" A0"", "" A1"", "" E0"", "" E1"", "" slope"", "" Tf"", "" s1"", "" Tu"", "" Tb"", "" Tc"", "" yc"", "" Delta"", "" Imodel"", "" zc"", "" stopatzc"", "" deg_celsius"", "" basic_output"")"
"1925","chopthin","chopthin","c(""std::vector<double>& "", ""int "", ""double "", ""bool "", ""bool "")","c("" w"", "" N"", "" eta"", "" normalise"", "" checks"")"
"1926","chunkR","matrix2df","SEXP "," x"
"1927","chunkR","chunker__new_data_frame","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" path_"", "" sep_"", "" quoted_"", "" has_colnames_"", "" has_rownames_"", "" chunksize_"", "" column_types_"")"
"1928","chunkR","chunker__new_matrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" path_"", "" sep_"", "" quoted_"", "" has_colnames_"", "" has_rownames_"", "" chunksize_"")"
"1929","chunkR","chunker__next_chunk","SEXP "," ptr"
"1930","chunkR","chunker__set_colnames","SEXP "," ptr"
"1931","chunkR","chunker__get_matrix","SEXP "," ptr"
"1932","chunkR","chunker__get_dataframe","SEXP "," ptr"
"1933","chunkR","chunker__get_colnames","SEXP "," ptr"
"1934","chunkR","chunker__get_total","SEXP "," ptr"
"1935","chunkR","chunker__get_completed","SEXP "," ptr"
"1936","chunkR","chunker__get_type","SEXP "," ptr"
"1937","cld2","detect_language_cc","c(""CharacterVector "", ""bool "", ""bool "")","c("" input"", "" plain_text"", "" lang_code"")"
"1938","cld2","detect_language_multi_cc","c(""String "", ""bool "")","c("" input"", "" plain_text"")"
"1939","cld3","cld3_detect_language","std::vector<std::string> "," texts"
"1940","cld3","cld3_detect_language_df","std::vector<std::string> "," texts"
"1941","cld3","cld3_detect_language_mixed","c(""std::string "", ""size_t "")","c("" text"", "" len"")"
"1942","clevr","pairs_to_membership_cpp","c(""const IntegerMatrix& "", ""int "")","c("" pairs"", "" num_records"")"
"1943","clifford","c_identity","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L"", "" p"", "" m"")"
"1944","clifford","c_add","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"")"
"1945","clifford","c_multiply","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1946","clifford","c_power","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L"", "" c"", "" m"", "" p"", "" sig"")"
"1947","clifford","c_grade","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L"", "" c"", "" m"", "" n"")"
"1948","clifford","c_equal","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"")"
"1949","clifford","c_getcoeffs","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const List& "")","c("" L"", "" c"", "" m"", "" B"")"
"1950","clifford","c_outerprod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1951","clifford","c_innerprod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1952","clifford","c_fatdotprod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1953","clifford","c_lefttickprod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1954","clifford","c_righttickprod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"", "" sig"")"
"1955","clifford","c_overwrite","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" L1"", "" c1"", "" L2"", "" c2"", "" m"")"
"1956","cnaOpt","C_iterate","c(""dblList "", ""dblList "", ""double "", ""double "", ""bool "")","c("" dx"", "" dminxy"", "" Sx_base"", "" Sy"", "" verbose"")"
"1957","cnum","c2integer_conv","c(""const std::vector<std::string> "", ""const List "")","c("" number"", "" conv_t"")"
"1958","cnum","c2integer_literal","c(""const std::vector<std::string> "", ""const List "")","c("" number"", "" conv_t"")"
"1959","cnum","integer2c","c(""const std::string "", ""const List "")","c("" number"", "" conv_t"")"
"1960","cnum","integer2c_literal","c(""const std::string "", ""const List "")","c("" number"", "" conv_t"")"
"1961","coala","parse_ms_positions","const std::string "," line"
"1962","coala","parse_ms_output","c(""const List "", ""const NumericVector "", ""const int "")","c("" file_names"", "" sample_size"", "" loci_number"")"
"1963","coala","parse_seqgen_output","c(""CharacterVector "", ""const int "", ""const int "", ""const int "", ""const int "", ""const bool "")","c("" output"", "" individuals"", "" locus_length"", "" locus_number"", "" outgroup_size"", "" calc_segsites"")"
"1964","coala","generate_trio_trees","c(""const List "", ""const NumericVector "", ""const CharacterVector "")","c("" trees"", "" trio_dists"", "" file_names"")"
"1965","coala","create_segsites","c(""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""bool "")","c("" snps"", "" positions"", "" trio_locus"", "" check"")"
"1966","coala","get_snps","const coala::SegSites "," segsites"
"1967","coala","get_positions","const coala::SegSites "," segsites"
"1968","coala","set_positions","c(""coala::SegSites "", ""const NumericVector "")","c("" segsites"", "" positions"")"
"1969","coala","get_trio_locus","const coala::SegSites "," segsites"
"1970","coala","set_trio_locus","c(""coala::SegSites "", ""const NumericVector "")","c("" segsites"", "" trio_locus"")"
"1971","coala","calc_four_gamete_stat","c(""const ListOf<coala::SegSites> "", ""const IntegerVector "", ""const NumericMatrix "", ""const unsigned int "")","c("" seg_sites_list"", "" individuals"", "" locus_length"", "" ploidy"")"
"1972","coala","calc_jsfs","c(""const ListOf<coala::SegSites> "", ""const ListOf<IntegerVector> "")","c("" segsites_list"", "" ind_per_pop"")"
"1973","coala","calc_mcmf","c(""const List "", ""const NumericVector "", ""const bool "", ""const bool "", ""const int "", ""const int "", ""const NumericMatrix "")","c("" seg_sites"", "" individuals"", "" has_trios"", "" expand_mcmf"", "" type_expand"", "" ploidy"", "" locus_length"")"
"1974","coala","calc_nucleotide_div","c(""const ListOf<coala::SegSites> "", ""const NumericVector "")","c("" segsites_list"", "" individuals"")"
"1975","coala","unphase_segsites","c(""const List "", ""const long unsigned int "", ""const long unsigned int "")","c("" seg_sites_list"", "" ploidy"", "" samples_per_ind"")"
"1976","collUtils","countlines","std::string "," fn"
"1977","collUtils","ncols","std::string "," fn"
"1978","collUtils","readcol","c(""std::string "", ""long "", ""long "", ""long "")","c("" fileName"", "" colNum"", "" nSkip"", "" maxRowNum"")"
"1979","collUtils","readcols","c(""std::string "", ""std::vector<long> "", ""long "", ""long "")","c("" fn"", "" colsel"", "" nFirstSkipLines"", "" nSkipUnit"")"
"1980","combiter","NextCartes","c(""std::vector<int> "", ""std::vector<int> "")","c("" x"", "" nvec"")"
"1981","combiter","PrevCartes","c(""std::vector<int> "", ""std::vector<int> "")","c("" x"", "" nvec"")"
"1982","combiter","NextComb","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1983","combiter","PrevComb","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1984","combiter","NextPerm","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1985","combiter","PrevPerm","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1986","combiter","NextSubset","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1987","combiter","PrevSubset","c(""std::vector<int> "", ""int "")","c("" x"", "" n"")"
"1988","comparator","sparse_to_full","S4& "," pmat"
"1989","comparator","elementwise","c(""List& "", ""List& "", ""const S4& "")","c("" x"", "" y"", "" m_S4"")"
"1990","comparator","pairwise","c(""List& "", ""Nullable<List> "", ""const S4& "", ""const LogicalVector& "")","c("" x"", "" y_"", "" m_S4"", "" full"")"
"1991","comperank","compute_iterative_ratings","c(""Function "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "")","c("" rate_fun"", "" player1_id"", "" score1"", "" player2_id"", "" score2"", "" initial_ratings"")"
"1992","contoureR","contourWalker","c(""IntegerMatrix& "", ""NumericMatrix& "", ""NumericVector& "", ""double "", ""double "")","c("" dm"", "" xyz"", "" levels"", "" criticalRatio"", "" maximumPertubation"")"
"1993","contoureR","convexHullAM_Indexes","c(""NumericVector "", ""NumericVector "", ""bool "", ""bool "")","c("" x"", "" y"", "" includeColinear"", "" zeroBased"")"
"1994","contoureR","convexHullAM_Points","c(""NumericVector "", ""NumericVector "", ""bool "")","c("" x"", "" y"", "" includeColinear"")"
"1995","copCAR","buildM_","c(""const mat& "", ""int "", ""const colvec& "")","c("" B"", "" k"", "" eigval"")"
"1996","corels","corels","c(""std::string "", ""std::string "", ""std::string "", ""std::string "", ""bool "", ""bool "", ""bool "", ""int "", ""bool "", ""int "", ""std::string "", ""int "", ""double "", ""int "", ""int "")","c("" rules_file"", "" labels_file"", "" log_dir"", "" meta_file"", "" run_bfs"", "" calculate_size"", "" run_curiosity"", "" curiosity_policy"", "" latex_out"", "" map_type"", "" verbosity_policy"", "" max_num_nodes"", "" regularization"", "" logging_frequency"", "" ablation"")"
"1997","coxmeg","cswei","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXi& "", ""const Eigen::VectorXd& "")","c("" w_v"", "" rs_rs"", "" ind"", "" rev"")"
"1998","coxmeg","invsph","c(""Eigen::SparseMatrix<double>& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXd& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXd& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const int "")","c("" A"", "" der"", "" dv"", "" v1"", "" mx"", "" v2"", "" v3"", "" v4"", "" av"", "" bw"", "" f"", "" inv"", "" tau"", "" sol"")"
"1999","coxmeg","logdeth","c(""Eigen::SparseMatrix<double>& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXi& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXi& "", ""const Eigen::VectorXi& "")","c("" A"", "" dv"", "" bw_v"", "" w"", "" cs_p"", "" v4"", "" a"", "" tau"", "" inv"", "" detap"")"
"2000","coxmeg","pcg_dense","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const double "")","c("" A"", "" B"", "" tol"")"
"2001","coxmeg","pcg_sparse","c(""const Eigen::MappedSparseMatrix<double> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const double "")","c("" A"", "" B"", "" tol"")"
"2002","coxmeg","rs_sum","c(""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "")","c("" rk_v"", "" d"")"
"2003","coxmeg","csqei","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXd& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXi& "", ""const Eigen::Map<Eigen::VectorXd> "")","c("" w_v"", "" mx"", "" rs_rs"", "" rs_cs"", "" ind"", "" av"")"
"2004","coxmeg","wma_cp","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXi& "", ""const Eigen::Map<Eigen::VectorXd> "")","c("" w"", "" cs_p"", "" ind"", "" a"")"
"2005","coxmeg","score_test","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::MatrixXi& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXd& "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" deriv"", "" bw_v"", "" w"", "" rs_rs"", "" rs_cs"", "" cs_p"", "" ind"", "" a"", "" a2"", "" tau"", "" v"", "" cov"", "" x"")"
"2006","coxmeg","logdet_ch","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "")","c("" X_m"", "" rad_m"", "" bma_d"", "" bpa_d"", "" cj_v"")"
"2007","coxmeg","logdet_lanczos","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::VectorXi& "")","c("" X_m"", "" rad_m"", "" m_d"")"
"2008","coxmeg","logdet_lanczos_sp","c(""const Eigen::MappedSparseMatrix<double> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::VectorXi& "")","c("" X_m"", "" rad_m"", "" m_d"")"
"2009","coxrt","getGamma","c(""const arma::vec "", ""const arma::vec "", ""const arma::vec "", ""const arma::mat "", ""const arma::vec "")","c("" expbZ"", "" X"", "" T"", "" Z"", "" wh"")"
"2010","coxrt","getSigma_cpp","c(""const arma::mat "", ""const arma::mat "", ""const arma::vec "", ""const arma::mat "", ""const arma::mat "")","c("" Z"", "" TMP"", "" S0"", "" xi"", "" dMi_Tl"")"
"2011","coxrt","getVar","c(""const arma::vec "", ""const arma::vec "", ""const arma::vec "", ""const arma::mat "", ""const arma::vec "")","c("" exp_bZ"", "" X"", "" T"", "" Z"", "" wh"")"
"2012","cqrReg","QRADMMCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""double "", ""int "", ""double "", ""double "")","c("" xr"", "" yr"", "" betar"", "" to"", "" mr"", "" ta"", "" rhor"")"
"2013","cqrReg","CQRADMMCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "", ""double "", ""double "")","c("" xr"", "" yr"", "" betar"", "" to"", "" mr"", "" ta"", "" rhor"", "" pr"")"
"2014","cqrReg","QRPADMMCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "", ""double "", ""double "", ""double "")","c("" xr"", "" yr"", "" betar"", "" m"", "" ta"", "" rhor"", "" lambdar"")"
"2015","cqrReg","CQRPADMMCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "", ""arma::vec "", ""double "", ""double "", ""int "", ""int "")","c("" xr"", "" yr"", "" betar"", "" mr"", "" ta"", "" rhor"", "" lambdar"", "" pr"", "" kr"")"
"2016","cqrReg","CQRCDCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "")","c("" xr"", "" yr"", "" betar"", "" to"", "" m"", "" ta"")"
"2017","cqrReg","CQRMMCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "")","c("" xr"", "" yr"", "" betar"", "" to"", "" m"", "" ta"")"
"2018","cqrReg","CQRPCDCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "", ""double "")","c("" xr"", "" yr"", "" betar"", "" betaoldr"", "" to"", "" m"", "" ta"", "" l"")"
"2019","cqrReg","CQRPMMCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""arma::vec "", ""double "")","c("" xr"", "" yr"", "" betar"", "" betaoldr"", "" to"", "" m"", "" ta"", "" lamdar"")"
"2020","cqrReg","QRCDCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""double "", ""int "", ""double "")","c("" xr"", "" yr"", "" betar"", "" to"", "" m"", "" ta"")"
"2021","cqrReg","QRMMCPP","c(""arma::mat "", ""arma:: vec "", ""arma::vec "", ""double "", ""int "", ""double "")","c("" xr"", "" yr"", "" betar"", "" to"", "" m"", "" ta"")"
"2022","cqrReg","QRPCDCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""double "", ""double "")","c("" xr"", "" yr"", "" betar"", "" betaoldr"", "" to"", "" m"", "" ta"", "" lamdar"")"
"2023","cqrReg","QRPMMCPP","c(""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""double "", ""double "")","c("" xr"", "" yr"", "" betar"", "" betaoldr"", "" to"", "" m"", "" ta"", "" lamdar"")"
"2024","crawl","CTCRWNLL","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" sig2"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2025","crawl","CTCRWNLL_DRIFT","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" beta_drift"", "" sig2"", "" sig2_drift"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2026","crawl","CTCRWPREDICT","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" sig2"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2027","crawl","CTCRWPREDICT_DRIFT","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" beta_drift"", "" sig2"", "" sig2_drift"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2028","crawl","CTCRWSAMPLE","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" sig2"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2029","crawl","CTCRWSAMPLE_DRIFT","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::colvec& "", ""const arma::mat& "")","c("" y"", "" Hmat"", "" beta"", "" beta_drift"", "" sig2"", "" sig2_drift"", "" delta"", "" noObs"", "" active"", "" a"", "" P"")"
"2030","crawl","makeT","c(""const double& "", ""const double& "", ""const double& "")","c("" b"", "" delta"", "" active"")"
"2031","crawl","makeQ","c(""const double& "", ""const double& "", ""const double& "", ""const double& "")","c("" b"", "" sig2"", "" delta"", "" active"")"
"2032","crawl","makeT_drift","c(""const double& "", ""const double& "", ""const double& "", ""const double& "")","c("" b"", "" b_drift"", "" delta"", "" active"")"
"2033","crawl","makeQ_drift","c(""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "")","c("" b"", "" b_drift"", "" sig2"", "" sig2_drift"", "" delta"", "" active"")"
"2034","crfsuite","crfsuite_model_parameters","c(""const std::string "", ""const std::string "")","c("" method"", "" type"")"
"2035","crfsuite","crfsuite_model_build","c(""const char* "", ""const std::vector<int> "", ""const std::vector<std::string> "", ""CharacterMatrix "", ""List "", ""const std::string "", ""const std::string "", ""int "")","c("" file_model"", "" doc_id"", "" y"", "" x"", "" options"", "" method"", "" type"", "" trace"")"
"2036","crfsuite","crfsuite_model","const char* "," file_model"
"2037","crfsuite","crfsuite_model_dump","c(""const char* "", ""const char* "")","c("" file_model"", "" file_txt"")"
"2038","crfsuite","crfsuite_predict","c(""const std::string "", ""const std::vector<int> "", ""CharacterMatrix "", ""int "")","c("" file_model"", "" doc_id"", "" x"", "" trace"")"
"2039","ctgt","getL","c(""std::vector<double> "", ""std::vector<double> "", ""double "")","c("" ub"", "" lb"", "" level"")"
"2040","ctgt","pv","c(""double "", ""std::vector<double> "")","c("" x"", "" lam"")"
"2041","ctgt","criticalvalue","c(""std::vector<double> "", ""double "")","c("" lam"", "" alpha"")"
"2042","cubature","doCuhre","c(""int "", ""SEXP "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""SEXP "", ""int "", ""int "")","c("" nComp"", "" f"", "" nDim"", "" nVec"", "" minEval"", "" maxEval"", "" absTol"", "" relTol"", "" stateFile"", "" key"", "" flag"")"
"2043","cubature","doVegas","c(""int "", ""SEXP "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""int "", ""int "", ""SEXP "", ""int "", ""int "", ""int "")","c("" nComp"", "" f"", "" nDim"", "" nVec"", "" minEval"", "" maxEval"", "" absTol"", "" relTol"", "" nStart"", "" nIncrease"", "" nBatch"", "" gridNo"", "" stateFile"", "" seed"", "" flag"", "" cuba_args"")"
"2044","cubature","doSuave","c(""int "", ""SEXP "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""double "", ""SEXP "", ""int "", ""int "", ""int "")","c("" nComp"", "" f"", "" nDim"", "" nVec"", "" minEval"", "" maxEval"", "" absTol"", "" relTol"", "" nNew"", "" nMin"", "" flatness"", "" stateFile"", "" seed"", "" flag"", "" cuba_args"")"
"2045","cubature","doDivonne","c(""int "", ""SEXP "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""int "", ""int "", ""SEXP "", ""int "", ""SEXP "", ""SEXP "", ""int "", ""int "", ""int "")","c("" nComp"", "" f"", "" nDim"", "" nVec"", "" minEval"", "" maxEval"", "" absTol"", "" relTol"", "" key1"", "" key2"", "" key3"", "" maxPass"", "" border"", "" maxChisq"", "" minDeviation"", "" nGiven"", "" ldxGiven"", "" xGiven"", "" nExtra"", "" peakFinder"", "" stateFile"", "" seed"", "" flag"", "" cuba_args"")"
"2046","cubature","doHCubature","c(""int "", ""SEXP "", ""NumericVector "", ""NumericVector "", ""int "", ""double "", ""double "", ""int "", ""unsigned "")","c("" fDim"", "" f"", "" xLL"", "" xUL"", "" maxEval"", "" absErr"", "" tol"", "" vectorInterface"", "" norm"")"
"2047","cubature","doPCubature","c(""int "", ""SEXP "", ""NumericVector "", ""NumericVector "", ""int "", ""double "", ""double "", ""int "", ""unsigned "")","c("" fDim"", "" f"", "" xLL"", "" xUL"", "" maxEval"", "" absErr"", "" tol"", "" vectorInterface"", "" norm"")"
"2048","curstatCI","ComputeConfIntervals","c(""DataFrame "", ""NumericVector "", ""double "", ""NumericVector "")","c("" data"", "" x"", "" alpha"", "" bw"")"
"2049","curstatCI","ComputeBW","c(""DataFrame "", ""NumericVector "")","c("" data"", "" x"")"
"2050","curstatCI","ComputeMLE","DataFrame "," data"
"2051","curstatCI","ComputeSMLE","c(""DataFrame "", ""NumericVector "", ""NumericVector "")","c("" data"", "" x"", "" bw"")"
"2052","curveDepth","distImages","c(""arma::cube "", ""int "")","c("" images"", "" verbosity"")"
"2053","curveDepth","distCurves","c(""List "", ""bool "", ""int "")","c("" curves"", "" oneWay"", "" verbosity"")"
"2054","curveDepth","distCurvesAsymm","c(""List "", ""List "", ""bool "", ""int "")","c("" curvesRows"", "" curvesCols"", "" oneWay"", "" verbosity"")"
"2055","curveDepth","depthCurveTukey","c(""List "", ""List "", ""int "", ""bool "", ""double "", ""double "", ""List "", ""bool "", ""double "", ""double "")","c("" objects"", "" data"", "" nDirs"", "" subs"", "" fracInt"", "" fracEst"", "" subsamples"", "" exactEst"", "" minMassObj"", "" minMassDat"")"
"2056","curveDepth","curvesSubsample","c(""List "", ""IntegerVector "")","c("" curves"", "" ptsPerCurve"")"
"2057","curveDepth","images2curves","arma::cube "," images"
"2058","curveDepth","depthCTukey","c(""List "", ""List "", ""int "", ""bool "", ""int "", ""double "", ""double "", ""bool "", ""double "", ""double "")","c("" objects"", "" data"", "" nDirs"", "" subs"", "" m"", "" fracInt"", "" fracEst"", "" exactEst"", "" minMassObj"", "" minMassDat"")"
"2059","curveDepth","voxelize","c(""List "", ""NumericVector "", ""NumericVector "", ""NumericVector "")","c("" f"", "" from"", "" to"", "" by"")"
"2060","cusum","gscusum","c(""NumericMatrix& "", ""double "", ""double "", ""double "", ""NumericVector& "", ""int "", ""int "")","c("" input_outcomes"", "" failure_probability"", "" odds_multiplier"", "" limit"", "" quantiles"", "" max_num_shuffles"", "" seed"")"
"2061","cusum","ragscusum","c(""NumericMatrix& "", ""double "", ""NumericVector& "", ""int "", ""int "")","c("" input_ra_outcomes"", "" limit"", "" quantiles"", "" max_num_shuffles"", "" seed"")"
"2062","datasailr","data_sailr_cpp_execute","c(""CharacterVector "", ""DataFrame "")","c("" rchars"", "" df"")"
"2063","dbnR","calc_mu_cpp","c(""List& "", ""StringVector& "")","c("" fit"", "" order"")"
"2064","dbnR","calc_sigma_cpp","c(""List& "", ""StringVector& "")","c("" fit"", "" order"")"
"2065","dbnR","initialize_cl_cpp","c(""StringVector& "", ""unsigned int "")","c("" ordering"", "" size"")"
"2066","dbnR","create_causlist_cpp","c(""List& "", ""List& "", ""unsigned int "", ""StringVector& "")","c("" cl"", "" net"", "" size"", "" ordering"")"
"2067","dbnR","cl_to_arc_matrix_cpp","c(""List& "", ""CharacterVector& "", ""unsigned int "")","c("" cl"", "" ordering"", "" rows"")"
"2068","dbnR","pos_plus_vel_cpp","c(""List& "", ""List& "", ""int "")","c("" cl"", "" vl"", "" n_arcs"")"
"2069","dbnR","init_list_cpp","c(""StringVector "", ""unsigned int "", ""unsigned int "")","c("" nodes"", "" size"", "" n_inds"")"
"2070","dbnR","randomize_vl_cpp","c(""List& "", ""NumericVector& "")","c("" vl"", "" probs"")"
"2071","dbnR","pos_minus_pos_cpp","c(""List& "", ""List& "", ""List& "")","c("" cl"", "" ps"", "" vl"")"
"2072","dbnR","vel_plus_vel_cpp","c(""List& "", ""List& "", ""int "")","c("" vl1"", "" vl2"", "" abs_op"")"
"2073","dbnR","cte_times_vel_cpp","c(""float "", ""List& "", ""unsigned int "", ""int "")","c("" k"", "" vl"", "" abs_op"", "" max_op"")"
"2074","dbnR","rename_nodes_cpp","c(""const StringVector& "", ""unsigned int "")","c("" nodes"", "" size"")"
"2075","deepboost","Train_R","c(""DataFrame "", ""int "", ""int "", ""double "", ""double "", ""char "", ""bool "")","c("" data"", "" tree_depth"", "" num_iter"", "" beta"", "" lambda"", "" loss_type"", "" verbose"")"
"2076","deepboost","Predict_R","c(""DataFrame "", ""List "")","c("" newdata"", "" model"")"
"2077","deepboost","PredictProbabilities_R","c(""DataFrame "", ""List "")","c("" newdata"", "" model"")"
"2078","deepboost","Evaluate_R","c(""DataFrame "", ""List "")","c("" data"", "" model"")"
"2079","demu","sqrt_","sp_mat "," X"
"2080","demu","subspace_","mat "," V"
"2081","demu","simDppModal_","c(""sp_mat "", ""uword "")","c("" R"", "" n"")"
"2082","depcoeff","coeffpml","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""double "", ""double "", ""long int "", ""long int "", ""int "")","c("" u1"", "" v1"", "" u2"", "" v2"", "" amin"", "" parp"", "" parh"", "" n"", "" na"", "" mf"")"
"2083","dexterMST","fast_factor","c(""SEXP "", ""bool "")","c("" x"", "" as_int"")"
"2084","dexterMST","fast_factor_lev","c(""SEXP "", ""SEXP "", ""bool "")","c("" x"", "" levs"", "" as_int"")"
"2085","dexter","ppoint","SEXP "," x"
"2086","dexter","fill_resp_matrix","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""arma::imat& "")","c("" person_id"", "" item_id"", "" item_score"", "" out"")"
"2087","dexter","ds_connected_groups","const IntegerMatrix& "," a"
"2088","dexter","unequal_categories_C","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "")","c("" group_id"", "" item_id"", "" item_score"", "" nit"", "" max_score"")"
"2089","dexter","make_booklets","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""const bool "")","c("" person_id"", "" item_id"", "" item_score"", "" booklet_id"", "" booklet_score"", "" merged"")"
"2090","dexter","make_booklets_summed","c(""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""const bool "")","c("" person_id"", "" booklet_id"", "" item_id"", "" item_score"", "" merged"")"
"2091","dexter","make_booklets_summed_matrix","c(""const IntegerVector& "", ""const int "", ""const int "")","c("" mtx"", "" ncol"", "" nrow"")"
"2092","dexter","make_booklets_matrix","c(""const IntegerVector& "", ""const int "", ""const int "")","c("" mtx"", "" ncol"", "" nrow"")"
"2093","dexterMST","mutate_booklet_score","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" person_id"", "" booklet_id"", "" item_score"")"
"2094","dexter","summarise_booklet_score","c(""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "")","c("" person_id"", "" booklet_id"", "" item_id"", "" item_score"")"
"2095","dexter","merge_booklets","c(""IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector "", ""const int "")","c("" booklet_id"", "" person_id"", "" ds_booklet_id"", "" maxb"")"
"2096","dexter","get_design_C","c(""const IntegerVector& "", ""const IntegerVector& "")","c("" booklet_id"", "" item_id"")"
"2097","dexter","polytomize_C","c(""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""const int "", ""const int "")","c("" booklet_id"", "" person_id"", "" item_prop"", "" item_score"", "" booklet_score"", "" nlev"", "" nb"")"
"2098","dexterMST","is_person_booklet_sorted","c(""const IntegerVector& "", ""const IntegerVector& "")","c("" booklet_id"", "" person_id"")"
"2099","dexter","parms_is_superset_matrix","c(""const IntegerMatrix& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "")","c("" x"", "" item_id"", "" item_score"", "" maxs"")"
"2100","dexter","suf_stats_nrm","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "")","c("" booklet_id"", "" booklet_score"", "" item_id"", "" item_score"", "" nit"", "" max_score"")"
"2101","dexter","suf_stats_im","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "")","c("" booklet_score"", "" item_id"", "" item_score"", "" nit"", "" max_score"")"
"2102","dexter","score_tab_single","c(""const IntegerVector& "", ""const int "")","c("" scores"", "" max_score"")"
"2103","dexter","tia_C","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "")","c("" booklet_id"", "" booklet_score"", "" item_id"", "" item_score"", "" nb"", "" nit"", "" frst_item"", "" ds_booklet_id"", "" ds_item_id"")"
"2104","dexter","ElSym_C","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const int "", ""const int "", ""const int "", ""const int "", ""arma::vec& "")","c("" b"", "" a"", "" first"", "" last"", "" item1"", "" item2"", "" nI"", "" mS"", "" g"")"
"2105","dexter","possible_scores_C","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" a"", "" first"", "" last"")"
"2106","dexter","ittotmat0_C","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" c"", "" first"", "" last"", "" ps"")"
"2107","dexter","E_booklets","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" first"", "" last"", "" scoretab"", "" n_score"", "" nit"")"
"2108","dexter","NR_booklets","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const int "", ""arma::vec& "", ""arma::mat& "")","c("" b"", "" a"", "" first"", "" last"", "" scoretab"", "" n_score"", "" nit"", "" max_par_bk"", "" EsufI"", "" H"")"
"2109","dexter","calibrate_Bayes_C","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::vec& "", ""const arma::vec& "", ""const int "", ""const int "", ""const int "", ""const double "", ""const double "", ""const int "")","c("" a"", "" first"", "" last"", "" ib"", "" bi"", "" nbi"", "" nib"", "" bfirst"", "" blast"", "" bmax"", "" m"", "" sufI"", "" bkscoretab"", "" b_in"", "" fixed_b"", "" from"", "" step"", "" ndraws"", "" prior_eta"", "" prior_rho"", "" pgw"")"
"2110","dexter","meanElSym","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const int "", ""const int "", ""const int "", ""const int "", ""arma::vec& "")","c("" b"", "" a"", "" first"", "" last"", "" item1"", "" item2"", "" nI"", "" mS"", "" g"")"
"2111","dexter","E_booklets_mean","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" first"", "" last"", "" scoretab"", "" n_score"", "" nit"")"
"2112","dexter","NR_booklets_mean","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const int "", ""arma::vec& "", ""arma::mat& "")","c("" b"", "" a"", "" first"", "" last"", "" scoretab"", "" n_score"", "" nit"", "" max_par_bk"", "" EsufI"", "" H"")"
"2113","dexter","ittotmat_C","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" c"", "" first"", "" last"", "" ps"")"
"2114","dexter","ss_table_enorm_C","c(""const arma::ivec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" a"", "" b"", "" first"", "" last"", "" firstA"", "" lastA"", "" firstB"", "" lastB"")"
"2115","dexter","ss_table_im_C","c(""const arma::ivec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" a"", "" b"", "" c"", "" first"", "" last"", "" firstA"", "" lastA"", "" firstB"", "" lastB"")"
"2116","dexter","sampleNRM2_test","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" theta"", "" b"", "" a"", "" first"", "" last"")"
"2117","dexter","sampleNRM2_item","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" theta"", "" b"", "" a"", "" first"", "" last"")"
"2118","dexter","Escore_C","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" theta"", "" b"", "" a"", "" first"", "" last"")"
"2119","dexter","theta_mle_sec","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" first"", "" last"")"
"2120","dexter","escore_wle","c(""const double "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const int "", ""const int "")","c("" theta"", "" b"", "" a"", "" first"", "" last"", "" nI"", "" max_a"")"
"2121","dexter","theta_wle_sec","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" first"", "" last"")"
"2122","dexter","IJ_c","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "")","c("" theta"", "" b"", "" a"", "" first"", "" last"", "" I"", "" J"", "" logFi"")"
"2123","dexter","PVrecycle","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::vec& "", ""const arma::vec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const double "")","c("" b"", "" a"", "" first"", "" last"", "" mu"", "" sigma"", "" scoretb"", "" A"", "" alpha"")"
"2124","dexter","sampleIM","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" bIM"", "" cIM"", "" a"", "" first"", "" last"", "" scoretab"")"
"2125","dexterMST","bid_c","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" test_id"", "" booklet_id"", "" test_lev"", "" booklet_lev"")"
"2126","dexterMST","make_booklets_unsafe","c(""const IntegerVector& "", ""IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""const IntegerVector& "")","c("" person_id"", "" booklet_id"", "" module_nbr"", "" item_id"", "" item_score"", "" booklet_score"", "" include_rsp"", "" bk_nmod"")"
"2127","dexterMST","suf_stats_nrm_c","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "")","c("" booklet_id"", "" booklet_score"", "" item_id"", "" item_score"", "" nit"", "" max_score"")"
"2128","dexterMST","im_booklet_score","c(""const IntegerVector& "", ""const IntegerVector& "")","c("" person_id"", "" item_score"")"
"2129","dexterMST","suf_stats_im_c","c(""const IntegerVector& "", ""const IntegerVector& "", ""const IntegerVector& "", ""const int "", ""const int "")","c("" booklet_score"", "" item_id"", "" item_score"", "" nit"", "" max_score"")"
"2130","dexterMST","is_connected_C","const IntegerMatrix& "," A"
"2131","dexterMST","Expect","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""/* out */ arma::vec& "")","c("" b"", "" a"", "" bfirst"", "" blast"", "" bmax"", "" nmod"", "" brouting"", "" mnit"", "" mod_min"", "" mod_max"", "" scoretab"", "" E"")"
"2132","springer","NR","c(""arma::mat& "", ""arma::vec& "")","c("" matr1"", "" matr2"")"
"2133","dexterMST","dirichlet","c(""const arma::vec& "", ""arma::vec& "")","c("" alpha"", "" out"")"
"2134","dexterMST","calibrate_Bayes","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""arma::vec& "", ""const arma::vec& "", ""const int "", ""const int "", ""const int "", ""const double "", ""const double "", ""const double "", ""const double "")","c("" a"", "" first"", "" last"", "" bfirst"", "" blast"", "" bmax"", "" bmin"", "" nmod"", "" brouting"", "" mnit"", "" mod_min"", "" mod_max"", "" itb"", "" itnb"", "" sufI"", "" scoretab"", "" b"", "" fixed_b"", "" from"", "" step"", "" ndraws"", "" prior_eta"", "" prior_rho"", "" prior_nu"", "" prior_sigma"")"
"2135","dexterMST","ittotmat_mst","c(""const arma::vec& "", ""const arma::ivec& "", ""const arma::vec& "", ""arma::ivec& "", ""arma::ivec& "", ""const int "", ""const int "", ""const int "", ""const int "", ""arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" b"", "" a"", "" c"", "" first"", "" last"", "" bmin"", "" bmax"", "" nmod"", "" brouting"", "" mnit"", "" mod_min"", "" mod_max"")"
"2136","dexterMST","elsym_C","c(""const int "", ""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const int "", ""const int "", ""const int "", ""const int "", ""const int "")","c("" routing"", "" b"", "" a"", "" first"", "" last"", "" mod_min"", "" mod_max"", "" mnit"", "" max_score"", "" item1_first"", "" aij"", "" item2_first"", "" akl"")"
"2137","dexterMST","prof_enorm","c(""const arma::vec& "", ""const arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const int "", ""arma::ivec& "", ""arma::ivec& "", ""arma::ivec& "", ""const int "", ""const arma::ivec& "")","c("" b"", "" a"", "" first"", "" last"", "" routing"", "" mnit"", "" mod_min"", "" mod_max"", "" max_score"", "" AB"")"
"2138","diffman","differencierRcpp","c(""const int "", ""const int "", ""const IntegerVector "", ""const IntegerVector "", ""const IntegerMatrix "", ""const IntegerMatrix "")","c("" iTailleCible"", "" iSeuil"", "" vNbObsTerritoire"", "" vNbObsCarreaux"", "" mContiguiteT"", "" mContiguiteTC"")"
"2139","diffusr","heat_diffusion_","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double "")","c("" v0"", "" W"", "" t"")"
"2140","diffusr","stoch_col_norm_","const Eigen::MatrixXd& "," W"
"2141","diffusr","laplacian_","const Eigen::MatrixXd& "," W"
"2142","diffusr","node_degrees_","const Eigen::MatrixXd& "," W"
"2143","diffusr","hub_normalize_","const Eigen::MatrixXd& "," W"
"2144","diffusr","mrwr_","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const double "", ""const double "", ""const int "", ""const bool "")","c("" p0"", "" W"", "" r"", "" thresh"", "" niter"", "" do_analytical"")"
"2145","diffusr","neighbors_","c(""const IntegerVector& "", ""const NumericMatrix& "", ""const int "")","c("" node_idxs"", "" W"", "" k"")"
"2146","dina","update_sg","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""double "", ""double "", ""double "", ""double "")","c("" Y"", "" Q"", "" ALPHAS"", "" ss_old"", "" as0"", "" bs0"", "" ag0"", "" bg0"")"
"2147","dina","DINA_Gibbs_cpp","c(""const arma::mat& "", ""const arma::mat& "", ""unsigned int "")","c("" Y"", "" Q"", "" chain_length"")"
"2148","discretecdAlgorithm","CD","c(""int "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::VectorXi> "", ""List "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::VectorXd> "", ""int "", ""double "", ""double "", ""double "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""double "", ""int "")","c("" node"", "" dataSize"", "" data"", "" nlevels"", "" obsIndex_R"", "" eor_nr"", "" eor"", "" lambda_seq"", "" nlam"", "" eps"", "" convLb"", "" qtol"", "" weights"", "" gamma"", "" upperbound"", "" threshold"")"
"2149","discretecdAlgorithm","lambdaMax","c(""int "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""Eigen::Map<Eigen::VectorXi> "", ""List "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""double "")","c("" node"", "" dataSize"", "" data"", "" nlevels"", "" obsIndex_R"", "" weights"", "" gamma"", "" upperbound"")"
"2150","discretecdAlgorithm","DatGen","c(""int "", ""int "", ""Eigen::Map<Eigen::MatrixXi> "", ""IntegerVector "", ""int "", ""List "", ""List "", ""bool "", ""IntegerVector "", ""Eigen::Map<Eigen::VectorXi> "", ""List "")","c("" maxdeg"", "" node"", "" ordex"", "" ts"", "" dataSize"", "" ivn"", "" ivn_vals"", "" ivn_rand"", "" coef_length"", "" nlevels"", "" coef"")"
"2151","disk.frame","hashstr2i","c(""std::vector< std::string > "", ""int "", ""int "", ""int "", ""int "")","c("" x"", "" ngrps"", "" prime1"", "" prime2"", "" prime3"")"
"2152","dmbc","dmbc_mcmc","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" raiD"", "" raix"", "" raing"", "" radalpha"", "" rn"", "" rp"", "" rG"", "" rS"", "" rtotiter"", "" radZ"", "" rgamma_z"", "" reta"", "" rgamma_alpha"", "" rsigma2"", "" rlambda"", "" rhyper_eta_a"", "" rhyper_eta_b"", "" rhyper_sigma2_a"", "" rhyper_sigma2_b"", "" rhyper_lambda"", "" rfamily"", "" rverbose"")"
"2153","dmbc","dmbc_relabel","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" radtheta"", "" radz"", "" radalpha"", "" radeta"", "" radsigma2"", "" radlambda"", "" radprob"", "" raix_ind"", "" rinit"", "" rn"", "" rp"", "" rS"", "" rM"", "" rR"", "" rG"", "" rverbose"")"
"2154","dmbc","dmbc_pack_par","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" radz"", "" radalpha"", "" radlambda"", "" rn"", "" rp"", "" rM"", "" rG"")"
"2155","doc2vec","paragraph2vec_train","c(""const char * "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""int "", ""int "", ""int "")","c("" trainFile"", "" size"", "" cbow"", "" hs"", "" negative"", "" iterations"", "" window"", "" alpha"", "" sample"", "" min_count"", "" threads"", "" trace"")"
"2156","doc2vec","paragraph2vec_save_model","c(""SEXP "", ""std::string "")","c("" ptr"", "" file"")"
"2157","doc2vec","paragraph2vec_load_model","std::string "," file"
"2158","doc2vec","paragraph2vec_dictionary","c(""SEXP "", ""std::string "")","c("" ptr"", "" type"")"
"2159","doc2vec","paragraph2vec_nearest","c(""SEXP "", ""std::string "", ""int "", ""std::string "")","c("" ptr"", "" x"", "" top_n"", "" type"")"
"2160","doc2vec","paragraph2vec_nearest_sentence","c(""SEXP "", ""List "", ""int "")","c("" ptr"", "" x"", "" top_n"")"
"2161","doc2vec","paragraph2vec_embedding","c(""SEXP "", ""std::string "", ""bool "")","c("" ptr"", "" type"", "" normalize"")"
"2162","doc2vec","paragraph2vec_infer","c(""SEXP "", ""List "")","c("" ptr"", "" x"")"
"2163","doc2vec","paragraph2vec_embedding_subset","c(""SEXP "", ""CharacterVector "", ""std::string "", ""bool "")","c("" ptr"", "" x"", "" type"", "" normalize"")"
"2164","dodgr","rcpp_centrality","c(""const DataFrame "", ""const DataFrame "", ""const std::string& "", ""const double "", ""const bool "", ""const int "")","c("" graph"", "" vert_map_in"", "" heap_type"", "" dist_threshold"", "" edge_centrality"", "" sample"")"
"2165","dodgr","rcpp_aggregate_to_sf","c(""const DataFrame& "", ""const DataFrame& "", ""const DataFrame& "")","c("" graph_full"", "" graph_contr"", "" edge_map"")"
"2166","dodgr","rcpp_flows_aggregate_par","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""NumericMatrix "", ""const bool "", ""const double "", ""const std::string "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi_in"", "" flows"", "" norm_sums"", "" tol"", "" heap_type"")"
"2167","dodgr","rcpp_flows_disperse_par","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""const double& "", ""std::string "")","c("" graph"", "" vert_map_in"", "" fromi"", "" k"", "" dens"", "" tol"", "" heap_type"")"
"2168","dodgr","rcpp_flows_si","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""const bool "", ""const double "", ""const std::string "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi_in"", "" kvec"", "" dens_from"", "" dens_to"", "" norm_sums"", "" tol"", "" heap_type"")"
"2169","dodgr","rcpp_fundamental_cycles","c(""DataFrame "", ""DataFrame "")","c("" graph"", "" verts"")"
"2170","dodgr","rcpp_contract_graph","c(""const DataFrame& "", ""Nullable <StringVector>& "")","c("" graph"", "" vertlist_in"")"
"2171","dodgr","rcpp_merge_cols","DataFrame "," graph"
"2172","dodgr","rcpp_sample_graph","c(""DataFrame "", ""unsigned int "")","c("" graph"", "" nverts_to_sample"")"
"2173","dodgr","rcpp_get_component_vector","const DataFrame& "," graph"
"2174","dodgr","rcpp_get_sp_dists_par","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""const std::string& "", ""const bool "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi_in"", "" heap_type"", "" is_spatial"")"
"2175","dodgr","rcpp_get_sp_dists_paired_par","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""const std::string& "", ""const bool "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi"", "" heap_type"", "" is_spatial"")"
"2176","dodgr","rcpp_get_iso","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""NumericVector "", ""const std::string& "")","c("" graph"", "" vert_map_in"", "" fromi"", "" dlim"", "" heap_type"")"
"2177","dodgr","rcpp_get_sp_dists","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""const std::string& "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi_in"", "" heap_type"")"
"2178","dodgr","rcpp_get_paths","c(""const DataFrame "", ""const DataFrame "", ""IntegerVector "", ""IntegerVector "", ""const std::string& "")","c("" graph"", "" vert_map_in"", "" fromi"", "" toi_in"", "" heap_type"")"
"2179","dodgr","rcpp_gen_hash","c(""const int "", ""const size_t "")","c("" n"", "" hash_len"")"
"2180","dodgr","rcpp_sf_as_network","c(""const List& "", ""const DataFrame& "")","c("" sf_lines"", "" pr"")"
"2181","dodgr","rcpp_points_index_par","c(""const DataFrame& "", ""DataFrame& "")","c("" xy"", "" pts"")"
"2182","dodgr","rcpp_route_times","c(""const DataFrame "", ""bool "", ""int "")","c("" graph"", "" left_side"", "" turn_penalty"")"
"2183","dosearch","initialize_csisearch","c(""const std::vector<int>& "", ""const std::vector<int>& "", ""const StringVector& "", ""const List& "", ""const std::vector<int>& "", ""const List& "", ""const List& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const std::vector<int>& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" dir_lhs"", "" dir_rhs"", "" lab"", "" p_list"", "" q_vec"", "" label_map"", "" local_csi"", "" con_vars"", "" intv_vars"", "" n"", "" time_limit"", "" rules"", "" benchmark"", "" draw_derivation"", "" draw_all"", "" formula"", "" heuristic"", "" cache"", "" verbose"")"
"2184","dosearch","initialize_dosearch","c(""const std::vector<int>& "", ""const std::vector<int>& "", ""const std::vector<int>& "", ""const std::vector<int>& "", ""const StringVector& "", ""const List& "", ""const std::vector<int>& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const std::vector<int>& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const bool& "", ""const char& "", ""const bool& "")","c("" dir_lhs"", "" dir_rhs"", "" bi_lhs"", "" bi_rhs"", "" lab"", "" p_list"", "" q_vec"", "" n"", "" tr"", "" sb"", "" md_s"", "" md_p"", "" time_limit"", "" rules"", "" benchmark"", "" draw_derivation"", "" draw_all"", "" formula"", "" heuristic"", "" md_sym"", "" verbose"")"
"2185","downscaledl","rcpparmabasic_outerproduct","const arma::colvec& "," x"
"2186","downscaledl","rcpparmabasic_innerproduct","const arma::colvec& "," x"
"2187","downscaledl","rcpparmabasic_bothproducts","const arma::colvec& "," x"
"2188","dracor","dracodecode","c(""RawVector "", ""const int "")","c("" data"", "" index_offset"")"
"2189","grf","compute_split_frequencies","c(""List "", ""size_t "")","c("" forest_object"", "" max_depth"")"
"2190","grf","compute_weights","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"")"
"2191","grf","compute_weights_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "")","c("" forest_object"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"")"
"2192","grf","merge","const List "," forest_objects"
"2193","drf","gini_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""std::vector<size_t> "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "", ""size_t "", ""double "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"", "" num_features"", "" bandwidth"", "" node_scaling"")"
"2194","drf","fourier_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""std::vector<size_t> "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "", ""size_t "", ""double "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"", "" num_features"", "" bandwidth"", "" node_scaling"")"
"2195","grf","regression_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "", ""unsigned int "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"", "" estimate_variance"")"
"2196","grf","regression_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" num_threads"", "" estimate_variance"")"
"2197","dynmix","F","c(""vec "", ""int "", ""mat "")","c("" x"", "" N"", "" Rx"")"
"2198","dynmix","J","c(""vec "", ""int "", ""mat "")","c("" x"", "" m"", "" Rxj"")"
"2199","dynmix","newt","c(""vec "", ""int "", ""mat "")","c("" x0"", "" Nn"", "" Rxn"")"
"2200","dynmix","mKIapprox","c(""mat "", ""mat "")","c("" w"", "" vold"")"
"2201","dynsbm","dynsbmcore","c(""int "", ""int "", ""int "", ""NumericVector "", ""const IntegerMatrix& "", ""std::string "", ""int "", ""IntegerVector "", ""int "", ""int "", ""bool "", ""bool "", ""bool "")","c("" T"", "" N"", "" Q"", "" Yasvector"", "" present"", "" edgetype"", "" K"", "" clustering"", "" nbit"", "" nbthreads"", "" isdirected"", "" withselfloop"", "" frozen"")"
"2202","eddington","E_num","NumericVector& "," rides"
"2203","eddington","E_cum","NumericVector& "," rides"
"2204","eddington","E_next","NumericVector& "," rides"
"2205","edina","edina_Gibbs_Q","c(""const arma::mat& "", ""unsigned int "", ""unsigned int "", ""unsigned int "")","c("" Y"", "" K"", "" burnin"", "" chain_length"")"
"2206","edina","check_identifiability","const arma::mat& "," Q"
"2207","eimpute","vec2mat","c(""Eigen::VectorXd "", ""int "", ""int "")","c("" x"", "" type"", "" num"")"
"2208","eimpute","biscale_alt","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""double "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""bool "", ""bool "", ""bool "", ""bool "")","c("" x"", "" ind"", "" obsrow"", "" obscol"", "" max_it"", "" tol"", "" alpha"", "" beta"", "" tau"", "" gamma"", "" row_mean"", "" col_mean"", "" row_std"", "" col_std"")"
"2209","eimpute","trun_svd","c(""Eigen::MatrixXd "", ""int "")","c("" X"", "" k"")"
"2210","eimpute","kkt_fix","c(""Eigen::MatrixXi& "", ""Eigen::VectorXd& "", ""int "", ""int "", ""int "", ""int "", ""double "", ""int "")","c("" omega"", "" X"", "" m"", "" n"", "" rank"", "" max_it"", "" tol"", "" type"")"
"2211","eimpute","cv_rank","c(""Eigen::MatrixXi& "", ""Eigen::VectorXd& "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""int "")","c("" omega"", "" X"", "" m"", "" n"", "" r_min"", "" r_max"", "" n_fold"", "" max_it"", "" tol"", "" type"")"
"2212","eimpute","ic_rank","c(""Eigen::MatrixXi& "", ""Eigen::VectorXd& "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""int "")","c("" omega"", "" X"", "" m"", "" n"", "" r_min"", "" r_max"", "" max_it"", "" tol"", "" type"")"
"2213","elfDistr","cpp_dkwcwg","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" vx"", "" valpha"", "" vbeta"", "" vgamma"", "" va"", "" vb"", "" log_prob"")"
"2214","elfDistr","cpp_pkwcwg","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" vx"", "" valpha"", "" vbeta"", "" vgamma"", "" va"", "" vb"", "" lower_tail"", "" log_prob"")"
"2215","elfDistr","cpp_qkwcwg","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" vp"", "" valpha"", "" vbeta"", "" vgamma"", "" va"", "" vb"", "" lower_tail"", "" log_prob"")"
"2216","elfDistr","cpp_rkwcwg","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" valpha"", "" vbeta"", "" vgamma"", "" va"", "" vb"")"
"2217","empichar","ecf_re_cpp","c(""const arma::mat& "", ""const arma::mat& "")","c("" t"", "" smp"")"
"2218","empichar","ecf_im_cpp","c(""const arma::mat& "", ""const arma::mat& "")","c("" t"", "" smp"")"
"2219","empichar","ecf_mod_cpp","c(""const arma::mat& "", ""const arma::mat& "")","c("" t"", "" smp"")"
"2220","empichar","ecf_cpp","c(""const arma::mat& "", ""const arma::mat& "")","c("" t"", "" smp"")"
"2221","emstreeR","mlpack_mst","arma::mat& "," data"
"2222","epinetr","recMask","LogicalVector "," bvec"
"2223","epinetr","rng","c(""int "", ""unsigned "")","c("" n"", "" seed"")"
"2224","epinetr","serialMat","c(""NumericMatrix "", ""StringVector "", ""bool "")","c("" x"", "" filename"", "" append"")"
"2225","epinetr","getSerialMat","StringVector "," filename"
"2226","ess","dfs","c(""List "", ""std::string "")","c("" adj"", "" root"")"
"2227","jti","mcs","c(""List& "", ""std::string "", ""bool "")","c("" adj"", "" start_node"", "" check"")"
"2228","jti","perfect_cliques","VVS& "," x"
"2229","jti","perfect_separators","VVS& "," x"
"2230","jti","parents","c(""VS "", ""List "")","c("" po"", "" ps"")"
"2231","jti","rip","c(""List& "", ""std::string "", ""bool "")","c("" adj"", "" start_node"", "" check"")"
"2232","molic","set_intersect","c(""VS& "", ""VS& "")","c("" v1"", "" v2"")"
"2233","molic","set_union","c(""VS& "", ""VS& "")","c("" v1"", "" v2"")"
"2234","molic","set_diff","c(""VS& "", ""VS& "")","c("" v1"", "" v2"")"
"2235","molic","set_eq","c(""VS& "", ""VS& "")","c("" v1"", "" v2"")"
"2236","molic","set_in","c(""std::string& "", ""VS& "")","c("" a"", "" b"")"
"2237","molic","set_issubeq","c(""VS& "", ""VS& "")","c("" a"", "" b"")"
"2238","molic","set_any","std::vector<bool>& "," v"
"2239","estimatr","ht_covar_partial","c(""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "")","c("" y1"", "" y0"", "" p10"", "" p1"", "" p0"")"
"2240","estimatr","ht_var_partial","c(""const Eigen::VectorXd& "", ""const Eigen::MatrixXd& "")","c("" y"", "" p"")"
"2241","estimatr","demeanMat2","c(""const Eigen::MatrixXd& "", ""const IntegerMatrix& "", ""const NumericVector& "", ""const int& "", ""const double& "")","c("" what"", "" fes"", "" weights"", "" start_col"", "" eps"")"
"2242","estimatr","AtA","const Eigen::MatrixXd& "," A"
"2243","estimatr","Kr","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" A"", "" B"")"
"2244","estimatr","lm_solver","c(""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const bool& "")","c("" X"", "" y"", "" try_cholesky"")"
"2245","estimatr","lm_variance","c(""Eigen::Map<Eigen::MatrixXd>& "", ""const Nullable<NumericMatrix>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const Eigen::Map<Eigen::MatrixXd>& "", ""const double "", ""const Nullable<IntegerVector>& "", ""const int& "", ""const bool& "", ""const String "", ""const std::vector<bool>& "", ""const int& "")","c("" X"", "" Xunweighted"", "" XtX_inv"", "" ei"", "" weight_mean"", "" cluster"", "" J"", "" ci"", "" se_type"", "" which_covs"", "" fe_rank"")"
"2246","estimatr","naomitwhy","c(""DataFrame "", ""Function "")","c("" df"", "" recursive_subset"")"
"2247","estudy2","getMultiDayRates","c(""NumericMatrix "", ""bool "", ""bool "")","c("" prices"", "" continuous"", "" Open"")"
"2248","estudy2","getSingleDayRates","c(""NumericMatrix "", ""bool "")","c("" prices"", "" continuous"")"
"2249","exactextractr","CPP_exact_extract","c(""S4& "", ""const RawVector& "")","c("" rast"", "" wkb"")"
"2250","exactextractr","CPP_coverage_fraction","c(""S4& "", ""const RawVector& "", ""bool "")","c("" rast"", "" wkb"", "" crop"")"
"2251","exactextractr","CPP_stats","c(""S4& "", ""Nullable<S4> "", ""const RawVector& "", ""const StringVector& "", ""int "", ""const Nullable<NumericVector>& "")","c("" rast"", "" weights"", "" wkb"", "" stats"", "" max_cells_in_memory"", "" quantiles"")"
"2252","exactextractr","CPP_resample","c(""S4& "", ""S4& "", ""const StringVector& "")","c("" rast_in"", "" rast_out"", "" stat"")"
"2253","exdex","arma_rowSums_minus_col","c(""const arma::mat& "", ""const int& "")","c("" x"", "" j"")"
"2254","exdex","cpp_log0const","c(""const arma::mat& "", ""const double& "")","c("" x"", "" constant"")"
"2255","exdex","cpp_col_ms","arma::mat const& "," x"
"2256","exdex","cpp_sigma2hat_dj","c(""const List& "", ""const int& "", ""const int& "", ""const int& "", ""const String& "", ""const String& "")","c("" all_max"", "" b"", "" kn"", "" m"", "" bias_adjust"", "" which_dj"")"
"2257","exif","read_exif_","std::vector < std::string > "," files"
"2258","expSBM","cpp_expSBM_ELBO","c(""unsigned int "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""bool "", ""bool "", ""bool "")","c("" N"", "" edgelist"", "" Z"", "" lambda"", "" mu"", "" nu"", "" directed"", "" trunc"", "" verbose"")"
"2259","expSBM","cpp_expSBM_EM","c(""unsigned int "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""bool "", ""bool "", ""double "", ""unsigned int "", ""bool "")","c("" N"", "" edgelist"", "" Z"", "" lambda"", "" mu"", "" nu"", "" directed"", "" trunc"", "" tol"", "" n_iter_max"", "" verbose"")"
"2260","extraDistr","cpp_dbern","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" prob"", "" log_prob"")"
"2261","extraDistr","cpp_pbern","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" prob"", "" lower_tail"", "" log_prob"")"
"2262","extraDistr","cpp_qbern","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" prob"", "" lower_tail"", "" log_prob"")"
"2263","extraDistr","cpp_rbern","c(""const int& "", ""const NumericVector& "")","c("" n"", "" prob"")"
"2264","extraDistr","cpp_dbbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" alpha"", "" beta"", "" log_prob"")"
"2265","extraDistr","cpp_pbbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2266","extraDistr","cpp_rbbinom","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" alpha"", "" beta"")"
"2267","extraDistr","cpp_dbnbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" alpha"", "" beta"", "" log_prob"")"
"2268","extraDistr","cpp_pbnbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2269","extraDistr","cpp_rbnbinom","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" alpha"", "" beta"")"
"2270","extraDistr","cpp_dbetapr","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" sigma"", "" log_prob"")"
"2271","extraDistr","cpp_pbetapr","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2272","extraDistr","cpp_qbetapr","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" alpha"", "" beta"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2273","extraDistr","cpp_rbetapr","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" alpha"", "" beta"", "" sigma"")"
"2274","extraDistr","cpp_dbhatt","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" a"", "" log_prob"")"
"2275","extraDistr","cpp_pbhatt","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" a"", "" lower_tail"", "" log_prob"")"
"2276","extraDistr","cpp_rbhatt","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"", "" a"")"
"2277","extraDistr","cpp_dfatigue","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" mu"", "" log_prob"")"
"2278","extraDistr","cpp_pfatigue","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" mu"", "" lower_tail"", "" log_prob"")"
"2279","extraDistr","cpp_qfatigue","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" alpha"", "" beta"", "" mu"", "" lower_tail"", "" log_prob"")"
"2280","extraDistr","cpp_rfatigue","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" alpha"", "" beta"", "" mu"")"
"2281","extraDistr","cpp_dbnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" y"", "" mu1"", "" mu2"", "" sigma1"", "" sigma2"", "" rho"", "" log_prob"")"
"2282","extraDistr","cpp_rbnorm","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu1"", "" mu2"", "" sigma1"", "" sigma2"", "" rho"")"
"2283","extraDistr","cpp_dbpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" y"", "" a"", "" b"", "" c"", "" log_prob"")"
"2284","extraDistr","cpp_rbpois","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" a"", "" b"", "" c"")"
"2285","extraDistr","cpp_rcatlp","c(""const int& "", ""const NumericMatrix& "")","c("" n"", "" log_prob"")"
"2286","extraDistr","cpp_dcat","c(""const NumericVector& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" prob"", "" log_prob"")"
"2287","extraDistr","cpp_pcat","c(""const NumericVector& "", ""const NumericMatrix& "", ""bool "", ""bool "")","c("" x"", "" prob"", "" lower_tail"", "" log_prob"")"
"2288","extraDistr","cpp_qcat","c(""const NumericVector& "", ""const NumericMatrix& "", ""const bool& "", ""const bool& "")","c("" p"", "" prob"", "" lower_tail"", "" log_prob"")"
"2289","extraDistr","cpp_rcat","c(""const int& "", ""const NumericMatrix& "")","c("" n"", "" prob"")"
"2290","extraDistr","cpp_ddirichlet","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" alpha"", "" log_prob"")"
"2291","extraDistr","cpp_rdirichlet","c(""const int& "", ""const NumericMatrix& "")","c("" n"", "" alpha"")"
"2292","extraDistr","cpp_ddirmnom","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" size"", "" alpha"", "" log_prob"")"
"2293","extraDistr","cpp_rdirmnom","c(""const int& "", ""const NumericVector& "", ""const NumericMatrix& "")","c("" n"", "" size"", "" alpha"")"
"2294","extraDistr","cpp_ddgamma","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" shape"", "" scale"", "" log_prob"")"
"2295","extraDistr","cpp_ddlaplace","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" location"", "" scale"", "" log_prob"")"
"2296","extraDistr","cpp_pdlaplace","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" location"", "" scale"", "" lower_tail"", "" log_prob"")"
"2297","extraDistr","cpp_rdlaplace","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" location"", "" scale"")"
"2298","extraDistr","cpp_ddnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" log_prob"")"
"2299","extraDistr","cpp_ddunif","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" min"", "" max"", "" log_prob"")"
"2300","extraDistr","cpp_pdunif","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" min"", "" max"", "" lower_tail"", "" log_prob"")"
"2301","extraDistr","cpp_qdunif","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" min"", "" max"", "" lower_tail"", "" log_prob"")"
"2302","extraDistr","cpp_rdunif","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" min"", "" max"")"
"2303","extraDistr","cpp_ddweibull","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" q"", "" beta"", "" log_prob"")"
"2304","extraDistr","cpp_pdweibull","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" q"", "" beta"", "" lower_tail"", "" log_prob"")"
"2305","extraDistr","cpp_qdweibull","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" q"", "" beta"", "" lower_tail"", "" log_prob"")"
"2306","extraDistr","cpp_rdweibull","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" q"", "" beta"")"
"2307","extraDistr","cpp_dfrechet","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" lambda"", "" mu"", "" sigma"", "" log_prob"")"
"2308","extraDistr","cpp_pfrechet","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" lambda"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2309","extraDistr","cpp_qfrechet","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" lambda"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2310","extraDistr","cpp_rfrechet","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" lambda"", "" mu"", "" sigma"")"
"2311","extraDistr","cpp_dgpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" log_prob"")"
"2312","extraDistr","cpp_pgpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2313","extraDistr","cpp_rgpois","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" alpha"", "" beta"")"
"2314","extraDistr","cpp_dgev","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" xi"", "" log_prob"")"
"2315","extraDistr","cpp_pgev","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""bool "", ""bool "")","c("" x"", "" mu"", "" sigma"", "" xi"", "" lower_tail"", "" log_prob"")"
"2316","extraDistr","cpp_qgev","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""bool "", ""bool "")","c("" p"", "" mu"", "" sigma"", "" xi"", "" lower_tail"", "" log_prob"")"
"2317","extraDistr","cpp_rgev","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"", "" xi"")"
"2318","extraDistr","cpp_dgompertz","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""bool "")","c("" x"", "" a"", "" b"", "" log_prob"")"
"2319","extraDistr","cpp_pgompertz","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2320","extraDistr","cpp_qgompertz","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2321","extraDistr","cpp_rgompertz","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" a"", "" b"")"
"2322","extraDistr","cpp_dgpd","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" xi"", "" log_prob"")"
"2323","extraDistr","cpp_pgpd","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" xi"", "" lower_tail"", "" log_prob"")"
"2324","extraDistr","cpp_qgpd","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" mu"", "" sigma"", "" xi"", "" lower_tail"", "" log_prob"")"
"2325","extraDistr","cpp_rgpd","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"", "" xi"")"
"2326","extraDistr","cpp_dgumbel","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" log_prob"")"
"2327","extraDistr","cpp_pgumbel","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2328","extraDistr","cpp_qgumbel","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2329","extraDistr","cpp_rgumbel","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"")"
"2330","extraDistr","cpp_dhcauchy","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" sigma"", "" log_prob"")"
"2331","extraDistr","cpp_phcauchy","c(""const NumericVector& "", ""const NumericVector& "", ""bool "", ""bool "")","c("" x"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2332","extraDistr","cpp_qhcauchy","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2333","extraDistr","cpp_rhcauchy","c(""const int& "", ""const NumericVector& "")","c("" n"", "" sigma"")"
"2334","extraDistr","cpp_dhnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" sigma"", "" log_prob"")"
"2335","extraDistr","cpp_phnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2336","extraDistr","cpp_qhnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2337","extraDistr","cpp_rhnorm","c(""const int& "", ""const NumericVector& "")","c("" n"", "" sigma"")"
"2338","extraDistr","cpp_dht","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" nu"", "" sigma"", "" log_prob"")"
"2339","extraDistr","cpp_pht","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" nu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2340","extraDistr","cpp_qht","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" nu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2341","extraDistr","cpp_rht","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" nu"", "" sigma"")"
"2342","extraDistr","cpp_dhuber","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" epsilon"", "" log_prob"")"
"2343","extraDistr","cpp_phuber","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" epsilon"", "" lower_tail"", "" log_prob"")"
"2344","extraDistr","cpp_qhuber","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" mu"", "" sigma"", "" epsilon"", "" lower_tail"", "" log_prob"")"
"2345","extraDistr","cpp_rhuber","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"", "" epsilon"")"
"2346","extraDistr","cpp_dinvgamma","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" log_prob"")"
"2347","extraDistr","cpp_pinvgamma","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2348","extraDistr","cpp_dkumar","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" log_prob"")"
"2349","extraDistr","cpp_pkumar","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2350","extraDistr","cpp_qkumar","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2351","extraDistr","cpp_rkumar","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" a"", "" b"")"
"2352","extraDistr","cpp_dlaplace","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" log_prob"")"
"2353","extraDistr","cpp_plaplace","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2354","extraDistr","cpp_qlaplace","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2355","extraDistr","cpp_rlaplace","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"")"
"2356","extraDistr","cpp_dlst","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" nu"", "" mu"", "" sigma"", "" log_prob"")"
"2357","extraDistr","cpp_plst","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" nu"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2358","extraDistr","cpp_qlst","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" nu"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2359","extraDistr","cpp_rlst","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" nu"", "" mu"", "" sigma"")"
"2360","extraDistr","cpp_dlgser","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" theta"", "" log_prob"")"
"2361","extraDistr","cpp_plgser","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" theta"", "" lower_tail"", "" log_prob"")"
"2362","extraDistr","cpp_qlgser","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" theta"", "" lower_tail"", "" log_prob"")"
"2363","extraDistr","cpp_rlgser","c(""const int& "", ""const NumericVector& "")","c("" n"", "" theta"")"
"2364","extraDistr","cpp_dlomax","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" lambda"", "" kappa"", "" log_prob"")"
"2365","extraDistr","cpp_plomax","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" lambda"", "" kappa"", "" lower_tail"", "" log_prob"")"
"2366","extraDistr","cpp_qlomax","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" lambda"", "" kappa"", "" lower_tail"", "" log_prob"")"
"2367","extraDistr","cpp_rlomax","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" lambda"", "" kappa"")"
"2368","extraDistr","cpp_dmixnorm","c(""const NumericVector& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" alpha"", "" log_prob"")"
"2369","extraDistr","cpp_pmixnorm","c(""const NumericVector& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" alpha"", "" lower_tail"", "" log_prob"")"
"2370","extraDistr","cpp_rmixnorm","c(""const int& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericMatrix& "")","c("" n"", "" mu"", "" sigma"", "" alpha"")"
"2371","extraDistr","cpp_dmixpois","c(""const NumericVector& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" lambda"", "" alpha"", "" log_prob"")"
"2372","extraDistr","cpp_pmixpois","c(""const NumericVector& "", ""const NumericMatrix& "", ""const NumericMatrix& "", ""const bool& "", ""const bool& "")","c("" x"", "" lambda"", "" alpha"", "" lower_tail"", "" log_prob"")"
"2373","extraDistr","cpp_rmixpois","c(""const int& "", ""const NumericMatrix& "", ""const NumericMatrix& "")","c("" n"", "" lambda"", "" alpha"")"
"2374","extraDistr","cpp_dmnom","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" log_prob"")"
"2375","extraDistr","cpp_rmnom","c(""const int& "", ""const NumericVector& "", ""const NumericMatrix& "")","c("" n"", "" size"", "" prob"")"
"2376","extraDistr","cpp_dmvhyper","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" n"", "" k"", "" log_prob"")"
"2377","extraDistr","cpp_rmvhyper","c(""const int& "", ""const NumericMatrix& "", ""const NumericVector& "")","c("" nn"", "" n"", "" k"")"
"2378","extraDistr","cpp_dnhyper","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" n"", "" m"", "" r"", "" log_prob"")"
"2379","extraDistr","cpp_pnhyper","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" n"", "" m"", "" r"", "" lower_tail"", "" log_prob"")"
"2380","extraDistr","cpp_qnhyper","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" n"", "" m"", "" r"", "" lower_tail"", "" log_prob"")"
"2381","extraDistr","cpp_rnhyper","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" nn"", "" n"", "" m"", "" r"")"
"2382","extraDistr","cpp_dnsbeta","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" lower"", "" upper"", "" log_prob"")"
"2383","extraDistr","cpp_pnsbeta","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2384","extraDistr","cpp_qnsbeta","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" alpha"", "" beta"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2385","extraDistr","cpp_rnsbeta","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" alpha"", "" beta"", "" lower"", "" upper"")"
"2386","extraDistr","cpp_dpareto","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" log_prob"")"
"2387","extraDistr","cpp_ppareto","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2388","extraDistr","cpp_qpareto","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" a"", "" b"", "" lower_tail"", "" log_prob"")"
"2389","extraDistr","cpp_rpareto","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" a"", "" b"")"
"2390","extraDistr","cpp_dpower","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" log_prob"")"
"2391","extraDistr","cpp_ppower","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2392","extraDistr","cpp_qpower","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" alpha"", "" beta"", "" lower_tail"", "" log_prob"")"
"2393","extraDistr","cpp_rpower","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" alpha"", "" beta"")"
"2394","extraDistr","cpp_dprop","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" mean"", "" prior"", "" log_prob"")"
"2395","extraDistr","cpp_pprop","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" mean"", "" prior"", "" lower_tail"", "" log_prob"")"
"2396","extraDistr","cpp_qprop","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" size"", "" mean"", "" prior"", "" lower_tail"", "" log_prob"")"
"2397","extraDistr","cpp_rprop","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" mean"", "" prior"")"
"2398","extraDistr","cpp_rsign","const int& "," n"
"2399","extraDistr","cpp_drayleigh","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" sigma"", "" log_prob"")"
"2400","extraDistr","cpp_prayleigh","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2401","extraDistr","cpp_qrayleigh","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2402","extraDistr","cpp_rrayleigh","c(""const int& "", ""const NumericVector& "")","c("" n"", "" sigma"")"
"2403","extraDistr","cpp_dsgomp","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""bool "")","c("" x"", "" b"", "" eta"", "" log_prob"")"
"2404","extraDistr","cpp_psgomp","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" b"", "" eta"", "" lower_tail"", "" log_prob"")"
"2405","extraDistr","cpp_rsgomp","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" b"", "" eta"")"
"2406","extraDistr","cpp_dskellam","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu1"", "" mu2"", "" log_prob"")"
"2407","extraDistr","cpp_rskellam","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu1"", "" mu2"")"
"2408","extraDistr","cpp_dslash","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" log_prob"")"
"2409","extraDistr","cpp_pslash","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" lower_tail"", "" log_prob"")"
"2410","extraDistr","cpp_rslash","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"")"
"2411","extraDistr","cpp_dtriang","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" c"", "" log_prob"")"
"2412","extraDistr","cpp_ptriang","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" a"", "" b"", "" c"", "" lower_tail"", "" log_prob"")"
"2413","extraDistr","cpp_qtriang","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" a"", "" b"", "" c"", "" lower_tail"", "" log_prob"")"
"2414","extraDistr","cpp_rtriang","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" a"", "" b"", "" c"")"
"2415","extraDistr","cpp_dtbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" lower"", "" upper"", "" log_prob"")"
"2416","extraDistr","cpp_ptbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2417","extraDistr","cpp_qtbinom","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" size"", "" prob"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2418","extraDistr","cpp_rtbinom","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" prob"", "" lower"", "" upper"")"
"2419","extraDistr","cpp_dtnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" lower"", "" upper"", "" log_prob"")"
"2420","extraDistr","cpp_ptnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" sigma"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2421","extraDistr","cpp_qtnorm","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" mu"", "" sigma"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2422","extraDistr","cpp_rtnorm","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" sigma"", "" lower"", "" upper"")"
"2423","extraDistr","cpp_dtpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" lambda"", "" lower"", "" upper"", "" log_prob"")"
"2424","extraDistr","cpp_ptpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" lambda"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2425","extraDistr","cpp_qtpois","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" lambda"", "" lower"", "" upper"", "" lower_tail"", "" log_prob"")"
"2426","extraDistr","cpp_rtpois","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" lambda"", "" lower"", "" upper"")"
"2427","extraDistr","cpp_qtlambda","c(""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" lambda"", "" lower_tail"", "" log_prob"")"
"2428","extraDistr","cpp_rtlambda","c(""const int& "", ""const NumericVector& "")","c("" n"", "" lambda"")"
"2429","extraDistr","cpp_dwald","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" mu"", "" lambda"", "" log_prob"")"
"2430","extraDistr","cpp_pwald","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" mu"", "" lambda"", "" lower_tail"", "" log_prob"")"
"2431","extraDistr","cpp_rwald","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" mu"", "" lambda"")"
"2432","extraDistr","cpp_dzib","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" pi"", "" log_prob"")"
"2433","extraDistr","cpp_pzib","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" pi"", "" lower_tail"", "" log_prob"")"
"2434","extraDistr","cpp_qzib","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" size"", "" prob"", "" pi"", "" lower_tail"", "" log_prob"")"
"2435","extraDistr","cpp_rzib","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" prob"", "" pi"")"
"2436","extraDistr","cpp_dzinb","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" pi"", "" log_prob"")"
"2437","extraDistr","cpp_pzinb","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" size"", "" prob"", "" pi"", "" lower_tail"", "" log_prob"")"
"2438","extraDistr","cpp_qzinb","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" size"", "" prob"", "" pi"", "" lower_tail"", "" log_prob"")"
"2439","extraDistr","cpp_rzinb","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" size"", "" prob"", "" pi"")"
"2440","extraDistr","cpp_dzip","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "")","c("" x"", "" lambda"", "" pi"", "" log_prob"")"
"2441","extraDistr","cpp_pzip","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" x"", "" lambda"", "" pi"", "" lower_tail"", "" log_prob"")"
"2442","extraDistr","cpp_qzip","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const bool& "")","c("" p"", "" lambda"", "" pi"", "" lower_tail"", "" log_prob"")"
"2443","extraDistr","cpp_rzip","c(""const int& "", ""const NumericVector& "", ""const NumericVector& "")","c("" n"", "" lambda"", "" pi"")"
"2444","exuber","rls_gsadf","c(""const arma::mat& "", ""int "", ""int "")","c("" yxmat"", "" min_win"", "" lag"")"
"2445","fDMA","tvpcpp","c(""mat "", ""vec "", ""mat "", ""mat "", ""mat "", ""double "", ""double "", ""Nullable<double> "")","c("" x"", "" y"", "" xe"", "" theta"", "" E"", "" lambda"", "" V"", "" kappa"")"
"2446","fRLR","frlr1","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" R_X"", "" R_Y"", "" R_COV"")"
"2447","fRLR","frlr","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" R_X"", "" R_Y"", "" R_COV"")"
"2448","fRLR","frlr2","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" R_X"", "" R_idx1"", "" R_idx2"", "" R_Y"", "" R_COV"")"
"2449","fabMix","compute_A_B_G_D_and_simulate_mu_Lambda","c(""arma::mat "", ""List "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" SigmaINV"", "" suff_statistics"", "" OmegaINV"", "" K"", "" priorConst1"", "" T_INV"", "" v_r"")"
"2450","fabMix","compute_A_B_G_D_and_simulate_mu_Lambda_Sj","c(""arma::cube "", ""List "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" SigmaINV"", "" suff_statistics"", "" OmegaINV"", "" K"", "" priorConst1"", "" T_INV"", "" v_r"")"
"2451","fabMix","compute_A_B_G_D_and_simulate_mu_Lambda_CCU","c(""arma::mat "", ""List "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" SigmaINV"", "" suff_statistics"", "" OmegaINV"", "" K"", "" priorConst1"", "" T_INV"", "" v_r"")"
"2452","fabMix","compute_A_B_G_D_and_simulate_mu_Lambda_CUU","c(""arma::cube "", ""List "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "")","c("" SigmaINV"", "" suff_statistics"", "" OmegaINV"", "" K"", "" priorConst1"", "" T_INV"", "" v_r"")"
"2453","facilitation","simulation","c(""double "", ""int "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""IntegerVector "", ""DataFrame "", ""bool "", ""double "", ""double "", ""int "", ""double "", ""int "")","c("" maxtime"", "" num_pops"", "" num_stages"", "" parameters"", "" interactionsD"", "" interactionsG"", "" interactionsR"", "" init"", "" history"", "" restore"", "" w"", "" h"", "" bcond"", "" starttime"", "" maxpop"")"
"2454","fastJT","fastJT","c(""NumericMatrix "", ""NumericMatrix "", ""bool "", ""int "", ""bool "")","c("" X"", "" Y"", "" outTopNFlag"", "" outItemNo"", "" standardized"")"
"2455","fastJT","fastJTmp","c(""NumericMatrix "", ""NumericMatrix "", ""bool "", ""int "", ""int "", ""bool "")","c("" X"", "" Y"", "" outTopNFlag"", "" numThreads"", "" outItemNo"", "" standardized"")"
"2456","fastTextR","clean_text","std::vector<std::string> "," x"
"2457","fastTextR","Rft_model_type","SEXP "," ft"
"2458","fastTextR","Rft_load_model","std::string "," file_name"
"2459","fastTextR","Rft_save_model","c(""SEXP "", ""std::string "")","c("" ft"", "" file_name"")"
"2460","fastTextR","Rft_save_output","c(""SEXP "", ""std::string "")","c("" ft"", "" file_name"")"
"2461","fastTextR","Rft_save_vectors","c(""SEXP "", ""std::string "")","c("" ft"", "" file_name"")"
"2462","fastTextR","Rft_train","SEXP "," control"
"2463","fastTextR","Rft_dict_get_nwords","SEXP "," ft"
"2464","fastTextR","Rft_dict_get_nlabels","SEXP "," ft"
"2465","fastTextR","Rft_dict_get_ntokens","SEXP "," ft"
"2466","fastTextR","Rft_predict_vec","c(""SEXP "", ""std::vector<std::string> "", ""int32_t "", ""float "")","c("" ft"", "" newdata"", "" k"", "" threshold"")"
"2467","fastTextR","Rft_test","c(""SEXP "", ""std::string "", ""int32_t "", ""float "")","c("" ft"", "" file_name"", "" k"", "" threshold"")"
"2468","fastTextR","Rft_all_words","SEXP "," ft"
"2469","fastTextR","Rft_word_vectors","c(""SEXP "", ""std::vector<std::string> "")","c("" ft"", "" words"")"
"2470","fastTextR","Rft_nearest_neighbors","c(""SEXP "", ""const std::string& "", ""int32_t "")","c("" ft"", "" word"", "" k"")"
"2471","fastTextR","Rft_analogies","c(""SEXP "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""int32_t "")","c("" ft"", "" wordA"", "" wordB"", "" wordC"", "" k"")"
"2472","fastcmh","main_fastcmh2","c(""String "", ""String "", ""String "", ""NumericVector "", ""NumericVector "", ""LogicalVector "", ""LogicalVector "", ""LogicalVector "", ""LogicalVector "")","c("" xfilenameR"", "" yfilenameR"", "" cfilenameR"", "" alphaR"", "" lmaxR"", "" showProcessingR"", "" saveAllPvalsR"", "" doFDR_R"", "" useDependenceFDR_R"")"
"2473","fastcmh","cpp_test_filtering","const DataFrame& "," dfInput"
"2474","fasterElasticNet","elasticnet","c(""arma::mat& "", ""arma::vec& "", ""double "", ""double "")","c("" XTX"", "" XTY"", "" lam2"", "" lam1"")"
"2475","fasterize","fasterize","c(""DataFrame& "", ""S4& "", ""Nullable<std::string> "", ""std::string "", ""double "", ""Nullable<std::string> "")","c("" sf"", "" raster"", "" field"", "" fun"", "" background"", "" by"")"
"2476","fastglm","colMax_dense","const Eigen::Map<Eigen::MatrixXd>& "," A"
"2477","fastglm","colMin_dense","const Eigen::Map<Eigen::MatrixXd>& "," A"
"2478","fastglm","fit_glm","c(""NumericMatrix "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""Function "", ""Function "", ""Function "", ""Function "", ""Function "", ""Function "", ""int "", ""double "", ""int "")","c("" x"", "" y"", "" weights"", "" offset"", "" start"", "" mu"", "" eta"", "" var"", "" mu_eta"", "" linkinv"", "" dev_resids"", "" valideta"", "" validmu"", "" type"", "" tol"", "" maxit"")"
"2479","fastlogranktest","logrank_instance","c(""std::vector<double>& "", ""std::vector<double>& "", ""std::vector<int>& "", ""std::vector<int>& "", ""bool "")","c("" groupa"", "" groupb"", "" groupacensored"", "" groupbcensored"", "" onlyz"")"
"2480","fastlogranktest","cpu_parallel_logrank1","c(""std::vector<std::vector<double>>& "", ""std::vector<std::vector<double>>& "", ""std::vector<std::vector<int>>& "", ""std::vector<std::vector<int>>& "", ""unsigned "", ""bool "")","c("" groupas_"", "" groupbs_"", "" groupacensoreds_"", "" groupbcensoreds_"", "" threadnumber"", "" onlyz"")"
"2481","fastlogranktest","cpu_parallel_logrank","c(""std::vector<std::vector<double>>& "", ""std::vector<std::vector<double>>& "", ""std::vector<std::vector<int>>& "", ""std::vector<std::vector<int>>& "", ""bool "")","c("" groupas"", "" groupbs"", "" groupacensoreds"", "" groupbcensoreds"", "" onlyz"")"
"2482","fastpos","simulate_one_pos","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""int "", ""int "", ""bool "", ""float "", ""float "")","c("" x_pop"", "" y_pop"", "" index_pop"", "" sample_size_min"", "" sample_size_max"", "" replace"", "" lower_limit"", "" upper_limit"")"
"2483","fastpos","simulate_pos","c(""NumericVector "", ""NumericVector "", ""int "", ""int "", ""int "", ""bool "", ""float "", ""float "")","c("" x_pop"", "" y_pop"", "" n_studies"", "" sample_size_min"", "" sample_size_max"", "" replace"", "" lower_limit"", "" upper_limit"")"
"2484","fddm","cpp_dfddm","c(""const NumericVector& "", ""const SEXP& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool& "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""const int& "", ""const NumericVector& "")","c("" rt"", "" response"", "" a"", "" v"", "" t0"", "" w"", "" sv"", "" log_prob"", "" n_terms_small"", "" summation_small"", "" scale"", "" max_terms_large"", "" eps"")"
"2485","feather","metadataFeather","const std::string& "," path"
"2486","feather","openFeather","const std::string& "," path"
"2487","feather","closeFeather","const List& "," feather"
"2488","feather","rowsFeather","const List& "," feather"
"2489","feather","coldataFeather","c(""const List& "", ""const IntegerVector& "")","c("" feather"", "" indexes"")"
"2490","feather","writeFeather","c(""DataFrame "", ""const std::string& "")","c("" df"", "" path"")"
"2491","filling","cpp_HardImpute","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""const double "", ""const int "", ""arma::cube& "", ""const int "")","c("" X"", "" idmat"", "" lambdas"", "" tol"", "" maxiter"", "" SoftRes"", "" rk"")"
"2492","filling","cpp_nSVD","c(""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""const double "", ""const double "", ""const int "")","c("" X"", "" idmat"", "" Minit"", "" lambda"", "" tol"", "" maxiter"")"
"2493","filling","cpp_SoftImpute","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""const double "", ""const int "", ""arma::mat& "")","c("" X"", "" idmat"", "" lambdas"", "" tol"", "" maxiter"", "" Zinit"")"
"2494","fingerPro","unmix_c","c(""SEXP "", ""SEXP "", ""int "", ""int "", ""int "")","c("" sources"", "" samples"", "" trials"", "" iter"", "" seed"")"
"2495","samurais","forwardsBackwards","c(""arma::vec& "", ""arma::mat& "", ""arma::mat& "")","c("" prior"", "" transmat"", "" f_tk"")"
"2496","samurais","multinomialLogit","c(""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "")","c("" W"", "" X"", "" Y"", "" Gamma"")"
"2497","flars","FccaXYdir0","c(""List "", ""List "", ""List "", ""NumericVector "", ""VectorXd "", ""VectorXd "", ""int "")","c("" Lx"", "" Lp"", "" LPhi"", "" resp"", "" l1"", "" l2"", "" cv"")"
"2498","flars","FccaXYdir","c(""List "", ""List "", ""List "", ""NumericVector "", ""VectorXd "", ""VectorXd "", ""int "")","c("" Lx"", "" Lp"", "" LPhi"", "" resp"", "" l1"", "" l2"", "" cv"")"
"2499","flexsurv","dgenf_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "")","c("" x"", "" mu"", "" sigma"", "" Q"", "" P"", "" log"")"
"2500","flexsurv","pgenf_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const bool "")","c("" q"", "" mu"", "" sigma"", "" Q"", "" P"", "" lower_tail"", "" give_log"")"
"2501","flexsurv","check_genf","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" mu"", "" sigma"", "" Q"", "" P"")"
"2502","flexsurv","dgengamma_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "")","c("" x"", "" mu"", "" sigma"", "" Q"", "" log"")"
"2503","flexsurv","pgengamma_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const bool "")","c("" q"", "" mu"", "" sigma"", "" Q"", "" lower_tail"", "" give_log"")"
"2504","flexsurv","check_gengamma","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" mu"", "" sigma"", "" Q"")"
"2505","flexsurv","dgompertz_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "")","c("" x"", "" shape"", "" rate"", "" log"")"
"2506","flexsurv","pgompertz_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const bool "")","c("" q"", "" shape"", "" rate"", "" lower_tail"", "" give_log"")"
"2507","flexsurv","check_gompertz","c(""const NumericVector& "", ""const NumericVector& "")","c("" shape"", "" rate"")"
"2508","flexsurv","dllogis_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "")","c("" x"", "" shape"", "" scale"", "" log"")"
"2509","flexsurv","pllogis_work","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const bool "")","c("" q"", "" shape"", "" scale"", "" lower_tail"", "" give_log"")"
"2510","flexsurv","check_llogis","c(""const NumericVector& "", ""const NumericVector& "")","c("" shape"", "" scale"")"
"2511","flexsurv","exph","const NumericVector& "," y"
"2512","flexsurv","dexph","const NumericVector& "," y"
"2513","flexsurv","basis_vector","c(""const NumericVector& "", ""const NumericVector& "")","c("" knots"", "" x"")"
"2514","flexsurv","basis_matrix","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" knots"", "" x"")"
"2515","flexsurv","dbasis_vector","c(""const NumericVector& "", ""const NumericVector& "")","c("" knots"", "" x"")"
"2516","flexsurv","dbasis_matrix","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" knots"", "" x"")"
"2517","fourPNO","min2LL_4pno","c(""unsigned int "", ""unsigned int "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" N"", "" J"", "" Y"", "" as"", "" bs"", "" gs"", "" ss"", "" theta"")"
"2518","fourPNO","Y_4pno_simulate","c(""unsigned int "", ""unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" N"", "" J"", "" as"", "" bs"", "" gs"", "" ss"", "" theta"")"
"2519","fourPNO","Gibbs_4PNO","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const double& "", ""double "", ""double "", ""double "", ""double "", ""unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""unsigned int "", ""unsigned int "")","c("" Y"", "" mu_xi"", "" Sigma_xi_inv"", "" mu_theta"", "" Sigma_theta_inv"", "" alpha_c"", "" beta_c"", "" alpha_s"", "" beta_s"", "" burnin"", "" cTF"", "" sTF"", "" gwg_reps"", "" chain_length"")"
"2520","fourPNO","Gibbs_2PNO","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const double& "", ""unsigned int "", ""unsigned int "")","c("" Y"", "" mu_xi"", "" Sigma_xi_inv"", "" mu_theta"", "" Sigma_theta_inv"", "" burnin"", "" chain_length"")"
"2521","fourierin","fourierin_1d_cpp","c(""const arma::vec& "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" c"", "" d"", "" r"", "" s"")"
"2522","fourierin","fourierin_1d_nonregular_cpp","c(""const arma::vec& "", ""double "", ""double "", ""const arma::vec& "", ""int "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" w"", "" resolution"", "" r"", "" s"")"
"2523","fourierin","fourierin_2d_cpp","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" c"", "" d"", "" r"", "" s"")"
"2524","fourierin","fourierin_2d_nonregular_cpp","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" w"", "" resolution"", "" r"", "" s"")"
"2525","fourierin","fourierin_cx_1d_cpp","c(""const arma::cx_vec& "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" c"", "" d"", "" r"", "" s"")"
"2526","fourierin","fourierin_cx_1d_nonregular_cpp","c(""const arma::cx_vec& "", ""double "", ""double "", ""const arma::vec& "", ""int "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" w"", "" resolution"", "" r"", "" s"")"
"2527","fourierin","fourierin_cx_2d_cpp","c(""const arma::cx_mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" c"", "" d"", "" r"", "" s"")"
"2528","fourierin","fourierin_cx_2d_nonregular_cpp","c(""const arma::cx_mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""double "", ""double "")","c("" f"", "" a"", "" b"", "" w"", "" resolution"", "" r"", "" s"")"
"2529","fpeek","nlines_","c(""std::string "", ""bool "")","c("" filename"", "" with_eof"")"
"2530","fpeek","head_str_","c(""std::string "", ""int "")","c("" filename"", "" n"")"
"2531","fpeek","head_print_","c(""std::string "", ""int "")","c("" filename"", "" n"")"
"2532","fpeek","tail_str_","c(""std::string "", ""int "")","c("" filename"", "" n"")"
"2533","fpeek","tail_print_","c(""std::string "", ""int "")","c("" filename"", "" n"")"
"2534","fpeek","file_iconv_","c(""std::string "", ""std::string "", ""std::string "")","c("" filename"", "" encoding"", "" encto"")"
"2535","freealg","lowlevel_simplify","c(""const List& "", ""const NumericVector& "")","c("" words"", "" coeffs"")"
"2536","freealg","lowlevel_free_prod","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "")","c("" words1"", "" coeffs1"", "" words2"", "" coeffs2"")"
"2537","freealg","lowlevel_free_sum","c(""const List& "", ""const NumericVector& "", ""const List& "", ""const NumericVector& "")","c("" words1"", "" coeffs1"", "" words2"", "" coeffs2"")"
"2538","freealg","lowlevel_free_power","c(""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" words"", "" coeffs"", "" n"")"
"2539","fstcore","fststore","c(""String "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fileName"", "" table"", "" compression"", "" uniformEncoding"")"
"2540","fstcore","fstmetadata","String "," fileName"
"2541","fstcore","fstretrieve","c(""String "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" fileName"", "" columnSelection"", "" startRow"", "" endRow"")"
"2542","fstcore","fsthasher","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" rawVec"", "" seed"", "" blockHash"")"
"2543","fstcore","fstcomp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" rawVec"", "" compressor"", "" compression"", "" hash"")"
"2544","fstcore","fstdecomp","SEXP "," rawVec"
"2545","fstcore","setnrofthreads","SEXP "," nrOfThreads"
"2546","fstcore","restore_after_fork","bool "," restore"
"2547","fuser","genFusedLassoProximal_loop","c(""Nullable<List> "", ""Nullable<List> "", ""Nullable<List> "", ""Eigen::VectorXd "", ""NumericVector "", ""Eigen::MatrixXd "", ""bool "", ""int "", ""int "", ""int "", ""Nullable<NumericVector> "", ""double "", ""Eigen::MatrixXd "", ""double "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "")","c("" XX"", "" XY"", "" X_list"", "" Y"", "" samp_sizes"", "" C"", "" intercept"", "" p"", "" k"", "" num_iters"", "" penalty_factors"", "" L_U_inv"", "" B_old"", "" mu"", "" W"", "" weighted_delta_f"", "" tol"")"
"2548","fwsim","Cpp_fwpopsim","c(""int "", ""IntegerMatrix "", ""IntegerVector "", ""NumericVector "", ""List "", ""bool "", ""IntegerVector "", ""bool "", ""bool "", ""bool "")","c("" G"", "" H0"", "" N0"", "" alpha"", "" mutmodel"", "" SNP"", "" save_gs"", "" progress"", "" trace"", "" ensure_children"")"
"2549","fwsim","Cpp_fwpopsim_fixed","c(""int "", ""IntegerMatrix "", ""IntegerVector "", ""List "", ""bool "", ""IntegerVector "", ""bool "", ""bool "")","c("" G"", "" H0"", "" N0"", "" mutmodel"", "" SNP"", "" save_gs"", "" progress"", "" trace"")"
"2550","fwsim","fwpopsim_fixed_genealogy","c(""int "", ""IntegerVector "", ""int "", ""List "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""int "", ""bool "")","c("" G"", "" H0"", "" pop_size"", "" mutmodel"", "" progress"", "" trace"", "" cleanup_haplotypes"", "" cleanup_lineages"", "" plot"", "" all_pairs"", "" random_pairs"", "" continue_to_one_founder"")"
"2551","fwsim","print_simulation_info","XPtr<SimulatedGenealogy> "," object"
"2552","gRain","propagateLS__","c(""List "", ""List "")","c("" cqpotList_"", "" rip"")"
"2553","gRain","sparse_setXtf1","c(""SEXP "", ""SEXP "")","c("" XX_"", "" TF_"")"
"2554","gRim","fit2way_","c(""const NumericVector& "", ""const NumericVector& "", ""const CharacterVector& "", ""const CharacterVector& "")","c("" tab1"", "" tab2"", "" R"", "" vn"")"
"2555","gRim","parm_ghk2pms_","List "," parms"
"2556","gRim","parm_pms2ghk_","List "," parms"
"2557","gRim","updateA","c(""arma::mat "", ""arma::mat "", ""arma::uvec "", ""arma::uvec "")","c("" A"", "" E"", "" row"", "" col"")"
"2558","gRim","parm_update_ghk_","c(""List "", ""IntegerVector "", ""IntegerVector "", ""List "", ""List "", ""List "", ""List "", ""double "", ""double "")","c("" Cparms"", "" dgen_idx"", "" cgen_idx"", "" ghk_obs"", "" pms_obs"", "" ghk_fit"", "" pms_fit"", "" scale"", "" details"")"
"2559","gRim","C_pms2ghk","SEXP "," parms_"
"2560","gRim","C_ghk2pms","SEXP "," parms_"
"2561","gRim","parm_normalize_ghk_","List "," parms"
"2562","gamreg","gam_reg","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""Function "", ""int "", ""double "")","c("" X"", "" Y"", "" beta"", "" beta0"", "" sigma"", "" lambda"", "" gam"", "" f"", "" inter"", "" regul_alp"")"
"2563","gasper","eigendec","arma::mat "," M"
"2564","gasper","matmult","c(""arma::mat "", ""arma::mat "")","c("" A"", "" B"")"
"2565","gbp","bpp_solver_dpp_wrapper","c(""DataFrame "", ""DataFrame "")","c("" it"", "" bn"")"
"2566","gbp","gbp2d_solver_dpp_prep_create_p","c(""const arma::mat& "", ""const arma::vec& "")","c("" ld"", "" m"")"
"2567","gbp","gbp3d_solver_dpp_prep_create_p","c(""const arma::mat& "", ""const arma::vec& "")","c("" ldh"", "" m"")"
"2568","gbp","gbp4d_solver_dpp_prep_create_p","c(""const arma::mat& "", ""const arma::vec& "")","c("" ldhw"", "" m"")"
"2569","gdpc","getFitted","c(""arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "")","c("" f_fin"", "" f_ini"", "" beta"", "" alpha"", "" k"")"
"2570","gdpc","getFini","c(""const arma::mat& "", ""const int& "")","c("" Z"", "" k"")"
"2571","gdpc","gdpc_priv","c(""const arma::mat& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const double& "", ""const int& "", ""const int& "")","c("" Z"", "" k"", "" f_ini"", "" passf_ini"", "" tol"", "" niter_max"", "" sel"")"
"2572","gee4","ipw_estimation","c(""arma::uvec "", ""arma::vec "", ""arma::uword "", ""bool "")","c("" m"", "" Y"", "" order"", "" trace"")"
"2573","gee4","gees_estimation","c(""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""std::string "", ""std::string "", ""double "", ""arma::vec "", ""bool "", ""bool "", ""bool "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" H"", "" method"", "" corrStruct"", "" rho"", "" start"", "" trace"", "" profile"", "" errorMsg"")"
"2574","gee4","geerfit_id","c(""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""arma::vec "", ""bool "", ""bool "", ""bool "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" rho"", "" start"", "" trace"", "" profile"", "" errorMsg"")"
"2575","gee4","geerfit_cs","c(""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""arma::vec "", ""bool "", ""bool "", ""bool "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" rho"", "" start"", "" trace"", "" profile"", "" errorMsg"")"
"2576","gee4","geerfit_ar1","c(""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""arma::vec "", ""bool "", ""bool "", ""bool "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" rho"", "" start"", "" trace"", "" profile"", "" errorMsg"")"
"2577","gen3sis","getEntities","NumericMatrix "," ma"
"2578","gen3sis","epsN","c(""NumericVector "", ""double "")","c("" LP"", "" d1"")"
"2579","gen3sis","conc","c(""IntegerVector "", ""IntegerVector "")","c("" x"", "" y"")"
"2580","gen3sis","is_any_f","LogicalVector "," x"
"2581","gen3sis","Tdbscan","c(""NumericMatrix "", ""double "", ""double "")","c("" D"", "" d1"", "" minPts"")"
"2582","gen3sis","Tdbscan_variable","c(""NumericMatrix "", ""NumericVector "", ""double "")","c("" D"", "" distances"", "" minPts"")"
"2583","gen3sis","get_distance_matrix","c(""const IntegerVector "", ""const int "", ""const IntegerVector "", ""const IntegerVector "", ""const NumericVector "", ""const double "")","c("" habitable_cells"", "" num_cells"", "" dist_p"", "" dist_i"", "" dist_x"", "" max_distance"")"
"2584","genepop","setRandomSeed","long "," seed"
"2585","genepop","setMantelSeed","long "," seed"
"2586","genepop","RHWEachLocusEachPopulationHD","c(""std::string "", ""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2587","genepop","RHWEachLocusEachPopulationHE","c(""std::string "", ""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2588","genepop","RHWEachLocusEachPopulationProbability","c(""std::string "", ""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2589","genepop","RHWGlobalHD","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2590","genepop","RHWGlobalHE","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2591","genepop","RHWEachLocusEachPopulationHDWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2592","genepop","RHWEachLocusEachPopulationHEWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2593","genepop","RHWEachLocusEachPopulationProbabilityWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2594","genepop","RHWGlobalHDWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2595","genepop","RHWGlobalHEWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2596","genepop","RGDEachPairLociEachPopulation","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2597","genepop","RGDGenotypicContingency","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2598","genepop","RGDEachPairLociEachPopulationWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2599","genepop","RPDGenicAllPopulationDifferentiation","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2600","genepop","RPDGenicAllPairPopulationDifferentiation","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2601","genepop","RPDGenotypicAllPopulationDifferentiation","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2602","genepop","RPDGenotypicAllPairPopulationDifferentiation","c(""std::string "", ""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" outputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2603","genepop","RPDGenicAllPopulationDifferentiationWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2604","genepop","RPDGenicAllPairPopulationDifferentiationWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2605","genepop","RPDGenotypicAllPopulationDifferentiationWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2606","genepop","RPDGenotypicAllPairPopulationDifferentiationWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2607","genepop","RAnalyzingSingleContingencyTable","c(""std::string "", ""int "", ""int "", ""int "")","c("" inputFile"", "" dememorization"", "" batches"", "" iterations"")"
"2608","genepop","RAnalyzingSingleContingencyTableWithSettingsFile","c(""std::string "", ""std::string "")","c("" inputFile"", "" settingsFile"")"
"2609","genepop","RNmEstimates","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2610","genepop","RDescriptifAlleleAndGenotypeFrequenciesPerLocusPerSample","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2611","genepop","RDescriptifGeneDiversitiesAndFisUsingAlleleIdentity","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2612","genepop","RDescriptifGeneDiversitiesAndFisUsingAlleleSize","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2613","genepop","REstimatingSpatialStructureAlleleIdentyAllPopulations","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2614","genepop","REstimatingSpatialStructureAlleleIdentyAllPopulationsPairs","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2615","genepop","REstimatingSpatialStructureAlleleSizeAllPopulations","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2616","genepop","REstimatingSpatialStructureAlleleSizeAllPopulationsPairs","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" dataType"")"
"2617","genepop","RIsolationByDistanceBetweenIndividuals","c(""std::string "", ""std::string "", ""std::string "", ""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""int "", ""bool "")","c("" inputFile"", "" outputFile"", "" dataType"", "" statistic"", "" geographicScale"", "" CIcoverage"", "" testPoint"", "" minimalDistance"", "" maximalDistance"", "" mantelPermutations"", "" mantelRankTest"")"
"2618","genepop","RIsolationByDistanceBetweenGroups","c(""std::string "", ""std::string "", ""std::string "", ""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""int "", ""bool "")","c("" inputFile"", "" outputFile"", "" dataType"", "" statistic"", "" geographicScale"", "" CIcoverage"", "" testPoint"", "" minimalDistance"", "" maximalDistance"", "" mantelPermutations"", "" mantelRankTest"")"
"2619","genepop","RIsolationByDistanceBetweenIndividualsWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2620","genepop","RIsolationByDistanceBetweenGroupsWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2621","genepop","REcumenicismFstat","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2622","genepop","REcumenicismBiosysLetter","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2623","genepop","REcumenicismBiosysNumber","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2624","genepop","REcumenicismLinkdos","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2625","genepop","RNullAlleleEstimateAlleleFrequencies","c(""std::string "", ""std::string "", ""std::string "", ""double "")","c("" inputFile"", "" outputFile"", "" nullAlleleMethod"", "" CIcoverage"")"
"2626","genepop","RDiploidisationHaploidData","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2627","genepop","RRelabelingAlleles","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2628","genepop","RConversionToIndividualDataWithPopulationNames","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2629","genepop","RConversionToIndividualDataWithIndividualNames","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2630","genepop","RRandomSamplingOfHaploidGenotypesFromDiploidOnes","c(""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"")"
"2631","genepop","RNullAlleleEstimateAlleleFrequenciesWithSettingsFile","c(""std::string "", ""std::string "", ""std::string "")","c("" inputFile"", "" outputFile"", "" settingsFile"")"
"2632","genepop","RHWtableHD","c(""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2633","genepop","RHWtableHE","c(""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2634","genepop","RHWtableProbability","c(""std::string "", ""bool "", ""int "", ""int "", ""int "")","c("" inputFile"", "" enumeration"", "" dememorization"", "" batches"", "" iterations"")"
"2635","genepop","RHWtableAlleleFrequenciesExpectedGenotypesFis","std::string "," inputFile"
"2636","genepop","RHWtableHDWithSettingsFile","c(""std::string "", ""std::string "")","c("" inputFile"", "" settingsFile"")"
"2637","genepop","RHWtableHEWithSettingsFile","c(""std::string "", ""std::string "")","c("" inputFile"", "" settingsFile"")"
"2638","genepop","RHWtableProbabilityWithSettingsFile","c(""std::string "", ""std::string "")","c("" inputFile"", "" settingsFile"")"
"2639","genepop","Rset_restriction","bool "," set"
"2640","genie","hclust2_gini","c(""RObject "", ""RObject "", ""RObject "")","c("" distance"", "" objects"", "" control"")"
"2641","genieclust","adjusted_rand_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2642","genieclust","rand_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2643","genieclust","adjusted_fm_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2644","genieclust","fm_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2645","genieclust","mi_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2646","genieclust","normalized_mi_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2647","genieclust","adjusted_mi_score","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2648","genieclust","normalized_accuracy","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2649","genieclust","pair_sets_index","c(""RObject "", ""RObject "")","c("" x"", "" y"")"
"2650","genieclust","__gclust","c(""NumericMatrix "", ""double "", ""bool "")","c("" mst"", "" gini_threshold"", "" verbose"")"
"2651","genieclust","__genie","c(""NumericMatrix "", ""int "", ""double "", ""String "", ""bool "", ""bool "")","c("" mst"", "" k"", "" gini_threshold"", "" postprocess"", "" detect_noise"", "" verbose"")"
"2652","genieclust","mst_default","c(""NumericMatrix "", ""String "", ""int "", ""bool "", ""bool "")","c("" X"", "" distance"", "" M"", "" cast_float32"", "" verbose"")"
"2653","genieclust","mst_dist","c(""NumericVector "", ""int "", ""bool "")","c("" d"", "" M"", "" verbose"")"
"2654","genieclust","gini_index","NumericVector "," x"
"2655","genieclust","bonferroni_index","NumericVector "," x"
"2656","genio","read_bed_cpp","c(""const char* "", ""int "", ""int "")","c("" file"", "" m_loci"", "" n_ind"")"
"2657","genio","write_bed_cpp","c(""const char* "", ""IntegerMatrix "")","c("" file"", "" X"")"
"2658","genodds","get_Rd","NumericMatrix "," p"
"2659","genodds","get_Rs","NumericMatrix "," p"
"2660","geoFKF","logLikMultiNorm","c(""const arma::mat& "", ""const arma::mat& "", ""double "", ""double "", ""double "")","c("" mCoef"", "" mDist"", "" s2"", "" phi"", "" p"")"
"2661","geodiv","sfd_","NumericMatrix "," mat"
"2662","geogrid","hungarian_cc","NumericMatrix "," cost"
"2663","geogrid","hungariansafe_cc","NumericMatrix "," cost"
"2664","geojsonR","export_From_geojson","c(""std::string "", ""bool "", ""bool "", ""bool "")","c("" input_file"", "" flatten_coords"", "" average_coordinates"", "" to_list"")"
"2665","geojsonR","export_From_JSON","std::string "," input_file"
"2666","geojsonR","dump_geojson","std::string "," input_data"
"2667","geojsonR","Features_TO_Collection","c(""std::vector<std::string> "", ""std::vector<double> "", ""bool "")","c("" feat_files_lst"", "" bbox_vec"", "" verbose"")"
"2668","geojsonR","export_From_geojson_schema","c(""std::string "", ""std::string "", ""bool "", ""bool "")","c("" input_file"", "" GEOMETRY_OBJECT_NAME"", "" average_coordinates"", "" to_list"")"
"2669","geojsonR","list_files","c(""const std::string& "", ""bool "")","c("" path"", "" full_path"")"
"2670","geojsonR","merge_json","c(""const std::string& "", ""std::string "", ""std::string "", ""bool "")","c("" input_folder"", "" output_file"", "" concat_delimiter"", "" verbose"")"
"2671","geojsonR","DATA_TYPE","SEXP "," sublist"
"2672","geojsonR","inner_coords","c(""List "", ""int "", ""bool "")","c("" geom_lst"", "" z"", "" polygon_interior"")"
"2673","geojsonR","Polygon_with_interior_rings","c(""List "", ""int "", ""bool "")","c("" geom_lst"", "" i"", "" verbose"")"
"2674","geojsonR","SAVE_R_list_Features_2_FeatureCollection","c(""List "", ""std::string "", ""bool "")","c("" x"", "" path_to_file"", "" verbose"")"
"2675","geojsonR","export_To_GeoJson","c(""std::string "", ""std::vector<double> "", ""std::vector<std::vector<double>> "", ""std::vector<std::vector<std::vector<double>>> "", ""std::vector<std::vector<std::vector<std::vector<double>>>> "", ""bool "")","c("" geometry_object"", "" data_POINTS"", "" data_ARRAYS"", "" data_ARRAY_ARRAYS"", "" data_POLYGON_ARRAYS"", "" stringify"")"
"2676","geojsonR","Geom_Collection","c(""std::vector<std::string> "", ""List "", ""bool "")","c("" geometry_object_names"", "" geometry_objects"", "" stringify"")"
"2677","geojsonR","Feature_Obj","c(""std::vector<std::string> "", ""List "", ""bool "")","c("" geometry_object_names"", "" geometry_objects"", "" stringify"")"
"2678","geojsonR","Feature_collection_Obj","c(""std::vector<std::string> "", ""List "", ""bool "")","c("" geometry_object_names"", "" geometry_objects"", "" stringify"")"
"2679","geojsonsf","rcpp_df_to_geojson_atomise","c(""DataFrame& "", ""StringVector& "", ""int& "", ""bool& "")","c("" df"", "" geometry_columns"", "" digits"", "" factors_as_string"")"
"2680","geojsonsf","rcpp_df_to_geojson","c(""DataFrame& "", ""StringVector& "", ""int& "", ""bool& "")","c("" df"", "" geometry_columns"", "" digits"", "" factors_as_string"")"
"2681","geojsonsf","rcpp_geojson_to_sfc","c(""StringVector "", ""bool& "")","c("" geojson"", "" expand_geometries"")"
"2682","geojsonsf","rcpp_geojson_to_sf","c(""StringVector "", ""bool "")","c("" geojson"", "" expand_geometries"")"
"2683","geojsonsf","rcpp_geojson_to_wkt","StringVector "," geojson"
"2684","geojsonsf","rcpp_read_sf_file","c(""const char* "", ""const char* "", ""bool "", ""int "")","c("" file"", "" mode"", "" flatten_geometries"", "" buffer_size"")"
"2685","geojsonsf","rcpp_read_sfc_file","c(""const char* "", ""const char* "", ""bool "", ""int "")","c("" file"", "" mode"", "" flatten_geometries"", "" buffer_size"")"
"2686","geojsonsf","rcpp_sfc_to_geojson","c(""List& "", ""int& "")","c("" sfc"", "" digits"")"
"2687","geojsonsf","rcpp_sf_to_geojson_atomise","c(""DataFrame& "", ""int& "", ""bool& "")","c("" sf"", "" digits"", "" factors_as_string"")"
"2688","geojsonsf","rcpp_sf_to_geojson","c(""DataFrame& "", ""int& "", ""bool& "")","c("" sf"", "" digits"", "" factors_as_string"")"
"2689","geometries","rcpp_calculate_bbox","c(""SEXP "", ""SEXP "")","c("" x"", "" geometry_cols"")"
"2690","geometries","rcpp_close_matrix","List "," x"
"2691","geometries","rcpp_other_columns","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" id_cols"", "" id_col2"", "" id_col3"")"
"2692","geometries","rcpp_column_positions","c(""SEXP "", ""SEXP "")","c("" x"", "" cols"")"
"2693","geometries","rcpp_geometry_dimensions","SEXP "," geometries"
"2694","geometries","rcpp_coordinates","SEXP& "," geometries"
"2695","geometries","rcpp_make_geometries","c(""SEXP "", ""SEXP "", ""SEXP "", ""List "", ""bool "", ""bool "")","c("" x"", "" id_cols"", "" geometry_cols"", "" attributes"", "" close"", "" closed_attribute"")"
"2696","geometries","rcpp_id_positions","c(""SEXP "", ""SEXP "")","c("" x"", "" i"")"
"2697","geometries","rcpp_rleid","c(""DataFrame "", ""IntegerVector "")","c("" df"", "" ids"")"
"2698","geometries","rcpp_rleid_indices","SEXP "," x"
"2699","geometries","rcpp_nest","c(""SEXP "", ""int "")","c("" x"", "" depth"")"
"2700","geometries","test_attributes","c(""SEXP& "", ""List& "")","c("" obj"", "" attributes"")"
"2701","geometries","test_to_geometry_matrix_cols","c(""SEXP "", ""SEXP "")","c("" x"", "" cols"")"
"2702","geometries","test_to_geometry_matrix_cols_names","c(""DataFrame "", ""IntegerVector "", ""bool "")","c("" x"", "" cols"", "" keep_names"")"
"2703","geometries","test_to_geometry_matrix_single","SEXP "," x"
"2704","geometries","tm","SEXP "," x"
"2705","geometries","test_sexp_col_int","c(""SEXP "", ""SEXP "")","c("" x"", "" v"")"
"2706","geometries","test_sexp_col_names","SEXP "," x"
"2707","geometries","test_sexp_n_col","SEXP "," x"
"2708","geometries","test_sexp_n_row","SEXP "," x"
"2709","geometries","test_sexp_length","SEXP "," x"
"2710","geometries","test_column_check","c(""SEXP "", ""SEXP "")","c("" x"", "" cols"")"
"2711","geometries","test_other_columns","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" y"", "" z"")"
"2712","geometries","test_column_positions","c(""SEXP "", ""SEXP "")","c("" x"", "" cols"")"
"2713","geometries","test_make_dataframe","c(""List "", ""R_xlen_t "", ""CharacterVector "")","c("" lst"", "" n_rows"", "" col_names"")"
"2714","geometries","test_unique_ids","c(""SEXP "", ""SEXP "")","c("" x"", "" id_col"")"
"2715","geometries","test_unique_sort","SEXP "," x"
"2716","geometries","test_split_by_id","c(""List "", ""IntegerVector "", ""IntegerVector "", ""bool "", ""List "", ""bool "", ""bool "")","c("" lst"", "" ids"", "" geometry_cols"", "" last"", "" attributes"", "" close"", "" closed_attribute"")"
"2717","geometries","test_as_list","SEXP "," x"
"2718","geometries","rcpp_concatenate_vectors","c(""SEXP "", ""SEXP "")","c("" vec_1"", "" vec_2"")"
"2719","geometries","rcpp_where_is","c(""String "", ""StringVector "")","c("" to_find"", "" sv"")"
"2720","geometries","rcpp_get_ids","c(""SEXP "", ""SEXP "")","c("" x"", "" id_col"")"
"2721","geometry","C_tsearch","c(""NumericVector "", ""NumericVector "", ""IntegerMatrix "", ""NumericVector "", ""NumericVector "", ""bool "", ""double "")","c("" x"", "" y"", "" elem"", "" xi"", "" yi"", "" bary"", "" eps"")"
"2722","geoops","along","c(""std::string "", ""double "", ""std::string "")","c("" x"", "" dist"", "" units"")"
"2723","geoops","ringArea","std::string "," x"
"2724","geoops","geometry","std::string "," x"
"2725","geoops","area","std::string "," inp"
"2726","geoops","bbox_polygon","std::vector<double> "," bbox"
"2727","geoops","bearing","c(""std::string "", ""std::string "")","c("" start"", "" end"")"
"2728","geoops","destination","c(""std::string "", ""double "", ""double "", ""std::string "")","c("" from"", "" distance"", "" bearing"", "" units"")"
"2729","geoops","distance","c(""std::string "", ""std::string "", ""std::string "")","c("" start"", "" end"", "" units"")"
"2730","geoops","nearest","c(""std::string "", ""std::string "")","c("" target_point"", "" points"")"
"2731","geoops","point","c(""std::string "", ""std::string "")","c("" coordinates"", "" properties"")"
"2732","geoops","get_coords","std::string "," x"
"2733","geoops","in_ring","c(""std::string "", ""std::string "", ""bool "")","c("" pt"", "" ring"", "" ignoreBoundary"")"
"2734","geoops","inside_cpp","c(""std::string "", ""std::string "", ""bool "")","c("" point"", "" polygon"", "" ignoreBoundary"")"
"2735","geoops","lineDistance","c(""std::string "", ""std::string "")","c("" line"", "" units"")"
"2736","geoops","midpoint","c(""std::string "", ""std::string "")","c("" from"", "" to"")"
"2737","geoops","planepoint","c(""std::string "", ""std::string "")","c("" point"", "" triangle"")"
"2738","geoops","pointGrid","c(""std::vector<double> "", ""double "", ""std::string "")","c("" bbox"", "" cellSize"", "" units"")"
"2739","geoops","triangleGrid","c(""std::vector<double> "", ""int "", ""std::string "")","c("" bbox"", "" cellSize"", "" units"")"
"2740","gfiExtremes","MCMCchain","c(""NumericVector "", ""const NumericVector "", ""const double "", ""const double "", ""const double "", ""const int "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const size_t "", ""const size_t "", ""const size_t "", ""const unsigned "")","c("" X"", "" beta"", "" g"", "" s"", "" a"", "" i"", "" p1"", "" p2"", "" lambda1"", "" lambda2"", "" sd_g"", "" sd_s"", "" niter"", "" nburnin"", "" Jnumb"", "" seed"")"
"2741","gfiExtremes","MCMCchainArma","c(""const arma::vec& "", ""const arma::vec& "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const double "", ""const size_t "", ""const size_t "", ""const unsigned "")","c("" Xfull"", "" beta"", "" g"", "" s"", "" a"", "" prob"", "" sd_g"", "" sd_s"", "" niter"", "" Jnumb"", "" seed"")"
"2742","gfilinreg","f_normal","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const size_t "", ""const size_t "")","c("" centers"", "" XI"", "" XmI"", "" yI"", "" ymI"", "" M"", "" n"")"
"2743","gfilinreg","f_cauchy","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const size_t "", ""const size_t "")","c("" centers"", "" XI"", "" XmI"", "" yI"", "" ymI"", "" M"", "" n"")"
"2744","gfilinreg","f_student","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const size_t "", ""const size_t "", ""const double "")","c("" centers"", "" XI"", "" XmI"", "" yI"", "" ymI"", "" M"", "" n"", "" nu"")"
"2745","gfilinreg","f_logistic","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const size_t "", ""const size_t "")","c("" centers"", "" XI"", "" XmI"", "" yI"", "" ymI"", "" M"", "" n"")"
"2746","gfilmm","gfilmm_double","c(""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::SparseMatrix<double>& "", ""const Eigen::MatrixXi& "", ""const IntegerVector "", ""const size_t "", ""const double "", ""const unsigned "", ""const unsigned "")","c("" L"", "" U"", "" FE"", "" RE"", "" RE2"", "" E"", "" N"", "" thresh"", "" seed"", "" nthreads"")"
"2747","gfilmm","gfilmm_long","c(""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::SparseMatrix<double>& "", ""const Eigen::MatrixXi& "", ""const IntegerVector "", ""const size_t "", ""const double "", ""const unsigned "", ""const unsigned "")","c("" L"", "" U"", "" FE"", "" RE"", "" RE2"", "" E"", "" N"", "" thresh"", "" seed"", "" nthreads"")"
"2748","gfpop","gfpopTransfer","c(""NumericVector "", ""DataFrame "", ""std::string "", ""NumericVector "", ""bool "")","c("" vectData"", "" mygraph"", "" type"", "" vectWeight"", "" testMode"")"
"2749","ggdmc","likelihood","c(""arma::vec "", ""List "", ""double "")","c("" pvector"", "" data"", "" min_lik"")"
"2750","ggdmc","p_df","c(""arma::vec "", ""std::string "", ""std::string "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::vector<double> "", ""arma::ucube "", ""arma::uvec "", ""arma::umat "", ""bool "")","c("" pvector"", "" cell"", "" mtype"", "" pnames"", "" parnames"", "" dim0"", "" dim1"", "" dim2"", "" allpar"", "" model"", "" isr1"", "" n1idx"", "" n1order"")"
"2751","ggdmc","ac_","c(""arma::vec "", ""unsigned int "")","c("" x"", "" nlag"")"
"2752","ggdmc","r_fastdm","c(""unsigned int "", ""std::vector<double> "", ""double "", ""bool "")","c("" num_values"", "" params"", "" precision"", "" stop_on_error"")"
"2753","ggdmc","init_new","c(""List "", ""List "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "", ""bool "")","c("" data"", "" prior"", "" nchain"", "" nmc"", "" thin"", "" report"", "" rp"", "" gammamult"", "" pm"", "" pm_old"", "" block"")"
"2754","ggdmc","init_old","c(""List "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "")","c("" samples"", "" nmc"", "" thin"", "" report"", "" rp"", "" gammamult"", "" pm"", "" pm_old"", "" block"", "" add"")"
"2755","ggdmc","init_newhier","c(""List "", ""List "", ""List "", ""List "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "", ""bool "")","c("" prior"", "" lprior"", "" sprior"", "" data"", "" nchain"", "" nmc"", "" thin"", "" report"", "" rp"", "" gammamult"", "" pm"", "" pm_old"", "" block"")"
"2756","ggdmc","init_oldhier","c(""List "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "")","c("" samples"", "" nmc"", "" thin"", "" report"", "" rp"", "" gammamult"", "" pm"", "" pm_old"", "" block"", "" add"")"
"2757","ggdmc","rlba_norm","c(""unsigned int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "")","c("" n"", "" A"", "" b"", "" mean_v"", "" sd_v"", "" t0"", "" st0"", "" posdrift"")"
"2758","ggdmc","rprior_mat","c(""List "", ""unsigned int "")","c("" prior"", "" n"")"
"2759","ggdmc","test_sumlogprior","c(""arma::vec "", ""List "")","c("" pvec"", "" prior"")"
"2760","ggdmc","test_dprior","c(""arma::vec "", ""List "")","c("" pvec"", "" prior"")"
"2761","ggdmc","dtnorm","c(""std::vector<double> "", ""double "", ""double "", ""double "", ""double "", ""bool "")","c("" x"", "" p1"", "" p2"", "" lower"", "" upper"", "" lg"")"
"2762","ggdmc","rtnorm","c(""unsigned int "", ""double "", ""double "", ""double "", ""double "")","c("" n"", "" p1"", "" p2"", "" lower"", "" upper"")"
"2763","ggdmc","ptnorm","c(""std::vector<double> "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""bool "")","c("" q"", "" p1"", "" p2"", "" lower"", "" upper"", "" lt"", "" lg"")"
"2764","ggip","wrap_address_to_cartesian","c(""List "", ""List "", ""int "", ""String "")","c("" address_r"", "" canvas_network_r"", "" pixel_prefix"", "" curve"")"
"2765","ggip","wrap_network_to_cartesian","c(""List "", ""List "", ""int "", ""String "")","c("" network_r"", "" canvas_network_r"", "" pixel_prefix"", "" curve"")"
"2766","ggwordcloud","wordcloud_boxes","c(""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""IntegerMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""IntegerMatrix "", ""IntegerVector "", ""IntegerVector "", ""int "", ""NumericVector "", ""NumericVector "", ""const double "", ""const double "", ""const double "", ""const double "", ""const int "", ""const bool "", ""const int "")","c("" data_points"", "" boxes"", "" boxes_text"", "" text_boxes"", "" bigboxes"", "" boxes_masks"", "" boxes_mask"", "" mask_boxes"", "" mask_group"", "" angle_group"", "" max_angle_group"", "" xlim"", "" ylim"", "" eccentricity"", "" rstep"", "" tstep"", "" perc_step"", "" max_steps"", "" rm_outside"", "" shape"")"
"2767","gif","bcd","c(""Eigen::MatrixXd& "", ""Eigen::MatrixXi& "", ""int "", ""double "")","c("" S"", "" act_set"", "" iter_max"", "" eps"")"
"2768","gif","soft_GT","c(""Eigen::MatrixXd& "", ""double "", ""Eigen::MatrixXi& "")","c("" S"", "" lambda"", "" act_set"")"
"2769","gkmSVM","gkmsvm_classify","SEXP "," params"
"2770","gkmSVM","gkmsvm_kernel","SEXP "," params"
"2771","glamlasso","gdpg","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""std::string "", ""std::string "", ""int "", ""std::string "", ""double "", ""arma::vec "", ""int "", ""int "", ""double "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" Phi1"", "" Phi2"", "" Phi3"", "" Psi"", "" Psirot"", "" Y"", "" Yrot"", "" V"", "" Weights"", "" Weightsrot"", "" Betainit"", "" Beta12init"", "" Beta3init"", "" alphainit"", "" family"", "" penalty"", "" nonten"", "" iwls"", "" nu"", "" lambda"", "" makelamb"", "" nlambda"", "" lambdaminratio"", "" penaltyfactor"", "" penaltyfactor12"", "" penaltyfactor3"", "" penaltyfactoralpha"", "" reltolprox"", "" reltolnewt"", "" reltolalt"", "" maxiter"", "" steps"", "" maxiterprox"", "" maxiternewt"", "" maxalt"", "" btproxmax"", "" btnewtmax"", "" weightedgaussian"", "" S"", 
"" RR"", "" n1"", "" n2"", "" n3"")"
"2772","glamlasso","getobj","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""NumericVector "", ""arma::vec "", ""arma::mat "", ""std::string "", ""std::string "")","c("" Y"", "" Weights"", "" Phi1"", "" Phi2"", "" Phi3"", "" beta"", "" lambda"", "" penaltyfactor"", "" family"", "" penalty"")"
"2773","glcm","calc_texture","c(""arma::mat "", ""int "", ""arma::rowvec "", ""arma::mat "", ""CharacterVector "", ""std::string "", ""double "")","c("" d"", "" n_grey"", "" window_dims"", "" shift"", "" statistics"", "" na_opt"", "" na_val"")"
"2774","glm.deploy","glmdeploy_cpp","c(""DataFrame "", ""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""bool "", ""CharacterVector "", ""int "", ""CharacterVector "")","c("" dataFields"", "" arguments"", "" family"", "" link_function"", "" interceptname"", "" hasfactors"", "" filename_in"", "" outlanguage"", "" path_in"")"
"2775","glmaag","Coxnet","c(""arma::vec "", ""arma::mat& "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""int "", ""double "")","c("" b"", "" x"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" maxiter"", "" cri"")"
"2776","glmaag","Coxaagg","c(""arma::vec "", ""double "", ""double "", ""int "", ""arma::vec "", ""arma::mat "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat "", ""arma::vec "", ""int "", ""double "")","c("" b"", "" lam1"", "" lam2"", "" ntie"", "" w"", "" x"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" maxiter"", "" cri"")"
"2777","glmaag","cvCoxnet1","c(""int "", ""arma::vec "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" b"", "" x"", "" y"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l1"", "" l2"", "" lam2"", "" bets"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2778","glmaag","cvCoxnet1_pal","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "", ""int "", ""double "")","c("" b"", "" x"", "" xtr"", "" xva"", "" yva"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" tietr"", "" tie1tr"", "" tie2tr"", "" tie3tr"", "" del"", "" deltr"", "" delva"", "" l1"", "" l2"", "" lam2"", "" bets"", "" meas"", "" maxiter"", "" cri"")"
"2779","glmaag","cvCoxnet2","c(""int "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""int "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" b"", "" x"", "" y"", "" tie"", "" ntie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" lam"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2780","glmaag","cvCoxnet2_pal","c(""arma::vec& "", ""arma::mat& "", ""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""int "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""bool "", ""int "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""int "", ""double "")","c("" b"", "" x"", "" xtr"", "" xva"", "" yva"", "" tie"", "" ntie"", "" tie1"", "" tie2"", "" tie3"", "" tietr"", "" ntietr"", "" tie1tr"", "" tie2tr"", "" tie3tr"", "" del"", "" deltr"", "" delva"", "" l"", "" lam"", "" meas"", "" maxiter"", "" cri"")"
"2781","glmaag","cvCoxaagg","c(""int "", ""int "", ""int "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" dfmax"", "" ntie"", "" b"", "" w"", "" x"", "" y"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" lam1"", "" lam2"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2782","glmaag","ssCoxaagg","c(""int "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::umat& "", ""int "", ""double "")","c("" ntie"", "" b"", "" w"", "" x"", "" y"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" lam1"", "" lam2"", "" sswhich"", "" maxiter"", "" cri"")"
"2783","glmaag","ssCoxaagg_pal","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""double "")","c("" ntietr"", "" b"", "" w"", "" xtr"", "" tietr"", "" tie1tr"", "" tie2tr"", "" tie3tr"", "" deltr"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2784","glmaag","Coxaagg_search","c(""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""double "")","c("" ntie"", "" dfmax"", "" b"", "" w"", "" x"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2785","glmaag","Coxaagg_search_pal","c(""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""double "")","c("" ntie"", "" dfmax"", "" b"", "" w"", "" x"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2786","glmaag","cvCoxaagg_pal","c(""int "", ""int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""bool "", ""arma::uvec "", ""arma::uvec "", ""arma::uvec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "", ""int "", ""double "")","c("" dfmax"", "" ntie"", "" ntietr"", "" b"", "" w"", "" x"", "" xtr"", "" xva"", "" yva"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" tietr"", "" tie1tr"", "" tie2tr"", "" tie3tr"", "" del"", "" deltr"", "" delva"", "" l"", "" dl"", "" lam1"", "" lam2"", "" meas"", "" maxiter"", "" cri"")"
"2787","glmaag","findCox1se","c(""int "", ""int "", ""int "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""bool "", ""arma::uvec& "", ""arma::uvec& "", ""arma::uvec& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""int "", ""double "", ""arma::mat& "")","c("" n"", "" p"", "" ntie"", "" b"", "" w"", "" x"", "" tie"", "" tie1"", "" tie2"", "" tie3"", "" del"", "" l"", "" dl"", "" maxiter"", "" cri"", "" tune"")"
"2788","glmaag","loginet","c(""double "", ""arma::vec "", ""arma::mat "", ""const arma::vec& "", ""arma::mat "", ""bool "", ""int "", ""double "")","c("" b0"", "" b"", "" x"", "" y"", "" l"", "" intercept"", "" maxiter"", "" cri"")"
"2789","glmaag","logiaagg","c(""double "", ""arma::vec "", ""double "", ""double "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""bool "", ""int "", ""double "")","c("" b0"", "" b"", "" lam1"", "" lam2"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" intercept"", "" maxiter"", "" cri"")"
"2790","glmaag","cvlogiaagg","c(""int "", ""int "", ""arma::vec "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::uvec& "", ""bool "", ""bool "", ""int "", ""double "")","c("" nf"", "" dfmax"", "" b"", "" x"", "" y"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" cvwhich"", "" intercept"", "" meas"", "" maxiter"", "" cri"")"
"2791","glmaag","sslogiaagg","c(""arma::vec "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::umat& "", ""bool "", ""int "", ""double "")","c("" b"", "" x"", "" y"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" sswhich"", "" intercept"", "" maxiter"", "" cri"")"
"2792","glmaag","sslogiaagg_pal","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "", ""int "", ""double "")","c("" b"", "" xtr"", "" ytr"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" intercept"", "" maxiter"", "" cri"")"
"2793","glmaag","logiaagg_search","c(""int "", ""arma::vec "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""bool "", ""int "", ""double "")","c("" dfmax"", "" b"", "" x"", "" y"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" intercept"", "" maxiter"", "" cri"")"
"2794","glmaag","logiaagg_search_pal","c(""int "", ""arma::vec "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""arma::vec& "", ""double "", ""bool "", ""int "", ""double "")","c("" dfmax"", "" b"", "" x"", "" y"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" intercept"", "" maxiter"", "" cri"")"
"2795","glmaag","cvlogiaagg_pal","c(""int "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""int "", ""double "")","c("" dfmax"", "" b"", "" xtr"", "" xva"", "" ytr"", "" yva"", "" l"", "" dl"", "" w"", "" lam1"", "" lam2"", "" intercept"", "" meas"", "" maxiter"", "" cri"")"
"2796","glmaag","cvloginet1","c(""int "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""bool "", ""const arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" x"", "" y"", "" b"", "" l1"", "" l2"", "" lam2"", "" bets"", "" intercept"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2797","glmaag","cvloginet1_pal","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""int "", ""double "")","c("" xtr"", "" xva"", "" ytr"", "" yva"", "" b"", "" l1"", "" l2"", "" lam2"", "" bets"", "" intercept"", "" meas"", "" maxiter"", "" cri"")"
"2798","glmaag","cvloginet2","c(""int "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""arma::vec& "", ""bool "", ""const arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" x"", "" y"", "" b"", "" l"", "" lam2"", "" intercept"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2799","glmaag","cvloginet2_pal","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""bool "", ""bool "", ""int "", ""double "")","c("" xtr"", "" xva"", "" ytr"", "" yva"", "" b"", "" l"", "" lam2"", "" intercept"", "" meas"", "" maxiter"", "" cri"")"
"2800","glmaag","findlogi1se","c(""double "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""bool "", ""int "", ""double "", ""const arma::mat& "")","c("" b0"", "" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" intercept"", "" maxiter"", "" cri"", "" tune"")"
"2801","glmaag","lrnet","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "")","c("" x"", "" y"", "" l"")"
"2802","glmaag","lraagg","c(""arma::vec "", ""double "", ""double "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""int "", ""double "")","c("" b"", "" lam1"", "" lam2"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" maxiter"", "" cri"")"
"2803","glmaag","cvlrnet1","c(""int "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""const arma::uvec& "", ""bool "")","c("" nf"", "" x"", "" y"", "" l1"", "" l2"", "" lam2"", "" bets"", "" cvwhich"", "" meas"")"
"2804","glmaag","cvlrnet1_pal","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "")","c("" xtr"", "" xva"", "" ytr"", "" yva"", "" l1"", "" l2"", "" lam2"", "" bets"", "" meas"")"
"2805","glmaag","cvlrnet2","c(""int "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""arma::vec& "", ""const arma::uvec& "", ""bool "")","c("" nf"", "" x"", "" y"", "" l"", "" lam2"", "" cvwhich"", "" meas"")"
"2806","glmaag","cvlrnet2_pal","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""bool "")","c("" xtr"", "" xva"", "" ytr"", "" yva"", "" l"", "" lam2"", "" meas"")"
"2807","glmaag","cvlraagg","c(""int "", ""int "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::uvec& "", ""bool "", ""int "", ""double "")","c("" nf"", "" dfmax"", "" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" lam1"", "" lam2"", "" cvwhich"", "" meas"", "" maxiter"", "" cri"")"
"2808","glmaag","cvlraagg_pal","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""bool "", ""int "", ""double "")","c("" dfmax"", "" b"", "" w"", "" xtr"", "" xva"", "" ytr"", "" yva"", "" l"", "" dl"", "" lam1"", "" lam2"", "" meas"", "" maxiter"", "" cri"")"
"2809","glmaag","sslraagg","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const arma::umat& "", ""int "", ""double "")","c("" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" lam1"", "" lam2"", "" sswhich"", "" maxiter"", "" cri"")"
"2810","glmaag","sslraagg_pal","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""double "")","c("" b"", "" w"", "" xtr"", "" ytr"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2811","glmaag","lraagg_search","c(""int "", ""arma::vec "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""int "", ""double "")","c("" dfmax"", "" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2812","glmaag","lraagg_search_pal","c(""int "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""double "")","c("" dfmax"", "" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" lam1"", "" lam2"", "" maxiter"", "" cri"")"
"2813","glmaag","findlr1se","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""int "", ""double "", ""const arma::mat& "")","c("" b"", "" w"", "" x"", "" y"", "" l"", "" dl"", "" maxiter"", "" cri"", "" tune"")"
"2814","glmdisc","predictlogisticRegression","c(""const Eigen::MatrixXd "", ""const Eigen::VectorXd "")","c("" test"", "" parameters"")"
"2815","glmmsr","continuous_beliefs__append_glmm_belief","c(""glmmsr::RcppR6::RcppR6<std::vector<MixedContinuousBelief> > "", ""std::vector<int> "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::SparseMatrix<double> "", ""Eigen::VectorXi "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" items"", "" X"", "" Zt"", "" Lambdat"", "" Lind"", "" response"", "" weights"")"
"2816","glmmsr","continuous_beliefs__append_normal_belief","c(""glmmsr::RcppR6::RcppR6<std::vector<MixedContinuousBelief> > "", ""std::vector<int> "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "")","c("" obj_"", "" items"", "" mean"", "" precision"")"
"2817","glmmsr","continuous_beliefs__size","glmmsr::RcppR6::RcppR6<std::vector<MixedContinuousBelief> > "," obj_"
"2818","glmmsr","calibration_parameters__theta__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2819","glmmsr","calibration_parameters__theta__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""Eigen::VectorXd "")","c("" obj_"", "" value"")"
"2820","glmmsr","calibration_parameters__beta__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2821","glmmsr","calibration_parameters__beta__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""Eigen::VectorXd "")","c("" obj_"", "" value"")"
"2822","glmmsr","calibration_parameters__family__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2823","glmmsr","calibration_parameters__family__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""std::string "")","c("" obj_"", "" value"")"
"2824","glmmsr","calibration_parameters__link__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2825","glmmsr","calibration_parameters__link__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""std::string "")","c("" obj_"", "" value"")"
"2826","glmmsr","calibration_parameters__n_sparse_levels__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2827","glmmsr","calibration_parameters__n_sparse_levels__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""int "")","c("" obj_"", "" value"")"
"2828","glmmsr","calibration_parameters__n_quadrature_points__get","glmmsr::RcppR6::RcppR6<Parameters> "," obj_"
"2829","glmmsr","calibration_parameters__n_quadrature_points__set","c(""glmmsr::RcppR6::RcppR6<Parameters> "", ""int "")","c("" obj_"", "" value"")"
"2830","glmmsr","cluster_graph__ctor","std::vector<MixedContinuousBelief> "," beliefs"
"2831","glmmsr","cluster_graph__compute_log_normalizing_constant","c(""glmmsr::RcppR6::RcppR6<ClusterGraph> "", ""Eigen::VectorXd "", ""Eigen::SparseMatrix<double> "", ""Parameters "")","c("" obj_"", "" mean"", "" precision"", "" parameters"")"
"2832","glmmsr","cluster_graph__width__get","glmmsr::RcppR6::RcppR6<ClusterGraph> "," obj_"
"2833","glmmsr","extended_family__ctor","c(""std::string "", ""std::string "")","c("" family"", "" link"")"
"2834","glmmsr","extended_family__evaluate","c(""glmmsr::RcppR6::RcppR6<Family> "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" linear_predictor"", "" response"", "" weights"")"
"2835","glmmsr","extended_family__evaluate_d1","c(""glmmsr::RcppR6::RcppR6<Family> "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" linear_predictor"", "" response"", "" weights"")"
"2836","glmmsr","extended_family__evaluate_d2","c(""glmmsr::RcppR6::RcppR6<Family> "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" linear_predictor"", "" response"", "" weights"")"
"2837","glmmsr","extended_family__evaluate_d3","c(""glmmsr::RcppR6::RcppR6<Family> "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" linear_predictor"", "" response"", "" weights"")"
"2838","glmmsr","extended_family__evaluate_d4","c(""glmmsr::RcppR6::RcppR6<Family> "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "", ""Eigen::ArrayXd "")","c("" obj_"", "" linear_predictor"", "" response"", "" weights"")"
"2839","goldi","match","c(""arma::uvec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::uvec "", ""std::vector<std::string> "", ""std::vector<std::string> "")","c("" term_vector"", "" pdf_tdm"", "" term_tdm"", "" thresholds"", "" pdf_index"", "" terms"", "" sentences"")"
"2840","graphkernels","CalculateKernelCpp","c(""List "", ""NumericVector "", ""Int "")","c("" graph_info_list"", "" par_r"", "" kernel_type"")"
"2841","graphkernels","CalculateGraphletKernelCpp","c(""vector<SparseMatrix<Int>>& "", ""vector<vector<vector<Int>>>& "", ""Int "", ""bool "")","c("" graph_adj_all"", "" graph_adjlist_all"", "" k"", "" connected"")"
"2842","graphql","dump_json_ast","c(""String "", ""bool "")","c("" graph"", "" schema"")"
"2843","gren","est_param","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""arma::vec "", ""double "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "")","c("" xr"", "" xu"", "" kappa"", "" m"", "" n"", "" p"", "" ciold"", "" phi"", "" chiold"", "" lambda2"", "" lambdag"", "" lambdagold"", "" intercept"", "" unpen"", "" posterior"", "" elbo"", "" start"")"
"2844","greybox","polyprod","c(""SEXP "", ""SEXP "")","c("" x"", "" y"")"
"2845","grf","causal_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""double "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" reduced_form_weight"", "" alpha"", "" imbalance_penalty"", "" stabilize_splits"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2846","grf","causal_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"", "" estimate_variance"")"
"2847","grf","causal_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" num_threads"", "" estimate_variance"")"
"2848","grf","ll_causal_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""std::vector<double> "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" test_matrix"", "" sparse_test_matrix"", "" ll_lambda"", "" ll_weight_penalty"", "" linear_correction_variables"", "" num_threads"", "" estimate_variance"")"
"2849","grf","ll_causal_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""std::vector<double> "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" ll_lambda"", "" ll_weight_penalty"", "" linear_correction_variables"", "" num_threads"", "" estimate_variance"")"
"2850","grf","custom_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2851","grf","custom_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"")"
"2852","grf","custom_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""unsigned int "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" num_threads"")"
"2853","grf","instrumental_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""double "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" instrument_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" reduced_form_weight"", "" alpha"", "" imbalance_penalty"", "" stabilize_splits"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2854","grf","instrumental_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" instrument_index"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"", "" estimate_variance"")"
"2855","grf","instrumental_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" treatment_index"", "" instrument_index"", "" num_threads"", "" estimate_variance"")"
"2856","grf","quantile_train","c(""std::vector<double> "", ""bool "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""unsigned int "", ""unsigned int "", ""int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""int "", ""unsigned int "")","c("" quantiles"", "" regression_splitting"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2857","grf","quantile_predict","c(""List "", ""std::vector<double> "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "")","c("" forest_object"", "" quantiles"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"")"
"2858","grf","quantile_predict_oob","c(""List "", ""std::vector<double> "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""unsigned int "")","c("" forest_object"", "" quantiles"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" num_threads"")"
"2859","grf","regression_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2860","grf","ll_regression_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""double "", ""bool "", ""std::vector<size_t> "", ""size_t "", ""std::vector<double> "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""size_t "", ""double "", ""double "", ""std::vector<size_t> "", ""unsigned int "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" sample_weight_index"", "" ll_split_lambda"", "" ll_split_weight_penalty"", "" ll_split_variables"", "" ll_split_cutoff"", "" overall_beta"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" ci_group_size"", "" alpha"", "" imbalance_penalty"", "" clusters"", "" samples_per_cluster"", "" num_threads"", "" seed"")"
"2861","grf","ll_regression_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""std::vector<double> "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" test_matrix"", "" sparse_test_matrix"", "" ll_lambda"", "" ll_weight_penalty"", "" linear_correction_variables"", "" num_threads"", "" estimate_variance"")"
"2862","grf","ll_regression_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""std::vector<double> "", ""bool "", ""std::vector<size_t> "", ""unsigned int "", ""bool "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" ll_lambda"", "" ll_weight_penalty"", "" linear_correction_variables"", "" num_threads"", "" estimate_variance"")"
"2863","grf","survival_train","c(""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""unsigned int "", ""unsigned int "", ""unsigned int "", ""double "", ""bool "", ""double "", ""bool "", ""double "", ""size_t "", ""std::vector<size_t> "", ""unsigned int "", ""bool "", ""unsigned int "", ""unsigned int "")","c("" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" censor_index"", "" sample_weight_index"", "" use_sample_weights"", "" mtry"", "" num_trees"", "" min_node_size"", "" sample_fraction"", "" honesty"", "" honesty_fraction"", "" honesty_prune_leaves"", "" alpha"", "" num_failures"", "" clusters"", "" samples_per_cluster"", "" compute_oob_predictions"", "" num_threads"", "" seed"")"
"2864","grf","survival_predict","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""unsigned int "", ""size_t "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" censor_index"", "" sample_weight_index"", "" use_sample_weights"", "" test_matrix"", "" sparse_test_matrix"", "" num_threads"", "" num_failures"")"
"2865","grf","survival_predict_oob","c(""List "", ""NumericMatrix "", ""Eigen::SparseMatrix<double> "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""unsigned int "", ""size_t "")","c("" forest_object"", "" train_matrix"", "" sparse_train_matrix"", "" outcome_index"", "" censor_index"", "" sample_weight_index"", "" use_sample_weights"", "" num_threads"", "" num_failures"")"
"2866","grove","fitGrove","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""int "", ""int "")","c("" D"", "" X"", "" p"", "" tau_par"", "" eta_par"", "" gamma_par"", "" init_state"", "" nu"", "" sigma0"", "" alpha"", "" beta"", "" n_samp"", "" transition_mode"")"
"2867","grove","fitGroveML","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" D"", "" X"", "" p"", "" tau_par"", "" eta_par"", "" gamma_par"", "" init_state"", "" nu"", "" sigma0"", "" alpha"", "" beta"", "" transition_mode"")"
"2868","gsisdecoder","decode_ids_cpp","std::vector< std::string > "," new_id"
"2869","gtfsrouter","rcpp_convert_time","const std::string& "," hms"
"2870","gtfsrouter","rcpp_time_to_seconds","std::vector <std::string> "," times"
"2871","gtfsrouter","rcpp_csa_isochrone","c(""DataFrame "", ""DataFrame "", ""const size_t "", ""const size_t "", ""const std::vector <size_t> "", ""const int "", ""const int "")","c("" timetable"", "" transfers"", "" nstations"", "" ntrips"", "" start_stations"", "" start_time"", "" end_time"")"
"2872","gtfsrouter","rcpp_csa_matrix","c(""DataFrame "", ""DataFrame "", ""const size_t "", ""const size_t "", ""const std::vector <size_t> "", ""const std::vector <size_t> "", ""const int "", ""const int "")","c("" timetable"", "" transfers"", "" nstations"", "" ntrips"", "" start_stations"", "" end_stations"", "" start_time"", "" max_transfers"")"
"2873","gtfsrouter","rcpp_make_timetable","c(""DataFrame "", ""std::vector <std::string> "", ""std::vector <std::string> "")","c("" stop_times"", "" stop_ids"", "" trip_ids"")"
"2874","gtfsrouter","rcpp_csa","c(""DataFrame "", ""DataFrame "", ""const size_t "", ""const size_t "", ""const std::vector <size_t> "", ""const std::vector <size_t> "", ""const int "", ""const int "")","c("" timetable"", "" transfers"", "" nstations"", "" ntrips"", "" start_stations"", "" end_stations"", "" start_time"", "" max_transfers"")"
"2875","gwfa","gwfa_c","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""float "", ""int "", ""NumericVector "", ""NumericVector "")","c("" pt_x"", "" pt_y"", "" coord_x"", "" coord_y"", "" bandwith"", "" taille_sample"", "" rayons"", "" qs"")"
"2876","hadron","read_nissa_textcf_kernel","c(""CharacterVector "", ""CharacterVector "", ""const unsigned int "", ""DataFrame "")","c("" file_basenames_to_read"", "" smear_combs_to_read"", "" nts"", "" combs_to_read"")"
"2877","haven","df_parse_sas_file","c(""List "", ""List "", ""std::string "", ""std::string "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec_b7dat"", "" spec_b7cat"", "" encoding"", "" catalog_encoding"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2878","haven","df_parse_sas_raw","c(""List "", ""List "", ""std::string "", ""std::string "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec_b7dat"", "" spec_b7cat"", "" encoding"", "" catalog_encoding"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2879","haven","df_parse_xpt_file","c(""List "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2880","haven","df_parse_xpt_raw","c(""List "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2881","haven","df_parse_dta_file","c(""List "", ""std::string "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2882","haven","df_parse_dta_raw","c(""List "", ""std::string "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2883","haven","df_parse_sav_file","c(""List "", ""std::string "", ""bool "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" user_na"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2884","haven","df_parse_sav_raw","c(""List "", ""std::string "", ""bool "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" user_na"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2885","haven","df_parse_por_file","c(""List "", ""std::string "", ""bool "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" user_na"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2886","haven","df_parse_por_raw","c(""List "", ""std::string "", ""bool "", ""std::vector<std::string> "", ""long "", ""long "", ""std::string "")","c("" spec"", "" encoding"", "" user_na"", "" cols_skip"", "" n_max"", "" rows_skip"", "" name_repair"")"
"2887","haven","write_sav_","c(""List "", ""CharacterVector "", ""bool "")","c("" data"", "" path"", "" compress"")"
"2888","haven","write_dta_","c(""List "", ""CharacterVector "", ""int "", ""RObject "")","c("" data"", "" path"", "" version"", "" label"")"
"2889","haven","write_sas_","c(""List "", ""CharacterVector "")","c("" data"", "" path"")"
"2890","haven","write_xpt_","c(""List "", ""CharacterVector "", ""int "", ""std::string "")","c("" data"", "" path"", "" version"", "" name"")"
"2891","hawkes","simulateHawkes","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lambda0"", "" alpha"", "" beta"", "" horizon"")"
"2892","hawkes","jumpMean","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lambda0"", "" alpha"", "" beta"", "" tau"")"
"2893","hawkes","jumpVariance","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lambda0"", "" alpha"", "" beta"", "" tau"")"
"2894","hawkes","jumpAutocorrelation","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lambda0"", "" alpha"", "" beta"", "" tau"", "" lag"")"
"2895","hawkes","likelihoodHawkes","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" lambda0"", "" alpha"", "" beta"", "" history"")"
"2896","hdbm","run_hdbm_mcmc","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""double "", ""double "", ""int "", ""int "")","c("" Y"", "" A"", "" M"", "" C1"", "" C2"", "" beta_m_init"", "" alpha_a_init"", "" pi_m_init"", "" pi_a_init"", "" burnin"", "" ndraws"")"
"2897","hdme","mu_lasso","c(""arma::vec "", ""double "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "")","c("" omega"", "" gamma"", "" W"", "" z"", "" betaInit"", "" activeSet"")"
"2898","hdpGLM","dpGLM_mcmc","c(""arma::colvec "", ""arma::mat "", ""arma::colvec "", ""int "", ""List "", ""String "", ""List "", ""double "", ""int "", ""int "", ""int "")","c("" y"", "" X"", "" weights"", "" K"", "" fix"", "" family"", "" mcmc"", "" epsilon"", "" leapFrog"", "" n_display"", "" hmc_iter"")"
"2899","hdpGLM","hdpGLM_mcmc","c(""arma::colvec "", ""arma::mat "", ""arma::mat "", ""arma::colvec "", ""arma::colvec "", ""int "", ""List "", ""String "", ""List "", ""double "", ""int "", ""int "", ""int "")","c("" y"", "" X"", "" W"", "" C"", "" weights"", "" K"", "" fix"", "" family"", "" mcmc"", "" epsilon"", "" leapFrog"", "" n_display"", "" hmc_iter"")"
"2900","higlasso","generate_Xi","arma::field <arma::mat> "," Xm"
"2901","higlasso","higlasso_internal","c(""arma::vec "", ""arma::field <arma::mat> "", ""arma::field <arma::mat> "", ""arma::mat "", ""arma::field <arma::vec> "", ""arma::field                                  <arma::vec> "", ""double "", ""double "", ""double "", ""int "", ""double "")","c("" Y"", "" Xm"", "" Xi_init"", "" Z"", "" beta"", "" eta_init"", "" l1"", "" l2"", "" sigma"", "" maxit"", "" delta"")"
"2902","hipread","read_chunked_long","c(""CharacterVector "", ""Environment "", ""int "", ""CharacterVector "", ""CharacterVector "", ""List "", ""List "", ""List "", ""int "", ""bool "", ""CharacterVector "", ""bool "")","c("" filename"", "" callback"", "" chunksize"", "" var_names"", "" var_types"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" skip"", "" isGzipped"", "" encoding"", "" progress"")"
"2903","hipread","read_chunked_list","c(""CharacterVector "", ""Environment "", ""int "", ""List "", ""List "", ""List "", ""List "", ""List "", ""int "", ""bool "", ""CharacterVector "", ""bool "")","c("" filename"", "" callback"", "" chunksize"", "" var_names_"", "" var_types_"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" skip"", "" isGzipped"", "" encoding"", "" progress"")"
"2904","hipread","read_freqs","c(""CharacterVector "", ""CharacterVector "", ""List "", ""List "", ""bool "", ""bool "")","c("" filename"", "" var_names"", "" rt_info_"", "" var_pos_info_"", "" isGzipped"", "" progress"")"
"2905","hipread","read_long","c(""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""List "", ""List "", ""List "", ""int "", ""int "", ""bool "", ""CharacterVector "", ""bool "")","c("" filename"", "" var_names"", "" var_types"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" skip"", "" n_max"", "" isGzipped"", "" encoding"", "" progress"")"
"2906","hipread","read_list","c(""CharacterVector "", ""List "", ""List "", ""List "", ""List "", ""List "", ""int "", ""int "", ""bool "", ""CharacterVector "", ""bool "")","c("" filename"", "" var_names_"", "" var_types_"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" skip"", "" n_max"", "" isGzipped"", "" encoding"", "" progress"")"
"2907","hipread","start_yield","c(""CharacterVector "", ""bool "", ""int "")","c("" filename"", "" isGzipped"", "" skip"")"
"2908","hipread","reset_yield","c(""XPtrDataSource "", ""int "")","c("" data"", "" skip"")"
"2909","hipread","yield_is_done","XPtrDataSource "," data"
"2910","hipread","next_yield_long","c(""XPtrDataSource "", ""CharacterVector "", ""CharacterVector "", ""List "", ""List "", ""List "", ""int "", ""CharacterVector "")","c("" data"", "" var_names"", "" var_types"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" yield_size"", "" encoding"")"
"2911","hipread","next_yield_list","c(""XPtrDataSource "", ""List "", ""List "", ""List "", ""List "", ""List "", ""int "", ""CharacterVector "")","c("" data"", "" var_names_"", "" var_types_"", "" rt_info_"", "" var_pos_info_"", "" var_opts_"", "" yield_size"", "" encoding"")"
"2912","hit","dend2hier","c(""List "", ""NumericVector "", ""CharacterVector "")","c("" x"", "" height"", "" newNames"")"
"2913","hkevp","mcmc_hkevp","c(""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""int const& "", ""int const& "", ""int const& "", ""bool const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""bool const& "", ""arma::vec const& "", ""std::string const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""arma::mat const& "", ""double const& "", ""arma::vec const& "", ""arma::vec const& "", 
""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "")","c("" Y"", "" sites"", "" knots"", "" niter"", "" nburn"", "" trace"", "" quiet"", "" dss"", "" dsk"", "" nas"", "" spatial_covariates"", "" log_scale"", "" gev_vary"", "" correlation"", "" gevloc_init"", "" gevscale_init"", "" gevshape_init"", "" ranges_init"", "" sills_init"", "" alpha_init"", "" tau_init"", "" A_init"", "" B_init"", "" constant_gev_prior"", "" beta_variance_prior"", "" range_prior"", "" sill_prior"", "" alpha_prior"", "" tau_prior"", "" gev_jumps"", "" range_jumps"", "" alpha_jumps"", "" tau_jumps"", "" A_jumps"", "" B_jumps"")"
"2914","hkevp","mcmc_deponly","c(""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""int const& "", ""int const& "", ""int const& "", ""bool const& "", ""double const& "", ""arma::mat const& "", ""arma::mat const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""arma::vec const& "", ""arma::vec const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "")","c("" Y"", "" sites"", "" knots"", "" niter"", "" nburn"", "" trace"", "" quiet"", "" dist_max"", "" dsk"", "" nas"", "" alpha_init"", "" tau_init"", "" A_init"", "" B_init"", "" alpha_prior"", "" tau_prior"", "" alpha_jumps"", "" tau_jumps"", "" A_jumps"", "" B_jumps"")"
"2915","hkevp","mcmc_latent","c(""arma::mat const& "", ""arma::mat const& "", ""int const& "", ""int const& "", ""int const& "", ""bool const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""bool const& "", ""arma::vec const& "", ""std::string const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""double const& "", ""arma::mat const& "", ""double const& "", ""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "")","c("" Y"", "" sites"", "" niter"", "" nburn"", "" trace"", "" quiet"", "" dss"", "" nas"", "" spatial_covariates"", "" log_scale"", "" gev_vary"", "" correlation"", "" gevloc_init"", "" gevscale_init"", "" gevshape_init"", "" ranges_init"", "" sills_init"", "" constant_gev_prior"", "" beta_variance_prior"", "" range_prior"", "" sill_prior"", "" gev_jumps"", "" range_jumps"")"
"2916","hommel","findalpha","c(""std::vector<double>& "", ""int "", ""std::vector<double>& "", ""bool "")","c("" p"", "" m"", "" simesfactor"", "" simes"")"
"2917","hommel","findsimesfactor","c(""bool "", ""int "")","c("" simes"", "" m"")"
"2918","hommel","adjustedElementary","c(""std::vector<double>& "", ""std::vector<double>& "", ""int "", ""std::vector<double>& "")","c("" p"", "" alpha"", "" m"", "" simesfactor"")"
"2919","hommel","adjustedIntersection","c(""double "", ""std::vector<double>& "", ""int "", ""std::vector<double>& "")","c("" pI"", "" alpha"", "" m"", "" simesfactor"")"
"2920","hommel","findHalpha","c(""std::vector<double>& "", ""double "", ""int "")","c("" jumpalpha"", "" alpha"", "" m"")"
"2921","hommel","findConcentration","c(""std::vector<double>& "", ""double "", ""int "", ""double "", ""int "")","c("" p"", "" simesfactor"", "" h"", "" alpha"", "" m"")"
"2922","hommel","findDiscoveries","c(""std::vector<double>& "", ""std::vector<double>& "", ""double "", ""int "", ""double "", ""int "", ""int "")","c("" p"", "" allp"", "" simesfactor"", "" h"", "" alpha"", "" k"", "" m"")"
"2923","hopit","pstdnorm","const Eigen::VectorXd "," v"
"2924","hopit","dstdnorm","const Eigen::VectorXd "," v"
"2925","hopit","dstdlogis","const Eigen::VectorXd "," v"
"2926","hopit","pstdlogis","const Eigen::VectorXd "," v"
"2927","hopit","colpath","c(""const Eigen::MatrixXd "", ""const Eigen::VectorXi "", ""const int "")","c("" m"", "" v"", "" offset"")"
"2928","hopit","glm2hopit","c(""const Eigen::VectorXd "", ""const Eigen::VectorXd "", ""const Eigen::VectorXd "", ""const int "")","c("" latent_params"", "" thresh_lambda"", "" thresh_gamma"", "" thresh_1_exp"")"
"2929","hopit","glm2hopit_nogamma","c(""const Eigen::VectorXd "", ""const Eigen::VectorXd "", ""const int "")","c("" latent_params"", "" thresh_lambda"", "" thresh_1_exp"")"
"2930","hopit","ind_latent_thresh","c(""const Eigen::MatrixXd "", ""const Eigen::VectorXd "", ""const Eigen::VectorXd "")","c("" thresh_mm"", "" thresh_lambda"", "" thresh_gamma"")"
"2931","hopit","getThresholds","c(""const Eigen::MatrixXd "", ""const Eigen::VectorXd "", ""const Eigen::VectorXd "", ""const int "", ""const double "", ""const int "")","c("" thresh_mm"", "" thresh_lambda"", "" thresh_gamma"", "" thresh_no_cov"", "" thresh_start"", "" thresh_1_exp"")"
"2932","hopit","LLFunc","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXi "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::VectorXi "", ""const int "", ""const int "", ""const int "", ""const int "", ""const int "", ""const Eigen::VectorXd "", ""const double "", ""const int "", ""const double "")","c("" parameters"", "" yi"", "" latent_mm"", "" thresh_mm"", "" parcount"", "" hasdisp"", "" link"", "" thresh_no_cov"", "" negative"", "" use_weights"", "" weights"", "" thresh_start"", "" thresh_1_exp"", "" out_val"")"
"2933","hopit","LLFuncIndv","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXi "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::VectorXi "", ""const int "", ""const int "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const Eigen::VectorXd "")","c("" parameters"", "" yi"", "" latent_mm"", "" thresh_mm"", "" parcount"", "" hasdisp"", "" link"", "" thresh_no_cov"", "" negative"", "" use_weights"", "" thresh_start"", "" thresh_1_exp"", "" weights"")"
"2934","hopit","LLGradFunc","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXi "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::VectorXi "", ""const int "", ""const int "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const Eigen::VectorXd "")","c("" parameters"", "" yi"", "" YYY1"", "" YYY2"", "" YYY3"", "" YYY4"", "" latent_mm"", "" thresh_mm"", "" thresh_extd"", "" parcount"", "" hasdisp"", "" link"", "" thresh_no_cov"", "" negative"", "" use_weights"", "" thresh_start"", "" thresh_1_exp"", "" weights"")"
"2935","hopit","LLGradFuncIndv","c(""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::VectorXi "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::MatrixXd "", ""const Eigen::VectorXi "", ""const int "", ""const int "", ""const int "", ""const int "", ""const int "", ""const double "", ""const int "", ""const Eigen::VectorXd "")","c("" parameters"", "" yi"", "" YYY1"", "" YYY2"", "" YYY3"", "" YYY4"", "" latent_mm"", "" thresh_mm"", "" thresh_extd"", "" parcount"", "" hasdisp"", "" link"", "" thresh_no_cov"", "" negative"", "" use_weights"", "" thresh_start"", "" thresh_1_exp"", "" weights"")"
"2936","hsrecombi","LDHScpp","c(""Nullable<NumericMatrix> "", ""Nullable<NumericMatrix> "", ""double "", ""double "", ""double "", ""double "", ""bool "", ""double "")","c("" XGF1"", "" XGF2"", "" fAA"", "" fAB"", "" fBA"", "" theta"", "" display"", "" threshold"")"
"2937","htdp","displace","c(""NumericMatrix "", ""Date "", ""Date "", ""int "")","c("" xy"", "" t0"", "" t1"", "" iopt"")"
"2938","htmltidy","do_the_tidy","c(""std::string "", ""List "", ""bool "")","c("" source"", "" options"", "" show_errors"")"
"2939","hts","cgm_c","c(""SEXP "", ""SEXP "")","c("" As"", "" bs"")"
"2940","hunspell","R_hunspell_dict","c(""String "", ""CharacterVector "", ""StringVector "")","c("" affix"", "" dict"", "" add_words"")"
"2941","hunspell","R_hunspell_info","DictPtr "," ptr"
"2942","hunspell","R_hunspell_check","c(""DictPtr "", ""StringVector "")","c("" ptr"", "" words"")"
"2943","hunspell","R_hunspell_suggest","c(""DictPtr "", ""StringVector "")","c("" ptr"", "" words"")"
"2944","hunspell","R_hunspell_analyze","c(""DictPtr "", ""StringVector "")","c("" ptr"", "" words"")"
"2945","hunspell","R_hunspell_stem","c(""DictPtr "", ""StringVector "")","c("" ptr"", "" words"")"
"2946","hunspell","R_hunspell_find","c(""DictPtr "", ""StringVector "", ""std::string "")","c("" ptr"", "" text"", "" format"")"
"2947","hunspell","R_hunspell_parse","c(""DictPtr "", ""StringVector "", ""std::string "")","c("" ptr"", "" text"", "" format"")"
"2948","hyper2","identityL","c(""const List& "", ""const NumericVector& "")","c("" L"", "" p"")"
"2949","hyper2","addL","c(""const List "", ""const NumericVector "", ""const List "", ""const NumericVector "")","c("" L1"", "" p1"", "" L2"", "" p2"")"
"2950","hyper2","equality","c(""const List "", ""const NumericVector "", ""const List "", ""const NumericVector "")","c("" L1"", "" p1"", "" L2"", "" p2"")"
"2951","hyper2","accessor","c(""const List "", ""const NumericVector "", ""const List "")","c("" L"", "" powers"", "" Lwanted"")"
"2952","hyper2","overwrite","c(""const List "", ""const NumericVector "", ""const List "", ""const NumericVector "")","c("" L1"", "" powers1"", "" L2"", "" powers2"")"
"2953","hyper2","assigner","c(""const List "", ""const NumericVector "", ""const List "", ""const NumericVector "")","c("" L"", "" p"", "" L2"", "" value"")"
"2954","hyper2","evaluate","c(""const List "", ""const NumericVector "", ""const NumericVector "")","c("" L"", "" powers"", "" probs"")"
"2955","hyper2","differentiate","c(""const List "", ""const NumericVector "", ""const NumericVector "", ""const unsigned int "")","c("" L"", "" powers"", "" probs"", "" n"")"
"2956","iccbeta","icc_beta_cpp","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::mat& "", ""double "")","c("" X"", "" l2id"", "" T"", "" vy"")"
"2957","icr","alpha_k_cpp","c(""NumericMatrix "", ""int "", ""bool "", ""bool "", ""int "", ""int "", ""NumericVector "", ""int "")","c("" data"", "" metric"", "" bootstrap"", "" bootnp"", "" nboot"", "" nnp"", "" cmrg_seed"", "" n_threads"")"
"2958","ideq","eof","c(""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::colvec "", ""arma::mat "", ""arma::mat "", ""NumericVector "", ""CharacterVector "", ""const int "", ""const bool "")","c("" Y"", "" F"", "" G_0"", "" Sigma_G_inv"", "" m_0"", "" C_0"", "" scale_W"", "" params"", "" proc_model"", "" n_samples"", "" verbose"")"
"2959","ideq","ide","c(""arma::mat "", ""arma::mat "", ""arma::colvec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::cube "", ""arma::cube "", ""arma::mat "", ""NumericVector "", ""const int "", ""const bool "")","c("" Y"", "" locs"", "" m_0"", "" C_0"", "" mean_mu_kernel"", "" var_mu_kernel"", "" K"", "" scale_Sigma_kernel"", "" scale_W"", "" params"", "" n_samples"", "" verbose"")"
"2960","image.CannyEdges","canny_edge_detector","c(""IntegerVector "", ""int "", ""int "", ""double "", ""double "", ""double "", ""bool "")","c("" image"", "" X"", "" Y"", "" s"", "" low_thr"", "" high_thr"", "" accGrad"")"
"2961","image.CornerDetectionHarris","detect_corners","c(""NumericVector "", ""int "", ""int "", ""float "", ""float "", ""float "", ""float "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" x"", "" nx"", "" ny"", "" k"", "" sigma_d"", "" sigma_i"", "" threshold"", "" gaussian"", "" gradient"", "" strategy"", "" Nselect"", "" measure"", "" Nscales"", "" precision"", "" cells"", "" verbose"")"
"2962","image.binarization","doxa_binary","c(""IntegerVector "", ""int "", ""int "", ""std::string "", ""List "")","c("" x"", "" height"", "" width"", "" type"", "" opts"")"
"2963","image.dlib","dlib_fhog","c(""std::vector<int> "", ""int "", ""int "", ""const int "", ""const int "", ""const int "")","c("" x"", "" rows"", "" cols"", "" cell_size"", "" filter_rows_padding"", "" filter_cols_padding"")"
"2964","image.dlib","dlib_surf_points","c(""std::vector<int> "", ""int "", ""int "", ""long "", ""double "")","c("" x"", "" rows"", "" cols"", "" max_points"", "" detection_threshold"")"
"2965","image.textlinedetector","cvmat_bgr","c(""RawVector "", ""int "", ""int "")","c("" img"", "" width"", "" height"")"
"2966","image.textlinedetector","cvmat_bw","c(""RawVector "", ""int "", ""int "")","c("" img"", "" width"", "" height"")"
"2967","image.textlinedetector","cvmat_rect","c(""XPtrMat "", ""int "", ""int "", ""int "", ""int "")","c("" ptr"", "" x"", "" y"", "" width"", "" height"")"
"2968","image.textlinedetector","cvmat_polygon","c(""XPtrMat "", ""List "", ""bool "", ""bool "", ""int "")","c("" ptr"", "" pts"", "" convex"", "" crop"", "" color"")"
"2969","image.textlinedetector","cvmat_bitmap","XPtrMat "," ptr"
"2970","image.textlinedetector","cvmat_info","XPtrMat "," image"
"2971","image.textlinedetector","textlinedetector_astarpath","c(""XPtrMat "", ""bool "", ""int "", ""int "", ""bool "")","c("" ptr"", "" morph"", "" step"", "" mfactor"", "" trace"")"
"2972","image.textlinedetector","textlinedetector_crop","XPtrMat "," ptr"
"2973","image.textlinedetector","textlinedetector_resize","c(""XPtrMat "", ""int "")","c("" ptr"", "" width"")"
"2974","image.textlinedetector","textlinedetector_binarization","c(""XPtrMat "", ""bool "", ""int "")","c("" ptr"", "" light"", "" type"")"
"2975","image.textlinedetector","textlinedetector_linesegmentation","c(""XPtrMat "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" ptr"", "" chunksNumber"", "" chunksProcess"", "" kernelSize"", "" sigma"", "" theta"")"
"2976","image.textlinedetector","textlinedetector_wordsegmentation","c(""XPtrMat "", ""int "", ""int "", ""int "")","c("" ptr"", "" kernelSize"", "" sigma"", "" theta"")"
"2977","image.textlinedetector","sieve","bool "," original"
"2978","imbalance","hClustering","c(""arma::mat& "", ""double "")","c("" distance_matrix"", "" threshold"")"
"2979","imbalance","computeGameProfiles","c(""arma::mat "", ""arma::umat "", ""arma::mat "", ""int "", ""double "")","c("" probs"", "" knn_neighbours"", "" partial_payoffs"", "" iterations"", "" smooth_factor"")"
"2980","imbalance","bestGaussianBandwidth","c(""arma::mat& "", ""arma::mat& "")","c("" dataset"", "" covInv"")"
"2981","impactflu","method1_cpp","c(""const int "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "")","c("" init_pop_size"", "" vaccinations"", "" cases"", "" ve"")"
"2982","impactflu","method3_cpp","c(""const int "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "")","c("" init_pop_size"", "" vaccinations"", "" cases"", "" ve"")"
"2983","impactflu","sim_reference_cpp","c(""const int "", ""const IntegerVector& "", ""const IntegerVector& "", ""const NumericVector& "", ""const int "", ""bool "")","c("" init_pop_size"", "" vaccinations"", "" cases_novac"", "" ve"", "" lag"", "" deterministic"")"
"2984","imptree","treebuilder_cpp","c(""const IntegerMatrix& "", ""const List& "")","c("" data"", "" config"")"
"2985","imptree","hasRoot_cpp","XPtr<Node> "," prootnode"
"2986","sboost","predict_cpp","c(""const NumericMatrix& "", ""const List& "")","c("" features"", "" classifier"")"
"2987","imptree","treeInformation_cpp","XPtr<Node> "," prootnode"
"2988","imptree","treePrint_cpp","c(""XPtr<Node> "", ""const int "", ""const std::string& "")","c("" prootnode"", "" nsmall"", "" sep"")"
"2989","imptree","getNode_cpp","c(""XPtr<Node> "", ""IntegerVector "")","c("" prootnode"", "" idxs"")"
"2990","imptree","createProbIntInformation_cpp","c(""const IntegerVector& "", ""const List& "", ""const bool "", ""const bool "")","c("" vec"", "" config"", "" minentropy"", "" maxentropy"")"
"2991","imputeMulti","count_compare","c(""IntegerMatrix& "", ""IntegerMatrix& "", ""const std::string& "")","c("" x"", "" dat"", "" hasNA"")"
"2992","imputeMulti","supDistC","c(""const NumericVector& "", ""const NumericVector& "")","c("" x"", "" y"")"
"2993","imputeMulti","marg_comp_compare","c(""IntegerMatrix& "", ""IntegerMatrix& "", ""const bool "")","c("" marg"", "" complete"", "" marg_to_complete"")"
"2994","imputeTS","locf","c(""NumericVector "", ""bool "")","c("" x"", "" reverse"")"
"2995","imputeTS","ma","c(""NumericVector "", ""int "", ""String "")","c("" x"", "" k"", "" weighting"")"
"2996","indelmiss","loopC","c(""NumericVector "", ""int "", ""IntegerVector "", ""IntegerVector "", ""List "", ""NumericMatrix "", ""int "")","c("" nodelist"", "" al"", "" x"", "" x2"", "" pm"", "" Lix"", "" finind"")"
"2997","indelmiss","allpatt_loopC","c(""NumericVector "", ""int "", ""IntegerVector "", ""IntegerVector "", ""List "", ""List "", ""int "")","c("" nodelist"", "" al"", "" x"", "" x2"", "" pm_plc"", "" Lix"", "" finind"")"
"2998","independence","calc_taustar","const std::vector<unsigned long>& "," perm"
"2999","independence","calc_hoeffding","const std::vector<unsigned long>& "," perm"
"3000","independence","calc_refined","const std::vector<unsigned long>& "," perm"
"3001","inplace","add_all_mult","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3002","inplace","add_subvec_mult","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3003","inplace","add_submat_mult","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3004","inplace","add_all_one","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3005","inplace","add_subvec_one","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3006","inplace","add_submat_one","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3007","inplace","add_sweep1","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3008","inplace","add_sweep2","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3009","inplace","divide_all_mult","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3010","inplace","divide_subvec_mult","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3011","inplace","divide_submat_mult","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3012","inplace","divide_all_one","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3013","inplace","divide_subvec_one","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3014","inplace","divide_submat_one","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3015","inplace","divide_sweep1","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3016","inplace","divide_sweep2","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3017","inplace","multiply_all_mult","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3018","inplace","multiply_subvec_mult","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3019","inplace","multiply_submat_mult","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3020","inplace","multiply_all_one","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3021","inplace","multiply_subvec_one","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3022","inplace","multiply_submat_one","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3023","inplace","multiply_sweep1","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3024","inplace","multiply_sweep2","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3025","inplace","substract_all_mult","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3026","inplace","substract_subvec_mult","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3027","inplace","substract_submat_mult","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3028","inplace","substract_all_one","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3029","inplace","substract_subvec_one","c(""SEXP "", ""const NumericVector& "", ""SEXP "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3030","inplace","substract_submat_one","c(""SEXP "", ""const IntegerVector& "", ""const IntegerVector& "", ""SEXP "")","c("" x"", "" i"", "" j"", "" val"")"
"3031","inplace","substract_sweep1","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3032","inplace","substract_sweep2","c(""SEXP "", ""SEXP "")","c("" x"", "" val"")"
"3033","springer","ScoreU","c(""int "", ""arma::vec& "", ""arma::vec& "", ""arma::mat& "", ""int "", ""arma::vec& "", ""char "", ""char "")","c("" n"", "" k"", "" y"", "" x"", "" p"", "" beta"", "" func"", "" corr"")"
"3034","interleave","rcpp_earcut","List& "," polygon"
"3035","interleave","rcpp_interleave","SEXP& "," obj"
"3036","interleave","rcpp_interleave_point","SEXP& "," lst"
"3037","interleave","rcpp_interleave_line","SEXP& "," lst"
"3038","interleave","rcpp_interleave_triangle","c(""SEXP& "", ""List "")","c("" obj"", "" properties"")"
"3039","interleave","test_interleave","SEXP "," obj"
"3040","interleave","test_list_rows","SEXP "," obj"
"3041","interleave","test_list_element_count","SEXP "," obj"
"3042","interleave","test_unlist_list","SEXP "," obj"
"3043","interleave","test_interleave_primitive","c(""SEXP "", ""int "")","c("" obj"", "" primitive_type"")"
"3044","interleave","test_interleave_triangle","c(""SEXP "", ""List "")","c("" obj"", "" properties"")"
"3045","interleave","test_subset_vector","c(""SEXP "", ""IntegerVector "")","c("" v"", "" indices"")"
"3046","intervalaverage","Cintervalaverage","c(""List "", ""IntegerVector "", ""IntegerVector "", ""int "", ""int "", ""CharacterVector "")","c("" values_list"", "" start_vector"", "" end_vector"", "" start_scalar"", "" end_scalar"", "" value_names"")"
"3047","intkrige","dist_cpp","c(""const arma::mat& "", ""const arma::mat& "", ""const bool& "")","c("" loc1"", "" loc2"", "" geographic"")"
"3048","intkrige","nrStep","c(""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" pen"")"
"3049","intkrige","nrStep_long","c(""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "", ""const double& "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" pen"", "" len"")"
"3050","intkrige","nrStep_2","c(""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "", ""const double& "", ""const double& "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" r"", "" threshold"", "" len"")"
"3051","intkrige","newRap","c(""arma::colvec "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "", ""const double& "", ""const int& "", ""const double& "", ""const int& "", ""const double& "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" threshold"", "" tolq"", "" maxq"", "" tolp"", "" maxp"", "" eta"")"
"3052","intkrige","newRap_long","c(""arma::colvec "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "", ""const double& "", ""const int& "", ""const double& "", ""const int& "", ""const double& "", ""const double& "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" threshold"", "" tolq"", "" maxq"", "" tolp"", "" maxp"", "" eta"", "" r"")"
"3053","intkrige","newRap_2","c(""arma::colvec "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::colvec& "", ""const arma::colvec& "", ""const double& "", ""const double& "", ""const int& "", ""const double& "", ""const int& "", ""const double& "", ""double "")","c("" lam"", "" pCovC"", "" lCovC"", "" pCovR"", "" lCovR"", "" pCovCR"", "" lCovCR"", "" A"", "" threshold"", "" tolq"", "" maxq"", "" tolp"", "" maxp"", "" eta"", "" r"")"
"3054","intkrige","nrShell","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::colvec& "", ""const double& "", ""const double& "", ""const int& "", ""const double& "", ""const int& "", ""const double& "", ""double "", ""double "", ""const bool& "")","c("" pCovC"", "" pCovR"", "" pCovCR"", "" lCovC"", "" lCovR"", "" lCovCR"", "" values"", "" A"", "" thresh"", "" tolq"", "" maxq"", "" tolp"", "" maxp"", "" eta"", "" r"", "" trend"", "" fast"")"
"3055","intsurv","rcpp_cIndex","c(""const arma::vec& "", ""arma::vec "", ""const arma::vec& "", ""arma::vec "")","c("" time"", "" event"", "" risk_score"", "" weight"")"
"3056","intsurv","rcpp_coxph_cure","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const unsigned int& "", ""const bool& "", ""const arma::vec& "", ""const arma::vec& "", ""const bool& "", ""const bool& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& "")","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" bootstrap"", "" firth"", "" cox_start"", "" cure_start"", "" cox_standardize"", "" cure_standardize"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", "" verbose"")"
"3057","intsurv","rcpp_coxph_cure_reg","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const double& "", ""const double& "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const bool "", ""const bool "", ""const unsigned int& "", ""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& ""
)","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" cox_l1_lambda"", "" cox_l2_lambda"", "" cox_l1_penalty_factor"", "" cure_l1_lambda"", "" cure_l2_lambda"", "" cure_l1_penalty_factor"", "" cox_start"", "" cure_start"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" cox_standardize"", "" cure_standardize"", "" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", "" verbose"")"
"3058","intsurv","rcpp_coxph_cure_vs","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const arma::vec& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const bool "", ""const bool "", 
""const unsigned int& "", ""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& "")","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" cox_lambda"", "" cox_alpha"", "" cox_nlambda"", "" cox_lambda_min_ratio"", "" cox_l1_penalty_factor"", "" cure_lambda"", "" cure_alpha"", "" cure_nlambda"", "" cure_lambda_min_ratio"", "" cure_l1_penalty_factor"", "" cox_start"", "" cure_start"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" cox_standardize"", "" cure_standardize"", "" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", 
"" verbose"")"
"3059","intsurv","coxph_cure_uncer","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const unsigned int& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const bool "", ""const bool "", ""const bool& "", ""const unsigned int& "", ""const unsigned int& "", ""const unsigned int& "", ""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& "")","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" bootstrap"", "" cox_start"", "" cure_start"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" cox_standardize"", "" cure_standardize"", "" spline_start"", "" iSpline_num_knots"", "" iSpline_degree"", "" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", "" verbose"")"
"3060","intsurv","coxph_cure_uncer_reg","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const double& "", ""const double& "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const bool "", ""const bool "", ""const bool& "", ""const unsigned int& "", ""const unsigned int& "", ""const unsigned int& "", 
""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& "")","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" cox_l1_lambda"", "" cox_l2_lambda"", "" cox_l1_penalty_factor"", "" cure_l1_lambda"", "" cure_l2_lambda"", "" cure_l1_penalty_factor"", "" cox_start"", "" cure_start"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" cox_standardize"", "" cure_standardize"", "" spline_start"", "" iSpline_num_knots"", "" iSpline_degree"", "" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", "" verbose""
)"
"3061","intsurv","coxph_cure_uncer_vs","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const bool "", ""const arma::vec& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const unsigned int& "", ""const double& "", ""const bool "", ""const bool "", 
""const bool& "", ""const unsigned int& "", ""const unsigned int& "", ""const unsigned int& "", ""double "", ""const double& "", ""const unsigned int& "", ""const unsigned int& "")","c("" time"", "" event"", "" cox_x"", "" cure_x"", "" cure_intercept"", "" cox_lambda"", "" cox_alpha"", "" cox_nlambda"", "" cox_lambda_min_ratio"", "" cox_l1_penalty_factor"", "" cure_lambda"", "" cure_alpha"", "" cure_nlambda"", "" cure_lambda_min_ratio"", "" cure_l1_penalty_factor"", "" cox_start"", "" cure_start"", "" em_max_iter"", "" em_rel_tol"", "" cox_mstep_max_iter"", "" cox_mstep_rel_tol"", "" cure_mstep_max_iter"", "" cure_mstep_rel_tol"", "" cox_standardize"", "" cure_standardize"", "" spline_start"", "" iSpline_num_knots"", "" iSpline_degree"", 
"" tail_completion"", "" tail_tau"", "" pmin"", "" early_stop"", "" verbose"")"
"3062","intsurv","rcpp_coxph","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const bool& "", ""const bool& "")","c("" time"", "" event"", "" x"", "" offset"", "" start"", "" max_iter"", "" rel_tol"", "" early_stop"", "" verbose"")"
"3063","intsurv","rcpp_reg_coxph1","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const double& "", ""arma::vec "", ""const arma::vec& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const bool& "", ""const bool& "")","c("" time"", "" event"", "" x"", "" l1_lambda"", "" l2_lambda"", "" l1_penalty_factor"", "" offset"", "" start"", "" max_iter"", "" rel_tol"", "" early_stop"", "" verbose"")"
"3064","intsurv","rcpp_reg_coxph2","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""arma::vec "", ""const double "", ""const unsigned int& "", ""double "", ""arma::vec "", ""const arma::vec& "", ""const unsigned int "", ""const double "", ""const bool& "", ""const bool& "")","c("" time"", "" event"", "" x"", "" lambda"", "" alpha"", "" nlambda"", "" lambda_min_ratio"", "" l1_penalty_factor"", "" offset"", "" max_iter"", "" rel_tol"", "" early_stop"", "" verbose"")"
"3065","intsurv","rcpp_logistic","c(""const arma::mat& "", ""const arma::vec& "", ""const bool& "", ""const bool& "", ""const arma::vec& "", ""const unsigned int& "", ""const double& "", ""const double& "", ""const bool& "", ""const bool& "")","c("" x"", "" y"", "" intercept"", "" standardize"", "" start"", "" max_iter"", "" rel_tol"", "" pmin"", "" early_stop"", "" verbose"")"
"3066","intsurv","rcpp_firth_logistic","c(""const arma::mat& "", ""const arma::vec& "", ""const bool "", ""const bool "", ""const arma::vec "", ""const unsigned int "", ""const double "")","c("" x"", "" y"", "" intercept"", "" standardize"", "" start"", "" max_iter"", "" rel_tol"")"
"3067","intsurv","rcpp_reg_logistic1","c(""const arma::mat& "", ""const arma::vec& "", ""const double& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "", ""const unsigned int "", ""const double "", ""const bool& "", ""const bool& "")","c("" x"", "" y"", "" l1_lambda"", "" l2_lambda"", "" l1_penalty_factor"", "" start"", "" intercept"", "" max_iter"", "" rel_tol"", "" early_stop"", "" verbose"")"
"3068","intsurv","rcpp_reg_logistic2","c(""const arma::mat& "", ""const arma::vec& "", ""arma::vec "", ""const double "", ""const unsigned int& "", ""double "", ""const arma::vec& "", ""const bool "", ""const unsigned int "", ""const double "", ""const bool& "", ""const bool& "")","c("" x"", "" y"", "" lambda"", "" alpha"", "" nlambda"", "" lambda_min_ratio"", "" penalty_factor"", "" intercept"", "" max_iter"", "" rel_tol"", "" early_stop"", "" verbose"")"
"3069","intsurv","rcpp_mcf_right","c(""const arma::vec& "", ""const arma::vec& "")","c("" time"", "" event"")"
"3070","intsurv","aggregateSum","c(""const arma::vec& "", ""const arma::vec& "", ""const bool "", ""const bool "", ""const bool "")","c("" x"", "" indices"", "" simplify"", "" cumulative"", "" reversely"")"
"3071","intsurv","revcumsum","const arma::vec& "," x"
"3072","isotree","deserialize_IsoForest","RawVector "," src"
"3073","isotree","deserialize_ExtIsoForest","RawVector "," src"
"3074","isotree","deserialize_Imputer","RawVector "," src"
"3075","outliertree","check_null_ptr_model","SEXP "," ptr_model"
"3076","isotree","fit_model","c(""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""size_t "", ""size_t "", ""size_t "", ""size_t "", ""size_t "", ""CharacterVector "", ""bool "", ""bool "", ""bool "", ""size_t "", ""size_t "", ""size_t "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""bool "", ""bool "", ""bool "", ""size_t "", 
""CharacterVector "", ""CharacterVector "", ""int "", ""bool "", ""int "")","c("" X_num"", "" X_cat"", "" ncat"", "" Xc"", "" Xc_ind"", "" Xc_indptr"", "" sample_weights"", "" col_weights"", "" nrows"", "" ncols_numeric"", "" ncols_categ"", "" ndim"", "" ntry"", "" coef_type"", "" coef_by_prop"", "" with_replacement"", "" weight_as_sample"", "" sample_size"", "" ntrees"", "" max_depth"", "" limit_depth"", "" penalize_range"", "" calc_dist"", "" standardize_dist"", "" sq_dist"", "" calc_depth"", "" standardize_depth"", "" weigh_by_kurt"", "" prob_pick_by_gain_avg"", "" prob_split_by_gain_avg"", "" prob_pick_by_gain_pl"", "" prob_split_by_gain_pl"", 
"" min_gain"", "" cat_split_type"", "" new_cat_action"", "" missing_action"", "" all_perm"", "" build_imputer"", "" output_imputations"", "" min_imp_obs"", "" depth_imp"", "" weigh_imp_rows"", "" random_seed"", "" handle_interrupt"", "" nthreads"")"
"3077","isotree","fit_tree","c(""SEXP "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""NumericVector "", ""size_t "", ""size_t "", ""size_t "", ""size_t "", ""size_t "", ""CharacterVector "", ""bool "", ""size_t "", ""bool "", ""bool "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""CharacterVector "", ""CharacterVector "", ""CharacterVector "", ""bool "", ""size_t "", ""SEXP "", ""CharacterVector "", ""CharacterVector "", ""bool "", ""uint64_t "")","c("" model_R_ptr"", "" X_num"", "" X_cat"", "" ncat"", "" Xc"", "" Xc_ind"", "" Xc_indptr"", "" sample_weights"", "" col_weights"", "" nrows"", "" ncols_numeric"", "" ncols_categ"", "" ndim"", "" ntry"", "" coef_type"", "" coef_by_prop"", "" max_depth"", "" limit_depth"", "" penalize_range"", "" weigh_by_kurt"", "" prob_pick_by_gain_avg"", "" prob_split_by_gain_avg"", "" prob_pick_by_gain_pl"", "" prob_split_by_gain_pl"", "" min_gain"", "" cat_split_type"", "" new_cat_action"", "" missing_action"", "" build_imputer"", "" min_imp_obs"", "" imp_R_ptr"", "" depth_imp"", 
"" weigh_imp_rows"", "" all_perm"", "" random_seed"")"
"3078","isotree","predict_iso","c(""SEXP "", ""NumericVector "", ""IntegerVector "", ""bool "", ""NumericVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""size_t "", ""int "", ""bool "")","c("" model_R_ptr"", "" outp"", "" tree_num"", "" is_extended"", "" X_num"", "" X_cat"", "" Xc"", "" Xc_ind"", "" Xc_indptr"", "" Xr"", "" Xr_ind"", "" Xr_indptr"", "" nrows"", "" nthreads"", "" standardize"")"
"3079","isotree","dist_iso","c(""SEXP "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""bool "", ""NumericVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""size_t "", ""int "", ""bool "", ""bool "", ""bool "", ""size_t "")","c("" model_R_ptr"", "" tmat"", "" dmat"", "" rmat"", "" is_extended"", "" X_num"", "" X_cat"", "" Xc"", "" Xc_ind"", "" Xc_indptr"", "" nrows"", "" nthreads"", "" assume_full_distr"", "" standardize_dist"", "" sq_dist"", "" n_from"")"
"3080","isotree","impute_iso","c(""SEXP "", ""SEXP "", ""bool "", ""NumericVector "", ""IntegerVector "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""size_t "", ""int "")","c("" model_R_ptr"", "" imputer_R_ptr"", "" is_extended"", "" X_num"", "" X_cat"", "" Xr"", "" Xr_ind"", "" Xr_indptr"", "" nrows"", "" nthreads"")"
"3081","isotree","get_n_nodes","c(""SEXP "", ""bool "", ""int "")","c("" model_R_ptr"", "" is_extended"", "" nthreads"")"
"3082","isotree","append_trees_from_other","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "")","c("" model_R_ptr"", "" other_R_ptr"", "" imp_R_ptr"", "" oimp_R_ptr"", "" is_extended"")"
"3083","isotree","model_to_sql","c(""SEXP "", ""bool "", ""CharacterVector "", ""CharacterVector "", ""ListOf<CharacterVector> "", ""bool "", ""bool "", ""size_t "", ""int "")","c("" model_R_ptr"", "" is_extended"", "" numeric_colanmes"", "" categ_colnames"", "" categ_levels"", "" output_tree_num"", "" single_tree"", "" tree_num"", "" nthreads"")"
"3084","isotree","model_to_sql_with_select_from","c(""SEXP "", ""bool "", ""CharacterVector "", ""CharacterVector "", ""ListOf<CharacterVector> "", ""CharacterVector "", ""CharacterVector "", ""int "")","c("" model_R_ptr"", "" is_extended"", "" numeric_colanmes"", "" categ_colnames"", "" categ_levels"", "" table_from"", "" select_as"", "" nthreads"")"
"3085","isqg","gamete_ctor","c(""int "", ""isqg::seamless::Trap<Specie> "")","c("" number"", "" spc"")"
"3086","isqg","specie_cus_ctor","c(""Maps "", ""Names "", ""Spots "", ""Map "", ""Spots "", ""Spots "", ""Spots "", ""MPtr "")","c("" input"", "" snps"", "" chrs"", "" loci"", "" index"", "" lwr"", "" upr"", "" custom"")"
"3087","isqg","specie_get_snps","isqg::seamless::Trap<Specie> "," spc"
"3088","isqg","specie_get_chrs","isqg::seamless::Trap<Specie> "," spc"
"3089","isqg","specie_get_loci","isqg::seamless::Trap<Specie> "," spc"
"3090","isqg","genotype_num_ctor","isqg::seamless::Trap<Specimen> "," gid"
"3091","isqg","genotype_cod_ctor","isqg::seamless::Trap<Specimen> "," gid"
"3092","isqg","specimen_get_snps","isqg::seamless::Trap<Specimen> "," gid"
"3093","isqg","specimen_look_num","c(""isqg::seamless::Trap<Specimen> "", ""Code "")","c("" gid"", "" snp"")"
"3094","isqg","specimen_look_cod","c(""isqg::seamless::Trap<Specimen> "", ""Code "")","c("" gid"", "" snp"")"
"3095","isqg","specimen_mirror","isqg::seamless::Trap<Specimen> "," gid"
"3096","isqg","founder","c(""isqg::seamless::Trap<Specie> "", ""Code "")","c("" origin"", "" code"")"
"3097","isqg","import","c(""isqg::seamless::Trap<Specie> "", ""Code "", ""Code "")","c("" origin"", "" cis"", "" trans"")"
"3098","isqg","self","c(""int "", ""isqg::seamless::Trap<Specimen> "")","c("" number"", "" individual"")"
"3099","isqg","dh","c(""int "", ""isqg::seamless::Trap<Specimen> "")","c("" number"", "" individual"")"
"3100","isqg","trait_infty_ctor","c(""isqg::seamless::Trap<Specie> "", ""Codes "", ""double "", ""double "", ""double "")","c("" origin"", "" loci"", "" mu"", "" add"", "" dom"")"
"3101","isqg","trait_quant_ctor","c(""isqg::seamless::Trap<Specie> "", ""Codes "", ""double "", ""Maps "", ""Maps "")","c("" origin"", "" loci"", "" mu"", "" add"", "" dom"")"
"3102","isqg","trait_custm_ctor","c(""isqg::seamless::Trap<Specie> "", ""APtr "", ""SEXP "")","c("" origin"", "" extension"", "" auxiliar"")"
"3103","isqg","trait_alpha_eval","c(""isqg::seamless::Trap<Trait> "", ""isqg::seamless::Trap<Specimen> "")","c("" trait"", "" gid"")"
"3104","ivx","ivx_fit_cpp","c(""const arma::vec& "", ""const arma::mat& "", ""int "")","c("" y"", "" X"", "" K"")"
"3105","jSDM","Rcpp_jSDM_binomial","c(""const int "", ""int "", ""int "", ""arma::uvec "", ""arma::uvec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""const int "", ""const double "", ""const int "")","c("" ngibbs"", "" nthin"", "" nburn"", "" Y"", "" T"", "" X"", "" beta_start"", "" mubeta"", "" Vbeta"", "" seed"", "" ropt"", "" verbose"")"
"3106","jSDM","Rcpp_jSDM_probit_block","c(""const int "", ""int "", ""int "", ""arma::umat "", ""arma::umat "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""const int "", ""const int "")","c("" ngibbs"", "" nthin"", "" nburn"", "" Y"", "" T"", "" X"", "" param_start"", "" Vparam"", "" muparam"", "" VW"", "" W_start"", "" alpha_start"", "" Valpha_start"", "" shape"", "" rate"", "" seed"", "" verbose"")"
"3107","jackalope","merge_all_chromosomes_cpp","SEXP "," ref_genome_ptr"
"3108","jackalope","merge_chromosomes_cpp","c(""SEXP "", ""std::deque<uint64> "")","c("" ref_genome_ptr"", "" chrom_inds"")"
"3109","jackalope","filter_chromosomes_cpp","c(""SEXP "", ""const uint64& "", ""const double& "")","c("" ref_genome_ptr"", "" min_chrom_size"", "" out_chrom_prop"")"
"3110","jackalope","replace_Ns_cpp","c(""SEXP "", ""const std::vector<double>& "", ""uint64 "", ""const bool& "")","c("" ref_genome_ptr"", "" pi_tcag"", "" n_threads"", "" show_progress"")"
"3111","jackalope","create_genome_cpp","c(""const uint64& "", ""const double& "", ""const double& "", ""std::vector<double> "", ""const uint64& "")","c("" n_chroms"", "" len_mean"", "" len_sd"", "" pi_tcag"", "" n_threads"")"
"3112","jackalope","rando_chroms","c(""const uint64& "", ""const double& "", ""const double& "", ""NumericVector "", ""const uint64& "")","c("" n_chroms"", "" len_mean"", "" len_sd"", "" pi_tcag"", "" n_threads"")"
"3113","jackalope","add_ssites_cpp","c(""SEXP& "", ""const std::vector<arma::mat>& "", ""const arma::mat& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""uint64 "", ""const bool& "")","c("" ref_genome_ptr"", "" seg_sites"", "" Q"", "" pi_tcag"", "" insertion_rates"", "" deletion_rates"", "" n_threads"", "" show_progress"")"
"3114","jackalope","illumina_ref_cpp","c(""SEXP "", ""const bool& "", ""const bool& "", ""const std::string& "", ""const int& "", ""const std::string& "", ""const uint64& "", ""const double& "", ""const uint64& "", ""const bool& "", ""const uint64& "", ""const double& "", ""const double& "", ""const uint64& "", ""const uint64& "", ""const std::vector<std::vector<std::vector<double>>>& "", ""const std::vector<std::vector<std::vector<uint8>>>& "", ""const double& "", ""const double& "", ""const std::vector<std::vector<std::vector<double>>>& "", ""const std::vector<std::vector<std::vector<uint8>>>& "", 
""const double& "", ""const double& "", ""const std::vector<std::string>& "")","c("" ref_genome_ptr"", "" paired"", "" matepair"", "" out_prefix"", "" compress"", "" comp_method"", "" n_reads"", "" prob_dup"", "" n_threads"", "" show_progress"", "" read_pool_size"", "" frag_len_shape"", "" frag_len_scale"", "" frag_len_min"", "" frag_len_max"", "" qual_probs1"", "" quals1"", "" ins_prob1"", "" del_prob1"", "" qual_probs2"", "" quals2"", "" ins_prob2"", "" del_prob2"", "" barcodes"")"
"3115","jackalope","illumina_hap_cpp","c(""SEXP "", ""const bool& "", ""const bool& "", ""const std::string& "", ""const bool& "", ""const int& "", ""const std::string& "", ""const uint64& "", ""const double& "", ""const uint64& "", ""const bool& "", ""const uint64& "", ""const std::vector<double>& "", ""const double& "", ""const double& "", ""const uint64& "", ""const uint64& "", ""const std::vector<std::vector<std::vector<double>>>& "", ""const std::vector<std::vector<std::vector<uint8>>>& "", ""const double& "", ""const double& "", ""const std::vector<std::vector<std::vector<double>>>& "", 
""const std::vector<std::vector<std::vector<uint8>>>& "", ""const double& "", ""const double& "", ""const std::vector<std::string>& "")","c("" hap_set_ptr"", "" paired"", "" matepair"", "" out_prefix"", "" sep_files"", "" compress"", "" comp_method"", "" n_reads"", "" prob_dup"", "" n_threads"", "" show_progress"", "" read_pool_size"", "" haplotype_probs"", "" frag_len_shape"", "" frag_len_scale"", "" frag_len_min"", "" frag_len_max"", "" qual_probs1"", "" quals1"", "" ins_prob1"", "" del_prob1"", "" qual_probs2"", "" quals2"", "" ins_prob2"", "" del_prob2"", "" barcodes"")"
"3116","jackalope","pacbio_ref_cpp","c(""SEXP "", ""const std::string& "", ""const int& "", ""const std::string& "", ""const uint64& "", ""const uint64& "", ""const bool& "", ""const uint64& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const std::vector<double>& "", ""const std::vector<uint64>& "", ""const uint64& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const double& "", ""const double& "", ""const double& "", ""const double& ""
)","c("" ref_genome_ptr"", "" out_prefix"", "" compress"", "" comp_method"", "" n_reads"", "" n_threads"", "" show_progress"", "" read_pool_size"", "" prob_dup"", "" scale"", "" sigma"", "" loc"", "" min_read_len"", "" read_probs"", "" read_lens"", "" max_passes"", "" chi2_params_n"", "" chi2_params_s"", "" sqrt_params"", "" norm_params"", "" prob_thresh"", "" prob_ins"", "" prob_del"", "" prob_subst"")"
"3117","jackalope","pacbio_hap_cpp","c(""SEXP "", ""const std::string& "", ""const bool& "", ""const int& "", ""const std::string& "", ""const uint64& "", ""const uint64& "", ""const bool& "", ""const uint64& "", ""const std::vector<double>& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const std::vector<double>& "", ""const std::vector<uint64>& "", ""const uint64& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const std::vector<double>& "", ""const double& "", 
""const double& "", ""const double& "", ""const double& "")","c("" hap_set_ptr"", "" out_prefix"", "" sep_files"", "" compress"", "" comp_method"", "" n_reads"", "" n_threads"", "" show_progress"", "" read_pool_size"", "" haplotype_probs"", "" prob_dup"", "" scale"", "" sigma"", "" loc"", "" min_read_len"", "" read_probs"", "" read_lens"", "" max_passes"", "" chi2_params_n"", "" chi2_params_s"", "" sqrt_params"", "" norm_params"", "" prob_thresh"", "" prob_ins"", "" prob_del"", "" prob_subst"")"
"3118","jackalope","read_fasta_noind","c(""const std::vector<std::string>& "", ""const bool& "", ""const bool& "")","c("" fasta_files"", "" cut_names"", "" remove_soft_mask"")"
"3119","jackalope","read_fasta_ind","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""const bool& "")","c("" fasta_files"", "" fai_files"", "" remove_soft_mask"")"
"3120","jackalope","write_ref_fasta","c(""const std::string& "", ""SEXP "", ""const uint64& "", ""const int& "", ""const std::string& "", ""const bool& "")","c("" out_prefix"", "" ref_genome_ptr"", "" text_width"", "" compress"", "" comp_method"", "" show_progress"")"
"3121","jackalope","write_haps_fasta","c(""std::string "", ""SEXP "", ""const uint64& "", ""const int& "", ""const std::string& "", ""uint64 "", ""const bool& "")","c("" out_prefix"", "" hap_set_ptr"", "" text_width"", "" compress"", "" comp_method"", "" n_threads"", "" show_progress"")"
"3122","jackalope","read_ms_trees_","std::string "," ms_file"
"3123","jackalope","coal_file_sites","std::string "," ms_file"
"3124","jackalope","read_vcf_cpp","c(""SEXP "", ""const std::string& "", ""const bool& "")","c("" reference_ptr"", "" fn"", "" print_names"")"
"3125","jackalope","write_vcf_cpp","c(""std::string "", ""const int& "", ""SEXP "", ""const IntegerMatrix& "", ""const bool& "")","c("" out_prefix"", "" compress"", "" hap_set_ptr"", "" sample_matrix"", "" show_progress"")"
"3126","jackalope","evolve_across_trees","c(""SEXP& "", ""const List& "", ""const std::vector<arma::mat>& "", ""const std::vector<arma::mat>& "", ""const std::vector<arma::mat>& "", ""const std::vector<arma::vec>& "", ""const double& "", ""const arma::vec& "", ""const arma::vec& "", ""const double& "", ""const std::vector<double>& "", ""uint64 "", ""const bool& "")","c("" ref_genome_ptr"", "" genome_phylo_info"", "" Q"", "" U"", "" Ui"", "" L"", "" invariant"", "" insertion_rates"", "" deletion_rates"", "" epsilon"", "" pi_tcag"", "" n_threads"", "" show_progress"")"
"3127","jackalope","print_ref_genome","SEXP "," ref_genome_ptr"
"3128","jackalope","print_hap_set","SEXP "," hap_set_ptr"
"3129","jackalope","make_ref_genome","const std::vector<std::string>& "," chroms"
"3130","jackalope","make_hap_set","c(""SEXP "", ""const uint64& "")","c("" ref_genome_ptr"", "" n_haps"")"
"3131","jackalope","view_ref_genome_nchroms","SEXP "," ref_genome_ptr"
"3132","jackalope","view_hap_set_nchroms","SEXP "," hap_set_ptr"
"3133","jackalope","view_hap_set_nhaps","SEXP "," hap_set_ptr"
"3134","jackalope","view_ref_genome_chrom_sizes","SEXP "," ref_genome_ptr"
"3135","jackalope","view_hap_genome_chrom_sizes","c(""SEXP "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"")"
"3136","jackalope","view_ref_genome_chrom","c(""SEXP "", ""const uint64& "")","c("" ref_genome_ptr"", "" chrom_ind"")"
"3137","jackalope","view_hap_genome_chrom","c(""SEXP "", ""const uint64& "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"", "" chrom_ind"")"
"3138","jackalope","view_ref_genome","SEXP "," ref_genome_ptr"
"3139","jackalope","view_hap_genome","c(""SEXP "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"")"
"3140","jackalope","view_ref_genome_chrom_names","SEXP "," ref_genome_ptr"
"3141","jackalope","view_hap_set_hap_names","SEXP "," hap_set_ptr"
"3142","jackalope","view_ref_genome_gc_content","c(""SEXP "", ""const uint64& "", ""const uint64& "", ""const uint64& "")","c("" ref_genome_ptr"", "" chrom_ind"", "" start"", "" end"")"
"3143","jackalope","view_hap_set_gc_content","c(""SEXP "", ""const uint64& "", ""const uint64& "", ""const uint64& "", ""const uint64& "")","c("" hap_set_ptr"", "" chrom_ind"", "" hap_ind"", "" start"", "" end"")"
"3144","jackalope","view_ref_genome_nt_content","c(""SEXP "", ""const char& "", ""const uint64& "", ""const uint64& "", ""const uint64& "")","c("" ref_genome_ptr"", "" nt"", "" chrom_ind"", "" start"", "" end"")"
"3145","jackalope","view_hap_set_nt_content","c(""SEXP "", ""const char& "", ""const uint64& "", ""const uint64& "", ""const uint64& "", ""const uint64& "")","c("" hap_set_ptr"", "" nt"", "" chrom_ind"", "" hap_ind"", "" start"", "" end"")"
"3146","jackalope","set_ref_genome_chrom_names","c(""SEXP "", ""const std::vector<uint64>& "", ""const std::vector<std::string>& "")","c("" ref_genome_ptr"", "" chrom_inds"", "" names"")"
"3147","jackalope","clean_ref_genome_chrom_names","SEXP "," ref_genome_ptr"
"3148","jackalope","set_hap_set_hap_names","c(""SEXP "", ""const std::vector<uint64>& "", ""const std::vector<std::string>& "")","c("" hap_set_ptr"", "" hap_inds"", "" names"")"
"3149","jackalope","remove_ref_genome_chroms","c(""SEXP "", ""std::vector<uint64> "")","c("" ref_genome_ptr"", "" chrom_inds"")"
"3150","jackalope","remove_hap_set_haps","c(""SEXP "", ""std::vector<uint64> "")","c("" hap_set_ptr"", "" hap_inds"")"
"3151","jackalope","add_ref_genome_chroms","c(""SEXP "", ""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" ref_genome_ptr"", "" new_chroms"", "" new_names"")"
"3152","jackalope","add_hap_set_haps","c(""SEXP "", ""const std::vector<std::string>& "")","c("" hap_set_ptr"", "" new_names"")"
"3153","jackalope","dup_hap_set_haps","c(""SEXP "", ""const std::vector<uint64>& "", ""const std::vector<std::string>& "")","c("" hap_set_ptr"", "" hap_inds"", "" new_names"")"
"3154","jackalope","view_mutations","c(""SEXP "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"")"
"3155","jackalope","examine_mutations","c(""SEXP "", ""const uint64& "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"", "" chrom_ind"")"
"3156","jackalope","add_substitution","c(""SEXP "", ""const uint64& "", ""const uint64& "", ""const char& "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"", "" chrom_ind"", "" nucleo_"", "" new_pos_"")"
"3157","jackalope","add_insertion","c(""SEXP "", ""const uint64& "", ""const uint64& "", ""const std::string& "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"", "" chrom_ind"", "" nucleos_"", "" new_pos_"")"
"3158","jackalope","add_deletion","c(""SEXP "", ""const uint64& "", ""const uint64& "", ""const uint64& "", ""const uint64& "")","c("" hap_set_ptr"", "" hap_ind"", "" chrom_ind"", "" size_"", "" new_pos_"")"
"3159","jackalope","sub_TN93_cpp","c(""const double& "", ""std::vector<double> "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const uint32& "", ""const double& "")","c("" mu"", "" pi_tcag"", "" alpha_1"", "" alpha_2"", "" beta"", "" gamma_shape"", "" gamma_k"", "" invariant"")"
"3160","jackalope","sub_GTR_cpp","c(""const double& "", ""std::vector<double> "", ""const std::vector<double>& "", ""const double& "", ""const uint32& "", ""const double& "")","c("" mu"", "" pi_tcag"", "" abcdef"", "" gamma_shape"", "" gamma_k"", "" invariant"")"
"3161","jackalope","sub_UNREST_cpp","c(""const double& "", ""arma::mat "", ""const double& "", ""const uint32& "", ""const double& "")","c("" mu"", "" Q"", "" gamma_shape"", "" gamma_k"", "" invariant"")"
"3162","jmcm","mcd_estimation","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""bool "", ""bool "", ""std::string "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" start"", "" mean"", "" trace"", "" profile"", "" errormsg"", "" covonly"", "" optim_method"")"
"3163","jmcm","acd_estimation","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""bool "", ""bool "", ""std::string "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" start"", "" mean"", "" trace"", "" profile"", "" errormsg"", "" covonly"", "" optim_method"")"
"3164","jmcm","hpc_estimation","c(""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""bool "", ""bool "", ""bool "", ""bool "", ""std::string "")","c("" m"", "" Y"", "" X"", "" Z"", "" W"", "" start"", "" mean"", "" trace"", "" profile"", "" errormsg"", "" covonly"", "" optim_method"")"
"3165","jmvconnect","readDF","c(""String "", ""SEXP "", ""bool "")","c("" path"", "" columnsReq"", "" headerOnly"")"
"3166","joineRML","expWArma","c(""const List& "", ""const List& "", ""const arma::mat& "", ""const List& "")","c("" iz_"", "" b_"", "" gam"", "" h_"")"
"3167","joineRML","gammaUpdate","c(""const List& "", ""const List& "", ""const List& "", ""const List& "", ""const arma::vec& "", ""const List& "", ""const List& "", ""const int& "", ""const int& "", ""const int& "", ""const arma::vec& "")","c("" b_"", "" z_"", "" w_"", "" pb_"", "" haz"", "" v_"", "" h_"", "" K"", "" q"", "" nev"", "" jcount"")"
"3168","joineRML","hazHat","c(""const List& "", ""const List& "", ""const arma::vec& "")","c("" w_"", "" pb_"", "" nev"")"
"3169","joineRML","gammaUpdate_approx","c(""const List& "", ""const List& "", ""const List& "", ""const List& "", ""const arma::vec& "", ""const List& "", ""const List& "", ""const int& "", ""const int& "", ""const int& "")","c("" b_"", "" z_"", "" w_"", "" pb_"", "" haz"", "" v_"", "" h_"", "" K"", "" q"", "" nev"")"
"3170","joineRML","lambdaUpdate","c(""const List& "", ""const List& "", ""const List& "", ""const List& "", ""const List& "", ""const arma::mat& "", ""const arma::vec& "", ""const int& "", ""const arma::vec& "", ""const List& "")","c("" b_"", "" imat_"", "" zt_"", "" pb_"", "" v_"", "" gam"", "" gam_vec"", "" q"", "" nev"", "" h_"")"
"3171","joineRML","bSim","c(""const int& "", ""const List& "", ""const List& "")","c("" n"", "" Mean_"", "" Sigma_"")"
"3172","jsonify","rcpp_from_json","c(""const char * "", ""bool& "", ""bool& "")","c("" json"", "" simplify"", "" fill_na"")"
"3173","jsonify","rcpp_from_ndjson","c(""const char * "", ""bool& "", ""bool& "")","c("" ndjson"", "" simplify"", "" fill_na"")"
"3174","jsonify","rcpp_get_dtypes","const char * "," json"
"3175","jsonify","rcpp_simplify_vector","c(""List& "", ""int& "", ""R_xlen_t "")","c("" lst"", "" r_type"", "" n"")"
"3176","jsonify","rcpp_pretty_json","const char* "," json"
"3177","jsonify","rcpp_minify_json","const char* "," json"
"3178","jsonify","rcpp_pretty_print","const char* "," json"
"3179","jsonify","rcpp_read_json_file","c(""const char* "", ""const char* "", ""bool& "", ""bool& "", ""int "")","c("" file"", "" mode"", "" simplify"", "" fill_na"", "" buffer_size"")"
"3180","jsonify","rcpp_read_ndjson_file","c(""const char* "", ""const char* "", ""bool& "", ""bool& "")","c("" file"", "" mode"", "" simplify"", "" fill_na"")"
"3181","jsonify","rcpp_to_json","c(""SEXP "", ""bool "", ""int "", ""bool "", ""bool "", ""std::string "")","c("" lst"", "" unbox"", "" digits"", "" numeric_dates"", "" factors_as_string"", "" by"")"
"3182","jsonify","rcpp_to_ndjson","c(""SEXP "", ""bool "", ""int "", ""bool "", ""bool "", ""std::string "")","c("" lst"", "" unbox"", "" digits"", "" numeric_dates"", "" factors_as_string"", "" by"")"
"3183","jsonify","rcpp_validate_json","StringVector "," json"
"3184","jti","rooted_junction_tree","c(""List "", ""int "")","c("" cliques"", "" root"")"
"3185","jti","int_set_intersect","c(""VI& "", ""VI& "")","c("" v1"", "" v2"")"
"3186","kde1d","fit_kde1d_cpp","c(""const Eigen::VectorXd& "", ""size_t "", ""double "", ""double "", ""double "", ""double "", ""size_t "", ""const Eigen::VectorXd& "")","c("" x"", "" nlevels"", "" bw"", "" mult"", "" xmin"", "" xmax"", "" deg"", "" weights"")"
"3187","kde1d","dkde1d_cpp","c(""const Eigen::VectorXd& "", ""const List& "")","c("" x"", "" kde1d_r"")"
"3188","kde1d","pkde1d_cpp","c(""const Eigen::VectorXd& "", ""const List& "")","c("" q"", "" kde1d_r"")"
"3189","kde1d","qkde1d_cpp","c(""const Eigen::VectorXd& "", ""const List& "")","c("" p"", "" kde1d_r"")"
"3190","kdecopula","eval_mr","c(""const arma::mat& "", ""const arma::mat& "", ""const double& "")","c("" uev"", "" dat"", "" b"")"
"3191","kdecopula","eval_beta","c(""const arma::mat& "", ""const arma::mat& "", ""double "")","c("" uev"", "" dat"", "" b"")"
"3192","kdecopula","eval_t","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "")","c("" uev"", "" dat"", "" B"")"
"3193","kdecopula","eval_hfunc_2d","c(""const NumericMatrix& "", ""const int& "", ""const NumericMatrix& "", ""const NumericVector& "")","c("" uev"", "" cond_var"", "" vals"", "" grid"")"
"3194","kdecopula","inv_hfunc","c(""const NumericMatrix& "", ""const int& "", ""const NumericMatrix& "", ""const NumericVector& "")","c("" uev"", "" cond_var"", "" vals"", "" grid"")"
"3195","kdecopula","eval_cdf","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericMatrix& "", ""const IntegerMatrix& "")","c("" uev"", "" vals"", "" grid"", "" helpgrid"", "" helpind"")"
"3196","kdecopula","interp_2d","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericVector& "", ""NumericVector "", ""NumericVector "")","c("" x"", "" vals"", "" grid"", "" tmpgrid"", "" tmpvals"")"
"3197","kdecopula","interp","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const IntegerMatrix& "")","c("" x"", "" vals"", "" grid"", "" helpind"")"
"3198","kdecopula","kern_gauss_1d","c(""const arma::vec& "", ""const double& "")","c("" x"", "" b"")"
"3199","kdecopula","kern_gauss_2d","c(""const arma::vec& "", ""const arma::vec& "", ""const double& "")","c("" x"", "" y"", "" b"")"
"3200","kdecopula","renorm","c(""const NumericVector& "", ""const NumericVector& "", ""const int "", ""const IntegerMatrix& "")","c("" x"", "" grid"", "" times"", "" helpind"")"
"3201","kdtools","matrix_to_tuples","const NumericMatrix& "," x"
"3202","kdtools","tuples_to_matrix","List "," x"
"3203","kdtools","tuples_to_matrix_rows","c(""List "", ""int "", ""int "")","c("" x"", "" a"", "" b"")"
"3204","kdtools","kd_sort_","c(""List "", ""bool "", ""bool "")","c("" x"", "" inplace"", "" parallel"")"
"3205","kdtools","kd_is_sorted_","List "," x"
"3206","kdtools","lex_sort_","c(""List "", ""bool "")","c("" x"", "" inplace"")"
"3207","kdtools","kd_lower_bound_","c(""List "", ""NumericVector "")","c("" x"", "" value"")"
"3208","kdtools","kd_upper_bound_","c(""List "", ""NumericVector "")","c("" x"", "" value"")"
"3209","kdtools","kd_range_query_","c(""List "", ""NumericVector "", ""NumericVector "")","c("" x"", "" lower"", "" upper"")"
"3210","kdtools","kd_rq_indices_","c(""List "", ""NumericVector "", ""NumericVector "")","c("" x"", "" lower"", "" upper"")"
"3211","kdtools","kd_nearest_neighbor_","c(""List "", ""NumericVector "")","c("" x"", "" value"")"
"3212","kdtools","kd_binary_search_","c(""List "", ""NumericVector "")","c("" x"", "" value"")"
"3213","kdtools","kd_nearest_neighbors_","c(""List "", ""NumericVector "", ""int "")","c("" x"", "" value"", "" n"")"
"3214","kdtools","kd_nn_indices_","c(""List "", ""NumericVector "", ""int "")","c("" x"", "" value"", "" n"")"
"3215","kdtools","kd_order_","c(""List "", ""bool "")","c("" x"", "" parallel"")"
"3216","kernelTDA","svmtrain_R","c(""Eigen::MatrixXd "", ""int "", ""int "", ""Eigen::VectorXd "", ""int "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""double "", ""double "", ""Eigen::VectorXi "", ""Eigen::VectorXd "", ""int "", ""double "", ""double "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""double "")","c("" x"", "" r"", "" c"", "" y"", "" rowindex"", "" colindex"", "" svm_type"", "" kernel_type"", "" degree"", "" gamma"", "" coef0"", "" cost"", "" nu"", "" weightlabels"", "" weights"", "" nweights"", "" cache"", "" tolerance"", "" epsilon"", "" shrinking"", "" cross"", "" sparse"", "" probability"", "" nclasses"", "" nr"", "" index"", "" labels"", "" nSV"", "" rho"", "" coefs"", "" sigma"", "" probA"", "" probB"", "" cresults"", "" ctotal1"", "" ctotal2"")"
"3217","kernelTDA","svmpredict_R","c(""int "", ""int "", ""Eigen::MatrixXd "", ""int "", ""int "", ""int "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""int "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""int "", ""int "", ""int "", ""double "", ""double "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXi "", ""Eigen::VectorXi "", ""int "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "")","c("" decisionvalues"", "" probability"", "" v"", "" r"", "" c"", "" rowindex"", "" colindex"", "" coefs"", "" rho"", "" compprob"", "" probA"", "" probB"", "" nclasses"", "" totnSV"", "" labels"", "" nSV"", "" sparsemodel"", "" svm_type"", "" kernel_type"", "" degree"", "" gamma"", "" coef0"", "" x"", "" xr"", "" xrowindex"", "" xcolindex"", "" sparsex"", "" ret"", "" dec"", "" prob"")"
"3218","kernelTDA","wasserstein_distance","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""int "", ""double "", ""double "", ""double "", ""double "")","c("" Diag1"", "" Diag2"", "" q"", "" internal_p"", "" delta"", "" initial_eps"", "" eps_factor"")"
"3219","kernelboot","cpp_rmvk","c(""const int& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const std::string& "", ""const bool& "")","c("" n"", "" y"", "" bandwidth"", "" weights"", "" kernel"", "" shrinked"")"
"3220","kernelboot","cpp_ruvk","c(""const int& "", ""const NumericVector& "", ""const double& "", ""const NumericVector& "", ""const std::string& "", ""const bool& "")","c("" n"", "" y"", "" bandwidth"", "" weights"", "" kernel"", "" shrinked"")"
"3221","keyATM","make_wsz_cpp","c(""List "", ""List "", ""List "")","c("" docs_"", "" info_"", "" initialized_"")"
"3222","keyATM","keyATMvb_call","List "," model"
"3223","keyATM","read_dfm_cpp","c(""Eigen::SparseMatrix<int> "", ""List "", ""CharacterVector "", ""bool "")","c("" dfm"", "" W_raw"", "" vocab"", "" show_progress_bar"")"
"3224","keyATM","keyATM_fit_base","c(""List "", ""int "")","c("" model"", "" iter"")"
"3225","keyATM","keyATM_fit_cov","c(""List "", ""int "")","c("" model"", "" iter"")"
"3226","keyATM","keyATM_fit_HMM","c(""List "", ""int "")","c("" model"", "" iter"")"
"3227","keyATM","keyATM_fit_label","c(""List "", ""int "")","c("" model"", "" iter"")"
"3228","keyATM","keyATM_fit_LDA","c(""List "", ""int "")","c("" model"", "" iter"")"
"3229","keyATM","keyATM_fit_LDAcov","c(""List "", ""int "")","c("" model"", "" iter"")"
"3230","keyATM","keyATM_fit_LDAHMM","c(""List "", ""int "")","c("" model"", "" iter"")"
"3231","kmcudaR","r_kmeans_cuda","c(""NumericMatrix "", ""int "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""bool "", ""SEXP "", ""int "", ""int "")","c("" samples"", "" clusters"", "" tolerance_sexp"", "" init_sexp"", "" yinyang_t_sexp"", "" metric_sexp"", "" average_distance_bool"", "" seed_sexp"", "" device"", "" verbosity"")"
"3232","kmcudaR","r_knn_cuda","c(""int "", ""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""SEXP "", ""int "", ""int "")","c("" k"", "" samples"", "" centroids_sexp"", "" assignments_sexp"", "" metric_sexp"", "" device"", "" verbosity"")"
"3233","kohonen","CreateStdDistancePointers","c(""const IntegerVector& "", ""bool "")","c("" types"", "" considerNaNs"")"
"3234","kohonen","CreateStdDistancePointer","c(""int "", ""bool "")","c("" type"", "" considerNaNs"")"
"3235","kohonen","ObjectDistances","c(""NumericMatrix "", ""IntegerVector "", ""IntegerMatrix "", ""ExpressionVector "", ""NumericVector "")","c("" data"", "" numVars"", "" numNAs"", "" distanceFunctions"", "" weights"")"
"3236","kohonen","RcppSupersom","c(""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""NumericVector "", ""ExpressionVector "", ""IntegerMatrix "", ""NumericMatrix "", ""int "", ""NumericVector "", ""NumericVector "", ""int "")","c("" data"", "" codes"", "" numVars"", "" weights"", "" distanceFunctions"", "" numNAs"", "" neighbourhoodDistances"", "" neighbourhoodFct"", "" alphas"", "" radii"", "" numEpochs"")"
"3237","kohonen","RcppBatchSupersom","c(""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""NumericVector "", ""ExpressionVector "", ""IntegerMatrix "", ""NumericMatrix "", ""int "", ""NumericVector "", ""int "")","c("" data"", "" codes"", "" numVars"", "" weights"", "" distanceFunctions"", "" numNAs"", "" neighbourhoodDistances"", "" neighbourhoodFct"", "" radii"", "" numEpochs"")"
"3238","kohonen","RcppParallelBatchSupersom","c(""NumericMatrix "", ""NumericMatrix "", ""IntegerVector "", ""NumericVector "", ""ExpressionVector "", ""IntegerMatrix "", ""NumericMatrix "", ""int "", ""NumericVector "", ""int "", ""int "")","c("" data"", "" codes"", "" numVars"", "" weights"", "" distanceFunctions"", "" numNAs"", "" neighbourhoodDistances"", "" neighbourhoodFct"", "" radii"", "" numEpochs"", "" numCores"")"
"3239","kohonen","RcppMap","c(""NumericMatrix "", ""/* objects to be mapped */     IntegerVector "", ""IntegerMatrix "", ""NumericMatrix "", ""NumericVector "", ""ExpressionVector "")","c("" data"", "" numVars"", "" numNAs"", "" codes"", "" weights"", "" distanceFunctions"")"
"3240","kvh","kvh_read","c(""std::string "", ""const std::string& "", ""const bool "", ""const bool "", ""const std::string& "", ""const bool "")","c("" fn"", "" comment_str"", "" strip_white"", "" skip_blank"", "" split_str"", "" follow_url"")"
"3241","l0ara","l0araC","c(""arma::mat "", ""arma::vec "", ""String "", ""double "", ""int "", ""double "")","c("" x"", "" y"", "" family"", "" lam"", "" maxit"", "" eps"")"
"3242","landsepi","model_landsepi","c(""List "", ""NumericVector "", ""NumericMatrix "", ""NumericMatrix "", ""List "", ""List "", ""int "", ""List "", ""List "", ""List "")","c("" time_param"", "" area_vector"", "" rotation_matrix"", "" croptypes_cultivars_prop"", "" dispersal"", "" inits"", "" seed"", "" cultivars_param"", "" basic_patho_param"", "" genes_param"")"
"3243","latentgraph","transformEachObs","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" Rj"", "" Rp"", "" RR"", "" RX"")"
"3244","lavaSearch2","OLS_cpp","c(""const arma::mat& "", ""const arma::vec& "")","c("" X"", "" y"")"
"3245","lavaSearch2","OLS2_cpp","c(""const arma::mat& "", ""const arma::vec& "")","c("" X"", "" y"")"
"3246","lavaSearch2","wildBoot_cpp","c(""const arma::mat& "", ""std::vector< arma::uvec > "", ""int "", ""int "", ""int "", ""int "")","c("" iid"", "" lsIndexModel"", "" nSample"", "" nObs"", "" nModel"", "" p"")"
"3247","lazyarray","cpp_create_lazyarray","c(""SEXP& "", ""IntegerVector& "", ""String& "", ""int "", ""bool "")","c("" x"", "" dim"", "" fileName"", "" compression"", "" uniformEncoding"")"
"3248","lazyarray","cpp_load_lazyarray","c(""StringVector& "", ""List& "", ""IntegerVector& "", ""R_xlen_t "", ""SEXP "")","c("" files"", "" partition_locations"", "" partition_dim"", "" ndim"", "" value_type"")"
"3249","lazyarray","test_fstcore_write","String "," filename"
"3250","lazyarray","cpp_fst_meta_orig","String "," fileName"
"3251","lazyarray","cpp_index_to_index","c(""IntegerVector& "", ""List& "", ""IntegerVector& "")","c("" idx"", "" locations"", "" parent_dim"")"
"3252","lazygreedy","lazyGreedy","c(""const arma::mat& "", ""double "")","c("" V"", "" t"")"
"3253","lbfgs","lbfgsOptim","c(""SEXP "", ""SEXP "", ""NumericVector "", ""SEXP "", ""int "", ""int "", ""int "", ""lbfgsfloatval_t "", ""int "", ""lbfgsfloatval_t "", ""int "", ""int "", ""int "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""lbfgsfloatval_t "", ""int "", ""int "")","c("" call_eval"", "" call_grad"", "" vars"", "" env"", "" N"", "" invisible"", "" m"", "" epsilon"", "" past"", "" delta"", "" max_iterations"", "" linesearch"", "" max_linesearch"", "" min_step"", "" max_step"", "" ftol"", "" wolfe"", "" gtol"", "" xtol"", "" orthantwise_c"", "" orthantwise_start"", "" orthantwise_end"")"
"3254","lbfgsb3c","lbfgsb3cpp","c(""NumericVector "", ""Function "", ""Function "", ""NumericVector "", ""NumericVector "", ""List "", ""Environment "")","c("" par"", "" fn"", "" gr"", "" lower"", "" upper"", "" ctrl"", "" rho"")"
"3255","ldat","lmatch_cpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" rv"", "" rvo"", "" rtab"", "" rtabo"", "" rna_incomp"")"
"3256","ldat","order_ldat_cpp","List "," veclist"
"3257","ldat","partial_order_cpp","c(""SEXP "", ""SEXP "")","c("" rv"", "" rpivots"")"
"3258","ldat","partial_sort_cpp","c(""SEXP "", ""SEXP "")","c("" rv"", "" rpivots"")"
"3259","leidenAlg","find_partition","c(""SEXP "", ""std::vector<double>& "", ""double "", ""int "")","c("" graph"", "" edge_weights"", "" resolution"", "" niter"")"
"3260","leontief","input_requirement","c(""const arma::mat& "", ""const arma::vec& "")","c("" X"", "" d"")"
"3261","leontief","augmented_input_requirement","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" X"", "" w"", "" c"", "" d"")"
"3262","leontief","output_allocation","c(""const arma::mat& "", ""const arma::vec& "")","c("" X"", "" d"")"
"3263","leontief","leontief_inverse","const arma::mat& "," A"
"3264","leontief","equilibrium_output","c(""const arma::mat& "", ""const arma::vec& "")","c("" L"", "" d"")"
"3265","leontief","output_multiplier","const arma::mat& "," L"
"3266","leontief","income_multiplier","c(""const arma::mat& "", ""const arma::vec& "")","c("" L"", "" w"")"
"3267","leontief","employment_multiplier","c(""const arma::mat& "", ""const arma::vec& "")","c("" L"", "" e"")"
"3268","leontief","employment_number","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "")","c("" L"", "" e"", "" c"")"
"3269","leontief","backward_linkage","const arma::mat& "," A"
"3270","leontief","forward_linkage","const arma::mat& "," A"
"3271","leontief","power_dispersion","const arma::mat& "," L"
"3272","leontief","power_dispersion_cv","const arma::mat& "," L"
"3273","leontief","sensitivity_dispersion","const arma::mat& "," L"
"3274","leontief","sensitivity_dispersion_cv","const arma::mat& "," L"
"3275","leontief","multiplier_product_matrix","const arma::mat& "," L"
"3276","lfmm","compute_eigen_svd","const Eigen::Map<Eigen::MatrixXd>& "," X"
"3277","lfmm","impute_lfmm_cpp","c(""Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""NumericVector "")","c("" Y"", "" X"", "" U"", "" V"", "" B"", "" missingId"")"
"3278","lfmm","err2_lfmm_cpp","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "")","c("" Y"", "" X"", "" U"", "" V"", "" B"")"
"3279","lfmm","err2s_lfmm_cpp","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "")","c("" Y"", "" X"", "" U"", "" V"", "" B"")"
"3280","lfmm","sum2_lm_cpp","c(""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "")","c("" Y"", "" X"", "" B"")"
"3281","liger","gseaRandCore","c(""arma::vec "", ""arma::vec "", ""int "")","c("" sset"", "" eso"", "" nsamples"")"
"3282","liger","gseaBulkCore","c(""arma::mat "", ""arma::vec "", ""int "")","c("" setm"", "" eso"", "" nsamples"")"
"3283","lineup2","corr_betw_matrices_paired","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" x"", "" y"")"
"3284","lineup2","corr_betw_matrices_unpaired_bestright","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" x"", "" y"")"
"3285","lineup2","corr_betw_matrices_unpaired_bestpairs","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const double "")","c("" x"", "" y"", "" corr_threshold"")"
"3286","lineup2","corr_betw_matrices_unpaired_all","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" x"", "" y"")"
"3287","lineup2","rmsd_betw_matrices","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" x"", "" y"")"
"3288","lineup2","mad_betw_matrices","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" x"", "" y"")"
"3289","lineup2","fscale","c(""const NumericVector& "", ""const NumericVector& "")","c("" x"", "" y"")"
"3290","locStra","powerMethodCpp","c(""MatrixXd& "", ""VectorXd& "", ""double "", ""int "")","c("" X"", "" v"", "" eps"", "" maxiter"")"
"3291","locStra","covMatrixCpp_dense","MatrixXd& "," X"
"3292","locStra","jaccardMatrixCpp_dense","MatrixXd& "," X"
"3293","locStra","sMatrixCpp_dense","c(""MatrixXd "", ""bool "", ""bool "", ""int "")","c("" X"", "" Djac"", "" phased"", "" minVariants"")"
"3294","locStra","grmCpp_dense","c(""MatrixXd "", ""bool "")","c("" X"", "" robust"")"
"3295","locStra","covMatrixCpp_sparse","c(""MatrixXd& "", ""int "", ""int "")","c("" T"", "" nrows"", "" ncols"")"
"3296","locStra","jaccardMatrixCpp_sparse","c(""MatrixXi& "", ""int "", ""int "")","c("" T"", "" nrows"", "" ncols"")"
"3297","locStra","sMatrixCpp_sparse","c(""MatrixXi& "", ""int "", ""int "", ""bool "", ""bool "", ""int "")","c("" T"", "" nrows"", "" ncols"", "" Djac"", "" phased"", "" minVariants"")"
"3298","locStra","grmCpp_sparse","c(""MatrixXd& "", ""int "", ""int "", ""bool "")","c("" T"", "" nrows"", "" ncols"", "" robust"")"
"3299","locStra","fastCovEVsCpp_dense","c(""MatrixXd& "", ""int "", ""int "")","c("" X"", "" k"", "" q"")"
"3300","locStra","fastJaccardEVsCpp_dense","c(""MatrixXd "", ""int "", ""int "")","c("" X"", "" k"", "" q"")"
"3301","locStra","fastSMatrixEVsCpp_dense","c(""MatrixXd "", ""int "", ""bool "", ""int "", ""int "")","c("" X"", "" k"", "" Djac"", "" minVariants"", "" q"")"
"3302","locStra","fastGrmEVsCpp_dense","c(""MatrixXd& "", ""int "", ""bool "", ""int "")","c("" X"", "" k"", "" robust"", "" q"")"
"3303","locStra","fastCovEVsCpp_sparse","c(""MatrixXd& "", ""int "", ""int "", ""int "", ""int "")","c("" T"", "" nrows"", "" ncols"", "" k"", "" q"")"
"3304","locStra","fastJaccardEVsCpp_sparse","c(""MatrixXd& "", ""int "", ""int "", ""int "", ""int "")","c("" T"", "" nrows"", "" ncols"", "" k"", "" q"")"
"3305","locStra","fastSMatrixEVsCpp_sparse","c(""MatrixXi& "", ""int "", ""int "", ""int "", ""bool "", ""int "", ""int "")","c("" T"", "" nrows"", "" ncols"", "" k"", "" Djac"", "" minVariants"", "" q"")"
"3306","locStra","fastGrmEVsCpp_sparse","c(""MatrixXd& "", ""int "", ""int "", ""int "", ""bool "", ""int "")","c("" T"", "" nrows"", "" ncols"", "" k"", "" robust"", "" q"")"
"3307","lodr","LOD_fit","c(""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat "", ""int "", ""double "", ""int "", ""arma::mat "")","c("" y_data"", "" x_data"", "" mean_x_preds"", "" beta"", "" sigma_2_y"", "" sigma_x_preds"", "" no_of_samples"", "" threshold"", "" max_iterations"", "" LOD_u_l"")"
"3308","lodr","LOD_bootstrap_fit","c(""int "", ""arma::vec "", ""arma::mat "", ""int "", ""double "", ""int "", ""arma::mat "")","c("" num_of_boots"", "" y_data"", "" x_data"", "" no_of_samples"", "" threshold"", "" max_iterations"", "" LOD_u_l"")"
"3309","lowmemtkmeans","cluster_BIC","c(""arma::mat& "", ""arma::mat& "")","c("" data"", "" centres"")"
"3310","lowmemtkmeans","tkmeans","c(""arma::mat& "", ""int "", ""double "", ""arma::vec "", ""int "", ""int "", ""double "", ""bool "")","c("" M"", "" k"", "" alpha"", "" weights"", "" nstart"", "" iter"", "" tol"", "" verbose"")"
"3311","lowmemtkmeans","scale_mat_inplace","arma::mat& "," M"
"3312","lowmemtkmeans","nearest_cluster","c(""arma::mat& "", ""arma::mat& "")","c("" data"", "" centres"")"
"3313","lowpassFilter","convolve","c(""const NumericVector& "", ""const NumericVector& "")","c("" val"", "" kern"")"
"3314","lowpassFilter","convolveOversampling","c(""const NumericVector& "", ""const NumericVector& "", ""unsigned int "")","c("" val"", "" kern"", "" factor"")"
"3315","lowpassFilter","deconvolveJump","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "", ""const int& "", ""const List& "", ""const NumericVector& "")","c("" grid"", "" observations"", "" time"", "" leftValue"", "" rightValue"", "" typeFilter"", "" inputFilter"", "" covariances"")"
"3316","lowpassFilter","deconvolvePeak","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const double& "", ""const double& "", ""const int& "", ""const List& "", ""const NumericVector& "", ""const double& "")","c("" gridLeft"", "" gridRight"", "" observations"", "" time"", "" leftValue"", "" rightValue"", "" typeFilter"", "" inputFilter"", "" covariances"", "" tolerance"")"
"3317","lslx","compute_saturated_moment_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "", ""int "", ""double "")","c("" y_obs"", "" w"", "" m_idx"", "" saturated_mean"", "" saturated_cov"", "" iter_other_max"", "" tol_other"")"
"3318","lslx","compute_saturated_moment_acov_response_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""List "")","c("" y_obs"", "" w"", "" m_idx"", "" m2_idx"", "" saturated_mean"", "" saturated_cov"", "" saturated_moment_acov"")"
"3319","lslx","compute_saturated_moment_acov_moment_cpp","c(""int "", ""List "", ""List "", ""List "")","c("" n_observation"", "" sample_proportion"", "" saturated_cov"", "" saturated_moment_acov"")"
"3320","lslx","compute_regularized_path_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "")","c("" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"", "" fitted_result"")"
"3321","lslx","compute_stepwise_path_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "")","c("" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"", "" fitted_result"")"
"3322","lslx","compute_none_path_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "")","c("" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"", "" fitted_result"")"
"3323","lslx","test_optimization_cpp","c(""List "", ""List "", ""List "", ""List "", ""List "")","c("" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"", "" fitted_result"")"
"3324","lslx","compute_coefficient_matrix_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3325","lslx","compute_implied_cov_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3326","lslx","compute_implied_mean_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3327","lslx","compute_model_jacobian_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3328","lslx","compute_expected_information_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3329","lslx","compute_observed_information_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3330","lslx","compute_score_acov_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3331","lslx","compute_loss_value_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3332","lslx","compute_loss_gradient_cpp","c(""NumericVector "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3333","lslx","compute_regularizer_gradient_cpp","c(""NumericVector "", ""double "", ""double "", ""double "", ""double "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" lambda_1st"", "" lambda_2nd"", "" delta_1st"", "" delta_2nd"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3334","lslx","compute_objective_gradient_cpp","c(""NumericVector "", ""double "", ""double "", ""double "", ""double "", ""List "", ""List "", ""List "", ""List "")","c("" theta_value"", "" lambda_1st"", "" lambda_2nd"", "" delta_1st"", "" delta_2nd"", "" reduced_data"", "" reduced_model"", "" control"", "" supplied_result"")"
"3335","ltsspca","findpcs","c(""arma::mat "", ""arma::mat "", ""arma::rowvec "", ""int "", ""double "", ""int "", ""int "", ""int "", ""double "", ""bool "")","c("" x"", "" B"", "" mu"", "" h"", "" s"", "" N1"", "" N2"", "" Npc"", "" tol"", "" fixed"")"
"3336","ltsspca","findpcs2","c(""arma::mat "", ""arma::mat "", ""arma::rowvec "", ""int "", ""double "", ""int "", ""int "", ""int "", ""double "", ""bool "")","c("" x"", "" B"", "" mu"", "" h"", "" s"", "" N1"", "" N2"", "" Npc"", "" tol"", "" fixed"")"
"3337","ltsspca","findpcs0","c(""arma::mat "", ""arma::mat "", ""arma::rowvec "", ""int "", ""double "")","c("" x"", "" B"", "" mu"", "" Npc"", "" tol"")"
"3338","ltsspca","findsparsePC","c(""arma::mat "", ""arma::mat "", ""arma::rowvec "", ""double "", ""int "", ""int "", ""int "", ""double "")","c("" x"", "" b"", "" mu"", "" alpha"", "" l"", "" N2bis"", "" Npc"", "" tol"")"
"3339","m2r","m2_tokenize_cpp","std::string& "," s"
"3340","mapdeck","rcpp_aggregate_geojson","c(""DataFrame "", ""List "", ""StringVector "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_column"", "" digits"", "" layer_name"")"
"3341","mapdeck","rcpp_aggregate_geojson_df","c(""DataFrame "", ""List "", ""List "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3342","mapdeck","rcpp_aggregate_polyline","c(""DataFrame "", ""List "", ""StringVector "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" layer_name"")"
"3343","mapdeck","rcpp_geojson_geojson","c(""DataFrame "", ""List "", ""std::string "", ""int "")","c("" data"", "" params"", "" geometry_column"", "" digits"")"
"3344","mapdeck","mesh_to_sf","c(""List& "", ""StringVector "")","c("" mesh"", "" vertices"")"
"3345","mapdeck","rcpp_mesh_geojson","c(""List "", ""List "", ""StringVector "", ""int "")","c("" mesh"", "" params"", "" vertices"", "" digits"")"
"3346","mapdeck","rcpp_mesh_geojson2","c(""List "", ""StringVector "")","c("" mesh"", "" vertices"")"
"3347","mapdeck","rcpp_od_geojson","c(""DataFrame "", ""List "", ""StringVector "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3348","mapdeck","rcpp_od_geojson_df","c(""DataFrame "", ""List "", ""List "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3349","mapdeck","rcpp_od_polyline","c(""DataFrame "", ""List "", ""StringVector "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" layer_name"")"
"3350","mapdeck","rcpp_path_geojson","c(""DataFrame "", ""List "", ""StringVector "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3351","mapdeck","rcpp_path_polyline","c(""DataFrame "", ""List "", ""StringVector "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" layer_name"")"
"3352","mapdeck","rcpp_point_df_columnar","c(""DataFrame "", ""List "", ""List "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3353","mapdeck","rcpp_point_sf_columnar","c(""DataFrame "", ""List "", ""List "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3354","mapdeck","rcpp_point_geojson_df","c(""DataFrame "", ""List "", ""List "", ""int "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" digits"", "" layer_name"")"
"3355","mapdeck","rcpp_point_polyline","c(""DataFrame "", ""List "", ""StringVector "", ""std::string "")","c("" data"", "" params"", "" geometry_columns"", "" layer_name"")"
"3356","mapdeck","rcpp_polygon_geojson","c(""DataFrame "", ""List "", ""StringVector "", ""int "")","c("" data"", "" params"", "" geometry_columns"", "" digits"")"
"3357","mapdeck","rcpp_polygon_polyline","c(""DataFrame "", ""List "", ""StringVector "")","c("" data"", "" params"", "" geometry_columns"")"
"3358","mapdeck","rcpp_text_geojson","c(""DataFrame "", ""List "", ""StringVector "", ""int "")","c("" data"", "" params"", "" geometry_columns"", "" digits"")"
"3359","mapdeck","rcpp_text_geojson_df","c(""DataFrame "", ""List "", ""List "", ""int "")","c("" data"", "" params"", "" geometry_columns"", "" digits"")"
"3360","mapdeck","rcpp_text_polyline","c(""DataFrame "", ""List "", ""StringVector "")","c("" data"", "" params"", "" geometry_columns"")"
"3361","mapi","countMatches_cpp","List "," inter"
"3362","mapi","getValues_cpp","c(""NumericVector "", ""List "", ""DoubleVector "", ""DoubleVector "")","c("" cells"", "" inter"", "" weights"", "" values"")"
"3363","mapi","parseInter_cpp","c(""NumericVector "", ""List "", ""DoubleVector "", ""DoubleVector "")","c("" cells"", "" inter"", "" weights"", "" values"")"
"3364","mapi","parseInterPerm_cpp","c(""NumericVector "", ""List "", ""DoubleVector "", ""DoubleVector "")","c("" cells"", "" inter"", "" weights"", "" values"")"
"3365","mapi","mkP4st_cpp","c(""DoubleVector "", ""IntegerVector "", ""DoubleVector "")","c("" r"", "" N"", "" ecc"")"
"3366","mappoly","vcf_transform_dosage","c(""StringMatrix& "", ""int "")","c("" mat"", "" gt_pos"")"
"3367","mappoly","vcf_get_ploidy","c(""StringMatrix& "", ""int "")","c("" mat"", "" gt_pos"")"
"3368","mappoly","vcf_get_depth","c(""StringMatrix& "", ""int "")","c("" mat"", "" dp_pos"")"
"3369","mmapcharr","charSepXPtr","c(""const std::string "", ""int "", ""int "", ""int "")","c("" path"", "" n"", "" m"", "" r"")"
"3370","mmapcharr","nline_cpp","SEXP "," obj"
"3371","mnis","mnis_bom","std::string "," x"
"3372","mniw","CrossProdVXX","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""int "", ""int "", ""bool "")","c("" X"", "" V"", "" p"", "" q"", "" inverse"")"
"3373","mniw","CrossProdVXY","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""int "", ""int "", ""int "", ""bool "")","c("" X"", "" Y"", "" V"", "" p"", "" q"", "" r"", "" inverse"")"
"3374","mniw","HierUneqVModelGibbs","c(""int "", ""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""bool "", ""bool "", ""bool "", ""bool "")","c("" nSamples"", "" nBurn"", "" Y"", "" X"", "" V"", "" Lambda"", "" Omega"", "" Psi"", "" nu"", "" Beta0"", "" iSigma0"", "" Mu0"", "" updateBetaSigma"", "" updateMu"", "" storeBetaSigma"", "" storeMu"")"
"3375","mniw","GenerateMatrixNIW","c(""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""bool "")","c("" N"", "" Lambda"", "" Sigma"", "" Psi"", "" nu"", "" inverse"")"
"3376","mniw","LogDensityMatrixNormal","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" X"", "" Lambda"", "" SigmaR"", "" SigmaC"")"
"3377","mniw","GenerateMatrixNormal","c(""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" N"", "" Lambda"", "" SigmaR"", "" SigmaC"")"
"3378","mniw","LogDensityMatrixT","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "")","c("" X"", "" Lambda"", "" SigmaR"", "" SigmaC"", "" nu"")"
"3379","mniw","GenerateMatrixT","c(""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""bool "")","c("" N"", "" Lambda"", "" SigmaR"", "" SigmaC"", "" nu"", "" inverse"")"
"3380","mniw","LogDensityMultivariateNormal","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" X"", "" mu"", "" V"")"
"3381","mniw","GenerateMultivariateNormal","c(""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" N"", "" mu"", "" Sigma"")"
"3382","mniw","GenerateRandomEffectsNormal","c(""int "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "")","c("" N"", "" x"", "" V"", "" lambda"", "" Sigma"")"
"3383","mniw","LogDensityWishart","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""bool "")","c("" X"", "" Psi"", "" nu"", "" inverse"")"
"3384","mniw","GenerateWishart","c(""int "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""bool "")","c("" N"", "" Psi"", "" nu"", "" inverse"")"
"3385","modeLLtest","cvll_mr","c(""arma::dmat& "", ""arma::vec& "", ""int "", ""int "")","c("" x"", "" y"", "" n_row"", "" n_col"")"
"3386","modeLLtest","cvll_ols","c(""arma::dmat& "", ""arma::vec& "", ""int "", ""int "")","c("" x"", "" y"", "" n_row"", "" n_col"")"
"3387","modeLLtest","cvll_rlm_m","c(""arma::dmat& "", ""arma::colvec& "", ""int "", ""int "")","c("" x"", "" y"", "" n_row"", "" n_col"")"
"3388","modeLLtest","cvll_rlm_mm","c(""arma::dmat& "", ""arma::colvec& "", ""int "", ""int "")","c("" x"", "" y"", "" n_row"", "" n_col"")"
"3389","molic","count_unique","VS "," x"
"3390","molic","matpr","CharacterMatrix "," A"
"3391","molic","n_a","RCM& "," A"
"3392","molic","na_ya","c(""RIV& "", ""std::string "")","c("" na"", "" ya"")"
"3393","molic","n_b","c(""RIV& "", ""RIV& "")","c("" na"", "" b"")"
"3394","molic","subtract_one","VD "," x"
"3395","molic","Gx_","VD "," x"
"3396","molic","Hx_","VD "," x"
"3397","molic","subM","c(""RCM& "", ""RCV& "")","c("" A"", "" x"")"
"3398","molic","a_marginals","c(""RCM "", ""RL& "")","c("" A"", "" am"")"
"3399","molic","TY","c(""RCV "", ""RL& "", ""RL& "")","c("" y"", "" C_marginals"", "" S_marginals"")"
"3400","mrMLM","multiplication_speed","c(""const Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" A"", "" B"")"
"3401","multivar","fista_sparse","c(""const mat& "", ""const mat& "", ""double "", ""const mat& "", ""int "", ""bool "", ""Nullable<NumericVector> "", ""double "")","c("" A"", "" b"", "" lambda"", "" x_true"", "" niter"", "" backtrack"", "" w"", "" conv"")"
"3402","multivariance","fastdist","const NumericMatrix& "," x"
"3403","multivariance","doubleCenterSymMat","c(""const NumericMatrix& "", ""bool& "")","c("" x"", "" normalize"")"
"3404","multivariance","fastEuclideanCdm","c(""const NumericMatrix& "", ""bool& "")","c("" x"", "" normalize"")"
"3405","multivariance","match_rows","c(""NumericMatrix& "", ""NumericMatrix& "")","c("" A"", "" B"")"
"3406","multivariance","doubleCenterBiasCorrected","const NumericMatrix& "," x"
"3407","multivariance","doubleCenterBiasCorrectedUpper","const NumericMatrix& "," x"
"3408","multivariance","doubleCenterBiasCorrectedUpperLower","c(""const NumericMatrix& "", ""const int& "")","c("" x"", "" n"")"
"3409","mvabund","RtoAnovaCpp","c(""const List& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""Nullable<RcppGSL::Matrix>& "")","c("" rparam"", "" Y"", "" X"", "" isXvarIn"", "" bID"")"
"3410","mvabund","RtoGlmAnova","c(""const List& "", ""const List& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""Nullable<RcppGSL::Matrix>& "", ""RcppGSL::Vector& "")","c("" sparam"", "" rparam"", "" Y"", "" X"", "" O"", "" isXvarIn"", "" bID"", "" lambda"")"
"3411","mvabund","RtoGlm","c(""const List& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "")","c("" rparam"", "" Y"", "" X"", "" O"")"
"3412","mvabund","RtoGlmSmry","c(""const List& "", ""const List& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""Nullable<RcppGSL::Matrix>& "", ""RcppGSL::Vector& "")","c("" sparam"", "" rparam"", "" Y"", "" X"", "" O"", "" bID"", "" lambda"")"
"3413","mvabund","RtoSmryCpp","c(""const List& "", ""RcppGSL::Matrix& "", ""RcppGSL::Matrix& "", ""Nullable<RcppGSL::Matrix>& "")","c("" rparam"", "" Y"", "" X"", "" bID"")"
"3414","mvcluster","clusterl0","c(""vector<mat> "", ""uvec "", ""int "", ""int "", ""int "", ""double "", ""int "")","c("" data"", "" svs"", "" sz"", "" seed"", "" maxIter"", "" thres"", "" debug"")"
"3415","mvp","mvp_taylor_onevar","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" v"", "" n"")"
"3416","mvp","mvp_taylor_onepower_onevar","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" v"", "" n"")"
"3417","mvp","mvp_taylor_allvars","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" n"")"
"3418","mvp","simplify","c(""const List& "", ""const List& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"")"
"3419","mvp","mvp_prod","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const List& "", ""const List& "", ""const NumericVector& "")","c("" allnames1"", "" allpowers1"", "" coefficients1"", "" allnames2"", "" allpowers2"", "" coefficients2"")"
"3420","mvp","mvp_add","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const List& "", ""const List& "", ""const NumericVector& "")","c("" allnames1"", "" allpowers1"", "" coefficients1"", "" allnames2"", "" allpowers2"", "" coefficients2"")"
"3421","mvp","mvp_power","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" n"")"
"3422","mvp","mvp_deriv","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" v"")"
"3423","mvp","mvp_substitute","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "", ""const NumericVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" v"", "" values"")"
"3424","mvp","mvp_substitute_mvp","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "")","c("" allnames1"", "" allpowers1"", "" coefficients1"", "" allnames2"", "" allpowers2"", "" coefficients2"", "" v"")"
"3425","mvp","mvp_vectorised_substitute","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const NumericVector& "", ""const int& "", ""const int& "", ""const CharacterVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" M"", "" nrows"", "" ncols"", "" v"")"
"3426","mvp","mvp_to_series","c(""const List& "", ""const List& "", ""const NumericVector& "", ""const CharacterVector& "")","c("" allnames"", "" allpowers"", "" coefficients"", "" v"")"
"3427","mvrsquared","calc_sum_squares_latent","c(""arma::sp_mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""int "")","c("" Y"", "" X"", "" W"", "" ybar"", "" threads"")"
"3428","myTAI","cpp_TAI","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" ExpressionSet"", "" Phylostratum"")"
"3429","myTAI","cpp_bootMatrix","c(""const NumericMatrix& "", ""const NumericVector& "", ""const int& "")","c("" ExpressionMatrix"", "" AgeVector"", "" permutations"")"
"3430","myTAI","cpp_pMatrix","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" ExpressionSet"", "" AgeVector"")"
"3431","myTAI","cpp_std_error","const NumericVector& "," x"
"3432","myTAI","cpp_geom_mean","const NumericVector& "," x"
"3433","myTAI","cpp_harmonic_mean","const NumericVector& "," x"
"3434","myTAI","cpp_omitMatrix","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" ExpressionSet"", "" AgeVector"")"
"3435","nVennR","drawVenn","StringVector "," x"
"3436","nVennR","makeVenn","c(""List "", ""int "")","c("" x"", "" nCycl"")"
"3437","nVennR","refineVenn","List "," x"
"3438","odbc","odbc_connect","c(""std::string const& "", ""std::string const& "", ""std::string const& "", ""std::string const& "", ""int "", ""long "")","c("" connection_string"", "" timezone"", "" timezone_out"", "" encoding"", "" bigint"", "" timeout"")"
"3439","odbc","connection_quote","connection_ptr const& "," p"
"3440","odbc","connection_begin","connection_ptr const& "," p"
"3441","odbc","connection_sql_tables","c(""connection_ptr const& "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" p"", "" catalog_name"", "" schema_name"", "" table_name"", "" table_type"")"
"3442","odbc","connection_sql_columns","c(""connection_ptr const& "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" p"", "" column_name"", "" catalog_name"", "" schema_name"", "" table_name"")"
"3443","odbc","set_transaction_isolation","c(""connection_ptr const& "", ""size_t "")","c("" p"", "" level"")"
"3444","odbc","result_active","result_ptr const& "," r"
"3445","odbc","result_completed","result_ptr const& "," r"
"3446","odbc","new_result","c(""connection_ptr const& "", ""std::string const& "", ""const bool "")","c("" p"", "" sql"", "" immediate"")"
"3447","odbc","result_execute","result_ptr const& "," r"
"3448","odbc","result_insert_dataframe","c(""result_ptr const& "", ""DataFrame const& "", ""size_t "")","c("" r"", "" df"", "" batch_rows"")"
"3449","odbc","result_describe_parameters","c(""result_ptr const& "", ""DataFrame const& "")","c("" r"", "" df"")"
"3450","odbc","result_row_count","result_ptr const& "," r"
"3451","odbc","column_types","DataFrame const& "," df"
"3452","oppr","rcpp_new_optimization_problem","c(""std::size_t "", ""std::size_t "", ""std::size_t "")","c("" nrow"", "" ncol"", "" ncell"")"
"3453","oppr","rcpp_predefined_optimization_problem","List "," l"
"3454","oppr","rcpp_optimization_problem_as_list","SEXP "," x"
"3455","oppr","rcpp_get_optimization_problem_ncol","SEXP "," x"
"3456","oppr","rcpp_get_optimization_problem_nrow","SEXP "," x"
"3457","oppr","rcpp_get_optimization_problem_ncell","SEXP "," x"
"3458","oppr","rcpp_get_optimization_problem_A","SEXP "," x"
"3459","oppr","rcpp_get_optimization_problem_modelsense","SEXP "," x"
"3460","oppr","rcpp_get_optimization_problem_number_of_projects","SEXP "," x"
"3461","oppr","rcpp_get_optimization_problem_number_of_actions","SEXP "," x"
"3462","oppr","rcpp_get_optimization_problem_number_of_features","SEXP "," x"
"3463","oppr","rcpp_get_optimization_problem_number_of_branches","SEXP "," x"
"3464","oppr","rcpp_get_optimization_problem_vtype","SEXP "," x"
"3465","oppr","rcpp_get_optimization_problem_obj","SEXP "," x"
"3466","oppr","rcpp_get_optimization_problem_pwlobj","SEXP "," x"
"3467","oppr","rcpp_get_optimization_problem_rhs","SEXP "," x"
"3468","oppr","rcpp_get_optimization_problem_sense","SEXP "," x"
"3469","oppr","rcpp_get_optimization_problem_lb","SEXP "," x"
"3470","oppr","rcpp_get_optimization_problem_ub","SEXP "," x"
"3471","oppr","rcpp_get_optimization_problem_col_ids","SEXP "," x"
"3472","oppr","rcpp_get_optimization_problem_row_ids","SEXP "," x"
"3473","oppr","rcpp_add_raw_data","c(""SEXP "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""std::size_t "")","c("" x"", "" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" branch_lengths"", "" n_approx_points"")"
"3474","oppr","rcpp_apply_decisions","c(""SEXP "", ""std::string "", ""double "", ""double "")","c("" x"", "" vtype"", "" default_lower"", "" default_upper"")"
"3475","oppr","rcpp_apply_feature_weights","c(""SEXP "", ""NumericVector "", ""bool "")","c("" x"", "" weights"", "" replace"")"
"3476","oppr","rcpp_apply_locked_constraints","c(""SEXP "", ""IntegerVector "", ""NumericVector "")","c("" x"", "" actions"", "" status"")"
"3477","oppr","rcpp_apply_max_phylo_div_objective","c(""SEXP "", ""NumericVector "", ""double "", ""NumericVector "")","c("" x"", "" costs"", "" budget"", "" feature_weights"")"
"3478","oppr","rcpp_apply_max_targets_met_objective","c(""SEXP "", ""List "", ""NumericVector "", ""double "", ""NumericVector "")","c("" x"", "" targets_list"", "" costs"", "" budget"", "" feature_weights"")"
"3479","oppr","rcpp_apply_min_set_objective","c(""SEXP "", ""List "", ""NumericVector "")","c("" x"", "" targets_list"", "" costs"")"
"3480","oppr","rcpp_branch_matrix","List "," x"
"3481","oppr","rcpp_branch_order","arma::sp_mat "," x"
"3482","oppr","rcpp_evaluate_max_phylo_div_objective","c(""NumericVector "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""arma::sp_mat "")","c("" costs"", "" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" branch_lengths"", "" targets"", "" weights"", "" solutions"")"
"3483","oppr","rcpp_evaluate_min_set_objective","c(""NumericVector "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""arma::sp_mat "")","c("" costs"", "" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" branch_lengths"", "" targets"", "" weights"", "" solutions"")"
"3484","oppr","rcpp_evaluate_max_targets_met_objective","c(""NumericVector "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""arma::sp_mat "")","c("" costs"", "" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" branch_lengths"", "" targets"", "" weights"", "" solutions"")"
"3485","oppr","rcpp_expected_persistences","c(""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "")","c("" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" solutions"")"
"3486","oppr","rcpp_funded_projects","c(""arma::sp_mat "", ""arma::sp_mat "")","c("" pa_matrix"", "" solutions"")"
"3487","oppr","rcpp_heuristic_solution","c(""NumericVector "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""IntegerVector "", ""IntegerVector "", ""std::size_t "", ""bool "", ""bool "", ""const std::string "")","c("" costs"", "" pa_matrix"", "" pf_matrix"", "" branch_matrix"", "" branch_lengths"", "" targets"", "" weights"", "" budget"", "" locked_in"", "" locked_out"", "" number_solutions"", "" initial_sweep"", "" verbose"", "" obj_name"")"
"3488","oppr","rcpp_random_solution","c(""NumericVector "", ""arma::sp_mat "", ""arma::sp_mat "", ""NumericVector "", ""double "", ""IntegerVector "", ""IntegerVector "", ""std::size_t "", ""bool "", ""const std::string "")","c("" costs"", "" pa_matrix"", "" pf_matrix"", "" targets"", "" budget"", "" locked_in"", "" locked_out"", "" number_solutions"", "" verbose"", "" obj_name"")"
"3489","optiSel","rcpp_completeness","c(""StringVector "", ""const arma::ivec& "", ""const arma::ivec& "", ""int "")","c("" Indiv"", "" ArmanumSire"", "" ArmanumDam"", "" maxd"")"
"3490","optiSel","rcpp_genecont","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "", ""const CharacterVector "", ""const CharacterVector "", ""const arma::ivec& "")","c("" numSire"", "" numDam"", "" numAnc"", "" numKeep"", "" ainKeep"", "" rNames"", "" cNames"", "" anOff"")"
"3491","optiSel","rcpp_haplofreq","c(""std::string "", ""std::string "", ""std::string "", ""std::string "", ""std::vector< std::string > "", ""std::string "", ""const arma::ivec& "", ""const arma::imat& "", ""int "", ""int "", ""int "", ""const arma::ivec& "", ""int "", ""double "", ""double "", ""const arma::vec& "", ""std::string "", ""int "", ""int "", ""int "", ""int "")","c("" pathThisBreed"", "" pathRefBreeds"", "" pathFreq"", "" pathOrig"", "" MarkerName"", "" stdBreedSymbol"", "" ArmaIndexC"", "" ArmaIndexR"", "" NFileC"", "" NFileR"", "" NC"", "" ArmaNR"", "" minSNP"", "" minL"", "" ubFreq"", "" ArmaPos"", "" stdsymB"", "" skip"", "" cskip"", "" getFreq"", "" getOrig"")"
"3492","optiSel","rcpp_makeA","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::mat& "", ""const arma::ivec& "", ""const CharacterVector "")","c("" numSire"", "" numDam"", "" AFounder"", "" numFounder"", "" IndivName"")"
"3493","optiSel","rcpp_makeA_lowMem","c(""const arma::ivec& "", ""const arma::ivec& "", ""const arma::mat& "", ""const arma::ivec& "", ""const CharacterVector "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::ivec& "")","c("" numSire"", "" numDam"", "" AFounder"", "" numFounder"", "" IndivName"", "" numKeep"", "" ainKeep"", "" anOff"")"
"3494","optiSel","rcpp_segBreedComp","c(""std::vector<std::string> "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::ivec& "", ""const arma::vec& "")","c("" pathNative"", "" Nfile"", "" N"", "" ArmaIndexN"", "" MatChr"", "" Armakb"")"
"3495","optiSel","rcpp_segIBD","c(""std::string "", ""std::string "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::ivec& "", ""int "", ""int "", ""int "", ""double "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""std::string "", ""int "", ""int "")","c("" path1"", "" path2"", "" NFile1"", "" NFile2"", "" ArmaIndex1"", "" ArmaIndex2"", "" N1"", "" N2"", "" minSNP"", "" minL"", "" ArmacM"", "" Armakb"", "" a"", "" stdsymB"", "" skip"", "" cskip"")"
"3496","optiSel","rcpp_segIBDandN","c(""std::string "", ""std::string "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::ivec& "", ""int "", ""int "", ""double "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""std::string "", ""int "", ""int "")","c("" pathThisBreed"", "" pathNative"", "" NFileC"", "" NFileN"", "" ArmaIndexC"", "" ArmaIndexN"", "" NC"", "" minSNP"", "" minL"", "" ArmaPos"", "" Armakb"", "" a"", "" stdsymB"", "" skip"", "" cskip"")"
"3497","optiSel","rcpp_segIBDandNVersion2","c(""std::string "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::mat& "", ""int "", ""double "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""std::string "", ""int "", ""int "")","c("" pathThisBreed"", "" NFileC"", "" NC"", "" ArmaIndexC"", "" ArmaNat"", "" minSNP"", "" minL"", "" ArmaPos"", "" Armakb"", "" a"", "" stdsymB"", "" skip"", "" cskip"")"
"3498","optiSel","rcpp_segInbreeding","c(""std::string "", ""std::string "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::ivec& "", ""int "", ""int "", ""int "", ""int "", ""double "", ""const arma::vec& "", ""const arma::vec& "", ""double "", ""std::string "", ""int "", ""int "")","c("" path1"", "" path2"", "" NFile1"", "" NFile2"", "" ArmaIndex1"", "" ArmaIndex2"", "" N1"", "" N2"", "" M"", "" minSNP"", "" minL"", "" ArmacM"", "" Armakb"", "" a"", "" stdsymB"", "" skip"", "" cskip"")"
"3499","optiSel","rcpp_segN","c(""std::string "", ""int "", ""int "", ""const arma::ivec& "", ""const arma::vec& "")","c("" pathNative"", "" NFileN"", "" NC"", "" ArmaIndexN"", "" ArmaNkb"")"
"3500","optmatch","mahalanobisHelper","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" data"", "" index"", "" invScaleMat"")"
"3501","optmatch","ismOps","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" o"", "" a"", "" b"")"
"3502","optmatch","r_smahal","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" index"", "" data"", "" z"")"
"3503","optmatch","subsetInfSparseMatrix","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" whichRows"", "" whichCols"", "" x"")"
"3504","opusminer","opus_cpp","c(""GenericVector "", ""int "", ""int "", ""NumericVector "", ""LogicalVector "")","c("" tidList"", "" numItems"", "" numTrans"", "" k_"", "" args"")"
"3505","ordinalForest","rangerCpp","c(""uint "", ""std::string "", ""NumericMatrix "", ""std::vector<std::string> "", ""uint "", ""uint "", ""bool "", ""uint "", ""uint "", ""bool "", ""uint "", ""uint "", ""std::vector<std::vector<double>>& "", ""bool "", ""std::vector<std::string>& "", ""bool "", ""std::string "", ""bool "", ""List "", ""RawMatrix "", ""bool "", ""bool "", ""std::vector<std::string>& "", ""bool "", ""bool "", ""uint "", ""std::vector<std::vector<double>>& "", ""bool "", ""bool "", ""bool "", ""double "", ""double "", ""double "", ""bool "", ""uint "", ""std::vector<double>& "", ""bool ""
)","c("" treetype"", "" dependent_variable_name"", "" input_data"", "" variable_names"", "" mtry"", "" num_trees"", "" verbose"", "" seed"", "" num_threads"", "" write_forest"", "" importance_mode_r"", "" min_node_size"", "" split_select_weights"", "" use_split_select_weights"", "" always_split_variable_names"", "" use_always_split_variable_names"", "" status_variable_name"", "" prediction_mode"", "" loaded_forest"", "" sparse_data"", "" sample_with_replacement"", "" probability"", "" unordered_variable_names"", "" use_unordered_variable_names"", 
"" save_memory"", "" splitrule_r"", "" case_weights"", "" use_case_weights"", "" predict_all"", "" keep_inbag"", "" sample_fraction"", "" alpha"", "" minprop"", "" holdout"", "" prediction_type_r"", "" borders"", "" userps"")"
"3506","outliertree","deserialize_OutlierTree","RawVector "," src"
"3507","outliertree","fit_OutlierTree","c(""NumericVector "", ""size_t "", ""IntegerVector "", ""size_t "", ""IntegerVector "", ""IntegerVector "", ""size_t "", ""IntegerVector "", ""size_t "", ""LogicalVector "", ""int "", ""bool "", ""bool "", ""bool "", ""bool "", ""bool "", ""size_t "", ""double "", ""size_t "", ""size_t "", ""double "", ""bool "", ""bool "", ""double "", ""double "", ""bool "", ""ListOf<StringVector> "", ""ListOf<StringVector> "", ""StringVector "", ""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "")","c("" arr_num"", "" ncols_numeric"", "" arr_cat"", "" ncols_categ"", "" ncat"", "" arr_ord"", "" ncols_ord"", "" ncat_ord"", "" nrows"", "" cols_ignore_r"", "" nthreads"", "" categ_as_bin"", "" ord_as_bin"", "" cat_bruteforce_subset"", "" categ_from_maj"", "" take_mid"", "" max_depth"", "" max_perc_outliers"", "" min_size_numeric"", "" min_size_categ"", "" min_gain"", "" follow_all"", "" gain_as_pct"", "" z_norm"", "" z_outlier"", "" return_outliers"", "" cat_levels"", "" ord_levels"", "" colnames_num"", "" colnames_cat"", "" colnames_ord"", "" min_date"", "" min_ts""
)"
"3508","outliertree","predict_OutlierTree","c(""SEXP "", ""size_t "", ""int "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""ListOf<StringVector> "", ""ListOf<StringVector> "", ""StringVector "", ""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "")","c("" ptr_model"", "" nrows"", "" nthreads"", "" arr_num"", "" arr_cat"", "" arr_ord"", "" cat_levels"", "" ord_levels"", "" colnames_num"", "" colnames_cat"", "" colnames_ord"", "" min_date"", "" min_ts"")"
"3509","outliertree","check_few_values","c(""NumericVector "", ""size_t "", ""size_t "", ""int "")","c("" arr_num"", "" nrows"", "" ncols"", "" nthreads"")"
"3510","proxyC","cpp_linear","c(""arma::sp_mat& "", ""arma::sp_mat& "", ""const int "", ""unsigned int "", ""double "", ""bool "", ""bool "")","c("" mt1"", "" mt2"", "" method"", "" rank"", "" limit"", "" symm"", "" drop0"")"
"3511","proxyC","cpp_sd","arma::sp_mat& "," mt"
"3512","proxyC","cpp_nz","arma::sp_mat& "," mt"
"3513","proxyC","cpp_pair","c(""arma::sp_mat& "", ""arma::sp_mat& "", ""const int "", ""unsigned int "", ""double "", ""double "", ""bool "", ""bool "")","c("" mt1"", "" mt2"", "" method"", "" rank"", "" limit"", "" weight"", "" symm"", "" drop0"")"
"3514","pseudorank","order_vec","NumericVector& "," data"
"3515","pseudorank","psrankCpp","c(""NumericVector& "", ""NumericVector& "", ""NumericVector& "")","c("" data"", "" group"", "" n"")"
"3516","pseudorank","psrankMinCpp","c(""NumericVector& "", ""NumericVector& "", ""NumericVector& "")","c("" data"", "" group"", "" n"")"
"3517","pseudorank","psrankMaxCpp","c(""NumericVector& "", ""NumericVector& "", ""NumericVector& "")","c("" data"", "" group"", "" n"")"
"3518","psqn","psqn","c(""NumericVector "", ""SEXP "", ""unsigned const "", ""double const "", ""unsigned const "", ""unsigned const "", ""double const "", ""double const "", ""bool const "", ""int const "", ""double const "", ""bool const "", ""SEXP "", ""int const "", ""int const "")","c("" par"", "" fn"", "" n_ele_func"", "" rel_eps"", "" max_it"", "" n_threads"", "" c1"", "" c2"", "" use_bfgs"", "" trace"", "" cg_tol"", "" strong_wolfe"", "" env"", "" max_cg"", "" pre_method"")"
"3519","psqn","psqn_bfgs","c(""NumericVector "", ""SEXP "", ""SEXP "", ""double const "", ""size_t const "", ""double const "", ""double const "", ""int const "", ""SEXP "")","c("" par"", "" fn"", "" gr"", "" rel_eps"", "" max_it"", "" c1"", "" c2"", "" trace"", "" env"")"
"3520","pts2polys","pts2polys","c(""std::string "", ""int "", ""long "", ""long "", ""long "", ""long "", ""long "", ""long "")","c("" in_string"", "" SAMPLESIZE"", "" MINLEN"", "" GRIDSIZE"", "" MINX"", "" MAXX"", "" MINY"", "" MAXY"")"
"3521","pvar","ChangePoints_fromR","const NumericVector& "," x"
"3522","pvar","pvarC","c(""const NumericVector& "", ""double& "", ""int "")","c("" x"", "" p"", "" LSI"")"
"3523","pvar","AddPvar","c(""List "", ""List "", ""bool "")","c("" PV1"", "" PV2"", "" AddIfPossible"")"
"3524","pvar","test_CheckSmallIntervals","c(""const NumericVector& "", ""const double& "", ""const int& "")","c("" x"", "" p"", "" dn"")"
"3525","pvar","test_prepare_prt","c(""const NumericVector& "", ""const double& "")","c("" x"", "" p"")"
"3526","r2sundials","r2cvodes","c(""const NumericVector& "", ""const vec& "", ""const RObject& "", ""RObject "", ""const NumericVector "", ""const double "", ""const double "", ""IntegerVector "", ""const int "", ""const int "", ""const double "", ""const double "", ""const double "", ""const vec& "", ""const RObject "", ""const int "", ""IntegerVector "", ""const int "", ""const RObject "", ""const RObject "", ""const int "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""const IntegerVector "", ""const RObject "", ""const RObject "", ""IntegerVector "", ""const bool ""
)","c("" yv"", "" times"", "" frhs"", "" param"", "" tstop"", "" abstol"", "" reltol"", "" integrator"", "" maxord"", "" maxsteps"", "" hin"", "" hmax"", "" hmin"", "" constraints"", "" fjac"", "" nz"", "" rmumps_perm"", "" nroot"", "" froot"", "" fevent"", "" Ns"", "" psens"", "" sens_init"", "" psens_bar"", "" psens_list"", "" fsens"", "" fsens1"", "" sens_method"", "" errconS"")"
"3527","rmumps","get_cnst","std::string "," s"
"3528","rCRM","P2L2C","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::ArrayXd "", ""double "", ""Eigen::VectorXd "", ""Eigen::ArrayXd "", ""double "", ""int "", ""double "", ""double "")","c("" X"", "" y"", "" ldS"", "" ltp"", "" lambda"", "" wldS"", "" thresh"", "" maxit"", "" threshP"", "" threshB"")"
"3529","rCRM","cvP2L2C","c(""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""Eigen::VectorXd "", ""Eigen::ArrayXd "", ""double "", ""Eigen::VectorXd "", ""Eigen::ArrayXd "", ""double "", ""int "", ""double "", ""double "")","c("" X"", "" y"", "" XF"", "" yF"", "" ldS"", "" ltp"", "" lambda"", "" wldS"", "" thresh"", "" maxit"", "" threshP"", "" threshB"")"
"3530","rDotNet","internal_cinit","c(""const std::string& "", ""int "")","c("" host"", "" port"")"
"3531","rDotNet","internal_ctest_connection","c(""const std::string& "", ""int "")","c("" host"", "" port"")"
"3532","rDotNet","internal_cnew","c(""const std::string& "", ""const List& "")","c("" classname"", "" argv"")"
"3533","rDotNet","internal_ccall_static","c(""const std::string& "", ""const std::string& "", ""const List& "")","c("" classname"", "" method"", "" argv"")"
"3534","rDotNet","internal_ccall","c(""SEXP "", ""const std::string& "", ""const List& "")","c("" obj"", "" method"", "" argv"")"
"3535","rDotNet","internal_cget","c(""SEXP "", ""const std::string& "")","c("" obj"", "" property"")"
"3536","rDotNet","internal_cset","c(""SEXP "", ""const std::string& "", ""const RObject& "")","c("" obj"", "" property"", "" value"")"
"3537","rDotNet","internal_cget_indexed","c(""SEXP "", ""int "")","c("" obj"", "" ith"")"
"3538","rIsing","logreg_cpp","c(""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const std::vector<double>& "")","c("" X_"", "" y_"", "" b_"", "" means"", "" sds"", "" lambda"")"
"3539","rIsing","logreg_setup","c(""const NumericVector& "", ""const NumericVector& "", ""const bool "", ""const bool "", ""const unsigned int "", ""const double "")","c("" X"", "" y"", "" scale"", "" regpath"", "" nlambda"", "" lambda_min_ratio"")"
"3540","rIsing","regpath_ising","c(""const NumericMatrix& "", ""const NumericVector& "", ""const unsigned int "", ""const double "")","c("" Xs_"", "" y_"", "" nlambda"", "" lambda_min_ratio"")"
"3541","rIsing","logreg_cpp2","c(""const NumericMatrix& "", ""const NumericVector& "", ""const Nullable<NumericVector>& "", ""const unsigned int "", ""const double "", ""const bool "")","c("" X_"", "" y_"", "" lambda"", "" nlambda"", "" lambda_min_ratio"", "" scale"")"
"3542","rasterly","agg_sumCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3543","rasterly","agg_anyCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3544","rasterly","agg_meanCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3545","rasterly","agg_firstCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3546","rasterly","agg_lastCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3547","rasterly","agg_maxCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3548","rasterly","agg_minCpp","c(""ListOf<NumericMatrix> "", ""CharacterVector "", ""CharacterVector "", ""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" L"", "" levels"", "" category"", "" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3549","rasterly","aggregation_sumCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3550","rasterly","aggregation_anyCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3551","rasterly","aggregation_meanCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3552","rasterly","aggregation_firstCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3553","rasterly","aggregation_lastCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3554","rasterly","aggregation_maxCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3555","rasterly","aggregation_minCpp","c(""int& "", ""int& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""NumericVector& "", ""CharacterVector& "")","c("" plot_width"", "" plot_height"", "" x_range"", "" y_range"", "" xlim"", "" ylim"", "" x"", "" y"", "" on"", "" size"", "" glyph"")"
"3556","regmed","rcpp_regmed","c(""arma::vec "", ""arma::vec "", ""double "", ""double "", ""double "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""int "", ""int "", ""double "", ""double "", ""double "", ""bool "")","c("" alpha"", "" beta"", "" delta"", "" vary"", "" varx"", "" SampCov"", "" MedCov"", "" sample_size"", "" fracLasso"", "" lambda"", "" wt_delta"", "" max_iter"", "" max_iter_inner"", "" tol"", "" vary_step_size"", "" step_multiplier"", "" verbose"")"
"3557","regnet","ContGrid","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""int "", ""char "")","c("" xc"", "" xg"", "" y"", "" x2"", "" y2"", "" lamb1"", "" lamb2"", "" bc0"", "" bg0"", "" r"", "" a"", "" p"", "" pc"", "" method"")"
"3558","regnet","LogitGrid","c(""arma::mat& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""double "", ""char "")","c("" x"", "" y"", "" x2"", "" y2"", "" lamb1"", "" lamb2"", "" b"", "" r"", "" a"", "" p"", "" alpha"", "" method"")"
"3559","regnet","RunCont","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""int "", ""char "")","c("" xc"", "" xg"", "" y"", "" lamb1"", "" lamb2"", "" bc"", "" bg"", "" r"", "" a"", "" p"", "" pc"", "" method"")"
"3560","regnet","RunLogit","c(""arma::mat& "", ""arma::vec& "", ""double "", ""double "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""double "", ""char "")","c("" x"", "" y"", "" lamb1"", "" lamb2"", "" b"", "" r"", "" a"", "" p"", "" alpha"", "" method"")"
"3561","regnet","RunNet","c(""arma::mat& "", ""arma::vec& "", ""double "", ""double "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "")","c("" x"", "" y"", "" lamb1"", "" lamb2"", "" b"", "" r"", "" a"", "" p"")"
"3562","regnet","RunMCP","c(""arma::mat& "", ""arma::vec& "", ""double "", ""arma::vec "", ""double "", ""int "")","c("" x"", "" y"", "" lambda"", "" b"", "" r"", "" p"")"
"3563","regnet","RunElastic","c(""arma::mat& "", ""arma::vec& "", ""double "", ""arma::vec "", ""double "", ""int "")","c("" x"", "" y"", "" lambda"", "" b"", "" alpha"", "" p"")"
"3564","regnet","RunNetSurv","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""double "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" lamb1"", "" lamb2"", "" bc0"", "" bg0"", "" r"", "" a"", "" p"", "" pc"", "" robust"")"
"3565","regnet","RunMCPSurv","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" lamb1"", "" bc"", "" bg"", "" r"", "" p"", "" pc"", "" robust"")"
"3566","regnet","RunLassoSurv","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" lamb1"", "" bc"", "" bg"", "" p"", "" pc"", "" robust"")"
"3567","regnet","NetGrid","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::mat& "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" x2"", "" y2"", "" lamb1"", "" lamb2"", "" bc"", "" bg"", "" r"", "" a"", "" p"", "" pc"", "" robust"")"
"3568","regnet","MCPGrid","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" x2"", "" y2"", "" lamb1"", "" bc"", "" bg"", "" r"", "" p"", "" pc"", "" robust"")"
"3569","regnet","LassoGrid","c(""arma::mat& "", ""arma::mat& "", ""arma::vec& "", ""arma::mat& "", ""arma::vec& "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""int "", ""bool "")","c("" xc"", "" xg"", "" y"", "" x2"", "" y2"", "" lamb1"", "" bc"", "" bg"", "" p"", "" pc"", "" robust"")"
"3570","reticulate","write_stdout","std::string "," text"
"3571","reticulate","write_stderr","std::string "," text"
"3572","reticulate","py_is_callable","PyObjectRef "," x"
"3573","reticulate","py_get_formals","PyObjectRef "," func"
"3574","reticulate","r_to_py_impl","c(""RObject "", ""bool "")","c("" object"", "" convert"")"
"3575","reticulate","py_activate_virtualenv","const std::string& "," script"
"3576","reticulate","py_initialize","c(""const std::string& "", ""const std::string& "", ""const std::string& "", ""const std::string& "", ""bool "", ""bool "", ""const std::string& "")","c("" python"", "" libpython"", "" pythonhome"", "" virtualenv_activate"", "" python3"", "" interactive"", "" numpy_load_error"")"
"3577","reticulate","py_is_none","PyObjectRef "," x"
"3578","reticulate","py_compare_impl","c(""PyObjectRef "", ""PyObjectRef "", ""const std::string& "")","c("" a"", "" b"", "" op"")"
"3579","reticulate","py_str_impl","PyObjectRef "," x"
"3580","reticulate","py_print","PyObjectRef "," x"
"3581","reticulate","py_is_function","PyObjectRef "," x"
"3582","reticulate","py_is_null_xptr","PyObjectRef "," x"
"3583","reticulate","py_validate_xptr","PyObjectRef "," x"
"3584","reticulate","py_list_attributes_impl","PyObjectRef "," x"
"3585","reticulate","py_has_attr_impl","c(""PyObjectRef "", ""const std::string& "")","c("" x"", "" name"")"
"3586","reticulate","py_get_attr_impl","c(""PyObjectRef "", ""const std::string& "", ""bool "")","c("" x"", "" key"", "" silent"")"
"3587","reticulate","py_get_item_impl","c(""PyObjectRef "", ""RObject "", ""bool "")","c("" x"", "" key"", "" silent"")"
"3588","reticulate","py_set_attr_impl","c(""PyObjectRef "", ""const std::string& "", ""RObject "")","c("" x"", "" name"", "" value"")"
"3589","reticulate","py_del_attr_impl","c(""PyObjectRef "", ""const std::string& "")","c("" x"", "" name"")"
"3590","reticulate","py_set_item_impl","c(""PyObjectRef "", ""RObject "", ""RObject "")","c("" x"", "" key"", "" val"")"
"3591","reticulate","py_get_attribute_types","c(""PyObjectRef "", ""const std::vector<std::string>& "")","c("" x"", "" attributes"")"
"3592","reticulate","py_ref_to_r_with_convert","c(""PyObjectRef "", ""bool "")","c("" x"", "" convert"")"
"3593","reticulate","py_ref_to_r","PyObjectRef "," x"
"3594","reticulate","py_call_impl","c(""PyObjectRef "", ""List "", ""List "")","c("" x"", "" args"", "" keywords"")"
"3595","reticulate","py_dict_impl","c(""const List& "", ""const List& "", ""bool "")","c("" keys"", "" items"", "" convert"")"
"3596","reticulate","py_dict_get_item","c(""PyObjectRef "", ""RObject "")","c("" dict"", "" key"")"
"3597","reticulate","py_dict_set_item","c(""PyObjectRef "", ""RObject "", ""RObject "")","c("" dict"", "" key"", "" val"")"
"3598","reticulate","py_dict_length","PyObjectRef "," dict"
"3599","reticulate","py_dict_get_keys","PyObjectRef "," dict"
"3600","reticulate","py_dict_get_keys_as_str","PyObjectRef "," dict"
"3601","reticulate","py_tuple","c(""const List& "", ""bool "")","c("" items"", "" convert"")"
"3602","reticulate","py_tuple_length","PyObjectRef "," tuple"
"3603","reticulate","py_module_import","c(""const std::string& "", ""bool "")","c("" module"", "" convert"")"
"3604","reticulate","py_module_proxy_import","PyObjectRef "," proxy"
"3605","reticulate","py_list_submodules","const std::string& "," module"
"3606","reticulate","py_iterate","c(""PyObjectRef "", ""Function "")","c("" x"", "" f"")"
"3607","reticulate","py_iter_next","c(""PyObjectRef "", ""RObject "")","c("" iterator"", "" completed"")"
"3608","reticulate","py_run_string_impl","c(""const std::string& "", ""bool "", ""bool "")","c("" code"", "" local"", "" convert"")"
"3609","reticulate","py_run_file_impl","c(""const std::string& "", ""bool "", ""bool "")","c("" file"", "" local"", "" convert"")"
"3610","reticulate","py_eval_impl","c(""const std::string& "", ""bool "")","c("" code"", "" convert"")"
"3611","reticulate","py_convert_pandas_series","PyObjectRef "," series"
"3612","reticulate","py_convert_pandas_df","PyObjectRef "," df"
"3613","reticulate","r_convert_dataframe","c(""RObject "", ""bool "")","c("" dataframe"", "" convert"")"
"3614","reticulate","r_convert_date","c(""DateVector "", ""bool "")","c("" dates"", "" convert"")"
"3615","reticulate","readline","const std::string& "," prompt"
"3616","rust","any_nonpos","const NumericVector& "," x"
"3617","revdbayes","cpp_gp_loglik","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ss"")"
"3618","revdbayes","cpp_gev_loglik","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ss"")"
"3619","revdbayes","cpp_os_loglik","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ss"")"
"3620","revdbayes","cpp_pp_loglik","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ss"")"
"3621","revdbayes","cpp_gp_norm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3622","revdbayes","cpp_gp_mdi","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3623","revdbayes","cpp_gp_flat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3624","revdbayes","cpp_gp_flatflat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3625","revdbayes","cpp_gp_jeffreys","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3626","revdbayes","cpp_gp_beta","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3627","revdbayes","cpp_gev_norm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3628","revdbayes","cpp_gev_loglognorm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3629","revdbayes","cpp_gev_mdi","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3630","revdbayes","cpp_gev_flat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3631","revdbayes","cpp_gev_flatflat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3632","revdbayes","cpp_gev_beta","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3633","revdbayes","lgdgev_cpp","c(""const NumericVector& "", ""const double& "", ""const double& "", ""const double& "")","c("" x"", "" loc"", "" scale"", "" shape"")"
"3634","revdbayes","pgev_cpp","c(""const NumericVector& "", ""const double& "", ""const double& "", ""const double& "")","c("" q"", "" loc"", "" scale"", "" shape"")"
"3635","revdbayes","qgev_cpp","c(""const NumericVector& "", ""const double& "", ""const double& "", ""const double& "")","c("" p"", "" loc"", "" scale"", "" shape"")"
"3636","revdbayes","cpp_gev_prob","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3637","revdbayes","cpp_gev_quant","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3638","revdbayes","gp_user_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3639","revdbayes","gev_user_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3640","revdbayes","os_user_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3641","revdbayes","pp_user_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3642","revdbayes","gp_mdi_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3643","revdbayes","gp_norm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3644","revdbayes","gp_flat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3645","revdbayes","gp_flatflat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3646","revdbayes","gp_jeffreys_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3647","revdbayes","gp_beta_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3648","revdbayes","gev_mdi_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3649","revdbayes","gev_norm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3650","revdbayes","gev_loglognorm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3651","revdbayes","gev_flat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3652","revdbayes","gev_flatflat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3653","revdbayes","gev_beta_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3654","revdbayes","gev_prob_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3655","revdbayes","gev_quant_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3656","revdbayes","pp_mdi_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3657","revdbayes","pp_norm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3658","revdbayes","pp_loglognorm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3659","revdbayes","pp_flat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3660","revdbayes","pp_flatflat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3661","revdbayes","pp_beta_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3662","revdbayes","pp_prob_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3663","revdbayes","pp_quant_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3664","revdbayes","os_mdi_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3665","revdbayes","os_norm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3666","revdbayes","os_loglognorm_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3667","revdbayes","os_flat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3668","revdbayes","os_flatflat_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3669","revdbayes","os_beta_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3670","revdbayes","os_prob_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3671","revdbayes","os_quant_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3672","revdbayes","gp_logpost_xptr","std::string "," fstr"
"3673","revdbayes","gev_logpost_xptr","std::string "," fstr"
"3674","revdbayes","os_logpost_xptr","std::string "," fstr"
"3675","revdbayes","pp_logpost_xptr","std::string "," fstr"
"3676","rust","gp_phi_to_theta","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3677","revdbayes","gev_phi_to_theta","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3678","revdbayes","pp_phi_to_theta","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3679","revdbayes","kgaps_phi_to_theta","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3680","revdbayes","phi_to_theta_xptr","std::string "," fstr"
"3681","revdbayes","gp_mdi_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3682","revdbayes","gp_norm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3683","revdbayes","gp_flat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3684","revdbayes","gp_flatflat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3685","revdbayes","gp_jeffreys_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3686","revdbayes","gp_beta_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3687","revdbayes","gp_user_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3688","revdbayes","gev_mdi_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3689","revdbayes","gev_norm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3690","revdbayes","gev_loglognorm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3691","revdbayes","gev_flat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3692","revdbayes","gev_flatflat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3693","revdbayes","gev_beta_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3694","revdbayes","gev_prob_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3695","revdbayes","gev_quant_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3696","revdbayes","gev_user_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3697","revdbayes","os_mdi_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3698","revdbayes","os_norm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3699","revdbayes","os_loglognorm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3700","revdbayes","os_flat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3701","revdbayes","os_flatflat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3702","revdbayes","os_beta_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3703","revdbayes","os_prob_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3704","revdbayes","os_quant_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3705","revdbayes","os_user_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3706","revdbayes","pp_mdi_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3707","revdbayes","pp_norm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3708","revdbayes","pp_loglognorm_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3709","revdbayes","pp_flat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3710","revdbayes","pp_flatflat_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3711","revdbayes","pp_beta_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3712","revdbayes","pp_prob_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3713","revdbayes","pp_quant_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3714","revdbayes","pp_user_logpost_phi","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" pars"")"
"3715","revdbayes","gp_logpost_phi_xptr","std::string "," fstr"
"3716","revdbayes","gev_logpost_phi_xptr","std::string "," fstr"
"3717","revdbayes","pp_logpost_phi_xptr","std::string "," fstr"
"3718","revdbayes","os_logpost_phi_xptr","std::string "," fstr"
"3719","revdbayes","kgaps_logpost","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3720","revdbayes","kgaps_logpost_xptr","std::string "," fstr"
"3721","revdbayes","kgaps_log_j","c(""const NumericVector& "", ""const List& "")","c("" theta"", "" user_args"")"
"3722","revdbayes","log_j_xptr","std::string "," fstr"
"3723","revdbayes","user_gp_flat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3724","revdbayes","user_gev_norm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3725","revdbayes","user_gev_flat","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ppars"")"
"3726","revdbayes","create_prior_xptr","std::string "," fstr"
"3727","ripserr","cubical_2dim","c(""const NumericMatrix& "", ""double "", ""int "")","c("" image"", "" threshold"", "" method"")"
"3728","ripserr","cubical_3dim","c(""NumericVector& "", ""double "", ""int "", ""int "", ""int "", ""int "")","c("" image"", "" threshold"", "" method"", "" nx"", "" ny"", "" nz"")"
"3729","ripserr","cubical_4dim","c(""NumericVector& "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" image"", "" threshold"", "" method"", "" nx"", "" ny"", "" nz"", "" nt"")"
"3730","ripserr","ripser_cpp_dist","c(""const NumericVector& "", ""int "", ""float "", ""int "")","c("" dist_r"", "" dim"", "" thresh"", "" p"")"
"3731","rkvo","readkvs","c(""String "", ""SEXP "", ""SEXP "")","c("" path"", "" delim_tuple"", "" delim_field"")"
"3732","rmdcev","Shuffle_rng","c(""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" inv_temp"", "" nerrs"", "" base_rng__"", "" pstream__"")"
"3733","rmdcev","DrawMlhs_rng","c(""const int& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" nerrs"", "" draw_mlhs"", "" base_rng__"", "" pstream__"")"
"3734","rmdcev","DrawError_rng","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const double& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" quant_num"", "" quant_j"", "" price_j"", "" psi_j"", "" phi_j"", "" gamma_j"", "" alpha"", "" scale"", "" model_num"", "" nalts"", "" nerrs"", "" cond_error"", "" draw_mlhs"", "" base_rng__"", "" pstream__"")"
"3735","rmdcev","CalcAltOrder","c(""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""std::ostream* "")","c("" MUzero"", "" nalts"", "" pstream__"")"
"3736","rmdcev","SortParmMatrix","c(""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""std::ostream* "")","c("" MUzero"", "" price"", "" gamma"", "" alpha_phi"", "" nalts"", "" pstream__"")"
"3737","rmdcev","ComputeE","c(""const int& "", ""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""std::ostream* "")","c("" M"", "" lambda"", "" g_price__phi"", "" b"", "" c"", "" d"", "" pstream__"")"
"3738","rmdcev","MarshallianDemand","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""std::ostream* "")","c("" income"", "" price"", "" MUzero"", "" phi"", "" gamma"", "" alpha"", "" nalts"", "" algo_gen"", "" model_num"", "" tol_e"", "" max_loop"", "" pstream__"")"
"3739","rmdcev","ComputeUtilJ","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""const int& "", ""std::ostream* "")","c("" income"", "" quant_j"", "" price_j"", "" psi"", "" phi_j"", "" gamma_j"", "" alpha"", "" nalts"", "" model_num"", "" pstream__"")"
"3740","rmdcev","ComputeUtilM","c(""const int& "", ""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""std::ostream* "")","c("" M"", "" lambda1"", "" g_psi_a"", "" a_a_1"", "" mu_a_a_1"", "" psi"", "" g"", "" price"", "" d"", "" model_num"", "" pstream__"")"
"3741","rmdcev","ComputeKtUtilM","c(""const int& "", ""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const double& "", ""std::ostream* "")","c("" M"", "" lambda1"", "" psi"", "" mu"", "" alpha_1"", "" pstream__"")"
"3742","rmdcev","HicksianDemand","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""std::ostream* "")","c("" util"", "" price"", "" MUzero"", "" phi"", "" gamma"", "" alpha"", "" nalts"", "" algo_gen"", "" model_num"", "" tol_l"", "" max_loop"", "" pstream__"")"
"3743","rmdcev","CalcWTP_rng","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", 
""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" income"", "" quant_j"", "" price"", "" price_p_policy"", "" psi_p_sims"", "" phi_p_sims"", "" psi_sims"", "" phi_sims"", "" gamma_sims"", "" alpha_sims"", "" scale_sims"", "" nerrs"", "" cond_error"", "" draw_mlhs"", "" algo_gen"", "" model_num"", "" price_change_only"", "" tol"", "" max_loop"", "" base_rng__"", "" pstream__"")"
"3744","rmdcev","CalcMarshallianDemand_rng","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& "", ""const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", 
""const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" income"", "" quant_j"", "" price"", "" price_p_policy"", "" psi_p_sims"", "" phi_p_sims"", "" psi_sims"", "" phi_sims"", "" gamma_sims"", "" alpha_sims"", "" scale_sims"", "" nerrs"", "" cond_error"", "" draw_mlhs"", "" algo_gen"", "" model_num"", "" price_change_only"", "" tol"", "" max_loop"", "" base_rng__"", "" pstream__"")"
"3745","rmdcev","CalcmdemandOne_rng","c(""const double& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const Eigen::Matrix<double, Eigen::Dynamic, 1>& "", ""const double& "", ""const int& "", ""const int& "", ""const int& "", ""const double& "", ""const int& "", ""boost::ecuyer1988& "", ""std::ostream* "")","c("" income"", "" price"", "" psi_j"", "" phi_j"", "" gamma_j"", "" alpha"", "" scale"", "" nerrs"", "" model_num"", "" algo_gen"", "" tol"", "" max_loop"", "" base_rng__"", "" pstream__"")"
"3746","rminizinc","mzn_eval","c(""std::string "", ""Nullable<Environment> "", ""std::string "", ""std::string "", ""std::string "", ""std::string "", ""bool "", ""int "")","c("" lib_path"", "" r_model"", "" mzn_path"", "" model_string"", "" solver"", "" dzn_path"", "" all_solutions"", "" time_limit"")"
"3747","rminizinc","mzn_parse","c(""std::string "", ""std::string "", ""Nullable<std::vector<std::string>> "")","c("" model_string"", "" mzn_path"", "" include_path"")"
"3748","rminizinc","sol_parse","std::string "," solutionString"
"3749","rmumps","Rmumps__solveptr","c(""XPtr<Rmumps> "", ""XPtr<double> "", ""int "", ""int "")","c("" pobj"", "" pb"", "" lrhs"", "" nrhs"")"
"3750","rmumps","Rmumps__ptr_ijv","c(""XPtr<int> "", ""XPtr<int> "", ""XPtr<double> "", ""int "", ""int "", ""int "")","c("" pi"", "" pj"", "" pa"", "" n"", "" nz"", "" sym"")"
"3751","rmumps","Rmumps__del_ptr","XPtr<Rmumps> "," pm"
"3752","rmumps","Rmumps__triplet","XPtr<Rmumps> "," pm"
"3753","rmumps","Rmumps__set_mat_ptr","c(""XPtr<Rmumps> "", ""XPtr<double> "")","c("" pm"", "" pa"")"
"3754","rmumps","Rmumps__set_permutation","c(""XPtr<Rmumps> "", ""int "")","c("" pm"", "" permutation"")"
"3755","rmumps","Rmumps__get_permutation","XPtr<Rmumps> "," pm"
"3756","roben","BGLPointMass","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" q"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatPiStar"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" sh1"", "" sh0"", "" progress"")"
"3757","roben","BGL","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" q"", "" maxSteps"", "" hatBeta"", "" hatAlpha"", "" hatInvTauSq"", "" invSigAlpha0"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"3758","roben","BL_SS","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatInvTauSq"", "" invSigAlpha0"", "" hatPi"", "" hatLambdaSq"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" sh1"", "" sh0"", "" progress"")"
"3759","roben","BLasso","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" maxSteps"", "" hatBeta"", "" hatAlpha"", "" hatInvTauSq"", "" invSigAlpha0"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"3760","roben","BRGL_SS","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatTau"", "" hatV"", "" hatSg"", "" invSigAlpha0"", "" hatPi"", "" hatEtaSq"", "" xi1"", "" xi2"", "" r"", "" a"", "" b"", "" sh1"", "" sh0"", "" progress"")"
"3761","roben","BRGL","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatTau"", "" hatV"", "" hatSg"", "" invSigAlpha0"", "" hatEtaSq"", "" xi1"", "" xi2"", "" r"", "" a"", "" b"", "" progress"")"
"3762","roben","BRL_SS","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatTau"", "" hatV"", "" hatSg"", "" invSigAlpha0"", "" hatPi"", "" hatEtaSq"", "" xi1"", "" xi2"", "" r1"", "" a"", "" b"", "" sh1"", "" sh0"", "" progress"")"
"3763","roben","BRL","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""int "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatTau"", "" hatV"", "" hatSg"", "" invSigAlpha0"", "" hatEtaSq"", "" xi1"", "" xi2"", "" r1"", "" a"", "" b"", "" progress"")"
"3764","roben","BRSGL_SS","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""double "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBg"", "" hatTau"", "" hatV"", "" hatGamma"", "" invSigAlpha0"", "" hatSsq"", "" hatPi0"", "" hatPi1"", "" xi1"", "" xi2"", "" hatT"", "" a"", "" b"", "" sh0_1"", "" sh0_0"", "" sh1_1"", "" sh1_0"", "" cutoff"", "" progress"")"
"3765","roben","BRSGL","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatTau"", "" hatV"", "" hatSg"", "" hatGamma"", "" invSigAlpha0"", "" hatEta1Sq"", "" hatEta2Sq"", "" xi1"", "" xi2"", "" s1"", "" s2"", "" r1"", "" r2"", "" a"", "" b"", "" progress"")"
"3766","roben","BSGL_SS","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""double "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBg"", "" hatSigmaSq"", "" hatGamma"", "" invSigAlpha0"", "" hatSsq"", "" hatPi0"", "" hatPi1"", "" hatT"", "" sh0_1"", "" sh0_0"", "" sh1_1"", "" sh1_0"", "" c"", "" d"", "" cutoff"", "" progress"")"
"3767","roben","BSGL","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" s"", "" L"", "" maxSteps"", "" hatAlpha"", "" hatBeta"", "" hatInvTauSq"", "" hatInvGammaSq"", "" invSigAlpha0"", "" hatLambdaSqT"", "" hatLambdaSqG"", "" hatSigmaSq"", "" s1"", "" s2"", "" r1"", "" r2"", "" a"", "" b"", "" progress"")"
"3768","robets","calc_out","c(""std::vector<double> "", ""int "", ""std::vector<double> "", ""int "", ""int "", ""int "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""int "", ""double "")","c("" y"", "" m"", "" initstate"", "" errortype"", "" trendtype"", "" seasontype"", "" damped"", "" alpha"", "" beta"", "" gamma"", "" phi"", "" nmse"", "" k"")"
"3769","robets","tau2","std::vector<double> "," x"
"3770","rocTree","make_mat2","c(""arma::vec& "", ""arma::vec& "", ""arma::uvec& "", ""arma::mat& "")","c("" tk0"", "" Y0"", "" id0"", "" z0"")"
"3771","rocTree","make_mat2_t","c(""arma::vec& "", ""arma::vec& "", ""arma::uvec& "", ""arma::mat& "")","c("" tk0"", "" Y0"", "" id0"", "" z0"")"
"3772","rocTree","rocForest_C","c(""const arma::mat& "", ""const arma::umat& "", ""const arma::field<arma::umat>& "", ""const arma::umat& "", ""const arma::field<arma::umat>& "", ""const arma::umat& "", ""const arma::uvec& "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" mat1f0"", "" mat1Z0"", "" mat2Zf0"", "" r0"", "" zt0"", "" zy0"", "" e0"", "" spCriterion"", "" numTree"", "" minNode1"", "" minSplit1"", "" maxNode"", "" mtry"")"
"3773","rocTree","predict_rocForest_C","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::uvec& "", ""const List& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::vec& "")","c("" zraw0"", "" y0"", "" e0"", "" forestobj"", "" matX"", "" disc"", "" breaks"")"
"3774","rocTree","rocTree_C","c(""const arma::mat& "", ""const arma::umat& "", ""const arma::field<arma::umat>& "", ""const arma::umat& "", ""const arma::field<arma::umat>& "", ""const arma::umat& "", ""const arma::uvec& "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" mat1f0"", "" mat1Z0"", "" mat2Zf0"", "" r0"", "" zt0"", "" zy0"", "" e0"", "" spCriterion"", "" numFold"", "" minNode1"", "" minSplit1"", "" maxNode"")"
"3775","rocTree","predict_rocTree_C","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::uvec& "", ""const List& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::vec& "")","c("" zraw0"", "" y0"", "" e0"", "" treeobj"", "" matX"", "" disc"", "" breaks"")"
"3776","rocTree","predict_rocTreeHZ_C","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::uvec& "", ""const arma::mat& "", ""const double "", ""const List& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::vec& "")","c("" zraw0"", "" tg0"", "" y0"", "" e0"", "" fy20"", "" h0"", "" treeobj"", "" matX"", "" disc"", "" breaks"")"
"3777","rocTree","predict_rocForestHZ_C","c(""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""const arma::uvec& "", ""const arma::mat& "", ""const double "", ""const List& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::vec& "")","c("" zraw0"", "" tg0"", "" y0"", "" e0"", "" Kmat0"", "" h0"", "" forestobj"", "" matX"", "" disc"", "" breaks"")"
"3778","roll","roll_any","c(""const SEXP& "", ""const int& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3779","roll","roll_all","c(""const SEXP& "", ""const int& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3780","roll","roll_sum","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3781","roll","roll_prod","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3782","roll","roll_idxquantile","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" p"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3783","roll","roll_quantile","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const double& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" p"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3784","roll","roll_var","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" center"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3785","roll","roll_sd","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" center"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3786","roll","roll_scale","c(""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const bool& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" width"", "" weights"", "" center"", "" scale"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3787","roll","roll_cov","c(""const SEXP& "", ""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const bool& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" y"", "" width"", "" weights"", "" center"", "" scale"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3788","roll","roll_lm","c(""const SEXP& "", ""const SEXP& "", ""const int& "", ""const arma::vec& "", ""const bool& "", ""const int& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" x"", "" y"", "" width"", "" weights"", "" intercept"", "" min_obs"", "" complete_obs"", "" na_restore"", "" online"")"
"3789","rollRegres","dchud_wrap","c(""arma::mat& "", ""int "", ""int "", ""arma::vec& "", ""arma::mat& "", ""int "", ""int "", ""double "", ""double& "", ""arma::vec& "", ""arma::vec& "")","c("" r"", "" ldr"", "" p"", "" x"", "" z"", "" ldz"", "" nz"", "" y"", "" rho"", "" c"", "" s"")"
"3790","rollRegres","dchdd_wrap","c(""arma::mat& "", ""int "", ""int "", ""arma::vec& "", ""arma::mat& "", ""int "", ""int "", ""double "", ""double& "", ""arma::vec& "", ""arma::vec& "", ""int& "")","c("" r"", "" ldr"", "" p"", "" x"", "" z"", "" ldz"", "" nz"", "" y"", "" rho"", "" c"", "" s"", "" info"")"
"3791","rollRegres","roll_cpp","c(""const arma::mat& "", ""const arma::vec& "", ""const int "", ""const bool "", ""const bool "", ""const bool "", ""arma::ivec "", ""const bool "", ""const bool "", ""const bool "", ""const int "")","c("" X"", "" Y"", "" window"", "" do_compute_R_sqs"", "" do_compute_sigmas"", "" do_1_step_forecasts"", "" grp"", "" use_grp"", "" do_downdates"", "" use_min_obs"", "" min_obs"")"
"3792","rollRegres","chunk","c(""const arma::ivec "", ""const unsigned int "", ""const unsigned int "")","c("" grp"", "" width"", "" min_obs"")"
"3793","rootWishart","doubleWishart_raw","c(""NumericVector "", ""int "", ""double "", ""double "", ""bool "")","c("" x"", "" s"", "" m"", "" n"", "" mp"")"
"3794","rootWishart","singleWishart_raw","c(""NumericVector "", ""int "", ""int "", ""bool "")","c("" x"", "" n_min"", "" n_max"", "" mp"")"
"3795","roptim","example2_tsp_sann","c(""arma::mat "", ""arma::vec "")","c("" distmat"", "" x"")"
"3796","rotasym","r_g_vMF_Cpp","c(""arma::uword "", ""arma::uword "", ""double "")","c("" n"", "" p"", "" kappa"")"
"3797","rotations","rcayleyCpp","c(""unsigned int "", ""double "")","c("" n"", "" kappa"")"
"3798","rotations","rmbCpp","c(""unsigned int "", ""double "")","c("" n"", "" kappa"")"
"3799","rotations","rfisherCpp","c(""unsigned int "", ""double "")","c("" n"", "" kappa"")"
"3800","rotations","rvmisesCPP","c(""unsigned int "", ""double "")","c("" n"", "" kappa"")"
"3801","rotations","centerCpp","c(""const arma::mat& "", ""const arma::mat& "")","c("" Rs"", "" S"")"
"3802","rotations","lpvmises","c(""const arma::mat& "", ""const arma::mat& "", ""double "")","c("" Rs"", "" S"", "" kappa"")"
"3803","rotations","lpfisher","c(""const arma::mat& "", ""const arma::mat& "", ""double "")","c("" Rs"", "" S"", "" kappa"")"
"3804","rotations","lpcayley","c(""const arma::mat& "", ""const arma::mat& "", ""double "")","c("" Rs"", "" S"", "" kappa"")"
"3805","rotations","S_MCMC_CPP","c(""const arma::mat& "", ""const arma::mat& "", ""double "", ""double "", ""int "")","c("" Rs"", "" oldS"", "" rho"", "" kappa"", "" Dist"")"
"3806","rotations","kap_MCMC_CPP","c(""const arma::mat& "", ""double "", ""double "", ""const arma::mat& "", ""int "")","c("" Rs"", "" oldKappa"", "" sigma"", "" S"", "" Dist"")"
"3807","rotations","afun_CPP","c(""const arma::mat& "", ""const arma::mat& "")","c("" R1"", "" R2"")"
"3808","rotations","both_MCMC_CPP","c(""const arma::mat& "", ""arma::mat "", ""double "", ""double "", ""double "", ""int "", ""int "", ""int "")","c("" Rs"", "" S0"", "" kappa0"", "" rho"", "" sigma"", "" burnin"", "" B"", "" Dist"")"
"3809","rotations","fisherAxisC","c(""const arma::mat& "", ""const arma::rowvec& "")","c("" Qs"", "" Qhat"")"
"3810","rotations","fisherAxisCSymmetric","c(""const arma::mat& "", ""const arma::rowvec& "")","c("" Qs"", "" Qhat"")"
"3811","rotations","fisherBootC","c(""const arma::mat& "", ""unsigned int "", ""bool "")","c("" Qs"", "" m"", "" symm"")"
"3812","rotations","RdistC","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" Q1"", "" Q2"")"
"3813","rotations","rdistSO3C","c(""const arma::mat& "", ""const arma::mat& "")","c("" Rs"", "" R2"")"
"3814","rotations","EdistC","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" Q1"", "" Q2"")"
"3815","rotations","oneRdistC","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" Q1"", "" Q2"")"
"3816","rotations","cdfunsC","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" Qs"", "" Qhat"")"
"3817","rotations","cdfunsCMedian","c(""const NumericMatrix& "", ""const NumericVector& "")","c("" Qs"", "" Qhat"")"
"3818","rotations","zhangQ4","c(""const NumericMatrix& "", ""unsigned int "")","c("" Q"", "" m"")"
"3819","rotations","cdfunsCSO3","c(""const arma::mat& "", ""const arma::mat& "")","c("" Rs"", "" Rhat"")"
"3820","rotations","zhangMedianC","c(""const arma::mat& "", ""unsigned int "")","c("" Rs"", "" m"")"
"3821","rotations","eskewC","const arma::rowvec& "," U"
"3822","rotations","SO3defaultC","c(""const arma::mat& "", ""const arma::vec& "")","c("" U"", "" theta"")"
"3823","rotations","Q4defaultC","c(""const arma::mat& "", ""const arma::vec& "")","c("" U"", "" theta"")"
"3824","rotations","pMatC","const arma::mat& "," p"
"3825","rotations","genrC","c(""const arma::vec& "", ""const arma::mat& "", ""int "", ""const arma::mat& "")","c("" r"", "" S"", "" SO3"", "" u"")"
"3826","rotations","checkQ4","const NumericMatrix& "," Q"
"3827","rotations","checkSO3","const arma::mat& "," Rs"
"3828","rotations","expskewC","const arma::mat& "," M"
"3829","rotations","expskewCMulti","const arma::mat& "," M"
"3830","rotations","logSO3C","const arma::mat& "," R"
"3831","rotations","logSO3CMulti","const arma::mat& "," R"
"3832","rotations","projectSO3C","const arma::mat& "," M"
"3833","rotations","meanSO3C","const arma::mat& "," Rs"
"3834","rotations","meanQ4C","const arma::mat& "," Q"
"3835","rotations","medianSO3C","c(""const arma::mat& "", ""unsigned int "", ""double "")","c("" Rs"", "" maxIterations"", "" maxEps"")"
"3836","rotations","HartmedianSO3C","c(""const arma::mat& "", ""unsigned int "", ""double "")","c("" Rs"", "" maxIterations"", "" maxEps"")"
"3837","rotations","gmeanSO3C","c(""const arma::mat& "", ""unsigned int "", ""double "")","c("" Rs"", "" maxIterations"", "" maxEps"")"
"3838","rotations","HnCpp","const arma::mat& "," Qs"
"3839","rotations","HnCppIntrinsic","const arma::mat& "," Qs"
"3840","rotations","HnCppBloc","c(""const arma::mat& "", ""const arma::mat& "")","c("" Qs"", "" Cs"")"
"3841","rplum","bacon","c(""std::string "", ""std::string "", ""int "", ""std::string "")","c("" inputfile1"", "" outputfile1"", "" ssize"", "" dircc"")"
"3842","rplum","events","c(""double "", ""double "", ""double "", ""double "", ""std::string "", ""std::string "", ""int "", ""int "", ""double "", ""double "", ""std::string "", ""int "")","c("" th1"", "" th2"", "" th_shift"", "" window"", "" outputfname1"", "" MCMCsamplesfname1"", "" samplesize"", "" K"", "" c0"", "" Dc"", "" eventprobsfname1"", "" depths_size"")"
"3843","rust","any_naC","const NumericVector& "," x"
"3844","rust","no_naC","const NumericVector& "," x"
"3845","rust","all_pos","const NumericVector& "," x"
"3846","rust","any_neg","const NumericVector& "," x"
"3847","rust","any_col_nonneg","const NumericMatrix& "," x"
"3848","rust","any_pos","const NumericVector& "," x"
"3849","rust","any_col_nonpos","const NumericMatrix& "," x"
"3850","rust","vecpow","c(""const NumericVector& "", ""const NumericVector& "")","c("" base"", "" exp"")"
"3851","rust","cpp_rho_to_psi","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "")","c("" rho"", "" psi_mode"", "" rot_mat"")"
"3852","rust","cpp_psi_to_phi","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" psi"", "" lambda"", "" gm"", "" con"")"
"3853","rust","cpp_psi_to_phi_0","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" psi"", "" lambda"", "" gm"", "" con"")"
"3854","rust","cpp_logf","c(""const NumericVector& "", ""const SEXP& "", ""const List& "")","c("" theta"", "" logf"", "" pars"")"
"3855","rust","cpp_logf_scaled","c(""const NumericVector& "", ""const SEXP& "", ""const List& "")","c("" theta"", "" logf"", "" pars"")"
"3856","rust","cpp_logf_rho","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"")"
"3857","rust","cpp_logf_rho_2","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3858","rust","cpp_logf_rho_3","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3859","rust","cpp_logf_rho_4","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3860","rust","rcpp_apply","c(""const NumericMatrix& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" x"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3861","rust","cpp_a_obj","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const int& "", ""const double& "", ""const double& "", ""const List& "")","c("" psi"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" d"", "" r"", "" big_val"", "" pars"")"
"3862","rust","cpp_a_obj_2","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const int& "", ""const double& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const SEXP& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" psi"", "" psi_mode"", "" rot_mat"", "" hscale"", "" d"", "" r"", "" big_val"", "" tfun"", "" tpars"", "" logf"", "" pars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3863","rust","cpp_lower_box","c(""const arma::vec& "", ""int "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const int& "", ""const double& "", ""const double& "", ""const List& "")","c("" rho"", "" j"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" d"", "" r"", "" big_val"", "" pars"")"
"3864","rust","cpp_lower_box_2","c(""const arma::vec& "", ""int "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const SEXP& "", ""const List& "", ""const int& "", ""const double& "", ""const double& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" j"", "" psi_mode"", "" rot_mat"", "" hscale"", "" tfun"", "" tpars"", "" logf"", "" pars"", "" d"", "" r"", "" big_val"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3865","rust","cpp_upper_box","c(""const arma::vec& "", ""int "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const int& "", ""const double& "", ""const double& "", ""const List& "")","c("" rho"", "" j"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" d"", "" r"", "" big_val"", "" pars"")"
"3866","rust","cpp_upper_box_2","c(""const arma::vec& "", ""int "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const SEXP& "", ""const List& "", ""const int& "", ""const double& "", ""const double& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" rho"", "" j"", "" psi_mode"", "" rot_mat"", "" hscale"", "" tfun"", "" tpars"", "" logf"", "" pars"", "" d"", "" r"", "" big_val"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3867","rust","ru_cpp","c(""const int& "", ""const int& "", ""const double& "", ""const double& "", ""const NumericVector& "", ""const NumericVector& "", ""const SEXP& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const List& "")","c("" n"", "" d"", "" r"", "" a_box"", "" l_box"", "" u_box"", "" logf"", "" psi_mode"", "" rot_mat"", "" hscale"", "" pars"")"
"3868","rust","ru_cpp_2","c(""const int& "", ""const int& "", ""const double& "", ""const double& "", ""const NumericVector& "", ""const NumericVector& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" n"", "" d"", "" r"", "" a_box"", "" l_box"", "" u_box"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3869","rust","ru_cpp_3","c(""const int& "", ""const int& "", ""const double& "", ""const double& "", ""const NumericVector& "", ""const NumericVector& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" n"", "" d"", "" r"", "" a_box"", "" l_box"", "" u_box"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3870","rust","ru_cpp_4","c(""const int& "", ""const int& "", ""const double& "", ""const double& "", ""const NumericVector& "", ""const NumericVector& "", ""const arma::vec& "", ""const arma::mat& "", ""const double& "", ""const SEXP& "", ""const List& "", ""const List& "", ""const SEXP& "", ""const SEXP& "", ""const SEXP& "", ""const List& "")","c("" n"", "" d"", "" r"", "" a_box"", "" l_box"", "" u_box"", "" psi_mode"", "" rot_mat"", "" hscale"", "" logf"", "" pars"", "" tpars"", "" ptpfun"", "" phi_to_theta"", "" log_j"", "" user_args"")"
"3871","rust","create_trans_xptr","std::string "," fstr"
"3872","rust","bc_no_trans","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "")","c("" psi"", "" lambda"", "" gm"", "" con"")"
"3873","rust","create_psi_to_phi_xptr","std::string "," fstr"
"3874","rust","log_none_jac","c(""const NumericVector& "", ""const List& "")","c("" theta"", "" user_args"")"
"3875","rust","create_log_jac_xptr","std::string "," fstr"
"3876","rust","no_trans","c(""const NumericVector& "", ""const List& "")","c("" theta"", "" user_args"")"
"3877","rust","null_phi_to_theta_xptr","std::string "," fstr"
"3878","rust","logdN01","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3879","rust","logdnorm2","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3880","rust","logdmvnorm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3881","rust","logcauchy","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3882","rust","loghalfcauchy","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3883","rust","lognormalmix","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3884","rust","lognormt","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3885","rust","logdlnorm","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3886","rust","logdgamma","c(""const NumericVector& "", ""const List& "")","c("" x"", "" pars"")"
"3887","rust","loggp","c(""const NumericVector& "", ""const List& "")","c("" x"", "" ss"")"
"3888","rust","create_xptr","std::string "," fstr"
"3889","rust","neglog","c(""const NumericVector& "", ""const List& "")","c("" theta"", "" user_args"")"
"3890","rust","bc_log_j","c(""const NumericVector& "", ""const List& "")","c("" theta"", "" user_args"")"
"3891","rust","create_log_j_xptr","std::string "," fstr"
"3892","rust","exptrans","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3893","rust","vecpower","c(""const NumericVector& "", ""const NumericVector& "")","c("" base"", "" exp"")"
"3894","rust","bc_phi_to_theta","c(""const NumericVector& "", ""const List& "")","c("" phi"", "" user_args"")"
"3895","rust","create_phi_to_theta_xptr","std::string "," fstr"
"3896","rvg","PPTX_","c(""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""int "", ""List "", ""bool "", ""int "", ""std::string "", ""int "", ""int "")","c("" file"", "" bg_"", "" width"", "" height"", "" offx"", "" offy"", "" pointsize"", "" aliases"", "" editable"", "" id"", "" raster_prefix"", "" last_rel_id"", "" standalone"")"
"3897","rvg","XLSX_","c(""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""double "", ""int "", ""List "", ""bool "", ""int "", ""std::string "", ""int "", ""int "")","c("" file"", "" bg_"", "" width"", "" height"", "" offx"", "" offy"", "" pointsize"", "" aliases"", "" editable"", "" id"", "" raster_prefix"", "" last_rel_id"", "" standalone"")"
"3898","rvinecopulib","pseudo_obs_cpp","c(""Eigen::MatrixXd "", ""std::string "")","c("" x"", "" ties_method"")"
"3899","rvinecopulib","bicop_check_cpp","const List& "," bicop_r"
"3900","rvinecopulib","bicop_select_cpp","c(""const Eigen::MatrixXd& "", ""std::vector<std::string> "", ""std::string "", ""std::string "", ""double "", ""std::string "", ""const Eigen::VectorXd& "", ""double "", ""bool "", ""size_t "", ""std::vector<std::string> "")","c("" data"", "" family_set"", "" par_method"", "" nonpar_method"", "" mult"", "" selcrit"", "" weights"", "" psi0"", "" presel"", "" num_threads"", "" var_types"")"
"3901","rvinecopulib","bicop_pdf_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3902","rvinecopulib","bicop_cdf_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3903","rvinecopulib","bicop_hfunc1_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3904","rvinecopulib","bicop_hfunc2_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3905","rvinecopulib","bicop_hinv1_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3906","rvinecopulib","bicop_hinv2_cpp","c(""const Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3907","rvinecopulib","bicop_sim_cpp","c(""const List& "", ""const size_t& "", ""const bool "", ""std::vector<int> "")","c("" bicop_r"", "" n"", "" qrng"", "" seeds"")"
"3908","rvinecopulib","bicop_loglik_cpp","c(""Eigen::MatrixXd& "", ""const List& "")","c("" u"", "" bicop_r"")"
"3909","rvinecopulib","bicop_par_to_tau_cpp","const List& "," bicop_r"
"3910","rvinecopulib","bicop_tau_to_par_cpp","c(""const List& "", ""const double& "")","c("" bicop_r"", "" tau"")"
"3911","rvinecopulib","rvine_structure_cpp","c(""const List& "", ""bool "", ""bool "")","c("" rvine_structure_r"", "" check"", "" is_natural_order"")"
"3912","rvinecopulib","rvine_structure_check_cpp","c(""const List& "", ""bool "")","c("" rvine_struct"", "" is_natural_order"")"
"3913","rvinecopulib","rvine_structure_sim_cpp","c(""size_t "", ""bool "", ""const std::vector<int>& "")","c("" d"", "" natural_order"", "" seeds"")"
"3914","rvinecopulib","rvine_matrix_check_cpp","Eigen::Matrix<size_t, Eigen::Dynamic, Eigen::Dynamic> "," matrix"
"3915","rvinecopulib","vinecop_check_cpp","List "," vinecop_r"
"3916","rvinecopulib","vinecop_inverse_rosenblatt_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" U"", "" vinecop_r"", "" cores"")"
"3917","rvinecopulib","vinecop_rosenblatt_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" U"", "" vinecop_r"", "" cores"")"
"3918","rvinecopulib","vinecop_sim_cpp","c(""const List& "", ""const size_t "", ""const bool "", ""size_t "", ""std::vector<int> "")","c("" vinecop_r"", "" n"", "" qrng"", "" cores"", "" seeds"")"
"3919","rvinecopulib","vinecop_pdf_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" u"", "" vinecop_r"", "" cores"")"
"3920","rvinecopulib","vinecop_cdf_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "", ""size_t "", ""std::vector<int> "")","c("" u"", "" vinecop_r"", "" N"", "" cores"", "" seeds"")"
"3921","rvinecopulib","vinecop_loglik_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" u"", "" vinecop_r"", "" cores"")"
"3922","rvinecopulib","vinecop_mbicv_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""double "", ""size_t "")","c("" u"", "" vinecop_r"", "" psi0"", "" cores"")"
"3923","rvinecopulib","vinecop_select_cpp","c(""const Eigen::MatrixXd& "", ""List& "", ""std::vector<std::string> "", ""std::string "", ""std::string "", ""double "", ""int "", ""std::string "", ""double "", ""std::string "", ""const Eigen::VectorXd& "", ""double "", ""bool "", ""bool "", ""bool "", ""bool "", ""size_t "", ""std::vector<std::string> "")","c("" data"", "" structure"", "" family_set"", "" par_method"", "" nonpar_method"", "" mult"", "" truncation_level"", "" tree_criterion"", "" threshold"", "" selection_criterion"", "" weights"", "" psi0"", "" select_truncation_level"", "" select_threshold"", "" preselect_families"", "" show_trace"", "" num_threads"", "" var_types"")"
"3924","vinereg","fit_margins_cpp","c(""const Eigen::MatrixXd& "", ""const Eigen::VectorXi& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXd& "", ""const Eigen::VectorXi& "", ""const Eigen::VectorXd& "", ""size_t "")","c("" data"", "" nlevels"", "" mult"", "" xmin"", "" xmax"", "" bw"", "" deg"", "" weights"", "" num_threads"")"
"3925","rxylib","get_block_names","c(""std::string "", ""std::string "", ""std::string "")","c("" path"", "" format_name"", "" options"")"
"3926","rxylib","get_meta_DataSet","c(""std::string "", ""std::string "", ""std::string "")","c("" path"", "" format_name"", "" options"")"
"3927","rxylib","read_data","c(""std::string "", ""std::string "", ""std::string "", ""bool "")","c("" path"", "" format_name"", "" options"", "" metaData"")"
"3928","sBIC","pruneEdgesHelper","c(""IntegerVector "", ""IntegerMatrix "", ""int "", ""int "")","c("" support"", "" edgeList"", "" numLeaves"", "" numVertices"")"
"3929","samc","cond_t","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""Eigen::VectorXd& "")","c("" IQ"", "" qj"")"
"3930","samc","sum_qn_q","c(""const Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::VectorXd& "", ""NumericVector "")","c("" M"", "" M2"", "" q"", "" t"")"
"3931","samc","psid_long","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::VectorXd& "")","c("" M"", "" psi"")"
"3932","samc","qpow_row","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const int "", ""NumericVector "")","c("" M"", "" row"", "" steps"")"
"3933","samc","qpow_col","c(""Eigen::Map<Eigen::SparseMatrix< double> >& "", ""const int "", ""NumericVector "")","c("" M"", "" col"", "" steps"")"
"3934","samc","psiq","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""NumericVector "")","c("" M"", "" psi"", "" steps"")"
"3935","samc","sum_qpow_row","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const int "", ""NumericVector "")","c("" M"", "" row"", "" steps"")"
"3936","samc","sum_qpowrv","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""NumericVector "")","c("" M"", "" rv"", "" steps"")"
"3937","samc","sum_psiqpow","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const Eigen::Map<Eigen::VectorXd>& "", ""NumericVector "")","c("" M"", "" psi"", "" steps"")"
"3938","samc","psif","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""Eigen::VectorXd& "")","c("" M"", "" psi"")"
"3939","samc","f1","Eigen::Map<Eigen::SparseMatrix<double> >& "," M"
"3940","samc","f_row","c(""Eigen::SparseMatrix<double>& "", ""const int "")","c("" M"", "" row"")"
"3941","samc","f_col","c(""Eigen::Map<Eigen::SparseMatrix<double> >& "", ""const int "")","c("" M"", "" col"")"
"3942","samurais","costMatrix","c(""arma::colvec& "", ""arma::mat& "", ""double "")","c("" y"", "" X"", "" Lmin"")"
"3943","sanic","solve_LDLT","c(""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3944","sanic","solve_SLDLT","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3945","sanic","solve_PPLU","c(""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3946","sanic","solve_SLU","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3947","sanic","solve_CPHQR","c(""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3948","sanic","solve_SQR","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "")","c("" a"", "" b"")"
"3949","sanic","solve_BiCGSTAB","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""int "", ""bool "")","c("" a"", "" b"", "" x0"", "" tol"", "" iter"", "" verbose"")"
"3950","sanic","solve_LSCG","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""int "", ""bool "")","c("" a"", "" b"", "" x0"", "" tol"", "" iter"", "" verbose"")"
"3951","sanic","solve_CG","c(""Eigen::MappedSparseMatrix<double> "", ""Eigen::Map<Eigen::MatrixXd> "", ""Eigen::Map<Eigen::MatrixXd> "", ""double "", ""int "", ""int "")","c("" a"", "" b"", "" x0"", "" tol"", "" iter"", "" verbose"")"
"3952","saturnin","inv_RcppEigen","const Eigen::Map<Eigen::MatrixXd>& "," A"
"3953","sbfc","sbfc_cpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""int "", ""int "", ""bool "", ""bool "", ""double "", ""double "", ""double "")","c("" TrainX"", "" TrainY"", "" TestX"", "" TestY"", "" nstep"", "" thin"", "" burnin_denom"", "" cv"", "" thinoutputs"", "" alpha"", "" y_penalty"", "" x_penalty"")"
"3954","sbm","roundProduct","c(""List "", ""arma::vec "")","c("" covariates_list"", "" beta"")"
"3955","sbmSDP","sdp1_admm","c(""arma::mat "", ""int "", ""List "")","c("" As"", "" K"", "" opts"")"
"3956","sbo","get_kgram_prefix","c(""const std::string& "", ""int "", ""const std::vector<std::string>& "", ""std::string "")","c("" line"", "" N"", "" dict"", "" EOS"")"
"3957","sbo","get_pc_ptr","const List& "," object"
"3958","sbo","get_word_freqsC","const std::vector<std::string>& "," text"
"3959","sbo","kgram_freqs_cpp","c(""const std::vector<std::string>& "", ""int "", ""const std::vector<std::string>& "")","c("" sentences"", "" N"", "" dict"")"
"3960","sbo","kgram_freqs_fast_cpp","c(""std::vector<std::string>& "", ""int "", ""const std::vector<std::string>& "", ""std::string "", ""bool "", ""std::string "")","c("" input"", "" N"", "" dict"", "" erase"", "" lower_case"", "" EOS"")"
"3961","sbo","predict_sbo_predictor","c(""SEXP "", ""std::vector<std::string> "")","c("" ptr_sexp"", "" input"")"
"3962","sbo","preprocess","c(""std::vector<std::string> "", ""std::string "", ""bool "")","c("" input"", "" erase"", "" lower_case"")"
"3963","sbo","tokenize_sentences","c(""const std::vector<std::string>& "", ""std::string "")","c("" input"", "" EOS"")"
"3964","sboost","adaboost","c(""const NumericMatrix& "", ""const NumericMatrix& "", ""const NumericVector& "", ""const NumericVector& "", ""int "", ""bool "")","c("" features"", "" ordered_index"", "" outcomes"", "" categorical"", "" iterations"", "" verbose"")"
"3965","sboost","get_contingency_cpp","c(""const NumericMatrix& "", ""const NumericVector& "", ""const List& "")","c("" features"", "" outcomes"", "" classifier"")"
"3966","sboost","score_classifier_features_cpp","c(""const List& "", ""const NumericMatrix& "")","c("" classifier"", "" features"")"
"3967","scPDSI","C_pdsi","c(""NumericVector "", ""NumericVector "", ""double "", ""int "", ""int "", ""int "", ""int "", ""bool "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" P"", "" PE"", "" AWC"", "" s_yr"", "" e_yr"", "" calib_s_yr"", "" calib_e_yr"", "" sc"", "" K1_1"", "" K1_2"", "" K1_3"", "" K2"", "" p"", "" q"")"
"3968","scoper","pairwiseMutMatrixRcpp","c(""NumericVector "", ""StringMatrix "", ""NumericMatrix "")","c("" informative_pos"", "" mutMtx"", "" motifMtx"")"
"3969","semver","parse_ptr","std::vector< std::string > "," versions"
"3970","semver","render_ptr","XPtrsver200 "," verPtr"
"3971","semver","ptr_comparator","c(""XPtrsver200 "", ""XPtrsver200 "")","c("" verPtr1"", "" verPtr2"")"
"3972","semver","set_ptr","c(""XPtrsver200 "", ""int "", ""SEXP "")","c("" verPtr"", "" cint"", "" newvalue"")"
"3973","semver","reset_ptr","c(""XPtrsver200 "", ""int "", ""SEXP "")","c("" verPtr"", "" cint"", "" newvalue"")"
"3974","semver","increment_ptr","c(""XPtrsver200 "", ""int "", ""SEXP "")","c("" verPtr"", "" cint"", "" increment"")"
"3975","sentencepiece","spc_train","std::string "," args"
"3976","sentencepiece","spc_load_model","std::string "," file"
"3977","sentencepiece","spc_encode_as_subwords","c(""SEXP "", ""const std::vector<std::string>& "")","c("" model"", "" x"")"
"3978","sentencepiece","spc_encode_as_ids","c(""SEXP "", ""const std::vector<std::string>& "")","c("" model"", "" x"")"
"3979","sentencepiece","spc_decode_ids","c(""SEXP "", ""const std::vector<int>& "")","c("" model"", "" x"")"
"3980","sentencepiece","spc_decode_subwords","c(""SEXP "", ""const std::vector<std::string>& "")","c("" model"", "" x"")"
"3981","sentencepiece","wordpiece_encode_as_subwords","c(""std::string "", ""std::vector<std::string> "", ""std::string "", ""unsigned int "")","c("" x"", "" vocabulary"", "" unk_token"", "" max_input_chars_per_word"")"
"3982","seqHMM","EM","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::uvec& "", ""int "", ""double "", ""int "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" nSymbols"", "" itermax"", "" tol"", "" trace"", "" threads"")"
"3983","seqHMM","EMx","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""int "", ""double "", ""int "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" nSymbols"", "" coef_"", "" X"", "" numberOfStates"", "" itermax"", "" tol"", "" trace"", "" threads"")"
"3984","seqHMM","forwardbackward","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""bool "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" forwardonly"", "" threads"")"
"3985","seqHMM","forwardbackwardx","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""bool "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" coef"", "" X"", "" numberOfStates"", "" forwardonly"", "" threads"")"
"3986","seqHMM","logLikHMM","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" threads"")"
"3987","seqHMM","logLikMixHMM","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" coef"", "" X"", "" numberOfStates"", "" threads"")"
"3988","seqHMM","logSumExp","const arma::vec& "," x"
"3989","seqHMM","log_EM","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::uvec& "", ""int "", ""double "", ""int "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" nSymbols"", "" itermax"", "" tol"", "" trace"", "" threads"")"
"3990","seqHMM","log_EMx","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""int "", ""double "", ""int "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" nSymbols"", "" coef_"", "" X"", "" numberOfStates"", "" itermax"", "" tol"", "" trace"", "" threads"")"
"3991","seqHMM","log_forwardbackward","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""bool "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" forwardonly"", "" threads"")"
"3992","seqHMM","log_forwardbackwardx","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""bool "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" coef"", "" X"", "" numberOfStates"", "" forwardonly"", "" threads"")"
"3993","seqHMM","log_logLikHMM","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""unsigned int "")","c("" transition_"", "" emission_"", "" init_"", "" obs"", "" threads"")"
"3994","seqHMM","log_logLikMixHMM","c(""arma::mat "", ""arma::cube "", ""arma::vec "", ""const arma::ucube& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" coef"", "" X"", "" numberOfStates"", "" threads"")"
"3995","seqHMM","log_objective","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::umat& "", ""const arma::ucube& "", ""const arma::uvec& "", ""arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" ANZ"", "" BNZ"", "" INZ"", "" nSymbols"", "" threads"")"
"3996","seqHMM","log_objectivex","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::umat& "", ""const arma::ucube& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" ANZ"", "" BNZ"", "" INZ"", "" nSymbols"", "" coef"", "" X"", "" numberOfStates"", "" threads"")"
"3997","seqHMM","objective","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""arma::ucube& "", ""const arma::umat& "", ""const arma::ucube& "", ""const arma::uvec& "", ""const arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" ANZ"", "" BNZ"", "" INZ"", "" nSymbols"", "" threads"")"
"3998","seqHMM","objectivex","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::umat& "", ""const arma::ucube& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const arma::mat& "", ""const arma::mat& "", ""arma::uvec& "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" ANZ"", "" BNZ"", "" INZ"", "" nSymbols"", "" coef"", "" X"", "" numberOfStates"", "" threads"")"
"3999","seqHMM","estimate_coefs","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::uvec& "", ""arma::mat "", ""const arma::mat& "", ""const arma::uvec& "", ""int "", ""double "", ""int "", ""unsigned int "")","c("" transition"", "" emission"", "" init"", "" obs"", "" nSymbols"", "" coef"", "" X"", "" numberOfStates"", "" itermax"", "" tol"", "" trace"", "" threads"")"
"4000","seqHMM","varcoef","c(""const arma::mat& "", ""const arma::mat& "")","c("" coef"", "" X"")"
"4001","seqHMM","viterbi","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "")","c("" transition"", "" emission"", "" init"", "" obs"")"
"4002","seqHMM","viterbix","c(""const arma::mat& "", ""const arma::cube& "", ""const arma::vec& "", ""const arma::ucube& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "")","c("" transition"", "" emission"", "" init"", "" obs"", "" coef"", "" X"", "" numberOfStates"")"
"4003","set6","IntervalContains","c(""NumericVector "", ""long double "", ""long double "", ""long double "", ""long double "", ""bool "", ""const char* "")","c("" x"", "" inf"", "" sup"", "" min"", "" max"", "" bound"", "" class_str"")"
"4004","set6","IntervalContainsAll","c(""NumericVector "", ""long double "", ""long double "", ""long double "", ""long double "", ""bool "", ""const char* "")","c("" x"", "" inf"", "" sup"", "" min"", "" max"", "" bound"", "" class_str"")"
"4005","simcross","convert2geno","c(""const List "", ""const NumericVector "", ""const IntegerMatrix "")","c("" xodat"", "" map"", "" founder_geno"")"
"4006","simcross","convert2genoarray","c(""const List "", ""const NumericVector "")","c("" xodat"", "" map"")"
"4007","simcross","convert2geno_char","c(""const List "", ""const NumericVector "", ""const CharacterMatrix "")","c("" xodat"", "" map"", "" founder_geno"")"
"4008","simcross","convert2geno_char_paste","c(""const List "", ""const NumericVector "", ""const CharacterMatrix "")","c("" xodat"", "" map"", "" founder_geno"")"
"4009","simcross","get_geno","c(""const List "", ""const double "")","c("" xodat"", "" position"")"
"4010","simcross","sim_crossovers","c(""const double "", ""const int "", ""const double "", ""const bool "", ""const double "")","c("" L"", "" m"", "" p"", "" obligate_chiasma"", "" Lstar"")"
"4011","simcross","sim_meiosis","c(""const List "", ""const int "", ""const double "", ""const bool "", ""const double "")","c("" parent"", "" m"", "" p"", "" obligate_chiasma"", "" Lstar"")"
"4012","simplextree","n_choose_k","c(""const size_t "", ""const size_t "")","c("" n"", "" k"")"
"4013","simplextree","inv_choose_2_R","const size_t "," x"
"4014","simplextree","to_subscript_R","c(""IntegerVector "", ""const size_t "", ""const size_t "")","c("" numbers"", "" n"", "" k"")"
"4015","simplextree","to_natural_R","c(""IntegerMatrix "", ""const size_t "")","c("" m"", "" n"")"
"4016","simplextree","nfold_intersection","c(""vector< vector< int > > "", ""const size_t "")","c("" x"", "" n"")"
"4017","simplextree","nerve_expand","c(""SEXP "", ""vector< size_t > "", ""vector< vector< int > > "", ""const size_t "", ""const size_t "")","c("" stx"", "" ids"", "" cover"", "" k"", "" threshold"")"
"4018","simplextree","nerve_expand_f","c(""SEXP "", ""vector< size_t > "", ""Function "", ""const size_t "")","c("" stx"", "" ids"", "" include_f"", "" k"")"
"4019","simplextree","profile","SEXP "," st"
"4020","simplextree","parameterize_R","c(""SEXP "", ""IntegerVector "", ""std::string "", ""Nullable<List> "")","c("" st"", "" sigma"", "" type"", "" args"")"
"4021","simplextree","traverse_R","c(""List "", ""Function "")","c("" args"", "" f"")"
"4022","simplextree","ltraverse_R","c(""List "", ""Function "")","c("" args"", "" f"")"
"4023","simplextree","straverse_R","c(""List "", ""Function "")","c("" args"", "" f"")"
"4024","sitmo","sitmo_draws","unsigned int "," n"
"4025","sitmo","sitmo_engine_seed","c(""unsigned int "", ""unsigned int "")","c("" n"", "" seed"")"
"4026","sitmo","sitmo_engine_reset","c(""unsigned int "", ""unsigned int "")","c("" n"", "" seed"")"
"4027","sitmo","sitmo_two_seeds","c(""unsigned int "", ""NumericVector "")","c("" n"", "" seeds"")"
"4028","sitmo","sitmo_parallel","c(""unsigned int "", ""NumericVector& "")","c("" n"", "" seeds"")"
"4029","sitmo","runif_sitmo","c(""unsigned int "", ""double "", ""double "", ""uint32_t "")","c("" n"", "" min"", "" max"", "" seed"")"
"4030","sitmo","runif_r","c(""unsigned int "", ""double "", ""double "")","c("" n"", "" min"", "" max"")"
"4031","skpr","DOptimality","const Eigen::MatrixXd& "," currentDesign"
"4032","skpr","DOptimalityLog","const Eigen::MatrixXd& "," currentDesign"
"4033","skpr","DOptimalityBlocked","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" currentDesign"", "" blockedVar"")"
"4034","skpr","DOptimalityBlockedLog","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" currentDesign"", "" blockedVar"")"
"4035","skpr","calculateDEfficiency","const Eigen::MatrixXd& "," currentDesign"
"4036","skpr","AOptimality","const Eigen::MatrixXd& "," currentDesign"
"4037","skpr","calculateAOptimalityPseudo","const Eigen::MatrixXd& "," currentDesign"
"4038","skpr","IOptimality","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" currentDesign"", "" momentsMatrix"", "" blockedVar"")"
"4039","skpr","calcAliasTrace","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" currentDesign"", "" aliasMatrix"")"
"4040","skpr","covarianceMatrixPseudo","const Eigen::MatrixXd& "," design"
"4041","skpr","getPseudoInverse","const Eigen::MatrixXd& "," currentDesign"
"4042","skpr","GEfficiency","c(""const Eigen::MatrixXd& "", ""const Eigen::MatrixXd& "")","c("" currentDesign"", "" candset"")"
"4043","skpr","genOptimalDesign","c(""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""const std::string "", ""const Eigen::MatrixXd& "", ""NumericVector "", ""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""double "", ""double "", ""int "")","c("" initialdesign"", "" candidatelist"", "" condition"", "" momentsmatrix"", "" initialRows"", "" aliasdesign"", "" aliascandidatelist"", "" minDopt"", "" tolerance"", "" augmentedrows"")"
"4044","skpr","genSplitPlotOptimalDesign","c(""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""const std::string "", ""const Eigen::MatrixXd& "", ""IntegerVector "", ""const Eigen::MatrixXd& "", ""Eigen::MatrixXd "", ""Eigen::MatrixXd "", ""double "", ""List "", ""const Eigen::MatrixXd "", ""const bool "", ""double "")","c("" initialdesign"", "" candidatelist"", "" blockeddesign"", "" condition"", "" momentsmatrix"", "" initialRows"", "" blockedVar"", "" aliasdesign"", "" aliascandidatelist"", "" minDopt"", "" interactions"", "" disallowed"", "" anydisallowed"", "" tolerance"")"
"4045","skpr","genBlockedOptimalDesign","c(""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""const std::string "", ""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""NumericVector "", ""Eigen::MatrixXd "", ""const Eigen::MatrixXd& "", ""double "", ""double "", ""int "")","c("" initialdesign"", "" candidatelist"", "" condition"", "" V"", "" momentsmatrix"", "" initialRows"", "" aliasdesign"", "" aliascandidatelist"", "" minDopt"", "" tolerance"", "" augmentedrows"")"
"4046","slopeOP","slopeOPtransfer","c(""std::vector<double> "", ""std::vector<double> "", ""double "", ""std::string "", ""double "", ""std::string "")","c("" data"", "" states"", "" penalty"", "" constraint"", "" minAngle"", "" type"")"
"4047","slopeOP","slopeSNtransfer","c(""std::vector<double> "", ""std::vector<double> "", ""unsigned int "", ""std::string "")","c("" data"", "" states"", "" nbSegments"", "" constraint"")"
"4048","slopeOP","linearOP","c(""std::vector<double> "", ""std::vector<double> "", ""double "", ""bool "")","c("" x"", "" data"", "" penalty"", "" cc"")"
"4049","smog","glog","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::uvec& "", ""const arma::uvec& "", ""const arma::vec& "", ""const int& "", ""const std::string& "", ""const double& "", ""const bool& "", ""const double& "", ""const double& "", ""const double& "", ""const double& "", ""const int& "")","c("" y"", "" x"", "" g"", "" v"", "" lambda"", "" hierarchy"", "" family"", "" rho"", "" scale"", "" eabs"", "" erel"", "" LL"", "" eta"", "" maxitr"")"
"4050","smog","proxL1","c(""const double& "", ""const double& "")","c("" x"", "" lambda"")"
"4051","smog","proxL2","c(""const arma::vec& "", ""const double& "")","c("" x"", "" lambda"")"
"4052","smog","prox","c(""const arma::vec& "", ""const arma::vec& "", ""const int& "", ""const arma::uvec& "")","c("" x"", "" lambda"", "" hierarchy"", "" d"")"
"4053","smog","penalty","c(""const arma::vec& "", ""const arma::vec& "", ""const int& "", ""const arma::uvec& "")","c("" x"", "" lambda"", "" hierarchy"", "" d"")"
"4054","smooth","adamFitterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matVt"", "" matWt"", "" matF"", "" vecG"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentTable"", "" Etype"", "" Ttype"", "" Stype"", "" componentsNumberETS"", "" componentsNumberETSSeasonal"", "" componentsNumberArima"", "" xregNumber"", "" yInSample"", "" ot"", "" backcasting"")"
"4055","smooth","adamForecasterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matWt"", "" matF"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentTable"", "" Etype"", "" Ttype"", "" Stype"", "" componentsNumberETS"", "" componentsNumberETSSeasonal"", "" componentsNumberArima"", "" xregNumber"", "" h"")"
"4056","smooth","adamErrorerWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matVt"", "" matWt"", "" matF"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentTable"", "" Etype"", "" Ttype"", "" Stype"", "" componentsNumberETS"", "" componentsNumberETSSeasonal"", "" componentsNumberArima"", "" xregNumber"", "" h"", "" yInSample"", "" ot"")"
"4057","smooth","adamRefitterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" yt"", "" ot"", "" arrVt"", "" arrF"", "" arrWt"", "" matG"", "" Etype"", "" Ttype"", "" Stype"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentArray"", "" componentsNumberETSSeasonal"", "" componentsNumberETS"", "" componentsNumberARIMA"", "" xregNumber"")"
"4058","smooth","adamReforecasterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" arrErrors"", "" arrOt"", "" arrF"", "" arrWt"", "" matG"", "" Etype"", "" Ttype"", "" Stype"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentArray"", "" componentsNumberSeasonal"", "" componentsNumber"", "" componentsNumberArima"", "" xregNumber"")"
"4059","smooth","adamSimulatorWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" arrVt"", "" matErrors"", "" matOt"", "" matF"", "" matWt"", "" matG"", "" Etype"", "" Ttype"", "" Stype"", "" lagsModelAll"", "" profilesObservedTable"", "" profilesRecentTable"", "" componentsNumberSeasonal"", "" componentsNumber"", "" componentsNumberArima"", "" xregNumber"")"
"4060","smooth","matrixPowerWrap","c(""SEXP "", ""SEXP "")","c("" matA"", "" power"")"
"4061","smooth","initparams","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" Etype"", "" Ttype"", "" Stype"", "" datafreq"", "" obsR"", "" obsallR"", "" yt"", "" damped"", "" phi"", "" smoothingparameters"", "" initialstates"", "" seasonalcoefs"")"
"4062","smooth","etsmatrices","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" vecg"", "" phi"", "" Cvalues"", "" ncomponentsR"", "" lagsModel"", "" fittertype"", "" Ttype"", "" Stype"", "" nexovars"", "" matat"", "" estimpersistence"", "" estimphi"", "" estiminit"", "" estiminitseason"", "" estimxreg"", "" matFX"", "" vecgX"", "" gowild"", "" estimFX"", "" estimgX"", "" estiminitX"")"
"4063","smooth","polysoswrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" ARorders"", "" MAorders"", "" Iorders"", "" ARIMAlags"", "" nComp"", "" AR"", "" MA"", "" constant"", "" Cvalues"", "" matvt"", "" vecg"", "" matF"", "" fittertype"", "" nexovars"", "" matat"", "" matFX"", "" vecgX"", "" estimAR"", "" estimMA"", "" requireConst"", "" estimConst"", "" estimxreg"", "" gowild"", "" estimFX"", "" estimgX"", "" estiminitX"", "" ssarimaOld"", "" lagsModelR"", "" nonZeroARI"", "" nonZeroMA"")"
"4064","smooth","fitterwrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" yt"", "" vecg"", "" lagsModel"", "" Etype"", "" Ttype"", "" Stype"", "" fittertype"", "" matxt"", "" matat"", "" matFX"", "" vecgX"", "" ot"")"
"4065","smooth","forecasterwrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" h"", "" Etype"", "" Ttype"", "" Stype"", "" lagsModel"", "" matxt"", "" matat"", "" matFX"")"
"4066","smooth","errorerwrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" yt"", "" h"", "" Etype"", "" Ttype"", "" Stype"", "" lagsModel"", "" matxt"", "" matat"", "" matFX"", "" ot"")"
"4067","smooth","optimizerwrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" yt"", "" vecg"", "" h"", "" lagsModel"", "" Etype"", "" Ttype"", "" Stype"", "" multisteps"", "" CFt"", "" normalizer"", "" fittertype"", "" matxt"", "" matat"", "" matFX"", "" vecgX"", "" ot"", "" SDerror"")"
"4068","smooth","costfunc","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" yt"", "" vecg"", "" h"", "" lagsModel"", "" Etype"", "" Ttype"", "" Stype"", "" multisteps"", "" CFt"", "" normalizer"", "" fittertype"", "" matxt"", "" matat"", "" matFX"", "" vecgX"", "" ot"", "" bounds"", "" SDerror"")"
"4069","smooth","costfuncARIMA","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" ARorders"", "" MAorders"", "" Iorders"", "" ARIMAlags"", "" nComp"", "" AR"", "" MA"", "" constant"", "" Cvalues"", "" matvt"", "" matF"", "" matw"", "" yt"", "" vecg"", "" h"", "" lagsModelR"", "" Etype"", "" Ttype"", "" Stype"", "" multisteps"", "" CFt"", "" normalizer"", "" fittertype"", "" nexovars"", "" matxt"", "" matat"", "" matFX"", "" vecgX"", "" ot"", "" estimAR"", "" estimMA"", "" requireConst"", "" estimConst"", "" estimxreg"", "" gowild"", "" estimFX"", "" estimgX"", "" estiminitX"", "" bounds"", "" ssarimaOld"", "" nonZeroARI"", "" nonZeroMA"", "" SDerror"")"
"4070","smooth","occurenceFitterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" vecg"", "" ot"", "" modellags"", "" Etype"", "" Ttype"", "" Stype"", "" Otype"", "" matxt"", "" matat"", "" matFX"", "" vecgX"")"
"4071","smooth","occurrenceOptimizerWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" vecg"", "" ot"", "" modellags"", "" Etype"", "" Ttype"", "" Stype"", "" Otype"", "" matxt"", "" matat"", "" matFX"", "" vecgX"", "" bounds"")"
"4072","smooth","occurenceGeneralFitterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" ot"", "" modellagsA"", "" EtypeA"", "" TtypeA"", "" StypeA"", "" matvtA"", "" matFA"", "" matwA"", "" vecgA"", "" matxtA"", "" matatA"", "" matFXA"", "" vecgXA"", "" modellagsB"", "" EtypeB"", "" TtypeB"", "" StypeB"", "" matvtB"", "" matFB"", "" matwB"", "" vecgB"", "" matxtB"", "" matatB"", "" matFXB"", "" vecgXB"")"
"4073","smooth","occurrenceGeneralOptimizerWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" ot"", "" bounds"", "" modellagsA"", "" EtypeA"", "" TtypeA"", "" StypeA"", "" matvtA"", "" matFA"", "" matwA"", "" vecgA"", "" matxtA"", "" matatA"", "" matFXA"", "" vecgXA"", "" modellagsB"", "" EtypeB"", "" TtypeB"", "" StypeB"", "" matvtB"", "" matFB"", "" matwB"", "" vecgB"", "" matxtB"", "" matatB"", "" matFXB"", "" vecgXB"")"
"4074","smooth","simulatorwrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" arrvt"", "" matErrors"", "" matot"", "" matF"", "" matw"", "" matg"", "" Etype"", "" Ttype"", "" Stype"", "" modellags"")"
"4075","smooth","vSimulatorWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" arrayStates"", "" arrayErrors"", "" arrayF"", "" arrayW"", "" arrayG"", "" modelLags"")"
"4076","smooth","vFitterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" yt"", "" matvt"", "" matF"", "" matw"", "" matG"", "" modellags"", "" Etype"", "" Ttype"", "" Stype"", "" ot"")"
"4077","smooth","vForecasterWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" matvt"", "" matF"", "" matw"", "" series"", "" h"", "" Etype"", "" Ttype"", "" Stype"", "" modellags"")"
"4078","smooth","vOptimiserWrap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" yt"", "" matvt"", "" matF"", "" matw"", "" matG"", "" modellags"", "" Etype"", "" Ttype"", "" Stype"", "" cfType"", "" normalizer"", "" bounds"", "" ot"", "" otObs"")"
"4079","smurf","admm_po_cpp","c(""const arma::vec& "", ""const double "", ""const arma::vec& "", ""const double "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const bool "", ""const int "", ""double "", ""const arma::vec& "")","c("" beta_tilde"", "" slambda"", "" lambda1"", "" lambda2"", "" penmat"", "" Q"", "" eigval"", "" fast"", "" maxiter"", "" rho"", "" beta_old"")"
"4080","snowboot","vertboot_matrix_rcpp","c(""IntegerMatrix "", ""IntegerVector "")","c("" m1"", "" blist"")"
"4081","socceR","logloss","c(""const NumericMatrix& "", ""NumericVector "", ""NumericVector "")","c("" m"", "" outcome"", "" rankweights"")"
"4082","socceR","trps","c(""const NumericMatrix& "", ""NumericVector "", ""NumericVector "")","c("" m"", "" outcome"", "" rankweights"")"
"4083","womblR","GetRooti","c(""arma::mat const& "", ""arma::mat const& "")","c("" Cov"", "" Eye"")"
"4084","spBFA","H","c(""double "", ""int "", ""arma::mat const& "", ""int "")","c("" Psi"", "" TempCorInd"", "" TimeDist"", "" Nu"")"
"4085","spBFA","SpEXP","c(""double "", ""arma::mat const& "", ""int "")","c("" Rho"", "" SpDist"", "" M"")"
"4086","womblR","GetLogLik","c(""List "", ""List "", ""List "", ""int "")","c("" DatObj_List"", "" Para_List"", "" DatAug_List"", "" NKeep"")"
"4087","womblR","GetLogLikMean","c(""List "", ""List "", ""List "")","c("" DatObj_List"", "" Para_List"", "" DatAug_List"")"
"4088","womblR","SamplePPD","c(""List "", ""List "", ""int "")","c("" DatObj_List"", "" Para_List"", "" NKeep"")"
"4089","spBFA","bfa_sp_Rcpp","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""arma::mat "", ""bool "")","c("" DatObj_List"", "" HyPara_List"", "" MetrObj_List"", "" Para_List"", "" DatAug_List"", "" McmcObj_List"", "" RawSamples"", "" Interactive"")"
"4090","spBFA","EtaKrigging","c(""List "", ""List "", ""int "", ""bool "")","c("" DatObj_List"", "" Para_List"", "" NKeep"", "" Verbose"")"
"4091","womblR","YKrigging","c(""List "", ""arma::mat "", ""int "")","c("" DatObj_List"", "" ThetaKrig"", "" NKeep"")"
"4092","spBFA","GetLStarJ","c(""arma::mat const& "", ""arma::cube const& "", ""int "", ""int "", ""int "")","c("" U"", "" Weights"", "" K"", "" M"", "" O"")"
"4093","spBFA","GetLambda","c(""arma::mat const& "", ""arma::umat const& "", ""int "", ""int "", ""int "")","c("" Theta"", "" Xi"", "" K"", "" M"", "" O"")"
"4094","spBFA","GetWeights","c(""arma::cube const& "", ""int "", ""int "", ""int "", ""int "")","c("" Alpha"", "" K"", "" M"", "" L"", "" O"")"
"4095","spBFA","GetlogWeights","c(""arma::cube const& "", ""int "", ""int "", ""int "", ""int "")","c("" Alpha"", "" K"", "" M"", "" L"", "" O"")"
"4096","womblR","CholInv","arma::mat const& "," Cov"
"4097","womblR","Inv3","arma::mat const& "," A"
"4098","womblR","makeSymm","arma::mat const& "," A"
"4099","spCP","QInvFnc","c(""arma::mat const& "", ""arma::mat const& "", ""double "", ""int "")","c("" WAlpha"", "" EyeM"", "" Rho"", "" M"")"
"4100","spCP","QFnc","c(""arma::mat const& "", ""arma::mat const& "", ""double "", ""int "")","c("" WAlpha"", "" EyeM"", "" Rho"", "" M"")"
"4101","spCP","WAlphaFnc","c(""double "", ""arma::colvec const& "", ""arma::umat const& "", ""arma::Mat<int> const& "", ""int "", ""int "")","c("" Alpha"", "" DMLong"", "" AdjacentEdgesBoolean"", "" W"", "" M"", "" WeightsInd"")"
"4102","spCP","spCP_Rcpp","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""arma::mat "", ""bool "")","c("" DatObj_List"", "" HyPara_List"", "" MetrObj_List"", "" Para_List"", "" DatAug_List"", "" McmcObj_List"", "" RawSamples"", "" Interactive"")"
"4103","spCP","PredictFuture","c(""List "", ""List "", ""int "")","c("" DatObj_List"", "" Para_List"", "" NKeep"")"
"4104","spCP","GetXTheta","c(""arma::vec const& "", ""arma::uvec const& "", ""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "", ""double "", ""int "", ""int "")","c("" Theta"", "" XThetaInd"", "" TimeVec"", "" OneNu"", "" OneN"", "" tNu"", "" N"", "" M"")"
"4105","spCP","GetXThetaLoc","c(""double "", ""arma::vec const& "", ""arma::vec const& "", ""int "")","c("" ThetaLoc"", "" Time"", "" OneNu"", "" Nu"")"
"4106","spCP","CreatePhi","c(""arma::vec const& "", ""arma::vec const& "", ""arma::vec const& "", ""int "")","c("" Beta"", "" Lambda"", "" Eta"", "" M"")"
"4107","sparkwarc","rcpp_read_warc","c(""std::string "", ""std::string "", ""std::string "")","c("" path"", "" filter"", "" include"")"
"4108","spiderbar","rep_parse","std::string "," content"
"4109","spiderbar","rep_crawl_delays","SEXP "," xp"
"4110","spiderbar","sitemaps","SEXP "," xp"
"4111","spiderbar","rep_as_string","SEXP "," xp"
"4112","spiderbar","rep_path_allowed","c(""SEXP "", ""std::string "", ""std::string "")","c("" xp"", "" path"", "" agent"")"
"4113","spinBayes","BVCStr","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" Ex"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatR0"", "" hatRStar"", "" hatAlpha"", "" hatZeta"", "" hatInvSigM0"", "" hatInvTauSq0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatInvTauSqZeta"", "" hatLambdaSq0"", "" hatLambdaSqStar"", "" hatLambdaSqZeta"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"4114","spinBayes","BVCStr_NoE","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""bool "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" CLIN"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatR0"", "" hatRStar"", "" hatAlpha"", "" hatInvSigM0"", "" hatInvTauSq0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatLambdaSq0"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"4115","spinBayes","BVCPointMass","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" Ex"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatR0"", "" hatRStar"", "" hatAlpha"", "" hatZeta"", "" hatInvSigM0"", "" hatInvTauSq0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatInvTauSqZeta"", "" hatPi0"", "" hatPiStar"", "" hatPiZeta"", "" hatLambdaSq0"", "" hatLambdaSqStar"", "" hatLambdaSqZeta"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" mu0"", "" muStar"", "" muE"", "" nu0"", "" nuStar"", "" nuE"", "" progress"")"
"4116","spinBayes","BVCPointMass_NoE","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""bool "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" CLIN"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatR0"", "" hatRStar"", "" hatAlpha"", "" hatInvSigM0"", "" hatInvTauSq0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatPi0"", "" hatPiStar"", "" hatLambdaSq0"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" mu0"", "" muStar"", "" nu0"", "" nuStar"", "" progress"")"
"4117","spinBayes","BVCPointMassNonStr","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" Ex"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatRStar"", "" hatAlpha"", "" hatZeta"", "" hatInvSigM0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatInvTauSqZeta"", "" hatPiStar"", "" hatPiZeta"", "" hatLambdaSqStar"", "" hatLambdaSqZeta"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" mu0"", "" muStar"", "" nu0"", "" nuStar"", "" progress"")"
"4118","spinBayes","BVCPointMassNonStr_NoE","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""bool "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" CLIN"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatRStar"", "" hatAlpha"", "" hatInvSigM0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatPiStar"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" muStar"", "" nuStar"", "" progress"")"
"4119","spinBayes","BVCNoStr","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" Ex"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatRStar"", "" hatAlpha"", "" hatZeta"", "" hatInvSigM0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatInvTauSqZeta"", "" hatLambdaSqStar"", "" hatLambdaSqZeta"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"4120","spinBayes","BVCNoStr_NoE","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""bool "", ""unsigned int "", ""unsigned int "", ""int "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" CLIN"", "" s"", "" q"", "" maxSteps"", "" hatM"", "" hatRStar"", "" hatAlpha"", "" hatInvSigM0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatLambdaSqStar"", "" hatSigmaSq"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"4121","spinBayes","BayesLasso","c(""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""unsigned int "", ""int "", ""double "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""double "", ""int "")","c("" xx"", "" y"", "" W"", "" Ex"", "" s"", "" maxSteps"", "" hatM"", "" hatRStar"", "" hatAlpha"", "" hatZeta"", "" invSigM0"", "" hatInvTauSqStar"", "" invSigAlpha0"", "" hatInvTauSqZeta"", "" hatLambdaSqStar"", "" hatLambdaSqZeta"", "" hatSigmaSq"", "" a0"", "" b0"", "" aStar"", "" bStar"", "" alpha"", "" gamma"", "" progress"")"
"4122","splines2","rcpp_bSpline_basis","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4123","splines2","rcpp_bSpline_derivative","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" derivs"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4124","splines2","rcpp_bSpline_integral","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4125","splines2","rcpp_bernsteinPoly","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const bool "", ""const arma::vec& "", ""const bool "")","c("" x"", "" degree"", "" derivs"", "" integral"", "" boundary_knots"", "" complete_basis"")"
"4126","splines2","rcpp_cSpline_basis","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4127","splines2","rcpp_cSpline_derivative","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" derivs"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4128","splines2","rcpp_iSpline_basis","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4129","splines2","rcpp_iSpline_derivative","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" derivs"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4130","splines2","rcpp_iSpline_integral","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4131","splines2","rcpp_mSpline_basis","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4132","splines2","rcpp_mSpline_derivative","c(""const arma::vec& "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const arma::vec& "", ""const arma::vec& "", ""const bool "")","c("" x"", "" derivs"", "" df"", "" degree"", "" internal_knots"", "" boundary_knots"", "" complete_basis"")"
"4133","splmm","D_Gradient","c(""List "", ""List "", ""List "", ""List "", ""arma::vec "", ""int "", ""int "")","c("" xGroup"", "" zGroup"", "" LGroup"", "" yGroup"", "" b"", "" N"", "" q"")"
"4134","splmm","D_HessianMatrix","c(""List "", ""List "", ""List "", ""List "", ""arma::vec "", ""int "", ""int "")","c("" xGroup"", "" zGroup"", "" LGroup"", "" yGroup"", "" b"", "" N"", "" q"")"
"4135","splmm","ObjFunction","c(""List "", ""List "", ""List "", ""arma::vec "", ""arma::mat "", ""double "", ""double "", ""String "", ""String "", ""double "")","c("" xGroup"", "" yGroup"", "" LGroup"", "" b_nonpen"", "" L_nonpen"", "" lambda1"", "" lambda2"", "" penalty_b"", "" penalty_L"", "" ll1"")"
"4136","splmm","ObjFunction_L","c(""List "", ""List "", ""List "", ""List "", ""arma::vec "", ""arma::mat "", ""arma::uvec "", ""double "", ""double "", ""String "", ""double "")","c("" xGroup"", "" yGroup"", "" zGroup"", "" zIdGrp"", "" b_nonpen"", "" L"", "" nonpen"", "" sigma"", "" lambda"", "" penalty"", "" ll1"")"
"4137","splmm","ArmijoRule_L","c(""List "", ""List "", ""List "", ""arma::mat "", ""int "", ""int "", ""double "", ""double "", ""arma::vec "", ""double "", ""List "", ""bool "", ""arma::uvec "", ""double "", ""String "", ""double "", ""double "", ""int "", ""double "", ""double "", ""double "", ""int "")","c("" xGroup"", "" yGroup"", "" zGroup"", "" L"", "" l"", "" k"", "" grad"", "" hessian"", "" b"", "" sigma"", "" zIdGrp"", "" linNonpen"", "" nonpen"", "" lambda"", "" penalty"", "" ll1"", "" gamma"", "" maxArmijo"", "" a_init"", "" delta"", "" rho"", "" converged"")"
"4138","spnn","spnn_predict_cpp","c(""arma::cube& "", ""arma::mat& "", ""arma::mat& "")","c("" setCube"", "" newData"", "" sigmaInverse"")"
"4139","spnn","cspnn_predict_cpp","c(""arma::mat& "", ""arma::mat& "", ""arma::mat& "")","c("" xr"", "" newData"", "" sigmaInverse"")"
"4140","sport","glicko","c(""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" unique_id"", "" id"", "" rank"", "" team"", "" player"", "" r"", "" rd"", "" sigma"", "" share"", "" lambda"", "" weight"", "" init_r"", "" init_rd"", "" init_sigma"", "" kappa"", "" tau"")"
"4141","sport","glicko2","c(""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" unique_id"", "" id"", "" rank"", "" team"", "" player"", "" r"", "" rd"", "" sigma"", "" share"", "" lambda"", "" weight"", "" init_r"", "" init_rd"", "" init_sigma"", "" kappa"", "" tau"")"
"4142","sport","bbt","c(""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""StringVector "", ""StringVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "", ""double "", ""double "", ""double "", ""double "")","c("" unique_id"", "" id"", "" rank"", "" team"", "" player"", "" r"", "" rd"", "" sigma"", "" share"", "" lambda"", "" weight"", "" init_r"", "" init_rd"", "" init_sigma"", "" kappa"", "" tau"")"
"4143","sport","dbl","c(""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""StringVector "", ""StringMatrix "", ""NumericMatrix "", ""StringVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""NumericVector "", ""double "")","c("" unique_id"", "" id_vec"", "" rank_vec"", "" team_vec"", "" MAP"", "" X"", "" cls"", "" R"", "" RD"", "" lambda_vec"", "" weight_vec"", "" kappa"")"
"4144","spray","spray_maker","c(""const IntegerMatrix& "", ""const NumericVector& "")","c("" M"", "" d"")"
"4145","spray","spray_add","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4146","spray","spray_mult","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4147","spray","spray_overwrite","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4148","spray","spray_accessor","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "")","c("" M"", "" d"", "" Mindex"")"
"4149","spray","spray_setter","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4150","spray","spray_equality","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4151","spray","spray_asum_include","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerVector& "")","c("" M"", "" d"", "" n"")"
"4152","spray","spray_asum_exclude","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerVector& "")","c("" M"", "" d"", "" n"")"
"4153","spray","spray_deriv","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerVector& "")","c("" M"", "" d"", "" n"")"
"4154","spray","spray_pmax","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4155","spray","spray_pmin","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const IntegerMatrix& "", ""const NumericVector& "")","c("" M1"", "" d1"", "" M2"", "" d2"")"
"4156","spray","spray_power","c(""const IntegerMatrix& "", ""const NumericVector& "", ""const NumericVector& "")","c("" M"", "" d"", "" pow"")"
"4157","spread","commuter_cpp","c(""DataFrame "", ""DataFrame "", ""float "", ""float "", ""float "", ""float "", ""float "", ""int "", ""int "")","c("" seiiar_home"", "" seiiar_commuters"", "" beta"", "" a"", "" gamma"", "" asymptomaticProb"", "" asymptomaticRelativeInfectiousness"", "" N"", "" M"")"
"4158","spreadr","create_mat_t","c(""NumericMatrix& "", ""NumericVector& "", ""NumericVector& "", ""double "")","c("" mat"", "" a_tm1"", "" d"", "" retention"")"
"4159","sprintr","screen_cpp","c(""const arma::mat& "", ""const arma::vec& "", ""const int "", ""const bool "", ""const bool "")","c("" x"", "" y"", "" num_keep"", "" square"", "" main_effect"")"
"4160","sqp","bfgs_update","c(""arma::mat& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""arma::vec& "", ""const bool "")","c("" hessian"", "" old_y"", "" new_y"", "" old_gradient"", "" new_gradient"", "" constraint_adjustment"")"
"4161","sqp","slacked_dense","c(""arma::vec "", ""arma::mat "", ""arma::mat "", ""arma::mat "", ""arma::vec "", ""const arma::vec& "", ""arma::vec "", ""const double& "", ""const double "", ""const unsigned "", ""int "", ""int "", ""int "", ""const unsigned "", ""const bool "", ""const bool "", ""const bool "")","c("" x"", "" Q"", "" C_eq"", "" C_ineq"", "" l"", "" t_eq"", "" t_ineq"", "" penalty"", "" tol"", "" max_iter"", "" dim_eq"", "" dim_ineq"", "" dim_Q"", "" solver"", "" fast"", "" all_slack"", "" debug"")"
"4162","sqp","slacked_sparse","c(""arma::vec "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::sp_mat "", ""arma::vec "", ""const arma::vec& "", ""arma::vec "", ""const double& "", ""const double "", ""const unsigned "", ""int "", ""int "", ""int "", ""const bool "", ""const bool "")","c("" x"", "" Q"", "" C_eq"", "" C_ineq"", "" l"", "" t_eq"", "" t_ineq"", "" penalty"", "" tol"", "" max_iter"", "" dim_eq"", "" dim_ineq"", "" dim_Q"", "" all_slack"", "" debug"")"
"4163","starma","starmaCPP","c(""const arma::mat& "", ""const List& "", ""arma::mat "", ""arma::mat "", ""int "")","c("" data"", "" wlist"", "" arMat"", "" maMat"", "" iterate"")"
"4164","starma","stcovCPP","c(""const arma::mat& "", ""const List& "", ""int "", ""int "", ""int "")","c("" data"", "" wlist"", "" slag1"", "" slag2"", "" tlag"")"
"4165","starma","stacfCPP","c(""const arma::mat& "", ""const List& "", ""int "")","c("" data"", "" wlist"", "" tlagMax"")"
"4166","starma","stpacfCPP","c(""const arma::mat& "", ""const List& "", ""int "")","c("" data"", "" wlist"", "" tlagMax"")"
"4167","statespacer","ExtractComponentC","c(""const arma::cube& "", ""const arma::cube& "")","c("" a"", "" Z"")"
"4168","statespacer","FastSmootherC","c(""const arma::cube& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const int& "", ""const bool& "")","c("" y"", "" a"", "" P_inf"", "" P_star"", "" Z"", "" T"", "" R"", "" Q"", "" initialisation_steps"", "" transposed_state"")"
"4169","statespacer","KalmanC","c(""const arma::mat& "", ""const LogicalMatrix& "", ""const arma::colvec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const bool& "")","c("" y"", "" y_isna"", "" a"", "" P_inf"", "" P_star"", "" Z"", "" T"", "" R"", "" Q"", "" diagnostics"")"
"4170","statespacer","LogLikC","c(""const NumericMatrix& "", ""const LogicalMatrix& "", ""arma::colvec "", ""arma::mat "", ""arma::mat "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "")","c("" y"", "" y_isna"", "" a"", "" P_inf"", "" P_star"", "" Z"", "" T"", "" R"", "" Q"")"
"4171","statespacer","SimulateC","c(""const int& "", ""const int& "", ""const int& "", ""const arma::colvec& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::cube& "", ""const arma::mat& "", ""const bool& "", ""const bool& "", ""const bool& "")","c("" nsim"", "" repeat_Q"", "" N"", "" a"", "" Z"", "" T"", "" R"", "" Q"", "" P_star"", "" draw_initial"", "" eta_only"", "" transposed_state"")"
"4172","stepR","callRoutines","c(""RObject "", ""int "", ""List "", ""int "", ""List "", ""int "", ""List "")","c("" observations"", "" routineType"", "" argumentsListRoutine"", "" dataType"", "" argumentsListData"", "" intervalSystemType"", "" argumentsListIntervalSystem"")"
"4173","stepR","criticalValuesWeights","c(""const NumericVector& "", ""const NumericVector& "", ""const double& "")","c("" stat"", "" beta"", "" alpha"")"
"4174","stepR","inOrdered","c(""const IntegerVector& "", ""const IntegerVector& "")","c("" x"", "" table"")"
"4175","stm","lhoodcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" eta"", "" beta"", "" doc_ct"", "" mu"", "" siginv"")"
"4176","stm","gradcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" eta"", "" beta"", "" doc_ct"", "" mu"", "" siginv"")"
"4177","stm","hpbcpp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" eta"", "" beta"", "" doc_ct"", "" mu"", "" siginv"", "" sigmaentropy"")"
"4178","stplanr","coord_matches","c(""SEXP "", ""double "")","c("" sldf"", "" tolval"")"
"4179","stplanr","join_spatiallines_coords","c(""SEXP "", ""double "", ""double "")","c("" sldf"", "" startx"", "" starty"")"
"4180","stplanr","coord_matches_sf","c(""arma::mat "", ""arma::mat "", ""unsigned int "", ""double "")","c("" x"", "" sortedx"", "" sllength"", "" tolval"")"
"4181","stplanr","join_spatiallines_coords_sf","c(""List "", ""double "", ""double "")","c("" lines"", "" startx"", "" starty"")"
"4182","strat","strat_cpp","c(""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" y"", "" r"", "" w"")"
"4183","strat","strat_cpp_by","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "")","c("" y"", "" r"", "" w"", "" c"")"
"4184","stratEst","stratEst_cpp","c(""arma::mat "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::vec "", ""arma::mat "", ""arma::mat "", ""bool "", ""arma::vec "", ""arma::vec "", ""std::string "", ""bool "", ""bool "", ""bool "", ""bool "", ""std::string "", ""std::string "", ""bool "", ""bool "", ""bool "", ""int "", ""std::string "", ""std::string "", ""int "", ""double "", ""int "", ""int "", ""double "", ""int "", ""int "", ""double "", ""int "", ""int "", ""bool "", ""bool "", ""double "", ""bool "")","c("" data"", "" strategies"", "" sid"", "" shares"", "" trembles"", "" coefficient_mat"", "" covariates"", "" LCR"", "" cluster"", "" quantile_vec"", "" response"", "" specific_shares"", "" specific_responses"", "" specific_trembles"", "" specific_coefficients"", "" r_responses"", "" r_trembles"", "" select_strategies"", "" select_responses"", "" select_trembles"", "" min_strategies"", "" crit"", "" SE"", "" outer_runs"", "" outer_tol_eval"", "" outer_max_eval"", "" inner_runs"", "" inner_tol_eval"", "" inner_max_eval"", "" LCR_runs"", "" LCR_tol_eval"", "" LCR_max_eval"", 
"" BS_samples"", "" print_messages"", "" integer_strategies"", "" newton_stepsize"", "" penalty"")"
"4185","stratEst","stratEst_data_cpp","c(""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""arma::vec "", ""int "", ""int "")","c("" id"", "" game"", "" period"", "" input"", "" lagged_input"", "" lag"", "" num_ids"")"
"4186","strider","row_sums","const NumericMatrix& "," x"
"4187","strider","col_sums","const NumericMatrix& "," x"
"4188","strider","convolve2","c(""const NumericMatrix& "", ""const NumericMatrix& "")","c("" a"", "" b"")"
"4189","stringfish","get_string_type","SEXP "," x"
"4190","stringfish","materialize","SEXP "," x"
"4191","stringfish","sf_vector","size_t "," len"
"4192","stringfish","sf_assign","c(""SEXP "", ""size_t "", ""SEXP "")","c("" x"", "" i"", "" e"")"
"4193","stringfish","sf_iconv","c(""SEXP "", ""const std::string "", ""const std::string "", ""int "")","c("" x"", "" from"", "" to"", "" nthreads"")"
"4194","stringfish","convert_to_sf","SEXP "," x"
"4195","stringfish","sf_nchar","c(""SEXP "", ""const std::string "", ""const int "")","c("" x"", "" type"", "" nthreads"")"
"4196","stringfish","sf_substr","c(""SEXP "", ""IntegerVector "", ""IntegerVector "", ""const int "")","c("" x"", "" start"", "" stop"", "" nthreads"")"
"4197","stringfish","c_sf_paste","c(""List "", ""SEXP "", ""const int "")","c("" dots"", "" sep"", "" nthreads"")"
"4198","stringfish","sf_collapse","c(""SEXP "", ""SEXP "")","c("" x"", "" collapse"")"
"4199","stringfish","sf_readLines","c(""const std::string "", ""const std::string "")","c("" file"", "" encoding"")"
"4200","stringfish","sf_writeLines","c(""SEXP "", ""const std::string "", ""const std::string "", ""const std::string "", ""const std::string "")","c("" text"", "" file"", "" sep"", "" na_value"", "" encode_mode"")"
"4201","stringfish","sf_grepl","c(""SEXP "", ""SEXP "", ""const std::string "", ""const bool "", ""const int "")","c("" subject"", "" pattern"", "" encode_mode"", "" fixed"", "" nthreads"")"
"4202","stringfish","sf_split","c(""SEXP "", ""SEXP "", ""const std::string "", ""const bool "", ""const int "")","c("" subject"", "" split"", "" encode_mode"", "" fixed"", "" nthreads"")"
"4203","stringfish","sf_gsub","c(""SEXP "", ""SEXP "", ""SEXP "", ""const std::string "", ""const bool "", ""const int "")","c("" subject"", "" pattern"", "" replacement"", "" encode_mode"", "" fixed"", "" nthreads"")"
"4204","stringfish","random_strings","c(""const int "", ""const int "", ""std::string "", ""std::string "")","c("" N"", "" string_size"", "" charset"", "" vector_mode"")"
"4205","stringfish","sf_tolower","SEXP "," x"
"4206","stringfish","sf_toupper","SEXP "," x"
"4207","stringfish","sf_match","c(""SEXP "", ""SEXP "", ""const int "")","c("" x"", "" table"", "" nthreads"")"
"4208","stringfish","sf_compare","c(""SEXP "", ""SEXP "", ""const int "")","c("" x"", "" y"", "" nthreads"")"
"4209","stringfish","c_sf_concat","SEXP "," x"
"4210","sundialr","cvode","c(""NumericVector "", ""NumericVector "", ""SEXP "", ""NumericVector "", ""double "", ""NumericVector "")","c("" time_vector"", "" IC"", "" input_function"", "" Parameters"", "" reltolerance"", "" abstolerance"")"
"4211","sundialr","cvodes","c(""NumericVector "", ""NumericVector "", ""SEXP "", ""NumericVector "", ""double "", ""NumericVector "", ""std::string "", ""bool "")","c("" time_vector"", "" IC"", "" input_function"", "" Parameters"", "" reltolerance"", "" abstolerance"", "" SensType"", "" ErrCon"")"
"4212","sundialr","cvsolve","c(""NumericVector "", ""NumericVector "", ""SEXP "", ""NumericVector "", ""Nullable<DataFrame> "", ""double "", ""NumericVector "")","c("" time_vector"", "" IC"", "" input_function"", "" Parameters"", "" Events"", "" reltolerance"", "" abstolerance"")"
"4213","sundialr","ida","c(""NumericVector "", ""NumericVector "", ""NumericVector "", ""SEXP "", ""NumericVector "", ""double "", ""NumericVector "")","c("" time_vector"", "" IC"", "" IRes"", "" input_function"", "" Parameters"", "" reltolerance"", "" abstolerance"")"
"4214","surbayes","fastKronEye_Y","c(""arma::mat const& "", ""arma::mat const& "", ""int const& "", ""int const& "")","c("" Sigma"", "" Y"", "" n"", "" J"")"
"4215","surbayes","fastKronEye_crossprod","c(""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""int const& "", ""int const& "")","c("" XtX"", "" Sigma"", "" pvec"", "" n"", "" J"")"
"4216","surbayes","predict_surbayes_helper","c(""arma::vec const& "", ""arma::mat const& "", ""int const& "", ""int const& "")","c("" mu"", "" Sigma"", "" n"", "" J"")"
"4217","surbayes","predict_surbayes_cpp","c(""arma::mat const& "", ""List const& "", ""int const& "", ""int const& "", ""int const& "")","c("" Mu"", "" Sigmalist"", "" n"", "" J"", "" nsims"")"
"4218","surbayes","sample_sigma","c(""double const& "", ""arma::mat const& "", ""int const& "")","c("" nu"", "" V"", "" p"")"
"4219","surbayes","sur_sample_gibbs_cpp","c(""arma::mat "", ""int const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""arma::vec const& "", ""double const& "", ""arma::vec const& "", ""int "", ""int "")","c("" Sigma"", "" M"", "" X"", "" X0"", "" XtX"", "" X0tX0"", "" Y"", "" Y0"", "" y"", "" y0"", "" a0"", "" pvec"", "" burnin"", "" thin"")"
"4220","surbayes","sur_sample_cov_helper_cpp","c(""arma::mat const& "", ""List const& "", ""int const& "", ""int const& "", ""arma::vec const& "", ""double const& "", ""arma::vec const& "")","c("" Y"", "" Xlist"", "" n"", "" J"", "" pj"", "" sigma11"", "" r1"")"
"4221","surbayes","sur_sample_cpp","c(""arma::mat const& "", ""List const& "", ""arma::vec const& "", ""arma::mat const& "", ""arma::mat const& "", ""arma::vec const& "", ""int const& "")","c("" Y"", "" Xlist"", "" y"", "" X"", "" XtX"", "" pj"", "" M"")"
"4222","survPen","multmat","c(""const Map<MatrixXd> "", ""const Map<MatrixXd> "")","c("" Mat1"", "" Mat2"")"
"4223","survPen","multcross","c(""const Map<MatrixXd> "", ""const Map<MatrixXd> "")","c("" Mat1"", "" Mat2"")"
"4224","survPen","multvec","c(""const Map<MatrixXd> "", ""const Map<VectorXd> "")","c("" Mat"", "" vec"")"
"4225","survPen","colSums2","Map<MatrixXd> "," Mat"
"4226","survPen","deriv_R","c(""const List "", ""const int "", ""const Map<MatrixXd> "")","c("" deriv_Vp"", "" p"", "" R1"")"
"4227","survPen","grad_rho","c(""const List "", ""const List "", ""const List "", ""const Map<MatrixXd> "", ""const Map<VectorXd> "", ""const Map<VectorXd> "", ""const int "", ""const int "", ""const int "", ""const List "", ""const List "", ""const Map<MatrixXd> "", ""const List "", ""const Map<VectorXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<VectorXd> "", ""const Map<VectorXd> "", ""const String "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const String "")","c("" X_GL"", "" GL_temp"", "" haz_GL"", "" deriv_rho_beta"", "" weights"", "" tm"", "" nb_smooth"", "" p"", "" n_legendre"", "" S_list"", "" temp_LAML"", "" Vp"", "" S_beta"", "" beta"", "" inverse_new_S"", "" X"", "" temp_deriv3"", "" event"", "" expected"", "" type"", "" Ve"", "" mat_temp"", "" method"")"
"4228","survPen","Hess_rho","c(""const List "", ""const List "", ""const List "", ""const List "", ""const List "", ""const Map<MatrixXd> "", ""const Map<VectorXd> "", ""const Map<VectorXd> "", ""const int "", ""const int "", ""const int "", ""const List "", ""const List "", ""const List "", ""const Map<VectorXd> "", ""const List "", ""const List "", ""const Map<MatrixXd> "", ""const List "", ""const Map<VectorXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<MatrixXd> "", ""const Map<VectorXd> "", ""const Map<VectorXd> "", 
""const String "", ""const Map<MatrixXd> "", ""const List "", ""const Map<MatrixXd> "", ""const List "", ""const Map<VectorXd> "", ""const String "")","c("" X_GL"", "" X_GL_Q"", "" GL_temp"", "" haz_GL"", "" deriv2_rho_beta"", "" deriv_rho_beta"", "" weights"", "" tm"", "" nb_smooth"", "" p"", "" n_legendre"", "" deriv_rho_inv_Hess_beta"", "" deriv_rho_Hess_unpen_beta"", "" S_list"", "" minus_eigen_inv_Hess_beta"", "" temp_LAML"", "" temp_LAML2"", "" Vp"", "" S_beta"", "" beta"", "" inverse_new_S"", "" X"", "" X_Q"", "" temp_deriv3"", "" temp_deriv4"", "" event"", "" expected"", "" type"", "" Ve"", "" deriv_rho_Ve"", "" mat_temp"", "" deriv_mat_temp"", "" eigen_mat_temp"", "" method"")"
"4229","surveillance","determineSourcesC","c(""NumericVector "", ""NumericVector "", ""NumericMatrix "", ""NumericVector "", ""IntegerVector "", ""LogicalMatrix "")","c("" eventTimes"", "" eps_t"", "" eventCoords"", "" eps_s"", "" eventTypes"", "" qmatrix"")"
"4230","svgViewR","read_obj_str","std::vector< std::string > "," string"
"4231","vdiffr","svglite_","c(""std::string "", ""std::string "", ""double "", ""double "", ""double "", ""bool "", ""List "")","c("" file"", "" bg"", "" width"", "" height"", "" pointsize"", "" standalone"", "" aliases"")"
"4232","vdiffr","svgstring_","c(""Environment "", ""std::string "", ""double "", ""double "", ""double "", ""bool "", ""List "")","c("" env"", "" bg"", "" width"", "" height"", "" pointsize"", "" standalone"", "" aliases"")"
"4233","vdiffr","get_svg_content","XPtr<std::stringstream> "," p"
"4234","symmetry","B1_Cpp","const NumericVector& "," X"
"4235","symmetry","BH2_Cpp","const NumericVector& "," X"
"4236","symmetry","BHC1_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" a"")"
"4237","symmetry","BHC2_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" a"")"
"4238","symmetry","BHI_Cpp","const NumericVector& "," X"
"4239","symmetry","BHK_Cpp","const NumericVector& "," X"
"4240","symmetry","CM_Cpp","const NumericVector& "," X"
"4241","symmetry","FM_Cpp","const NumericVector& "," X"
"4242","symmetry","HM_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" a"")"
"4243","symmetry","K2_Cpp","const NumericVector& "," X"
"4244","symmetry","K2U_Cpp","const NumericVector& "," X"
"4245","symmetry","KS_Cpp","const NumericVector& "," X"
"4246","symmetry","MGG_Cpp","const NumericVector& "," X"
"4247","symmetry","MI_Cpp","const NumericVector& "," X"
"4248","symmetry","MOI_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" k"")"
"4249","symmetry","MOK_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" k"")"
"4250","symmetry","NAC1_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" a"")"
"4251","symmetry","NAC2_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" a"")"
"4252","symmetry","NAI_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" k"")"
"4253","symmetry","NAK_Cpp","c(""const NumericVector& "", ""double "")","c("" X"", "" k"")"
"4254","symmetry","RW_Cpp","const NumericVector& "," X"
"4255","symmetry","SGN_Cpp","const NumericVector& "," X"
"4256","symmetry","WCX_Cpp","const NumericVector& "," X"
"4257","symmetry","randomize_sign","c(""const NumericVector& "", ""double "")","c("" X"", "" mu"")"
"4258","symmetry","reflected_boot","c(""const NumericVector& "", ""double "")","c("" X"", "" mu"")"
"4259","symmetry","boot_sample","c(""const NumericVector& "", ""double "", ""int "", ""std::string "", ""std::string "", ""double "", ""bool "")","c("" X"", "" mu_param"", "" B"", "" null_method"", "" stat"", "" k"", "" known_mean"")"
"4260","symmetry","mn_boot_sample","c(""const NumericVector& "", ""double "", ""int "", ""std::string "", ""double "", ""double "", ""bool "")","c("" X"", "" mu_param"", "" B"", "" stat"", "" k"", "" q"", "" known_mean"")"
"4261","symmetry","boot_sample_lm","c(""const arma::mat& "", ""const NumericVector& "", ""const NumericVector& "", ""int "", ""std::string "", ""std::string "", ""double "")","c("" model_matrix"", "" fitted"", "" residuals"", "" B"", "" null_method"", "" stat"", "" k"")"
"4262","symmetry","simulate_garch","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""double "", ""const NumericVector& "", ""const NumericVector& "")","c("" resid"", "" y"", "" cfit"", "" omega"", "" alpha"", "" beta"")"
"4263","synchronicity","CreateBoostMutexInfo","c(""SEXP "", ""SEXP "")","c("" resourceName"", "" timeout"")"
"4264","synchronicity","AttachBoostMutexInfo","c(""SEXP "", ""SEXP "")","c("" resourceName"", "" timeout"")"
"4265","synchronicity","GetResourceName","SEXP "," mutexInfoAddr"
"4266","synchronicity","GetTimeout","SEXP "," mutexInfoAddr"
"4267","synchronicity","IsRead","SEXP "," mutexInfoAddr"
"4268","synchronicity","boost_lock","SEXP "," mutexInfoAddr"
"4269","synchronicity","boost_try_lock","SEXP "," mutexInfoAddr"
"4270","synchronicity","boost_unlock","SEXP "," mutexInfoAddr"
"4271","synchronicity","boost_lock_shared","SEXP "," mutexInfoAddr"
"4272","synchronicity","boost_try_lock_shared","SEXP "," mutexInfoAddr"
"4273","synchronicity","boost_unlock_shared","SEXP "," mutexInfoAddr"
"4274","synthACS","disaggregate_mdCPP","const List "," macro_data"
"4275","targeted","mlogit_expand","c(""const arma::uvec& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::uvec "")","c("" alt"", "" x"", "" weights"", "" alts"")"
"4276","targeted","bin_logl","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec "", ""const arma::vec& "", ""std::string "", ""bool "")","c("" y"", "" a"", "" x1"", "" x2"", "" par"", "" weights"", "" type"", "" indiv"")"
"4277","targeted","bin_dlogl","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec "", ""const arma::vec& "", ""std::string "", ""bool "")","c("" y"", "" a"", "" x1"", "" x2"", "" par"", "" weights"", "" type"", "" indiv"")"
"4278","targeted","bin_pa","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec "", ""std::string "")","c("" y"", "" a"", "" x1"", "" x2"", "" par"", "" type"")"
"4279","targeted","bin_dlogl_c","c(""const arma::cx_vec& "", ""const arma::cx_vec& "", ""const arma::cx_mat& "", ""const arma::cx_mat& "", ""const arma::cx_vec "", ""const arma::cx_vec& "", ""std::string "", ""bool "")","c("" y"", "" a"", "" x1"", "" x2"", "" par"", "" weights"", "" type"", "" indiv"")"
"4280","targeted","bin_esteq","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""arma::vec "", ""arma::vec "", ""const arma::vec& "", ""std::string "")","c("" y"", "" a"", "" x1"", "" x2"", "" pr"", "" alpha"", "" par"", "" weights"", "" type"")"
"4281","targeted","bin_esteq_c","c(""const arma::cx_vec& "", ""const arma::cx_vec& "", ""const arma::cx_mat& "", ""const arma::cx_mat& "", ""const arma::cx_mat& "", ""arma::cx_vec "", ""arma::cx_vec "", ""const arma::cx_vec& "", ""std::string "")","c("" y"", "" a"", "" x1"", "" x2"", "" x3"", "" alpha"", "" par"", "" weights"", "" type"")"
"4282","targeted","ace_est","c(""const arma::vec& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const arma::vec& "", ""bool "")","c("" y"", "" a"", "" x1"", "" x2"", "" theta"", "" weights"", "" binary"")"
"4283","targeted","fast_iid","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::mat& "", ""const arma::vec& "", ""bool "")","c("" y"", "" p"", "" x1"", "" weights"", "" logistic"")"
"4284","targeted","clusterid","const arma::uvec& "," id"
"4285","targeted","groupsum","c(""const arma::mat& "", ""const arma::uvec& "", ""bool "")","c("" x"", "" cluster"", "" reduce"")"
"4286","targeted","softmax","c(""arma::mat& "", ""bool "", ""bool "")","c("" lp"", "" ref"", "" log"")"
"4287","tcR","exact_search","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""int "", ""bool "")","c("" vec"", "" patterns"", "" max_error"", "" verbose"")"
"4288","tcR","exact_search_list","c(""const std::vector<std::string>& "", ""const List "", ""int "", ""bool "")","c("" vec"", "" patterns_list"", "" max_error"", "" verbose"")"
"4289","tcR","hamming_search","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""int "", ""bool "")","c("" vec"", "" patterns"", "" max_error"", "" verbose"")"
"4290","tcR","levenshtein_search","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "", ""int "", ""bool "")","c("" vec"", "" patterns"", "" max_error"", "" verbose"")"
"4291","tensorBSS","rnormCube","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" varp1"", "" varp2"", "" varp3"")"
"4292","tensorBSS","eigenVectors","SEXP "," varx"
"4293","tensorBSS","symmetricPower","c(""SEXP "", ""SEXP "")","c("" varx"", "" varr"")"
"4294","tensorBSS","mFOBIMatrix","SEXP "," varx"
"4295","tensorBSS","mFOBIMatrixNorm","SEXP "," varx"
"4296","tensorBSS","mJADEMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" varx"", "" vari"", "" varj"", "" varcov"")"
"4297","tensorBSS","matrixCovariance","SEXP "," varx"
"4298","tensorBSS","mAutoCovMatrix","c(""SEXP "", ""SEXP "")","c("" varx"", "" varlag"")"
"4299","tensorBSS","mTGFOBIMatrix","c(""SEXP "", ""SEXP "")","c("" varx"", "" varlag"")"
"4300","tensorBSS","mTGJADEMatrix","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" varx"", "" vari"", "" varj"", "" varlags"")"
"4301","tensorBSS","computeh","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" varuk"", "" varxm"", "" varnl"")"
"4302","tensorBSS","computeT","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" varuk"", "" varxm"", "" varnl"")"
"4303","tensorBSS","computed","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" varuk"", "" varxm"", "" varnl"")"
"4304","tensorBSS","computeb","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" varuk"", "" varxm"", "" varnl"")"
"4305","terrainmeshr","triangulate_matrix_rcpp","c(""NumericMatrix "", ""float "", ""int "")","c("" heightmap"", "" maxError"", "" maxTriangles"")"
"4306","texmex","wrap_dgpd","c(""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const NumericVector& "", ""const bool "")","c("" x"", "" sigma"", "" xi"", "" u"", "" log_d"")"
"4307","texmex","warp_dexprl","const NumericVector& "," x"
"4308","texmex","wrap_log1prel","const NumericVector& "," x"
"4309","texmex","wrap_log1mexp","const NumericVector& "," x"
"4310","texmex","wrap_safe_product","c(""const NumericVector& "", ""const NumericVector& "")","c("" x"", "" y"")"
"4311","text.alignment","smith_waterman_mark_chars","c(""String "", ""char "")","c("" text"", "" edit_mark"")"
"4312","text.alignment","lowercase","std::string "," data"
"4313","text.alignment","smith_waterman_matrix","c(""CharacterVector "", ""CharacterVector "", ""int "", ""int "", ""int "", ""IntegerMatrix "")","c("" a"", "" b"", "" score_match"", "" score_gap"", "" score_mismatch"", "" x"")"
"4314","text.alignment","smith_waterman_function","c(""CharacterVector "", ""CharacterVector "", ""double "", ""Function "")","c("" a"", "" b"", "" score_gap"", "" similarity"")"
"4315","text.alignment","smith_waterman_path","c(""NumericMatrix "", ""CharacterVector "", ""CharacterVector "", ""int "", ""int "", ""char "")","c("" m"", "" original_a"", "" original_b"", "" row_i"", "" col_i"", "" edit_mark"")"
"4316","text.alignment","smith_waterman_path_integer","c(""IntegerMatrix "", ""CharacterVector "", ""CharacterVector "", ""int "", ""int "", ""char "")","c("" m"", "" original_a"", "" original_b"", "" row_i"", "" col_i"", "" edit_mark"")"
"4317","textrecipes","rcpp_ngram","c(""List "", ""int "", ""int "", ""String "")","c("" x"", "" n"", "" n_min"", "" delim"")"
"4318","tfCox","tfCox_onelambda","c(""int "", ""double "", ""double "", ""IntegerVector "", ""int "", ""double "", ""NumericMatrix "", ""NumericMatrix "", ""NumericVector "", ""IntegerVector "", ""IntegerVector "", ""IntegerVector "", ""int "", ""int "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerVector "", ""NumericVector "", ""double "", ""int "", ""int "")","c("" ord"", "" alpha"", "" lambda"", "" discrete"", "" ndis"", "" stepSize"", "" X"", "" init_theta"", "" Time"", "" status"", "" indx_time"", "" tie"", "" n"", "" p"", "" Perm"", "" Rank"", "" thin"", "" vec_xtol"", "" tol"", "" niter"", "" backtracking"")"
"4319","themetagenomics","picrust_otu","c(""std::string "", ""StringVector "")","c("" file_path"", "" otu_id_targets"")"
"4320","tidyfast","fillDown","SEXP "," x"
"4321","tidyfast","fillUp","SEXP "," x"
"4322","tlrmvnmvt","mvn_internal","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""bool "", ""int "")","c("" a"", "" b"", "" covM"", "" useLog2"", "" N"")"
"4323","tlrmvnmvt","mvn_internal2","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXd "", ""double "", ""bool "", ""int "")","c("" a"", "" b"", "" geom"", "" kernelType"", "" para"", "" nugget"", "" useLog2"", "" N"")"
"4324","tlrmvnmvt","tlrmvn_internal","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""bool "", ""int "", ""double "", ""int "")","c("" a"", "" b"", "" covM"", "" useLog2"", "" m"", "" epsl"", "" N"")"
"4325","tlrmvnmvt","tlrmvn_internal2","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXd "", ""double "", ""bool "", ""int "", ""double "", ""int "")","c("" a"", "" b"", "" geom"", "" kernelType"", "" para"", "" nugget"", "" useLog2"", "" m"", "" epsl"", "" N"")"
"4326","tlrmvnmvt","mvt_internal","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::MatrixXd "", ""bool "", ""int "")","c("" a"", "" b"", "" mu"", "" nu"", "" covM"", "" useLog2"", "" N"")"
"4327","tlrmvnmvt","mvt_internal2","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXd "", ""double "", ""bool "", ""int "")","c("" a"", "" b"", "" mu"", "" nu"", "" geom"", "" kernelType"", "" para"", "" nugget"", "" useLog2"", "" N"")"
"4328","tlrmvnmvt","tlrmvt_internal","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""bool "", ""int "", ""double "", ""int "")","c("" a"", "" b"", "" nu"", "" mu"", "" covM"", "" useLog2"", "" m"", "" epsl"", "" N"")"
"4329","tlrmvnmvt","tlrmvt_internal2","c(""Eigen::VectorXd "", ""Eigen::VectorXd "", ""double "", ""Eigen::VectorXd "", ""Eigen::MatrixXd "", ""int "", ""Eigen::VectorXd "", ""double "", ""bool "", ""int "", ""double "", ""int "")","c("" a"", "" b"", "" nu"", "" mu"", "" geom"", "" kernelType"", "" para"", "" nugget"", "" useLog2"", "" m"", "" epsl"", "" N"")"
"4330","tlrmvnmvt","zorder","const Eigen::MatrixXd& "," geom"
"4331","tm","tdm","c(""const StringVector "", ""const bool "", ""const bool "", ""const std::vector<std::string> "", ""const std::vector<std::string> "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "", ""const unsigned int "")","c("" strings"", "" remove_puncts"", "" remove_digits"", "" stopwords"", "" dictionary"", "" min_term_freq"", "" max_term_freq"", "" min_word_length"", "" max_word_length"")"
"4332","tm","Boost_Tokenizer","const StringVector "," strings"
"4333","tokenbrowser","ngrams","c(""CharacterVector "", ""int "", ""std::string "")","c("" tokens"", "" n"", "" sep"")"
"4334","tokenbrowser","no_na_paste","c(""List "", ""std::string "")","c("" l"", "" sep"")"
"4335","tokenizers","generate_ngrams_batch","c(""const ListOf<const CharacterVector> "", ""const int "", ""const int "", ""CharacterVector "", ""const String "")","c("" documents_list"", "" ngram_min"", "" ngram_max"", "" stopwords"", "" ngram_delim"")"
"4336","tokenizers","skip_ngrams_vectorised","c(""ListOf<CharacterVector> "", ""ListOf<NumericVector> "", ""CharacterVector "")","c("" words"", "" skips"", "" stopwords"")"
"4337","tokenizers.bpe","youtokentome_train","c(""const std::string& "", ""const std::string& "", ""double "", ""int "", ""int "", ""int "", ""int "", ""int "", ""int "")","c("" input_path"", "" model_path"", "" coverage"", "" threads"", "" vocab_size"", "" pad_id"", "" unk_id"", "" bos_id"", "" eos_id"")"
"4338","tokenizers.bpe","youtokentome_load_model","c(""const std::string& "", ""int "")","c("" model_path"", "" threads"")"
"4339","tokenizers.bpe","youtokentome_encode_as_ids","c(""SEXP "", ""const std::vector<std::string>& "", ""bool "", ""bool "", ""bool "")","c("" model"", "" x"", "" bos"", "" eos"", "" reverse"")"
"4340","tokenizers.bpe","youtokentome_encode_as_subwords","c(""SEXP "", ""const std::vector<std::string>& "", ""bool "", ""bool "", ""bool "")","c("" model"", "" x"", "" bos"", "" eos"", "" reverse"")"
"4341","tokenizers.bpe","youtokentome_decode","c(""SEXP "", ""const std::vector<int>& "")","c("" model"", "" x"")"
"4342","tokenizers.bpe","youtokentome_recode_id_to_subword","c(""SEXP "", ""IntegerVector "")","c("" model"", "" x"")"
"4343","tokenizers.bpe","youtokentome_recode_subword_to_id","c(""SEXP "", ""StringVector "")","c("" model"", "" x"")"
"4344","torch","cpp_autograd_set_grad_mode","bool "," enabled"
"4345","torch","cpp_tensor_grad","XPtr<XPtrTorchTensor> "," self"
"4346","torch","cpp_tensor_set_grad_","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" new_grad"")"
"4347","torch","cpp_tensor_requires_grad","XPtr<XPtrTorchTensor> "," self"
"4348","torch","cpp_torch_method_backward_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" gradient"", "" retain_graph"", "" create_graph"")"
"4349","torch","cpp_autograd_backward","c(""XPtr<XPtrTorchvariable_list> "", ""XPtr<XPtrTorchvariable_list> "", ""bool "", ""bool "")","c("" tensors"", "" grad_tensors"", "" retain_graph"", "" create_graph"")"
"4350","torch","cpp_tensor_register_hook","c(""XPtr<XPtrTorchTensor> "", ""Function "")","c("" self"", "" f"")"
"4351","torch","cpp_tensor_remove_hook","c(""XPtr<XPtrTorchTensor> "", ""unsigned int "")","c("" self"", "" pos"")"
"4352","torch","cpp_Function_lambda","Function "," f"
"4353","torch","cpp_Function_apply","c(""XPtr<XPtrTorchvariable_list> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorch> "")","c("" inputs"", "" forward"", "" backward"")"
"4354","torch","cpp_autograd_context_save_for_backward","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchvariable_list> "")","c("" self"", "" vars"")"
"4355","torch","cpp_autograd_context_get_saved_variables","XPtr<XPtrTorch> "," self"
"4356","torch","cpp_autograd_context_set_arguments","c(""XPtr<XPtrTorch> "", ""std::vector<std::string> "", ""std::vector<bool> "")","c("" self"", "" names"", "" needs_grad"")"
"4357","torch","cpp_autograd_context_get_argument_names","XPtr<XPtrTorch> "," self"
"4358","torch","cpp_autograd_context_get_argument_needs_grad","XPtr<XPtrTorch> "," self"
"4359","torch","cpp_autograd_context_set_saved_variables_names","c(""XPtr<XPtrTorch> "", ""std::vector<std::string> "")","c("" self"", "" names"")"
"4360","torch","cpp_autograd_context_get_saved_variables_names","XPtr<XPtrTorch> "," self"
"4361","torch","cpp_autograd_context_mark_dirty","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchvariable_list> "")","c("" self"", "" inputs"")"
"4362","torch","cpp_autograd_context_mark_non_differentiable","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchvariable_list> "")","c("" self"", "" outputs"")"
"4363","torch","cpp_tensor_grad_fn","XPtr<XPtrTorchTensor> "," self"
"4364","torch","cpp_pointer_is_null","XPtr<XPtrTorchTensor> "," x"
"4365","torch","cpp_autograd_node_name","XPtr<XPtrTorch> "," self"
"4366","torch","cpp_autograd_node_next_edges","XPtr<XPtrTorch> "," self"
"4367","torch","cpp_autograd_edge_function","XPtr<XPtrTorch> "," self"
"4368","torch","cpp_autograd_grad","c(""XPtr<XPtrTorchvariable_list> "", ""XPtr<XPtrTorchvariable_list> "", ""XPtr<XPtrTorchvariable_list> "", ""bool "", ""bool "", ""bool "")","c("" outputs"", "" inputs"", "" grad_outputs"", "" retain_graph"", "" create_graph"", "" allow_unused"")"
"4369","torch","cpp_contrib_torch_sparsemax","c(""XPtr<XPtrTorchTensor> "", ""int "")","c("" input"", "" dim"")"
"4370","torch","cpp_device_type_to_string","XPtr<XPtrTorchDevice> "," device"
"4371","torch","cpp_device_index_to_int","XPtr<XPtrTorchDevice> "," device"
"4372","torch","cpp_torch_device","c(""std::string "", ""Nullable<std::int64_t> "")","c("" type"", "" index"")"
"4373","torch","cpp_torch_dimname","const std::string& "," str"
"4374","torch","cpp_torch_dimname_list","const List& "," x"
"4375","torch","cpp_dimname_to_string","XPtr<XPtrTorchDimname> "," x"
"4376","torch","cpp_dimname_list_to_string","XPtr<XPtrTorchDimnameList> "," x"
"4377","torch","cpp_dtype_to_string","XPtr<XPtrTorchDtype> "," dtype"
"4378","torch","cpp_set_default_dtype","XPtr<XPtrTorchDtype> "," x"
"4379","torch","cpp_torch_method_set_data_self_Tensor_new_data_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" new_data"")"
"4380","torch","cpp_torch_method_data_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4381","torch","cpp_torch_method_is_leaf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4382","torch","cpp_torch_method_output_nr_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4383","torch","cpp_torch_method__version_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4384","torch","cpp_torch_method_requires_grad__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" requires_grad"")"
"4385","torch","cpp_torch_method_retain_grad_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4386","torch","cpp_torch_method_rename__self_Tensor_names_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" names"")"
"4387","torch","cpp_torch_method_rename_self_Tensor_names_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" names"")"
"4388","torch","cpp_torch_method_align_to_self_Tensor_names_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" names"")"
"4389","torch","cpp_torch_method_align_to_self_Tensor_order_DimnameList_ellipsis_idx_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""nullable<int64_t> "")","c("" self"", "" order"", "" ellipsis_idx"")"
"4390","torch","cpp_torch_method_align_as_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4391","torch","cpp_torch_method_refine_names_self_Tensor_names_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" names"")"
"4392","torch","cpp_torch_method_abs_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4393","torch","cpp_torch_method_abs__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4394","torch","cpp_torch_method_absolute_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4395","torch","cpp_torch_method_absolute__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4396","torch","cpp_torch_method_angle_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4397","torch","cpp_torch_method_sgn_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4398","torch","cpp_torch_method_sgn__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4399","torch","cpp_torch_method_conj_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4400","torch","cpp_torch_method_acos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4401","torch","cpp_torch_method_acos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4402","torch","cpp_torch_method_arccos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4403","torch","cpp_torch_method_arccos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4404","torch","cpp_torch_method_add_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4405","torch","cpp_torch_method_add__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4406","torch","cpp_torch_method_add_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4407","torch","cpp_torch_method_add__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4408","torch","cpp_torch_method_addmv_self_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"4409","torch","cpp_torch_method_addmv__self_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"4410","torch","cpp_torch_method_addr_self_Tensor_vec1_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" vec1"", "" vec2"", "" beta"", "" alpha"")"
"4411","torch","cpp_torch_method_addr__self_Tensor_vec1_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" vec1"", "" vec2"", "" beta"", "" alpha"")"
"4412","torch","cpp_torch_method_all_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4413","torch","cpp_torch_method_all_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4414","torch","cpp_torch_method_allclose_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""bool "")","c("" self"", "" other"", "" rtol"", "" atol"", "" equal_nan"")"
"4415","torch","cpp_torch_method_any_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4416","torch","cpp_torch_method_any_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4417","torch","cpp_torch_method_argmax_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4418","torch","cpp_torch_method_argmin_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4419","torch","cpp_torch_method_acosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4420","torch","cpp_torch_method_acosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4421","torch","cpp_torch_method_arccosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4422","torch","cpp_torch_method_arccosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4423","torch","cpp_torch_method_asinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4424","torch","cpp_torch_method_asinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4425","torch","cpp_torch_method_arcsinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4426","torch","cpp_torch_method_arcsinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4427","torch","cpp_torch_method_atanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4428","torch","cpp_torch_method_atanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4429","torch","cpp_torch_method_arctanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4430","torch","cpp_torch_method_arctanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4431","torch","cpp_torch_method_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" stride"", "" storage_offset"")"
"4432","torch","cpp_torch_method_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" stride"", "" storage_offset"")"
"4433","torch","cpp_torch_method_asin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4434","torch","cpp_torch_method_asin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4435","torch","cpp_torch_method_arcsin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4436","torch","cpp_torch_method_arcsin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4437","torch","cpp_torch_method_atan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4438","torch","cpp_torch_method_atan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4439","torch","cpp_torch_method_arctan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4440","torch","cpp_torch_method_arctan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4441","torch","cpp_torch_method_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"4442","torch","cpp_torch_method_baddbmm__self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"4443","torch","cpp_torch_method_bernoulli_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"4444","torch","cpp_torch_method_bernoulli__self_Tensor_p_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"4445","torch","cpp_torch_method_bernoulli__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"4446","torch","cpp_torch_method_bernoulli_self_Tensor_p_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"4447","torch","cpp_torch_method_bincount_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" weights"", "" minlength"")"
"4448","torch","cpp_torch_method_bitwise_not_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4449","torch","cpp_torch_method_bitwise_not__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4450","torch","cpp_torch_method_logical_not_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4451","torch","cpp_torch_method_logical_not__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4452","torch","cpp_torch_method_logical_xor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4453","torch","cpp_torch_method_logical_xor__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4454","torch","cpp_torch_method_logical_and_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4455","torch","cpp_torch_method_logical_and__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4456","torch","cpp_torch_method_logical_or_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4457","torch","cpp_torch_method_logical_or__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4458","torch","cpp_torch_method_bmm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"4459","torch","cpp_torch_method_ceil_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4460","torch","cpp_torch_method_ceil__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4461","torch","cpp_torch_method_unsafe_chunk_self_Tensor_chunks_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" chunks"", "" dim"")"
"4462","torch","cpp_torch_method_chunk_self_Tensor_chunks_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" chunks"", "" dim"")"
"4463","torch","cpp_torch_method_clamp_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"4464","torch","cpp_torch_method_clamp__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"4465","torch","cpp_torch_method_clamp_max_self_Tensor_max_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" max"")"
"4466","torch","cpp_torch_method_clamp_max__self_Tensor_max_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" max"")"
"4467","torch","cpp_torch_method_clamp_min_self_Tensor_min_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"")"
"4468","torch","cpp_torch_method_clamp_min__self_Tensor_min_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"")"
"4469","torch","cpp_torch_method_clip_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"4470","torch","cpp_torch_method_clip__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"4471","torch","cpp_torch_method_contiguous_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" memory_format"")"
"4472","torch","cpp_torch_method_copy__self_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" src"", "" non_blocking"")"
"4473","torch","cpp_torch_method_cos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4474","torch","cpp_torch_method_cos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4475","torch","cpp_torch_method_cosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4476","torch","cpp_torch_method_cosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4477","torch","cpp_torch_method_count_nonzero_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dim"")"
"4478","torch","cpp_torch_method_count_nonzero_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4479","torch","cpp_torch_method_cummax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4480","torch","cpp_torch_method_cummax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4481","torch","cpp_torch_method_cummin_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4482","torch","cpp_torch_method_cummin_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4483","torch","cpp_torch_method_cumprod_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4484","torch","cpp_torch_method_cumprod_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4485","torch","cpp_torch_method_cumsum_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4486","torch","cpp_torch_method_cumsum_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4487","torch","cpp_torch_method_diag_embed_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" offset"", "" dim1"", "" dim2"")"
"4488","torch","cpp_torch_method_diagflat_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" offset"")"
"4489","torch","cpp_torch_method_diagonal_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" offset"", "" dim1"", "" dim2"")"
"4490","torch","cpp_torch_method_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""nullable<int64_t> "")","c("" self"", "" outdim"", "" dim1"", "" dim2"", "" offset"")"
"4491","torch","cpp_torch_method_fill_diagonal__self_Tensor_fill_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""bool "")","c("" self"", "" fill_value"", "" wrap"")"
"4492","torch","cpp_torch_method_div_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4493","torch","cpp_torch_method_div__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4494","torch","cpp_torch_method_div_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4495","torch","cpp_torch_method_div__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4496","torch","cpp_torch_method_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4497","torch","cpp_torch_method_divide__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4498","torch","cpp_torch_method_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4499","torch","cpp_torch_method_divide__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4500","torch","cpp_torch_method_true_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4501","torch","cpp_torch_method_true_divide__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4502","torch","cpp_torch_method_true_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4503","torch","cpp_torch_method_true_divide__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4504","torch","cpp_torch_method_dot_self_Tensor_tensor_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" tensor"")"
"4505","torch","cpp_torch_method_vdot_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4506","torch","cpp_torch_method_new_empty_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" self"", "" size"", "" options"")"
"4507","torch","cpp_torch_method_new_full_self_Tensor_size_IntArrayRef_fill_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" self"", "" size"", "" fill_value"", "" options"")"
"4508","torch","cpp_torch_method_new_zeros_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" self"", "" size"", "" options"")"
"4509","torch","cpp_torch_method_resize__self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" size"", "" memory_format"")"
"4510","torch","cpp_torch_method_erf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4511","torch","cpp_torch_method_erf__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4512","torch","cpp_torch_method_erfc_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4513","torch","cpp_torch_method_erfc__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4514","torch","cpp_torch_method_exp_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4515","torch","cpp_torch_method_exp__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4516","torch","cpp_torch_method_exp2_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4517","torch","cpp_torch_method_exp2__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4518","torch","cpp_torch_method_expm1_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4519","torch","cpp_torch_method_expm1__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4520","torch","cpp_torch_method_expand_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" size"", "" implicit"")"
"4521","torch","cpp_torch_method_expand_as_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4522","torch","cpp_torch_method_flatten_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" start_dim"", "" end_dim"")"
"4523","torch","cpp_torch_method_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" start_dim"", "" end_dim"", "" out_dim"")"
"4524","torch","cpp_torch_method_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" start_dim"", "" end_dim"", "" out_dim"")"
"4525","torch","cpp_torch_method_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dims"", "" out_dim"")"
"4526","torch","cpp_torch_method_unflatten_self_Tensor_dim_int64_t_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" sizes"", "" names"")"
"4527","torch","cpp_torch_method_unflatten_self_Tensor_dim_Dimname_sizes_IntArrayRef_names_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" sizes"", "" names"")"
"4528","torch","cpp_torch_method_fill__self_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" value"")"
"4529","torch","cpp_torch_method_fill__self_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" value"")"
"4530","torch","cpp_torch_method_floor_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4531","torch","cpp_torch_method_floor__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4532","torch","cpp_torch_method_floor_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4533","torch","cpp_torch_method_floor_divide__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4534","torch","cpp_torch_method_floor_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4535","torch","cpp_torch_method_floor_divide__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4536","torch","cpp_torch_method_frac_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4537","torch","cpp_torch_method_frac__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4538","torch","cpp_torch_method_gcd_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4539","torch","cpp_torch_method_gcd__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4540","torch","cpp_torch_method_lcm_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4541","torch","cpp_torch_method_lcm__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4542","torch","cpp_torch_method_ifft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"")"
"4543","torch","cpp_torch_method_rfft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"", "" onesided"")"
"4544","torch","cpp_torch_method_irfft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""std::vector<int64_t> "")","c("" self"", "" signal_ndim"", "" normalized"", "" onesided"", "" signal_sizes"")"
"4545","torch","cpp_torch_method_index_self_Tensor_indices_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "")","c("" self"", "" indices"")"
"4546","torch","cpp_torch_method_index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4547","torch","cpp_torch_method_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4548","torch","cpp_torch_method_index_copy__self_Tensor_dim_Dimname_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4549","torch","cpp_torch_method_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4550","torch","cpp_torch_method_index_put__self_Tensor_indices_TensorList_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" indices"", "" values"", "" accumulate"")"
"4551","torch","cpp_torch_method_index_put_self_Tensor_indices_TensorList_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" indices"", "" values"", "" accumulate"")"
"4552","torch","cpp_torch_method_inverse_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4553","torch","cpp_torch_method_isclose_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""bool "")","c("" self"", "" other"", "" rtol"", "" atol"", "" equal_nan"")"
"4554","torch","cpp_torch_method_isnan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4555","torch","cpp_torch_method_is_distributed_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4556","torch","cpp_torch_method_is_floating_point_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4557","torch","cpp_torch_method_is_complex_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4558","torch","cpp_torch_method_isreal_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4559","torch","cpp_torch_method_is_nonzero_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4560","torch","cpp_torch_method_is_same_size_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4561","torch","cpp_torch_method_is_signed_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4562","torch","cpp_torch_method_kthvalue_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" k"", "" dim"", "" keepdim"")"
"4563","torch","cpp_torch_method_kthvalue_self_Tensor_k_int64_t_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" k"", "" dim"", "" keepdim"")"
"4564","torch","cpp_torch_method_log_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4565","torch","cpp_torch_method_log__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4566","torch","cpp_torch_method_log10_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4567","torch","cpp_torch_method_log10__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4568","torch","cpp_torch_method_log1p_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4569","torch","cpp_torch_method_log1p__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4570","torch","cpp_torch_method_log2_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4571","torch","cpp_torch_method_log2__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4572","torch","cpp_torch_method_logaddexp_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4573","torch","cpp_torch_method_logaddexp2_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4574","torch","cpp_torch_method_logdet_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4575","torch","cpp_torch_method_log_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4576","torch","cpp_torch_method_log_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4577","torch","cpp_torch_method_logcumsumexp_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4578","torch","cpp_torch_method_logcumsumexp_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4579","torch","cpp_torch_method_logsumexp_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4580","torch","cpp_torch_method_logsumexp_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4581","torch","cpp_torch_method_matmul_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4582","torch","cpp_torch_method_matrix_power_self_Tensor_n_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" n"")"
"4583","torch","cpp_torch_method_matrix_exp_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4584","torch","cpp_torch_method_max_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4585","torch","cpp_torch_method_max_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4586","torch","cpp_torch_method_amax_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4587","torch","cpp_torch_method_mean_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"4588","torch","cpp_torch_method_mean_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4589","torch","cpp_torch_method_mean_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4590","torch","cpp_torch_method_median_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4591","torch","cpp_torch_method_median_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4592","torch","cpp_torch_method_min_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4593","torch","cpp_torch_method_min_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4594","torch","cpp_torch_method_amin_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4595","torch","cpp_torch_method_mm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"4596","torch","cpp_torch_method_mode_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4597","torch","cpp_torch_method_mode_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"4598","torch","cpp_torch_method_mul_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4599","torch","cpp_torch_method_mul__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4600","torch","cpp_torch_method_mul_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4601","torch","cpp_torch_method_mul__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4602","torch","cpp_torch_method_multiply_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4603","torch","cpp_torch_method_multiply__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4604","torch","cpp_torch_method_multiply_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4605","torch","cpp_torch_method_multiply__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4606","torch","cpp_torch_method_mv_self_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec"")"
"4607","torch","cpp_torch_method_mvlgamma_self_Tensor_p_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" p"")"
"4608","torch","cpp_torch_method_mvlgamma__self_Tensor_p_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" p"")"
"4609","torch","cpp_torch_method_narrow_copy_self_Tensor_dim_int64_t_start_int64_t_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" length"")"
"4610","torch","cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" length"")"
"4611","torch","cpp_torch_method_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" length"")"
"4612","torch","cpp_torch_method_permute_self_Tensor_dims_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dims"")"
"4613","torch","cpp_torch_method_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" source"", "" destination"")"
"4614","torch","cpp_torch_method_movedim_self_Tensor_source_int64_t_destination_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" source"", "" destination"")"
"4615","torch","cpp_torch_method_numpy_T_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4616","torch","cpp_torch_method_is_pinned_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4617","torch","cpp_torch_method_pin_memory_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4618","torch","cpp_torch_method_pinverse_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "")","c("" self"", "" rcond"")"
"4619","torch","cpp_torch_method_rad2deg_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4620","torch","cpp_torch_method_rad2deg__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4621","torch","cpp_torch_method_deg2rad_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4622","torch","cpp_torch_method_deg2rad__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4623","torch","cpp_torch_method_reciprocal_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4624","torch","cpp_torch_method_reciprocal__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4625","torch","cpp_torch_method_neg_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4626","torch","cpp_torch_method_neg__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4627","torch","cpp_torch_method_negative_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4628","torch","cpp_torch_method_negative__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4629","torch","cpp_torch_method_repeat_self_Tensor_repeats_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" repeats"")"
"4630","torch","cpp_torch_method_repeat_interleave_self_Tensor_repeats_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" repeats"", "" dim"")"
"4631","torch","cpp_torch_method_repeat_interleave_self_Tensor_repeats_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" repeats"", "" dim"")"
"4632","torch","cpp_torch_method_reshape_self_Tensor_shape_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" shape"")"
"4633","torch","cpp_torch_method_reshape_as_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4634","torch","cpp_torch_method_round_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4635","torch","cpp_torch_method_round__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4636","torch","cpp_torch_method_relu_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4637","torch","cpp_torch_method_relu__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4638","torch","cpp_torch_method_prelu_self_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" weight"")"
"4639","torch","cpp_torch_method_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" weight"")"
"4640","torch","cpp_torch_method_hardshrink_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" lambd"")"
"4641","torch","cpp_torch_method_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_out"", "" self"", "" lambd"")"
"4642","torch","cpp_torch_method_rsqrt_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4643","torch","cpp_torch_method_rsqrt__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4644","torch","cpp_torch_method_select_self_Tensor_dim_Dimname_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" index"")"
"4645","torch","cpp_torch_method_select_self_Tensor_dim_int64_t_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" index"")"
"4646","torch","cpp_torch_method_sigmoid_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4647","torch","cpp_torch_method_sigmoid__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4648","torch","cpp_torch_method_logit_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" self"", "" eps"")"
"4649","torch","cpp_torch_method_logit__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" self"", "" eps"")"
"4650","torch","cpp_torch_method_sin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4651","torch","cpp_torch_method_sin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4652","torch","cpp_torch_method_sinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4653","torch","cpp_torch_method_sinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4654","torch","cpp_torch_method_detach_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4655","torch","cpp_torch_method_detach__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4656","torch","cpp_torch_method_size_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4657","torch","cpp_torch_method_size_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4658","torch","cpp_torch_method_slice_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" end"", "" step"")"
"4659","torch","cpp_torch_method_slogdet_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4660","torch","cpp_torch_method_smm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"4661","torch","cpp_torch_method_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4662","torch","cpp_torch_method_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"4663","torch","cpp_torch_method_unsafe_split_self_Tensor_split_size_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_size"", "" dim"")"
"4664","torch","cpp_torch_method_split_self_Tensor_split_size_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_size"", "" dim"")"
"4665","torch","cpp_torch_method_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_sizes"", "" dim"")"
"4666","torch","cpp_torch_method_split_with_sizes_self_Tensor_split_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_sizes"", "" dim"")"
"4667","torch","cpp_torch_method_squeeze_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4668","torch","cpp_torch_method_squeeze_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4669","torch","cpp_torch_method_squeeze_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4670","torch","cpp_torch_method_squeeze__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4671","torch","cpp_torch_method_squeeze__self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4672","torch","cpp_torch_method_squeeze__self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4673","torch","cpp_torch_method_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"4674","torch","cpp_torch_method_stft_self_Tensor_n_fft_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" n_fft"", "" hop_length"", "" win_length"", "" window"", "" normalized"", "" onesided"", "" return_complex"")"
"4675","torch","cpp_torch_method_istft_self_Tensor_n_fft_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" n_fft"", "" hop_length"", "" win_length"", "" window"", "" center"", "" normalized"", "" onesided"", "" length"", "" return_complex"")"
"4676","torch","cpp_torch_method_stride_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4677","torch","cpp_torch_method_stride_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4678","torch","cpp_torch_method_sum_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"4679","torch","cpp_torch_method_sum_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4680","torch","cpp_torch_method_sum_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4681","torch","cpp_torch_method_nansum_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"4682","torch","cpp_torch_method_nansum_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4683","torch","cpp_torch_method_sum_to_size_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" size"")"
"4684","torch","cpp_torch_method_sqrt_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4685","torch","cpp_torch_method_sqrt__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4686","torch","cpp_torch_method_square_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4687","torch","cpp_torch_method_square__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4688","torch","cpp_torch_method_std_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"4689","torch","cpp_torch_method_std_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"4690","torch","cpp_torch_method_std_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"4691","torch","cpp_torch_method_prod_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"4692","torch","cpp_torch_method_prod_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4693","torch","cpp_torch_method_prod_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"4694","torch","cpp_torch_method_t_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4695","torch","cpp_torch_method_t__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4696","torch","cpp_torch_method_tan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4697","torch","cpp_torch_method_tan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4698","torch","cpp_torch_method_tanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4699","torch","cpp_torch_method_tanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4700","torch","cpp_torch_method_transpose_self_Tensor_dim0_int64_t_dim1_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim0"", "" dim1"")"
"4701","torch","cpp_torch_method_transpose_self_Tensor_dim0_Dimname_dim1_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim0"", "" dim1"")"
"4702","torch","cpp_torch_method_transpose__self_Tensor_dim0_int64_t_dim1_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim0"", "" dim1"")"
"4703","torch","cpp_torch_method_flip_self_Tensor_dims_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dims"")"
"4704","torch","cpp_torch_method_fliplr_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4705","torch","cpp_torch_method_flipud_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4706","torch","cpp_torch_method_roll_self_Tensor_shifts_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" shifts"", "" dims"")"
"4707","torch","cpp_torch_method_rot90_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" k"", "" dims"")"
"4708","torch","cpp_torch_method_trunc_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4709","torch","cpp_torch_method_trunc__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4710","torch","cpp_torch_method_fix_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4711","torch","cpp_torch_method_fix__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4712","torch","cpp_torch_method_type_as_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4713","torch","cpp_torch_method_unsqueeze_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4714","torch","cpp_torch_method_unsqueeze__self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4715","torch","cpp_torch_method_var_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"4716","torch","cpp_torch_method_var_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"4717","torch","cpp_torch_method_var_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"4718","torch","cpp_torch_method_view_as_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4719","torch","cpp_torch_method_where_condition_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" condition"", "" self"", "" other"")"
"4720","torch","cpp_torch_method_norm_self_Tensor_p_Scalar_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dtype"")"
"4721","torch","cpp_torch_method_norm_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"")"
"4722","torch","cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"4723","torch","cpp_torch_method_norm_self_Tensor_p_Scalar_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" p"", "" dim"", "" keepdim"")"
"4724","torch","cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"4725","torch","cpp_torch_method_norm_self_Tensor_p_Scalar_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" self"", "" p"", "" dim"", "" keepdim"")"
"4726","torch","cpp_torch_method_clone_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" memory_format"")"
"4727","torch","cpp_torch_method_resize_as__self_Tensor_the_template_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" the_template"", "" memory_format"")"
"4728","torch","cpp_torch_method_zero__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4729","torch","cpp_torch_method_sub_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4730","torch","cpp_torch_method_sub__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4731","torch","cpp_torch_method_sub_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4732","torch","cpp_torch_method_sub__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4733","torch","cpp_torch_method_subtract_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4734","torch","cpp_torch_method_subtract__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4735","torch","cpp_torch_method_subtract_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4736","torch","cpp_torch_method_subtract__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"4737","torch","cpp_torch_method_heaviside_self_Tensor_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" values"")"
"4738","torch","cpp_torch_method_heaviside__self_Tensor_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" values"")"
"4739","torch","cpp_torch_method_addmm_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"4740","torch","cpp_torch_method_addmm__self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"4741","torch","cpp_torch_method_sparse_resize__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" sparse_dim"", "" dense_dim"")"
"4742","torch","cpp_torch_method_sparse_resize_and_clear__self_Tensor_size_IntArrayRef_sparse_dim_int64_t_dense_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" sparse_dim"", "" dense_dim"")"
"4743","torch","cpp_torch_method_sparse_mask_self_Tensor_mask_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"")"
"4744","torch","cpp_torch_method_to_dense_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4745","torch","cpp_torch_method_sparse_dim_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4746","torch","cpp_torch_method__dimI_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4747","torch","cpp_torch_method_dense_dim_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4748","torch","cpp_torch_method__dimV_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4749","torch","cpp_torch_method__nnz_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4750","torch","cpp_torch_method_coalesce_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4751","torch","cpp_torch_method_is_coalesced_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4752","torch","cpp_torch_method__indices_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4753","torch","cpp_torch_method__values_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4754","torch","cpp_torch_method__coalesced__self_Tensor_coalesced_bool","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" coalesced"")"
"4755","torch","cpp_torch_method_indices_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4756","torch","cpp_torch_method_values_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4757","torch","cpp_torch_method_unbind_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"4758","torch","cpp_torch_method_unbind_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"4759","torch","cpp_torch_method_to_sparse_self_Tensor_sparse_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" sparse_dim"")"
"4760","torch","cpp_torch_method_to_sparse_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4761","torch","cpp_torch_method_to_mkldnn_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4762","torch","cpp_torch_method_dequantize_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4763","torch","cpp_torch_method_q_scale_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4764","torch","cpp_torch_method_q_zero_point_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4765","torch","cpp_torch_method_q_per_channel_scales_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4766","torch","cpp_torch_method_q_per_channel_zero_points_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4767","torch","cpp_torch_method_q_per_channel_axis_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4768","torch","cpp_torch_method_int_repr_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4769","torch","cpp_torch_method_qscheme_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4770","torch","cpp_torch_method_to_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""bool "", ""bool "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" non_blocking"", "" copy"", "" memory_format"")"
"4771","torch","cpp_torch_method_to_self_Tensor_device_Device_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDevice> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" device"", "" dtype"", "" non_blocking"", "" copy"", "" memory_format"")"
"4772","torch","cpp_torch_method_to_self_Tensor_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" dtype"", "" non_blocking"", "" copy"", "" memory_format"")"
"4773","torch","cpp_torch_method_to_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" other"", "" non_blocking"", "" copy"", "" memory_format"")"
"4774","torch","cpp_torch_method_item_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4775","torch","cpp_torch_method_set__self_Tensor_source_Storage","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" source"")"
"4776","torch","cpp_torch_method_set__self_Tensor_source_Storage_storage_offset_int64_t_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" source"", "" storage_offset"", "" size"", "" stride"")"
"4777","torch","cpp_torch_method_set__self_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" source"")"
"4778","torch","cpp_torch_method_set__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4779","torch","cpp_torch_method_is_set_to_self_Tensor_tensor_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" tensor"")"
"4780","torch","cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mask"", "" value"")"
"4781","torch","cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mask"", "" value"")"
"4782","torch","cpp_torch_method_masked_fill__self_Tensor_mask_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" value"")"
"4783","torch","cpp_torch_method_masked_fill_self_Tensor_mask_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" value"")"
"4784","torch","cpp_torch_method_masked_scatter__self_Tensor_mask_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" source"")"
"4785","torch","cpp_torch_method_masked_scatter_self_Tensor_mask_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" source"")"
"4786","torch","cpp_torch_method_view_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" size"")"
"4787","torch","cpp_torch_method_put__self_Tensor_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" index"", "" source"", "" accumulate"")"
"4788","torch","cpp_torch_method_index_add__self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4789","torch","cpp_torch_method_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4790","torch","cpp_torch_method_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"4791","torch","cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4792","torch","cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4793","torch","cpp_torch_method_index_fill__self_Tensor_dim_int64_t_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4794","torch","cpp_torch_method_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4795","torch","cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4796","torch","cpp_torch_method_index_fill__self_Tensor_dim_Dimname_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4797","torch","cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4798","torch","cpp_torch_method_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4799","torch","cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4800","torch","cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4801","torch","cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4802","torch","cpp_torch_method_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4803","torch","cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4804","torch","cpp_torch_method_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"4805","torch","cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_src_Tensor_reduce_stdstring","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::string "")","c("" self"", "" dim"", "" index"", "" src"", "" reduce"")"
"4806","torch","cpp_torch_method_scatter__self_Tensor_dim_int64_t_index_Tensor_value_Scalar_reduce_stdstring","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::string "")","c("" self"", "" dim"", "" index"", "" value"", "" reduce"")"
"4807","torch","cpp_torch_method_scatter_add__self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4808","torch","cpp_torch_method_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4809","torch","cpp_torch_method_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"4810","torch","cpp_torch_method_eq__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4811","torch","cpp_torch_method_eq__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4812","torch","cpp_torch_method_bitwise_and_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4813","torch","cpp_torch_method_bitwise_and_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4814","torch","cpp_torch_method_bitwise_and__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4815","torch","cpp_torch_method_bitwise_and__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4816","torch","cpp_torch_method___and___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4817","torch","cpp_torch_method___and___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4818","torch","cpp_torch_method___iand___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4819","torch","cpp_torch_method___iand___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4820","torch","cpp_torch_method_bitwise_or_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4821","torch","cpp_torch_method_bitwise_or_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4822","torch","cpp_torch_method_bitwise_or__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4823","torch","cpp_torch_method_bitwise_or__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4824","torch","cpp_torch_method___or___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4825","torch","cpp_torch_method___or___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4826","torch","cpp_torch_method___ior___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4827","torch","cpp_torch_method___ior___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4828","torch","cpp_torch_method_bitwise_xor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4829","torch","cpp_torch_method_bitwise_xor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4830","torch","cpp_torch_method_bitwise_xor__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4831","torch","cpp_torch_method_bitwise_xor__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4832","torch","cpp_torch_method___xor___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4833","torch","cpp_torch_method___xor___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4834","torch","cpp_torch_method___ixor___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4835","torch","cpp_torch_method___ixor___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4836","torch","cpp_torch_method___lshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4837","torch","cpp_torch_method___lshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4838","torch","cpp_torch_method___ilshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4839","torch","cpp_torch_method___ilshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4840","torch","cpp_torch_method___rshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4841","torch","cpp_torch_method___rshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4842","torch","cpp_torch_method___irshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4843","torch","cpp_torch_method___irshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4844","torch","cpp_torch_method_lgamma__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4845","torch","cpp_torch_method_atan2__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4846","torch","cpp_torch_method_tril__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"4847","torch","cpp_torch_method_triu__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"4848","torch","cpp_torch_method_digamma__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4849","torch","cpp_torch_method_polygamma__self_Tensor_n_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" n"")"
"4850","torch","cpp_torch_method_renorm__self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"", "" dim"", "" maxnorm"")"
"4851","torch","cpp_torch_method_pow__self_Tensor_exponent_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" exponent"")"
"4852","torch","cpp_torch_method_pow__self_Tensor_exponent_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" exponent"")"
"4853","torch","cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" end"", "" weight"")"
"4854","torch","cpp_torch_method_lerp__self_Tensor_end_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" end"", "" weight"")"
"4855","torch","cpp_torch_method_fmod__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4856","torch","cpp_torch_method_fmod__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4857","torch","cpp_torch_method_remainder__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4858","torch","cpp_torch_method_remainder__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4859","torch","cpp_torch_method_addbmm__self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"4860","torch","cpp_torch_method_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"4861","torch","cpp_torch_method_addcdiv__self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"4862","torch","cpp_torch_method_random__self_Tensor_from_int64_t_to_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" from"", "" to"", "" generator"")"
"4863","torch","cpp_torch_method_random__self_Tensor_to_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" to"", "" generator"")"
"4864","torch","cpp_torch_method_random__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"4865","torch","cpp_torch_method_uniform__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" from"", "" to"", "" generator"")"
"4866","torch","cpp_torch_method_cauchy__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" median"", "" sigma"", "" generator"")"
"4867","torch","cpp_torch_method_log_normal__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" mean"", "" std"", "" generator"")"
"4868","torch","cpp_torch_method_exponential__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" lambd"", "" generator"")"
"4869","torch","cpp_torch_method_geometric__self_Tensor_p_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"4870","torch","cpp_torch_method_diag_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"4871","torch","cpp_torch_method_cross_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" other"", "" dim"")"
"4872","torch","cpp_torch_method_triu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"4873","torch","cpp_torch_method_tril_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"4874","torch","cpp_torch_method_trace_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4875","torch","cpp_torch_method_ne_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4876","torch","cpp_torch_method_ne_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4877","torch","cpp_torch_method_ne__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4878","torch","cpp_torch_method_ne__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4879","torch","cpp_torch_method_not_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4880","torch","cpp_torch_method_not_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4881","torch","cpp_torch_method_not_equal__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4882","torch","cpp_torch_method_not_equal__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4883","torch","cpp_torch_method_eq_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4884","torch","cpp_torch_method_eq_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4885","torch","cpp_torch_method_ge_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4886","torch","cpp_torch_method_ge_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4887","torch","cpp_torch_method_ge__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4888","torch","cpp_torch_method_ge__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4889","torch","cpp_torch_method_greater_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4890","torch","cpp_torch_method_greater_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4891","torch","cpp_torch_method_greater_equal__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4892","torch","cpp_torch_method_greater_equal__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4893","torch","cpp_torch_method_le_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4894","torch","cpp_torch_method_le_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4895","torch","cpp_torch_method_le__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4896","torch","cpp_torch_method_le__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4897","torch","cpp_torch_method_less_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4898","torch","cpp_torch_method_less_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4899","torch","cpp_torch_method_less_equal__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4900","torch","cpp_torch_method_less_equal__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4901","torch","cpp_torch_method_gt_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4902","torch","cpp_torch_method_gt_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4903","torch","cpp_torch_method_gt__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4904","torch","cpp_torch_method_gt__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4905","torch","cpp_torch_method_greater_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4906","torch","cpp_torch_method_greater_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4907","torch","cpp_torch_method_greater__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4908","torch","cpp_torch_method_greater__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4909","torch","cpp_torch_method_lt_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4910","torch","cpp_torch_method_lt_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4911","torch","cpp_torch_method_lt__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4912","torch","cpp_torch_method_lt__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4913","torch","cpp_torch_method_less_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4914","torch","cpp_torch_method_less_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4915","torch","cpp_torch_method_less__self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4916","torch","cpp_torch_method_less__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4917","torch","cpp_torch_method_take_self_Tensor_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" index"")"
"4918","torch","cpp_torch_method_index_select_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"")"
"4919","torch","cpp_torch_method_index_select_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"")"
"4920","torch","cpp_torch_method_masked_select_self_Tensor_mask_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"")"
"4921","torch","cpp_torch_method_nonzero_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4922","torch","cpp_torch_method_nonzero_numpy_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4923","torch","cpp_torch_method_gather_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" dim"", "" index"", "" sparse_grad"")"
"4924","torch","cpp_torch_method_gather_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" dim"", "" index"", "" sparse_grad"")"
"4925","torch","cpp_torch_method_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"4926","torch","cpp_torch_method_addcmul__self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"4927","torch","cpp_torch_method_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"4928","torch","cpp_torch_method_lstsq_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" A"")"
"4929","torch","cpp_torch_method_triangular_solve_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" A"", "" upper"", "" transpose"", "" unitriangular"")"
"4930","torch","cpp_torch_method_symeig_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" eigenvectors"", "" upper"")"
"4931","torch","cpp_torch_method_eig_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" eigenvectors"")"
"4932","torch","cpp_torch_method_svd_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" some"", "" compute_uv"")"
"4933","torch","cpp_torch_method_cholesky_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" upper"")"
"4934","torch","cpp_torch_method_cholesky_solve_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" input2"", "" upper"")"
"4935","torch","cpp_torch_method_solve_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" A"")"
"4936","torch","cpp_torch_method_cholesky_inverse_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" upper"")"
"4937","torch","cpp_torch_method_qr_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" some"")"
"4938","torch","cpp_torch_method_geqrf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4939","torch","cpp_torch_method_orgqr_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" input2"")"
"4940","torch","cpp_torch_method_ormqr_self_Tensor_input2_Tensor_input3_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" input2"", "" input3"", "" left"", "" transpose"")"
"4941","torch","cpp_torch_method_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" LU_data"", "" LU_pivots"")"
"4942","torch","cpp_torch_method_multinomial_self_Tensor_num_samples_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" num_samples"", "" replacement"", "" generator"")"
"4943","torch","cpp_torch_method_lgamma_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4944","torch","cpp_torch_method_digamma_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4945","torch","cpp_torch_method_erfinv_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4946","torch","cpp_torch_method_erfinv__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4947","torch","cpp_torch_method_i0_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4948","torch","cpp_torch_method_i0__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4949","torch","cpp_torch_method_sign_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4950","torch","cpp_torch_method_sign__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4951","torch","cpp_torch_method_signbit_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4952","torch","cpp_torch_method_dist_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" p"")"
"4953","torch","cpp_torch_method_atan2_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4954","torch","cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" end"", "" weight"")"
"4955","torch","cpp_torch_method_lerp_self_Tensor_end_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" end"", "" weight"")"
"4956","torch","cpp_torch_method_histc_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" bins"", "" min"", "" max"")"
"4957","torch","cpp_torch_method_fmod_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4958","torch","cpp_torch_method_fmod_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4959","torch","cpp_torch_method_hypot_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4960","torch","cpp_torch_method_hypot__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4961","torch","cpp_torch_method_nextafter_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4962","torch","cpp_torch_method_nextafter__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4963","torch","cpp_torch_method_remainder_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"4964","torch","cpp_torch_method_remainder_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4965","torch","cpp_torch_method_min_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4966","torch","cpp_torch_method_max_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4967","torch","cpp_torch_method_maximum_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4968","torch","cpp_torch_method_max_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4969","torch","cpp_torch_method_minimum_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4970","torch","cpp_torch_method_min_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4971","torch","cpp_torch_method_median_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4972","torch","cpp_torch_method_quantile_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"4973","torch","cpp_torch_method_quantile_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"4974","torch","cpp_torch_method_nanquantile_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"4975","torch","cpp_torch_method_nanquantile_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"4976","torch","cpp_torch_method_sort_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"4977","torch","cpp_torch_method_sort_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"4978","torch","cpp_torch_method_argsort_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"4979","torch","cpp_torch_method_argsort_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"4980","torch","cpp_torch_method_topk_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" k"", "" dim"", "" largest"", "" sorted"")"
"4981","torch","cpp_torch_method_all_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4982","torch","cpp_torch_method_any_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4983","torch","cpp_torch_method_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"", "" dim"", "" maxnorm"")"
"4984","torch","cpp_torch_method_unfold_self_Tensor_dimension_int64_t_size_int64_t_step_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dimension"", "" size"", "" step"")"
"4985","torch","cpp_torch_method_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"4986","torch","cpp_torch_method_pow_self_Tensor_exponent_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" exponent"")"
"4987","torch","cpp_torch_method_pow_self_Tensor_exponent_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" exponent"")"
"4988","torch","cpp_torch_method_normal__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" mean"", "" std"", "" generator"")"
"4989","torch","cpp_torch_method_alias_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4990","torch","cpp_torch_method_isfinite_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4991","torch","cpp_torch_method_isinf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4992","torch","cpp_torch_method_isposinf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4993","torch","cpp_torch_method_isneginf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4994","torch","cpp_torch_method_fft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"")"
"4995","torch","cpp_torch_method_det_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"4996","torch","cpp_torch_method_outer_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec2"")"
"4997","torch","cpp_torch_method_ger_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec2"")"
"4998","torch","cpp_torch_namespace__cast_Byte_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"4999","torch","cpp_torch_namespace__cast_Char_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5000","torch","cpp_torch_namespace__cast_Double_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5001","torch","cpp_torch_namespace__cast_Float_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5002","torch","cpp_torch_namespace__cast_Int_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5003","torch","cpp_torch_namespace__cast_Long_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5004","torch","cpp_torch_namespace__cast_Short_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5005","torch","cpp_torch_namespace__cast_Half_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" non_blocking"")"
"5006","torch","cpp_torch_namespace_align_tensors_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5007","torch","cpp_torch_namespace__use_cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" blank"")"
"5008","torch","cpp_torch_namespace__cudnn_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_blank_int64_t_deterministic_bool_zero_infinity_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" blank"", "" deterministic"", "" zero_infinity"")"
"5009","torch","cpp_torch_namespace__cudnn_rnn_flatten_weight_weight_arr_TensorList_weight_stride0_int64_t_input_size_int64_t_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" weight_arr"", "" weight_stride0"", "" input_size"", "" mode"", "" hidden_size"", "" num_layers"", "" batch_first"", "" bidirectional"")"
"5010","torch","cpp_torch_namespace__cudnn_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""double "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" weight_stride0"", "" weight_buf"", "" hx"", "" cx"", "" mode"", "" hidden_size"", "" num_layers"", "" batch_first"", "" dropout"", "" train"", "" bidirectional"", "" batch_sizes"", "" dropout_state"")"
"5011","torch","cpp_torch_namespace__cudnn_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""double "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" input"", "" weight"", "" weight_stride0"", "" weight_buf"", "" hx"", "" cx"", "" output"", "" grad_output"", "" grad_hy"", "" grad_cy"", "" mode"", "" hidden_size"", "" num_layers"", "" batch_first"", "" dropout"", "" train"", "" bidirectional"", "" batch_sizes"", "" dropout_state"", "" reserve"", "" output_mask"")"
"5012","torch","cpp_torch_namespace__cudnn_init_dropout_state_dropout_double_train_bool_dropout_seed_int64_t_options_TensorOptions","c(""double "", ""bool "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" dropout"", "" train"", "" dropout_seed"", "" options"")"
"5013","torch","cpp_torch_namespace__debug_has_internal_overlap_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5014","torch","cpp_torch_namespace__fused_dropout_self_Tensor_p_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"5015","torch","cpp_torch_namespace__masked_scale_self_Tensor_mask_Tensor_scale_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "")","c("" self"", "" mask"", "" scale"")"
"5016","torch","cpp_torch_namespace__sobol_engine_draw_quasi_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" quasi"", "" n"", "" sobolstate"", "" dimension"", "" num_generated"", "" dtype"")"
"5017","torch","cpp_torch_namespace__sobol_engine_ff__self_Tensor_n_int64_t_sobolstate_Tensor_dimension_int64_t_num_generated_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" n"", "" sobolstate"", "" dimension"", "" num_generated"")"
"5018","torch","cpp_torch_namespace__sobol_engine_scramble__self_Tensor_ltm_Tensor_dimension_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" ltm"", "" dimension"")"
"5019","torch","cpp_torch_namespace__sobol_engine_initialize_state__self_Tensor_dimension_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dimension"")"
"5020","torch","cpp_torch_namespace__reshape_from_tensor_self_Tensor_shape_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" shape"")"
"5021","torch","cpp_torch_namespace__shape_as_tensor_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5022","torch","cpp_torch_namespace_dropout_input_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" p"", "" train"")"
"5023","torch","cpp_torch_namespace_dropout__self_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" self"", "" p"", "" train"")"
"5024","torch","cpp_torch_namespace_feature_dropout_input_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" p"", "" train"")"
"5025","torch","cpp_torch_namespace_feature_dropout__self_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" self"", "" p"", "" train"")"
"5026","torch","cpp_torch_namespace_alpha_dropout_input_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" p"", "" train"")"
"5027","torch","cpp_torch_namespace_alpha_dropout__self_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" self"", "" p"", "" train"")"
"5028","torch","cpp_torch_namespace_feature_alpha_dropout_input_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" p"", "" train"")"
"5029","torch","cpp_torch_namespace_feature_alpha_dropout__self_Tensor_p_double_train_bool","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" self"", "" p"", "" train"")"
"5030","torch","cpp_torch_namespace_abs_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5031","torch","cpp_torch_namespace_abs__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5032","torch","cpp_torch_namespace_abs_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5033","torch","cpp_torch_namespace_absolute_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5034","torch","cpp_torch_namespace_absolute_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5035","torch","cpp_torch_namespace_angle_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5036","torch","cpp_torch_namespace_angle_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5037","torch","cpp_torch_namespace_view_as_real_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5038","torch","cpp_torch_namespace_view_as_complex_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5039","torch","cpp_torch_namespace_sgn_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5040","torch","cpp_torch_namespace_sgn_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5041","torch","cpp_torch_namespace_real_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5042","torch","cpp_torch_namespace_imag_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5043","torch","cpp_torch_namespace_conj_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5044","torch","cpp_torch_namespace_conj_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5045","torch","cpp_torch_namespace__conj_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5046","torch","cpp_torch_namespace_acos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5047","torch","cpp_torch_namespace_acos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5048","torch","cpp_torch_namespace_acos_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5049","torch","cpp_torch_namespace_arccos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5050","torch","cpp_torch_namespace_arccos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5051","torch","cpp_torch_namespace_arccos_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5052","torch","cpp_torch_namespace_avg_pool1d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"")"
"5053","torch","cpp_torch_namespace_adaptive_avg_pool1d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"5054","torch","cpp_torch_namespace_adaptive_max_pool1d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"5055","torch","cpp_torch_namespace_add_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5056","torch","cpp_torch_namespace_add_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"", "" alpha"")"
"5057","torch","cpp_torch_namespace__add_relu_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5058","torch","cpp_torch_namespace__add_relu__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5059","torch","cpp_torch_namespace__add_relu_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"", "" alpha"")"
"5060","torch","cpp_torch_namespace_add_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5061","torch","cpp_torch_namespace_addmv_self_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"5062","torch","cpp_torch_namespace_addmv__self_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"5063","torch","cpp_torch_namespace_addmv_out_out_Tensor_self_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"5064","torch","cpp_torch_namespace__addmv_impl__self_Tensor_self2_Tensor_mat_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" self2"", "" mat"", "" vec"", "" beta"", "" alpha"")"
"5065","torch","cpp_torch_namespace_addr_self_Tensor_vec1_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" vec1"", "" vec2"", "" beta"", "" alpha"")"
"5066","torch","cpp_torch_namespace_addr_out_out_Tensor_self_Tensor_vec1_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" vec1"", "" vec2"", "" beta"", "" alpha"")"
"5067","torch","cpp_torch_namespace_affine_grid_generator_theta_Tensor_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" theta"", "" size"", "" align_corners"")"
"5068","torch","cpp_torch_namespace_affine_grid_generator_backward_grad_Tensor_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" grad"", "" size"", "" align_corners"")"
"5069","torch","cpp_torch_namespace_all_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5070","torch","cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5071","torch","cpp_torch_namespace_all_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5072","torch","cpp_torch_namespace_all_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5073","torch","cpp_torch_namespace_allclose_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""bool "")","c("" self"", "" other"", "" rtol"", "" atol"", "" equal_nan"")"
"5074","torch","cpp_torch_namespace_any_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5075","torch","cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5076","torch","cpp_torch_namespace_any_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5077","torch","cpp_torch_namespace_any_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5078","torch","cpp_torch_namespace_arange_end_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" end"", "" options"")"
"5079","torch","cpp_torch_namespace_arange_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" start"", "" end"", "" options"")"
"5080","torch","cpp_torch_namespace_arange_start_Scalar_end_Scalar_step_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" start"", "" end"", "" step"", "" options"")"
"5081","torch","cpp_torch_namespace_arange_out_out_Tensor_end_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" end"")"
"5082","torch","cpp_torch_namespace_arange_out_out_Tensor_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" start"", "" end"", "" step"")"
"5083","torch","cpp_torch_namespace__dim_arange_like_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" like"", "" dim"")"
"5084","torch","cpp_torch_namespace_argmax_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5085","torch","cpp_torch_namespace_argmin_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5086","torch","cpp_torch_namespace_acosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5087","torch","cpp_torch_namespace_acosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5088","torch","cpp_torch_namespace_acosh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5089","torch","cpp_torch_namespace_arccosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5090","torch","cpp_torch_namespace_arccosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5091","torch","cpp_torch_namespace_arccosh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5092","torch","cpp_torch_namespace_asinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5093","torch","cpp_torch_namespace_asinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5094","torch","cpp_torch_namespace_asinh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5095","torch","cpp_torch_namespace_arcsinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5096","torch","cpp_torch_namespace_arcsinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5097","torch","cpp_torch_namespace_arcsinh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5098","torch","cpp_torch_namespace_atanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5099","torch","cpp_torch_namespace_atanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5100","torch","cpp_torch_namespace_atanh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5101","torch","cpp_torch_namespace_arctanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5102","torch","cpp_torch_namespace_arctanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5103","torch","cpp_torch_namespace_arctanh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5104","torch","cpp_torch_namespace_as_strided_self_Tensor_size_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" stride"", "" storage_offset"")"
"5105","torch","cpp_torch_namespace_as_strided__self_Tensor_size_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" size"", "" stride"", "" storage_offset"")"
"5106","torch","cpp_torch_namespace_asin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5107","torch","cpp_torch_namespace_asin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5108","torch","cpp_torch_namespace_asin_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5109","torch","cpp_torch_namespace_arcsin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5110","torch","cpp_torch_namespace_arcsin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5111","torch","cpp_torch_namespace_arcsin_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5112","torch","cpp_torch_namespace_atan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5113","torch","cpp_torch_namespace_atan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5114","torch","cpp_torch_namespace_atan_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5115","torch","cpp_torch_namespace_arctan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5116","torch","cpp_torch_namespace_arctan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5117","torch","cpp_torch_namespace_arctan_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5118","torch","cpp_torch_namespace_atleast_1d_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5119","torch","cpp_torch_namespace_atleast_1d_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5120","torch","cpp_torch_namespace_atleast_2d_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5121","torch","cpp_torch_namespace_atleast_2d_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5122","torch","cpp_torch_namespace_atleast_3d_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5123","torch","cpp_torch_namespace_atleast_3d_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5124","torch","cpp_torch_namespace_baddbmm_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"5125","torch","cpp_torch_namespace__baddbmm_mkl__self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"5126","torch","cpp_torch_namespace_baddbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"5127","torch","cpp_torch_namespace_bartlett_window_window_length_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" options"")"
"5128","torch","cpp_torch_namespace_bartlett_window_window_length_int64_t_periodic_bool","c(""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" options"")"
"5129","torch","cpp_torch_namespace_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "", ""bool "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" momentum"", "" eps"", "" cudnn_enabled"")"
"5130","torch","cpp_torch_namespace_quantized_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_var_Tensor_eps_double_output_scale_double_output_zero_point_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" mean"", "" var"", "" eps"", "" output_scale"", "" output_zero_point"")"
"5131","torch","cpp_torch_namespace__batch_norm_impl_index_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double_cudnn_enabled_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "", ""bool "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" momentum"", "" eps"", "" cudnn_enabled"")"
"5132","torch","cpp_torch_namespace__batch_norm_impl_index_backward_impl_index_int64_t_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_transform_Tensor_train_bool_eps_double_output_mask_stdarraybool3_reservedSpace_Tensor","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""std::vector<bool> "", ""XPtr<XPtrTorchTensor> "")","c("" impl_index"", "" input"", "" grad_output"", "" weight"", "" running_mean"", "" running_var"", "" save_mean"", "" save_var_transform"", "" train"", "" eps"", "" output_mask"", "" reservedSpace"")"
"5133","torch","cpp_torch_namespace_bernoulli_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"5134","torch","cpp_torch_namespace_bernoulli_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" generator"")"
"5135","torch","cpp_torch_namespace_bernoulli_self_Tensor_p_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" generator"")"
"5136","torch","cpp_torch_namespace_bilinear_input1_Tensor_input2_Tensor_weight_Tensor_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input1"", "" input2"", "" weight"", "" bias"")"
"5137","torch","cpp_torch_namespace_binary_cross_entropy_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" reduction"")"
"5138","torch","cpp_torch_namespace_binary_cross_entropy_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" weight"", "" reduction"")"
"5139","torch","cpp_torch_namespace_binary_cross_entropy_backward_grad_output_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" weight"", "" reduction"")"
"5140","torch","cpp_torch_namespace_binary_cross_entropy_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" weight"", "" reduction"")"
"5141","torch","cpp_torch_namespace_binary_cross_entropy_with_logits_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" pos_weight"", "" reduction"")"
"5142","torch","cpp_torch_namespace_binary_cross_entropy_with_logits_backward_grad_output_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" weight"", "" pos_weight"", "" reduction"")"
"5143","torch","cpp_torch_namespace_bincount_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" weights"", "" minlength"")"
"5144","torch","cpp_torch_namespace_bitwise_not_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5145","torch","cpp_torch_namespace_bitwise_not_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5146","torch","cpp_torch_namespace_logical_not_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5147","torch","cpp_torch_namespace_logical_not_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5148","torch","cpp_torch_namespace_logical_xor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5149","torch","cpp_torch_namespace_logical_xor_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5150","torch","cpp_torch_namespace_logical_and_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5151","torch","cpp_torch_namespace_logical_and_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5152","torch","cpp_torch_namespace_logical_or_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5153","torch","cpp_torch_namespace_logical_or_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5154","torch","cpp_torch_namespace_blackman_window_window_length_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" options"")"
"5155","torch","cpp_torch_namespace_blackman_window_window_length_int64_t_periodic_bool","c(""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" options"")"
"5156","torch","cpp_torch_namespace_bmm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"5157","torch","cpp_torch_namespace__bmm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" mat2"", "" deterministic"")"
"5158","torch","cpp_torch_namespace_bmm_out_out_Tensor_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" mat2"")"
"5159","torch","cpp_torch_namespace__bmm_out_out_Tensor_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" mat2"", "" deterministic"")"
"5160","torch","cpp_torch_namespace_broadcast_tensors_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5161","torch","cpp_torch_namespace_cat_tensors_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" tensors"", "" dim"")"
"5162","torch","cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" out"", "" tensors"", "" dim"")"
"5163","torch","cpp_torch_namespace_cat_tensors_TensorList_dim_Dimname","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchDimname> "")","c("" tensors"", "" dim"")"
"5164","torch","cpp_torch_namespace_cat_out_out_Tensor_tensors_TensorList_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchDimname> "")","c("" out"", "" tensors"", "" dim"")"
"5165","torch","cpp_torch_namespace_block_diag_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5166","torch","cpp_torch_namespace_ceil_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5167","torch","cpp_torch_namespace_ceil__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5168","torch","cpp_torch_namespace_ceil_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5169","torch","cpp_torch_namespace_chain_matmul_matrices_TensorList","XPtr<XPtrTorchTensorList> "," matrices"
"5170","torch","cpp_torch_namespace_unsafe_chunk_self_Tensor_chunks_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" chunks"", "" dim"")"
"5171","torch","cpp_torch_namespace_chunk_self_Tensor_chunks_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" chunks"", "" dim"")"
"5172","torch","cpp_torch_namespace_clamp_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"5173","torch","cpp_torch_namespace_clamp__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"5174","torch","cpp_torch_namespace_clamp_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" min"", "" max"")"
"5175","torch","cpp_torch_namespace_clamp_max_self_Tensor_max_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" max"")"
"5176","torch","cpp_torch_namespace_clamp_max__self_Tensor_max_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" max"")"
"5177","torch","cpp_torch_namespace_clamp_max_out_out_Tensor_self_Tensor_max_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" max"")"
"5178","torch","cpp_torch_namespace_clamp_min_self_Tensor_min_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"")"
"5179","torch","cpp_torch_namespace_clamp_min__self_Tensor_min_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"")"
"5180","torch","cpp_torch_namespace_clamp_min_out_out_Tensor_self_Tensor_min_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" min"")"
"5181","torch","cpp_torch_namespace_clip_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"5182","torch","cpp_torch_namespace_clip__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min"", "" max"")"
"5183","torch","cpp_torch_namespace_clip_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" min"", "" max"")"
"5184","torch","cpp_torch_namespace_cudnn_is_acceptable_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5185","torch","cpp_torch_namespace_complex_real_Tensor_imag_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" real"", "" imag"")"
"5186","torch","cpp_torch_namespace_complex_out_out_Tensor_real_Tensor_imag_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" real"", "" imag"")"
"5187","torch","cpp_torch_namespace_polar_abs_Tensor_angle_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" abs"", "" angle"")"
"5188","torch","cpp_torch_namespace_polar_out_out_Tensor_abs_Tensor_angle_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" abs"", "" angle"")"
"5189","torch","cpp_torch_namespace_constant_pad_nd_self_Tensor_pad_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" pad"", "" value"")"
"5190","torch","cpp_torch_namespace_convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"")"
"5191","torch","cpp_torch_namespace_convolution_overrideable_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"")"
"5192","torch","cpp_torch_namespace_convolution_backward_overrideable_grad_output_Tensor_input_Tensor_weight_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""std::vector<bool> "")","c("" grad_output"", "" input"", "" weight"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"", "" output_mask"")"
"5193","torch","cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""bool "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"", "" benchmark"", "" deterministic"", "" cudnn_enabled"", "" allow_tf32"")"
"5194","torch","cpp_torch_namespace__convolution_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"", "" benchmark"", "" deterministic"", "" cudnn_enabled"")"
"5195","torch","cpp_torch_namespace__convolution_nogroup_input_Tensor_weight_Tensor_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"")"
"5196","torch","cpp_torch_namespace__convolution_double_backward_ggI_Tensor_ggW_Tensor_ggb_Tensor_gO_Tensor_weight_Tensor_self_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_transposed_bool_output_padding_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_cudnn_enabled_bool_allow_tf32_bool_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" ggI"", "" ggW"", "" ggb"", "" gO"", "" weight"", "" self"", "" stride"", "" padding"", "" dilation"", "" transposed"", "" output_padding"", "" groups"", "" benchmark"", "" deterministic"", "" cudnn_enabled"", "" allow_tf32"", "" output_mask"")"
"5197","torch","cpp_torch_namespace_conv1d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" groups"")"
"5198","torch","cpp_torch_namespace_conv2d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" groups"")"
"5199","torch","cpp_torch_namespace_conv3d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" dilation"", "" groups"")"
"5200","torch","cpp_torch_namespace_conv_tbc_self_Tensor_weight_Tensor_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" weight"", "" bias"", "" pad"")"
"5201","torch","cpp_torch_namespace_conv_tbc_backward_self_Tensor_input_Tensor_weight_Tensor_bias_Tensor_pad_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" input"", "" weight"", "" bias"", "" pad"")"
"5202","torch","cpp_torch_namespace_conv_transpose1d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" groups"", "" dilation"")"
"5203","torch","cpp_torch_namespace_conv_transpose2d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" groups"", "" dilation"")"
"5204","torch","cpp_torch_namespace_conv_transpose3d_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" input"", "" weight"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" groups"", "" dilation"")"
"5205","torch","cpp_torch_namespace__copy_from_self_Tensor_dst_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" dst"", "" non_blocking"")"
"5206","torch","cpp_torch_namespace_cos_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5207","torch","cpp_torch_namespace_cos__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5208","torch","cpp_torch_namespace_cos_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5209","torch","cpp_torch_namespace_cosh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5210","torch","cpp_torch_namespace_cosh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5211","torch","cpp_torch_namespace_cosh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5212","torch","cpp_torch_namespace_cosine_embedding_loss_input1_Tensor_input2_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" input1"", "" input2"", "" target"", "" margin"", "" reduction"")"
"5213","torch","cpp_torch_namespace_count_nonzero_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dim"")"
"5214","torch","cpp_torch_namespace_count_nonzero_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5215","torch","cpp_torch_namespace_cudnn_affine_grid_generator_theta_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" theta"", "" False"", "" C"", "" H"", "" W"")"
"5216","torch","cpp_torch_namespace_cudnn_affine_grid_generator_backward_grad_Tensor_FALSE_int64_t_C_int64_t_H_int64_t_W_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" False"", "" C"", "" H"", "" W"")"
"5217","torch","cpp_torch_namespace_cudnn_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" exponential_average_factor"", "" epsilon"")"
"5218","torch","cpp_torch_namespace_cudnn_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double_reserveSpace_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" grad_output"", "" weight"", "" running_mean"", "" running_var"", "" save_mean"", "" save_var"", "" epsilon"", "" reserveSpace"")"
"5219","torch","cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" bias"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5220","torch","cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5221","torch","cpp_torch_namespace_cudnn_convolution_self_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5222","torch","cpp_torch_namespace_cudnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" self_size"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5223","torch","cpp_torch_namespace_cudnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool_output_mask_stdarraybool2","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"", "" output_mask"")"
"5224","torch","cpp_torch_namespace_cudnn_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5225","torch","cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" bias"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5226","torch","cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5227","torch","cpp_torch_namespace_cudnn_convolution_transpose_self_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" weight"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5228","torch","cpp_torch_namespace_cudnn_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool_output_mask_stdarraybool2","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"", "" output_mask"")"
"5229","torch","cpp_torch_namespace_cudnn_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5230","torch","cpp_torch_namespace_cudnn_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_allow_tf32_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" allow_tf32"")"
"5231","torch","cpp_torch_namespace_cudnn_grid_sampler_self_Tensor_grid_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" grid"")"
"5232","torch","cpp_torch_namespace_cudnn_grid_sampler_backward_self_Tensor_grid_Tensor_grad_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" grid"", "" grad_output"")"
"5233","torch","cpp_torch_namespace_cummax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5234","torch","cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" values"", "" indices"", "" self"", "" dim"")"
"5235","torch","cpp_torch_namespace_cummax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5236","torch","cpp_torch_namespace_cummax_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" values"", "" indices"", "" self"", "" dim"")"
"5237","torch","cpp_torch_namespace__cummax_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" values"", "" indices"", "" dim"")"
"5238","torch","cpp_torch_namespace_cummin_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5239","torch","cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" values"", "" indices"", "" self"", "" dim"")"
"5240","torch","cpp_torch_namespace_cummin_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5241","torch","cpp_torch_namespace_cummin_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" values"", "" indices"", "" self"", "" dim"")"
"5242","torch","cpp_torch_namespace__cummin_helper_self_Tensor_values_Tensor_indices_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" values"", "" indices"", "" dim"")"
"5243","torch","cpp_torch_namespace_cummaxmin_backward_grad_Tensor_input_Tensor_indices_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad"", "" input"", "" indices"", "" dim"")"
"5244","torch","cpp_torch_namespace_cumprod_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5245","torch","cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" dtype"")"
"5246","torch","cpp_torch_namespace_cumprod_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5247","torch","cpp_torch_namespace_cumprod_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" dtype"")"
"5248","torch","cpp_torch_namespace_cumprod_backward_grad_Tensor_input_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad"", "" input"", "" dim"")"
"5249","torch","cpp_torch_namespace_cumsum_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5250","torch","cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" dtype"")"
"5251","torch","cpp_torch_namespace_cumsum_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5252","torch","cpp_torch_namespace_cumsum_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" dtype"")"
"5253","torch","cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" blank"", "" reduction"", "" zero_infinity"")"
"5254","torch","cpp_torch_namespace_ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_Tensor_target_lengths_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" blank"", "" reduction"", "" zero_infinity"")"
"5255","torch","cpp_torch_namespace__ctc_loss_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" blank"", "" zero_infinity"")"
"5256","torch","cpp_torch_namespace__ctc_loss_backward_grad_Tensor_log_probs_Tensor_targets_Tensor_input_lengths_IntArrayRef_target_lengths_IntArrayRef_neg_log_likelihood_Tensor_log_alpha_Tensor_blank_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" grad"", "" log_probs"", "" targets"", "" input_lengths"", "" target_lengths"", "" neg_log_likelihood"", "" log_alpha"", "" blank"", "" zero_infinity"")"
"5257","torch","cpp_torch_namespace_diag_embed_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" offset"", "" dim1"", "" dim2"")"
"5258","torch","cpp_torch_namespace_diagflat_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" offset"")"
"5259","torch","cpp_torch_namespace_diagonal_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" offset"", "" dim1"", "" dim2"")"
"5260","torch","cpp_torch_namespace_diagonal_self_Tensor_outdim_Dimname_dim1_Dimname_dim2_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""nullable<int64_t> "")","c("" self"", "" outdim"", "" dim1"", "" dim2"", "" offset"")"
"5261","torch","cpp_torch_namespace_diagonal_backward_grad_Tensor_input_sizes_IntArrayRef_offset_int64_t_dim1_int64_t_dim2_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" input_sizes"", "" offset"", "" dim1"", "" dim2"")"
"5262","torch","cpp_torch_namespace_div_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5263","torch","cpp_torch_namespace_div_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5264","torch","cpp_torch_namespace_div_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5265","torch","cpp_torch_namespace_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5266","torch","cpp_torch_namespace_divide_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5267","torch","cpp_torch_namespace_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5268","torch","cpp_torch_namespace_true_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5269","torch","cpp_torch_namespace_true_divide_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5270","torch","cpp_torch_namespace_true_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5271","torch","cpp_torch_namespace_dot_self_Tensor_tensor_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" tensor"")"
"5272","torch","cpp_torch_namespace_dot_out_out_Tensor_self_Tensor_tensor_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" tensor"")"
"5273","torch","cpp_torch_namespace_vdot_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5274","torch","cpp_torch_namespace_vdot_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5275","torch","cpp_torch_namespace_einsum_equation_stdstring_tensors_TensorList","c(""std::string "", ""XPtr<XPtrTorchTensorList> "")","c("" equation"", "" tensors"")"
"5276","torch","cpp_torch_namespace_embedding_weight_Tensor_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" weight"", "" indices"", "" padding_idx"", "" scale_grad_by_freq"", "" sparse"")"
"5277","torch","cpp_torch_namespace_embedding_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool_sparse_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" grad"", "" indices"", "" num_weights"", "" padding_idx"", "" scale_grad_by_freq"", "" sparse"")"
"5278","torch","cpp_torch_namespace_embedding_dense_backward_grad_output_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" grad_output"", "" indices"", "" num_weights"", "" padding_idx"", "" scale_grad_by_freq"")"
"5279","torch","cpp_torch_namespace_embedding_renorm__self_Tensor_indices_Tensor_max_norm_double_norm_type_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "")","c("" self"", "" indices"", "" max_norm"", "" norm_type"")"
"5280","torch","cpp_torch_namespace_embedding_sparse_backward_grad_Tensor_indices_Tensor_num_weights_int64_t_padding_idx_int64_t_scale_grad_by_freq_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" grad"", "" indices"", "" num_weights"", "" padding_idx"", "" scale_grad_by_freq"")"
"5281","torch","cpp_torch_namespace__embedding_bag_forward_only_weight_Tensor_indices_Tensor_offsets_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" weight"", "" indices"", "" offsets"", "" scale_grad_by_freq"", "" mode"", "" sparse"", "" per_sample_weights"", "" include_last_offset"")"
"5282","torch","cpp_torch_namespace_embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" weight"", "" indices"", "" offsets"", "" scale_grad_by_freq"", "" mode"", "" sparse"", "" per_sample_weights"", "" include_last_offset"")"
"5283","torch","cpp_torch_namespace__embedding_bag_weight_Tensor_indices_Tensor_offsets_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" weight"", "" indices"", "" offsets"", "" scale_grad_by_freq"", "" mode"", "" sparse"", "" per_sample_weights"", "" include_last_offset"")"
"5284","torch","cpp_torch_namespace__embedding_bag_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_sparse_bool_per_sample_weights_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" indices"", "" offsets"", "" offset2bag"", "" bag_size"", "" maximum_indices"", "" num_weights"", "" scale_grad_by_freq"", "" mode"", "" sparse"", "" per_sample_weights"")"
"5285","torch","cpp_torch_namespace__embedding_bag_sparse_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" indices"", "" offsets"", "" offset2bag"", "" bag_size"", "" num_weights"", "" scale_grad_by_freq"", "" mode"", "" per_sample_weights"")"
"5286","torch","cpp_torch_namespace__embedding_bag_dense_backward_grad_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_bag_size_Tensor_maximum_indices_Tensor_num_weights_int64_t_scale_grad_by_freq_bool_mode_int64_t_per_sample_weights_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" indices"", "" offsets"", "" offset2bag"", "" bag_size"", "" maximum_indices"", "" num_weights"", "" scale_grad_by_freq"", "" mode"", "" per_sample_weights"")"
"5287","torch","cpp_torch_namespace__embedding_bag_per_sample_weights_backward_grad_Tensor_weight_Tensor_indices_Tensor_offsets_Tensor_offset2bag_Tensor_mode_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad"", "" weight"", "" indices"", "" offsets"", "" offset2bag"", "" mode"")"
"5288","torch","cpp_torch_namespace_empty_meta_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" size"", "" options"", "" memory_format"")"
"5289","torch","cpp_torch_namespace_empty_size_IntArrayRef_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" size"", "" names"", "" options"", "" memory_format"")"
"5290","torch","cpp_torch_namespace_empty_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" size"", "" options"", "" memory_format"")"
"5291","torch","cpp_torch_namespace__empty_affine_quantized_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""double "", ""nullable<int64_t> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" size"", "" options"", "" scale"", "" zero_point"", "" memory_format"")"
"5292","torch","cpp_torch_namespace__empty_per_channel_affine_quantized_size_IntArrayRef_scales_Tensor_zero_points_Tensor_axis_int64_t","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" size"", "" scales"", "" zero_points"", "" axis"", "" options"", "" memory_format"")"
"5293","torch","cpp_torch_namespace_empty_quantized_size_IntArrayRef_qtensor_Tensor","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" size"", "" qtensor"")"
"5294","torch","cpp_torch_namespace_empty_out_out_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" out"", "" size"", "" memory_format"")"
"5295","torch","cpp_torch_namespace_empty_like_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" memory_format"")"
"5296","torch","cpp_torch_namespace_empty_strided_size_IntArrayRef_stride_IntArrayRef","c(""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" stride"", "" options"")"
"5297","torch","cpp_torch_namespace_erf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5298","torch","cpp_torch_namespace_erf__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5299","torch","cpp_torch_namespace_erf_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5300","torch","cpp_torch_namespace_erfc_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5301","torch","cpp_torch_namespace_erfc__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5302","torch","cpp_torch_namespace_erfc_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5303","torch","cpp_torch_namespace_exp_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5304","torch","cpp_torch_namespace_exp__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5305","torch","cpp_torch_namespace_exp_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5306","torch","cpp_torch_namespace_exp2_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5307","torch","cpp_torch_namespace_exp2__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5308","torch","cpp_torch_namespace_exp2_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5309","torch","cpp_torch_namespace_expm1_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5310","torch","cpp_torch_namespace_expm1__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5311","torch","cpp_torch_namespace_expm1_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5312","torch","cpp_torch_namespace_eye_n_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" n"", "" options"")"
"5313","torch","cpp_torch_namespace_eye_n_int64_t_m_int64_t","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" n"", "" m"", "" options"")"
"5314","torch","cpp_torch_namespace_eye_out_out_Tensor_n_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" n"")"
"5315","torch","cpp_torch_namespace_eye_out_out_Tensor_n_int64_t_m_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" out"", "" n"", "" m"")"
"5316","torch","cpp_torch_namespace_flatten_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" start_dim"", "" end_dim"")"
"5317","torch","cpp_torch_namespace_flatten_self_Tensor_start_dim_int64_t_end_dim_int64_t_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" start_dim"", "" end_dim"", "" out_dim"")"
"5318","torch","cpp_torch_namespace_flatten_self_Tensor_start_dim_Dimname_end_dim_Dimname_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" start_dim"", "" end_dim"", "" out_dim"")"
"5319","torch","cpp_torch_namespace_flatten_self_Tensor_dims_DimnameList_out_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dims"", "" out_dim"")"
"5320","torch","cpp_torch_namespace_fill__self_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" value"")"
"5321","torch","cpp_torch_namespace_fill__self_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" value"")"
"5322","torch","cpp_torch_namespace_floor_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5323","torch","cpp_torch_namespace_floor__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5324","torch","cpp_torch_namespace_floor_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5325","torch","cpp_torch_namespace_floor_divide_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5326","torch","cpp_torch_namespace_floor_divide_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5327","torch","cpp_torch_namespace_floor_divide_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5328","torch","cpp_torch_namespace_frac_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5329","torch","cpp_torch_namespace_frac__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5330","torch","cpp_torch_namespace_frac_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5331","torch","cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" fill_value"", "" names"", "" options"")"
"5332","torch","cpp_torch_namespace_full_size_IntArrayRef_fill_value_Scalar","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" fill_value"", "" options"")"
"5333","torch","cpp_torch_namespace_full_out_out_Tensor_size_IntArrayRef_fill_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" size"", "" fill_value"")"
"5334","torch","cpp_torch_namespace_full_like_self_Tensor_fill_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" fill_value"", "" options"", "" memory_format"")"
"5335","torch","cpp_torch_namespace_from_file_filename_stdstring","c(""std::string "", ""bool "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" filename"", "" shared"", "" size"", "" options"")"
"5336","torch","cpp_torch_namespace_gcd_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5337","torch","cpp_torch_namespace_gcd_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5338","torch","cpp_torch_namespace_gcd__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5339","torch","cpp_torch_namespace_lcm_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5340","torch","cpp_torch_namespace_lcm_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5341","torch","cpp_torch_namespace_lcm__self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5342","torch","cpp_torch_namespace_grid_sampler_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5343","torch","cpp_torch_namespace_grid_sampler_2d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5344","torch","cpp_torch_namespace_grid_sampler_2d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" grad_output"", "" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5345","torch","cpp_torch_namespace__grid_sampler_2d_cpu_fallback_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5346","torch","cpp_torch_namespace__grid_sampler_2d_cpu_fallback_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" grad_output"", "" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5347","torch","cpp_torch_namespace_grid_sampler_3d_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5348","torch","cpp_torch_namespace_grid_sampler_3d_backward_grad_output_Tensor_input_Tensor_grid_Tensor_interpolation_mode_int64_t_padding_mode_int64_t_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" grad_output"", "" input"", "" grid"", "" interpolation_mode"", "" padding_mode"", "" align_corners"")"
"5349","torch","cpp_torch_namespace_hann_window_window_length_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" options"")"
"5350","torch","cpp_torch_namespace_hann_window_window_length_int64_t_periodic_bool","c(""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" options"")"
"5351","torch","cpp_torch_namespace_hamming_window_window_length_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" options"")"
"5352","torch","cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool","c(""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" options"")"
"5353","torch","cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double","c(""nullable<int64_t> "", ""bool "", ""double "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" alpha"", "" options"")"
"5354","torch","cpp_torch_namespace_hamming_window_window_length_int64_t_periodic_bool_alpha_double_beta_double","c(""nullable<int64_t> "", ""bool "", ""double "", ""double "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" alpha"", "" beta"", "" options"")"
"5355","torch","cpp_torch_namespace_kaiser_window_window_length_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" options"")"
"5356","torch","cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool","c(""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" options"")"
"5357","torch","cpp_torch_namespace_kaiser_window_window_length_int64_t_periodic_bool_beta_double","c(""nullable<int64_t> "", ""bool "", ""double "", ""XPtr<XPtrTorchTensorOptions> "")","c("" window_length"", "" periodic"", "" beta"", "" options"")"
"5358","torch","cpp_torch_namespace_hinge_embedding_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" self"", "" target"", "" margin"", "" reduction"")"
"5359","torch","cpp_torch_namespace_group_norm_input_Tensor_num_groups_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" num_groups"", "" weight"", "" bias"", "" eps"", "" cudnn_enabled"")"
"5360","torch","cpp_torch_namespace_native_group_norm_input_Tensor_weight_Tensor_bias_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""double "")","c("" input"", "" weight"", "" bias"", "" False"", "" C"", "" HxW"", "" group"", "" eps"")"
"5361","torch","cpp_torch_namespace_native_group_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_FALSE_int64_t_C_int64_t_HxW_int64_t_group_int64_t_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<bool> "")","c("" grad_out"", "" input"", "" mean"", "" rstd"", "" weight"", "" False"", "" C"", "" HxW"", "" group"", "" output_mask"")"
"5362","torch","cpp_torch_namespace_ifft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"")"
"5363","torch","cpp_torch_namespace_rfft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"", "" onesided"")"
"5364","torch","cpp_torch_namespace_irfft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""std::vector<int64_t> "")","c("" self"", "" signal_ndim"", "" normalized"", "" onesided"", "" signal_sizes"")"
"5365","torch","cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalized_bool_onesided_bool_output_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""std::vector<int64_t> "")","c("" self"", "" signal_ndim"", "" complex_input"", "" complex_output"", "" inverse"", "" checked_signal_sizes"", "" normalized"", "" onesided"", "" output_sizes"")"
"5366","torch","cpp_torch_namespace__fft_with_size_self_Tensor_signal_ndim_int64_t_complex_input_bool_complex_output_bool_inverse_bool_checked_signal_sizes_IntArrayRef_normalization_int64_t_onesided_bool_output_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""std::vector<int64_t> "")","c("" self"", "" signal_ndim"", "" complex_input"", "" complex_output"", "" inverse"", "" checked_signal_sizes"", "" normalization"", "" onesided"", "" output_sizes"")"
"5367","torch","cpp_torch_namespace__cufft_get_plan_cache_size_device_index_int64_t","nullable<int64_t> "," device_index"
"5368","torch","cpp_torch_namespace__cufft_get_plan_cache_max_size_device_index_int64_t","nullable<int64_t> "," device_index"
"5369","torch","cpp_torch_namespace__cufft_set_plan_cache_max_size_device_index_int64_t_max_size_int64_t","c(""nullable<int64_t> "", ""nullable<int64_t> "")","c("" device_index"", "" max_size"")"
"5370","torch","cpp_torch_namespace__cufft_clear_plan_cache_device_index_int64_t","nullable<int64_t> "," device_index"
"5371","torch","cpp_torch_namespace_index_self_Tensor_indices_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "")","c("" self"", "" indices"")"
"5372","torch","cpp_torch_namespace_index_copy_self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"5373","torch","cpp_torch_namespace_index_copy_self_Tensor_dim_Dimname_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"5374","torch","cpp_torch_namespace_index_put__self_Tensor_indices_TensorList_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" indices"", "" values"", "" accumulate"")"
"5375","torch","cpp_torch_namespace_index_put_self_Tensor_indices_TensorList_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" indices"", "" values"", "" accumulate"")"
"5376","torch","cpp_torch_namespace__index_put_impl__self_Tensor_indices_TensorList_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" indices"", "" values"", "" accumulate"", "" unsafe"")"
"5377","torch","cpp_torch_namespace_instance_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_use_input_stats_bool_momentum_double_eps_double_cudnn_enabled_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "", ""bool "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" use_input_stats"", "" momentum"", "" eps"", "" cudnn_enabled"")"
"5378","torch","cpp_torch_namespace_inverse_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5379","torch","cpp_torch_namespace_inverse_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5380","torch","cpp_torch_namespace__inverse_helper_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5381","torch","cpp_torch_namespace_isclose_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""bool "")","c("" self"", "" other"", "" rtol"", "" atol"", "" equal_nan"")"
"5382","torch","cpp_torch_namespace_isnan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5383","torch","cpp_torch_namespace_is_distributed_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5384","torch","cpp_torch_namespace_is_floating_point_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5385","torch","cpp_torch_namespace_is_complex_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5386","torch","cpp_torch_namespace_isreal_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5387","torch","cpp_torch_namespace_is_nonzero_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5388","torch","cpp_torch_namespace_is_same_size_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5389","torch","cpp_torch_namespace_is_signed_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5390","torch","cpp_torch_namespace_kl_div_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" target"", "" reduction"", "" log_target"")"
"5391","torch","cpp_torch_namespace_kl_div_backward_grad_output_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" grad_output"", "" self"", "" target"", "" reduction"", "" log_target"")"
"5392","torch","cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" k"", "" dim"", "" keepdim"")"
"5393","torch","cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" values"", "" indices"", "" self"", "" k"", "" dim"", "" keepdim"")"
"5394","torch","cpp_torch_namespace_kthvalue_self_Tensor_k_int64_t_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" k"", "" dim"", "" keepdim"")"
"5395","torch","cpp_torch_namespace_kthvalue_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" values"", "" indices"", "" self"", "" k"", "" dim"", "" keepdim"")"
"5396","torch","cpp_torch_namespace_layer_norm_input_Tensor_normalized_shape_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" input"", "" normalized_shape"", "" weight"", "" bias"", "" eps"", "" cudnn_enable"")"
"5397","torch","cpp_torch_namespace_native_layer_norm_input_Tensor_weight_Tensor_bias_Tensor_M_int64_t_FALSE_int64_t_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""double "")","c("" input"", "" weight"", "" bias"", "" M"", "" False"", "" eps"")"
"5398","torch","cpp_torch_namespace_native_layer_norm_backward_grad_out_Tensor_input_Tensor_mean_Tensor_rstd_Tensor_weight_Tensor_M_int64_t_FALSE_int64_t_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<bool> "")","c("" grad_out"", "" input"", "" mean"", "" rstd"", "" weight"", "" M"", "" False"", "" output_mask"")"
"5399","torch","cpp_torch_namespace_linear_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" bias"")"
"5400","torch","cpp_torch_namespace_mkldnn_linear_input_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" bias"")"
"5401","torch","cpp_torch_namespace_fbgemm_linear_int8_weight_fp32_activation_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" packed"", "" col_offsets"", "" weight_scale"", "" weight_zero_point"", "" bias"")"
"5402","torch","cpp_torch_namespace_fbgemm_linear_int8_weight_input_Tensor_weight_Tensor_packed_Tensor_col_offsets_Tensor_weight_scale_Scalar_weight_zero_point_Scalar_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" packed"", "" col_offsets"", "" weight_scale"", "" weight_zero_point"", "" bias"")"
"5403","torch","cpp_torch_namespace_fbgemm_linear_quantize_weight_input_Tensor","XPtr<XPtrTorchTensor> "," input"
"5404","torch","cpp_torch_namespace_fbgemm_pack_gemm_matrix_fp16_input_Tensor","XPtr<XPtrTorchTensor> "," input"
"5405","torch","cpp_torch_namespace_fbgemm_linear_fp16_weight_fp32_activation_input_Tensor_packed_weight_Tensor_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" packed_weight"", "" bias"")"
"5406","torch","cpp_torch_namespace_fbgemm_linear_fp16_weight_input_Tensor_packed_weight_Tensor_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" packed_weight"", "" bias"")"
"5407","torch","cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor","XPtr<XPtrTorchTensor> "," input"
"5408","torch","cpp_torch_namespace_fbgemm_pack_quantized_matrix_input_Tensor_K_int64_t_FALSE_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" input"", "" K"", "" False"")"
"5409","torch","cpp_torch_namespace_linspace_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" start"", "" end"", "" steps"", "" options"")"
"5410","torch","cpp_torch_namespace_linspace_out_out_Tensor_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "")","c("" out"", "" start"", "" end"", "" steps"")"
"5411","torch","cpp_torch_namespace_log_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5412","torch","cpp_torch_namespace_log__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5413","torch","cpp_torch_namespace_log_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5414","torch","cpp_torch_namespace_log10_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5415","torch","cpp_torch_namespace_log10__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5416","torch","cpp_torch_namespace_log10_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5417","torch","cpp_torch_namespace_log1p_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5418","torch","cpp_torch_namespace_log1p__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5419","torch","cpp_torch_namespace_log1p_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5420","torch","cpp_torch_namespace_log2_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5421","torch","cpp_torch_namespace_log2__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5422","torch","cpp_torch_namespace_log2_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5423","torch","cpp_torch_namespace_logaddexp_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5424","torch","cpp_torch_namespace_logaddexp_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5425","torch","cpp_torch_namespace_logaddexp2_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5426","torch","cpp_torch_namespace_logaddexp2_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5427","torch","cpp_torch_namespace_logdet_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5428","torch","cpp_torch_namespace_logspace_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""double "", ""XPtr<XPtrTorchTensorOptions> "")","c("" start"", "" end"", "" steps"", "" base"", "" options"")"
"5429","torch","cpp_torch_namespace_logspace_out_out_Tensor_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""double "")","c("" out"", "" start"", "" end"", "" steps"", "" base"")"
"5430","torch","cpp_torch_namespace_log_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5431","torch","cpp_torch_namespace_log_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5432","torch","cpp_torch_namespace__log_softmax_self_Tensor_dim_int64_t_half_to_float_bool","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" half_to_float"")"
"5433","torch","cpp_torch_namespace__log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"", "" dim"", "" self"")"
"5434","torch","cpp_torch_namespace__logcumsumexp_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5435","torch","cpp_torch_namespace__logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" dim"")"
"5436","torch","cpp_torch_namespace_logcumsumexp_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5437","torch","cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" dim"")"
"5438","torch","cpp_torch_namespace_logcumsumexp_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5439","torch","cpp_torch_namespace_logcumsumexp_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" out"", "" self"", "" dim"")"
"5440","torch","cpp_torch_namespace_logsumexp_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5441","torch","cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5442","torch","cpp_torch_namespace_logsumexp_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5443","torch","cpp_torch_namespace_logsumexp_out_out_Tensor_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5444","torch","cpp_torch_namespace_margin_ranking_loss_input1_Tensor_input2_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" input1"", "" input2"", "" target"", "" margin"", "" reduction"")"
"5445","torch","cpp_torch_namespace_matmul_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5446","torch","cpp_torch_namespace_matmul_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5447","torch","cpp_torch_namespace_matrix_rank_self_Tensor_tol_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""bool "")","c("" self"", "" tol"", "" symmetric"")"
"5448","torch","cpp_torch_namespace_matrix_rank_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" symmetric"")"
"5449","torch","cpp_torch_namespace_matrix_power_self_Tensor_n_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" n"")"
"5450","torch","cpp_torch_namespace_matrix_exp_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5451","torch","cpp_torch_namespace_matrix_exp_backward_self_Tensor_grad_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" grad"")"
"5452","torch","cpp_torch_namespace__aminmax_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5453","torch","cpp_torch_namespace__aminmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5454","torch","cpp_torch_namespace__compute_linear_combination_input_Tensor_coefficients_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" coefficients"")"
"5455","torch","cpp_torch_namespace__compute_linear_combination_out_out_Tensor_input_Tensor_coefficients_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" input"", "" coefficients"")"
"5456","torch","cpp_torch_namespace_max_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5457","torch","cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" max"", "" max_values"", "" self"", "" dim"", "" keepdim"")"
"5458","torch","cpp_torch_namespace_max_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5459","torch","cpp_torch_namespace_max_out_max_Tensor_max_values_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" max"", "" max_values"", "" self"", "" dim"", "" keepdim"")"
"5460","torch","cpp_torch_namespace_value_selecting_reduction_backward_grad_Tensor_dim_int64_t_indices_Tensor_sizes_IntArrayRef_keepdim_bool","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" grad"", "" dim"", "" indices"", "" sizes"", "" keepdim"")"
"5461","torch","cpp_torch_namespace_amax_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5462","torch","cpp_torch_namespace_amax_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5463","torch","cpp_torch_namespace_max_pool1d_with_indices_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5464","torch","cpp_torch_namespace_max_pool1d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5465","torch","cpp_torch_namespace_max_pool2d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5466","torch","cpp_torch_namespace_mkldnn_max_pool2d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5467","torch","cpp_torch_namespace_mkldnn_max_pool3d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5468","torch","cpp_torch_namespace_quantized_max_pool1d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5469","torch","cpp_torch_namespace_quantized_max_pool2d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5470","torch","cpp_torch_namespace_max_pool3d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"5471","torch","cpp_torch_namespace_mean_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"5472","torch","cpp_torch_namespace_mean_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5473","torch","cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5474","torch","cpp_torch_namespace_mean_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5475","torch","cpp_torch_namespace_mean_out_out_Tensor_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5476","torch","cpp_torch_namespace_median_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5477","torch","cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" keepdim"")"
"5478","torch","cpp_torch_namespace_median_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5479","torch","cpp_torch_namespace_median_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" keepdim"")"
"5480","torch","cpp_torch_namespace_min_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5481","torch","cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" min"", "" min_indices"", "" self"", "" dim"", "" keepdim"")"
"5482","torch","cpp_torch_namespace_min_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5483","torch","cpp_torch_namespace_min_out_min_Tensor_min_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" min"", "" min_indices"", "" self"", "" dim"", "" keepdim"")"
"5484","torch","cpp_torch_namespace_amin_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5485","torch","cpp_torch_namespace_amin_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5486","torch","cpp_torch_namespace_mkldnn_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" weight"", "" bias"", "" padding"", "" stride"", "" dilation"", "" groups"")"
"5487","torch","cpp_torch_namespace_mkldnn_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" self_size"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" bias_defined"")"
"5488","torch","cpp_torch_namespace_mkldnn_convolution_backward_weights_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_bias_defined_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" bias_defined"")"
"5489","torch","cpp_torch_namespace_mkldnn_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" output_mask"")"
"5490","torch","cpp_torch_namespace_miopen_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_exponential_average_factor_double_epsilon_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" exponential_average_factor"", "" epsilon"")"
"5491","torch","cpp_torch_namespace_miopen_batch_norm_backward_input_Tensor_grad_output_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_var_Tensor_epsilon_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "")","c("" input"", "" grad_output"", "" weight"", "" running_mean"", "" running_var"", "" save_mean"", "" save_var"", "" epsilon"")"
"5492","torch","cpp_torch_namespace_miopen_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" bias"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5493","torch","cpp_torch_namespace_miopen_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self_size"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5494","torch","cpp_torch_namespace_miopen_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" output_mask"")"
"5495","torch","cpp_torch_namespace_miopen_convolution_backward_bias_grad_output_Tensor","XPtr<XPtrTorchTensor> "," grad_output"
"5496","torch","cpp_torch_namespace_miopen_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5497","torch","cpp_torch_namespace_miopen_convolution_transpose_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" bias"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5498","torch","cpp_torch_namespace_miopen_convolution_transpose_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" output_padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" output_mask"")"
"5499","torch","cpp_torch_namespace_miopen_convolution_transpose_backward_input_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5500","torch","cpp_torch_namespace_miopen_convolution_transpose_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5501","torch","cpp_torch_namespace_miopen_depthwise_convolution_self_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" weight"", "" bias"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5502","torch","cpp_torch_namespace_miopen_depthwise_convolution_backward_input_self_size_IntArrayRef_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self_size"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5503","torch","cpp_torch_namespace_miopen_depthwise_convolution_backward_self_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""std::vector<bool> "")","c("" self"", "" grad_output"", "" weight"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"", "" output_mask"")"
"5504","torch","cpp_torch_namespace_miopen_depthwise_convolution_backward_weight_weight_size_IntArrayRef_grad_output_Tensor_self_Tensor_padding_IntArrayRef_stride_IntArrayRef_dilation_IntArrayRef_groups_int64_t_benchmark_bool_deterministic_bool","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" weight_size"", "" grad_output"", "" self"", "" padding"", "" stride"", "" dilation"", "" groups"", "" benchmark"", "" deterministic"")"
"5505","torch","cpp_torch_namespace_miopen_rnn_input_Tensor_weight_TensorList_weight_stride0_int64_t_hx_Tensor_cx_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""double "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" weight"", "" weight_stride0"", "" hx"", "" cx"", "" mode"", "" hidden_size"", "" num_layers"", "" batch_first"", "" dropout"", "" train"", "" bidirectional"", "" batch_sizes"", "" dropout_state"")"
"5506","torch","cpp_torch_namespace_miopen_rnn_backward_input_Tensor_weight_TensorList_weight_stride0_int64_t_weight_buf_Tensor_hx_Tensor_cx_Tensor_output_Tensor_grad_output_Tensor_grad_hy_Tensor_grad_cy_Tensor_mode_int64_t_hidden_size_int64_t_num_layers_int64_t_batch_first_bool_dropout_double_train_bool_bidirectional_bool_batch_sizes_IntArrayRef_dropout_state_Tensor_reserve_Tensor_output_mask_stdarraybool4","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""double "", ""bool "", ""bool "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" input"", "" weight"", "" weight_stride0"", "" weight_buf"", "" hx"", "" cx"", "" output"", "" grad_output"", "" grad_hy"", "" grad_cy"", "" mode"", "" hidden_size"", "" num_layers"", "" batch_first"", "" dropout"", "" train"", "" bidirectional"", "" batch_sizes"", "" dropout_state"", "" reserve"", "" output_mask"")"
"5507","torch","cpp_torch_namespace_mm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"5508","torch","cpp_torch_namespace_mm_out_out_Tensor_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" mat2"")"
"5509","torch","cpp_torch_namespace__sparse_mm_sparse_Tensor_dense_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" sparse"", "" dense"")"
"5510","torch","cpp_torch_namespace_mode_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5511","torch","cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" keepdim"")"
"5512","torch","cpp_torch_namespace_mode_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5513","torch","cpp_torch_namespace_mode_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" keepdim"")"
"5514","torch","cpp_torch_namespace_mul_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5515","torch","cpp_torch_namespace_mul_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5516","torch","cpp_torch_namespace_mul_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5517","torch","cpp_torch_namespace_multiply_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5518","torch","cpp_torch_namespace_multiply_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5519","torch","cpp_torch_namespace_multiply_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5520","torch","cpp_torch_namespace_mv_self_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec"")"
"5521","torch","cpp_torch_namespace_mv_out_out_Tensor_self_Tensor_vec_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" vec"")"
"5522","torch","cpp_torch_namespace_mvlgamma_self_Tensor_p_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" p"")"
"5523","torch","cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_int64_t_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" length"")"
"5524","torch","cpp_torch_namespace_narrow_self_Tensor_dim_int64_t_start_Tensor_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" length"")"
"5525","torch","cpp_torch_namespace_native_batch_norm_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "")","c("" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" momentum"", "" eps"")"
"5526","torch","cpp_torch_namespace_native_batch_norm_out_out_Tensor_save_mean_Tensor_save_invstd_Tensor_input_Tensor_weight_Tensor_bias_Tensor_running_mean_Tensor_running_var_Tensor_training_bool_momentum_double_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""double "")","c("" out"", "" save_mean"", "" save_invstd"", "" input"", "" weight"", "" bias"", "" running_mean"", "" running_var"", "" training"", "" momentum"", "" eps"")"
"5527","torch","cpp_torch_namespace_batch_norm_stats_input_Tensor_eps_double","c(""XPtr<XPtrTorchTensor> "", ""double "")","c("" input"", "" eps"")"
"5528","torch","cpp_torch_namespace_batch_norm_elemt_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "")","c("" input"", "" weight"", "" bias"", "" mean"", "" invstd"", "" eps"")"
"5529","torch","cpp_torch_namespace_batch_norm_elemt_out_out_Tensor_input_Tensor_weight_Tensor_bias_Tensor_mean_Tensor_invstd_Tensor_eps_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "")","c("" out"", "" input"", "" weight"", "" bias"", "" mean"", "" invstd"", "" eps"")"
"5530","torch","cpp_torch_namespace_batch_norm_gather_stats_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_count_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""nullable<int64_t> "")","c("" input"", "" mean"", "" invstd"", "" running_mean"", "" running_var"", "" momentum"", "" eps"", "" count"")"
"5531","torch","cpp_torch_namespace_batch_norm_gather_stats_with_counts_input_Tensor_mean_Tensor_invstd_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double_eps_double_counts_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" mean"", "" invstd"", "" running_mean"", "" running_var"", "" momentum"", "" eps"", "" counts"")"
"5532","torch","cpp_torch_namespace_native_batch_norm_backward_grad_out_Tensor_input_Tensor_weight_Tensor_running_mean_Tensor_running_var_Tensor_save_mean_Tensor_save_invstd_Tensor_train_bool_eps_double_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""double "", ""std::vector<bool> "")","c("" grad_out"", "" input"", "" weight"", "" running_mean"", "" running_var"", "" save_mean"", "" save_invstd"", "" train"", "" eps"", "" output_mask"")"
"5533","torch","cpp_torch_namespace_batch_norm_backward_reduce_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_input_g_bool_weight_g_bool_bias_g_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" grad_out"", "" input"", "" mean"", "" invstd"", "" weight"", "" input_g"", "" weight_g"", "" bias_g"")"
"5534","torch","cpp_torch_namespace_batch_norm_backward_elemt_grad_out_Tensor_input_Tensor_mean_Tensor_invstd_Tensor_weight_Tensor_mean_dy_Tensor_mean_dy_xmu_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_out"", "" input"", "" mean"", "" invstd"", "" weight"", "" mean_dy"", "" mean_dy_xmu"")"
"5535","torch","cpp_torch_namespace_batch_norm_update_stats_input_Tensor_running_mean_Tensor_running_var_Tensor_momentum_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "")","c("" input"", "" running_mean"", "" running_var"", "" momentum"")"
"5536","torch","cpp_torch_namespace__nnpack_spatial_convolution_input_Tensor_weight_Tensor_bias_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" input"", "" weight"", "" bias"", "" padding"", "" stride"")"
"5537","torch","cpp_torch_namespace__nnpack_spatial_convolution_backward_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<bool> "")","c("" input"", "" grad_output"", "" weight"", "" padding"", "" output_mask"")"
"5538","torch","cpp_torch_namespace__nnpack_spatial_convolution_backward_input_input_Tensor_grad_output_Tensor_weight_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" input"", "" grad_output"", "" weight"", "" padding"")"
"5539","torch","cpp_torch_namespace__nnpack_spatial_convolution_backward_weight_input_Tensor_weightsize_IntArrayRef_grad_output_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" input"", "" weightsize"", "" grad_output"", "" padding"")"
"5540","torch","cpp_torch_namespace_ones_size_IntArrayRef_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" names"", "" options"")"
"5541","torch","cpp_torch_namespace_ones_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" options"")"
"5542","torch","cpp_torch_namespace_ones_out_out_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" size"")"
"5543","torch","cpp_torch_namespace_ones_like_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" memory_format"")"
"5544","torch","cpp_torch_namespace_pairwise_distance_x1_Tensor_x2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""bool "")","c("" x1"", "" x2"", "" p"", "" eps"", "" keepdim"")"
"5545","torch","cpp_torch_namespace_cdist_x1_Tensor_x2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" x1"", "" x2"", "" p"", "" compute_mode"")"
"5546","torch","cpp_torch_namespace__euclidean_dist_x1_Tensor_x2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" x1"", "" x2"")"
"5547","torch","cpp_torch_namespace__cdist_forward_x1_Tensor_x2_Tensor_p_double_compute_mode_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" x1"", "" x2"", "" p"", "" compute_mode"")"
"5548","torch","cpp_torch_namespace__cdist_backward_grad_Tensor_x1_Tensor_x2_Tensor_p_double_cdist_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" x1"", "" x2"", "" p"", "" cdist"")"
"5549","torch","cpp_torch_namespace_pdist_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "")","c("" self"", "" p"")"
"5550","torch","cpp_torch_namespace__pdist_forward_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "")","c("" self"", "" p"")"
"5551","torch","cpp_torch_namespace__pdist_backward_grad_Tensor_self_Tensor_p_double_pdist_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" self"", "" p"", "" pdist"")"
"5552","torch","cpp_torch_namespace_cosine_similarity_x1_Tensor_x2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""double "")","c("" x1"", "" x2"", "" dim"", "" eps"")"
"5553","torch","cpp_torch_namespace_movedim_self_Tensor_source_IntArrayRef_destination_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" source"", "" destination"")"
"5554","torch","cpp_torch_namespace_movedim_self_Tensor_source_int64_t_destination_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" source"", "" destination"")"
"5555","torch","cpp_torch_namespace_pixel_shuffle_self_Tensor_upscale_factor_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" upscale_factor"")"
"5556","torch","cpp_torch_namespace_channel_shuffle_self_Tensor_groups_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" groups"")"
"5557","torch","cpp_torch_namespace_pinverse_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "")","c("" self"", "" rcond"")"
"5558","torch","cpp_torch_namespace_poisson_nll_loss_input_Tensor_target_Tensor_log_input_bool_full_bool_eps_double_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""double "", ""nullable<int64_t> "")","c("" input"", "" target"", "" log_input"", "" full"", "" eps"", "" reduction"")"
"5559","torch","cpp_torch_namespace_rad2deg_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5560","torch","cpp_torch_namespace_rad2deg__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5561","torch","cpp_torch_namespace_rad2deg_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5562","torch","cpp_torch_namespace_deg2rad_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5563","torch","cpp_torch_namespace_deg2rad__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5564","torch","cpp_torch_namespace_deg2rad_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5565","torch","cpp_torch_namespace_scalar_tensor_s_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" s"", "" options"")"
"5566","torch","cpp_torch_namespace_rand_size_IntArrayRef_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" names"", "" options"")"
"5567","torch","cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" generator"", "" names"", "" options"")"
"5568","torch","cpp_torch_namespace_rand_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" options"")"
"5569","torch","cpp_torch_namespace_rand_size_IntArrayRef_generator_Generator","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" generator"", "" options"")"
"5570","torch","cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" size"")"
"5571","torch","cpp_torch_namespace_rand_out_out_Tensor_size_IntArrayRef_generator_Generator","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" size"", "" generator"")"
"5572","torch","cpp_torch_namespace_rand_like_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" memory_format"")"
"5573","torch","cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef","c(""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" high"", "" size"", "" options"")"
"5574","torch","cpp_torch_namespace_randint_high_int64_t_size_IntArrayRef_generator_Generator","c(""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" high"", "" size"", "" generator"", "" options"")"
"5575","torch","cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" low"", "" high"", "" size"", "" options"")"
"5576","torch","cpp_torch_namespace_randint_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" low"", "" high"", "" size"", "" generator"", "" options"")"
"5577","torch","cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" high"", "" size"")"
"5578","torch","cpp_torch_namespace_randint_out_out_Tensor_high_int64_t_size_IntArrayRef_generator_Generator","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" high"", "" size"", "" generator"")"
"5579","torch","cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" low"", "" high"", "" size"")"
"5580","torch","cpp_torch_namespace_randint_out_out_Tensor_low_int64_t_high_int64_t_size_IntArrayRef_generator_Generator","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" low"", "" high"", "" size"", "" generator"")"
"5581","torch","cpp_torch_namespace_randint_like_self_Tensor_high_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" high"", "" options"", "" memory_format"")"
"5582","torch","cpp_torch_namespace_randint_like_self_Tensor_low_int64_t_high_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" low"", "" high"", "" options"", "" memory_format"")"
"5583","torch","cpp_torch_namespace_randn_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" options"")"
"5584","torch","cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" generator"", "" options"")"
"5585","torch","cpp_torch_namespace_randn_size_IntArrayRef_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" names"", "" options"")"
"5586","torch","cpp_torch_namespace_randn_size_IntArrayRef_generator_Generator_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" generator"", "" names"", "" options"")"
"5587","torch","cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" size"")"
"5588","torch","cpp_torch_namespace_randn_out_out_Tensor_size_IntArrayRef_generator_Generator","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" size"", "" generator"")"
"5589","torch","cpp_torch_namespace_randn_like_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" memory_format"")"
"5590","torch","cpp_torch_namespace_randperm_n_int64_t","c(""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" n"", "" options"")"
"5591","torch","cpp_torch_namespace_randperm_n_int64_t_generator_Generator","c(""nullable<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" n"", "" generator"", "" options"")"
"5592","torch","cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" n"")"
"5593","torch","cpp_torch_namespace_randperm_out_out_Tensor_n_int64_t_generator_Generator","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" n"", "" generator"")"
"5594","torch","cpp_torch_namespace_range_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" start"", "" end"", "" step"", "" options"")"
"5595","torch","cpp_torch_namespace_range_out_out_Tensor_start_Scalar_end_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" start"", "" end"", "" step"")"
"5596","torch","cpp_torch_namespace_reciprocal_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5597","torch","cpp_torch_namespace_reciprocal__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5598","torch","cpp_torch_namespace_reciprocal_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5599","torch","cpp_torch_namespace_neg_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5600","torch","cpp_torch_namespace_neg__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5601","torch","cpp_torch_namespace_neg_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5602","torch","cpp_torch_namespace_negative_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5603","torch","cpp_torch_namespace_negative__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5604","torch","cpp_torch_namespace_negative_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5605","torch","cpp_torch_namespace_repeat_interleave_repeats_Tensor","XPtr<XPtrTorchTensor> "," repeats"
"5606","torch","cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" repeats"", "" dim"")"
"5607","torch","cpp_torch_namespace_repeat_interleave_self_Tensor_repeats_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" repeats"", "" dim"")"
"5608","torch","cpp_torch_namespace_reshape_self_Tensor_shape_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" shape"")"
"5609","torch","cpp_torch_namespace__mkldnn_reshape_self_Tensor_shape_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" shape"")"
"5610","torch","cpp_torch_namespace_round_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5611","torch","cpp_torch_namespace_round__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5612","torch","cpp_torch_namespace_round_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5613","torch","cpp_torch_namespace_rrelu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" lower"", "" upper"", "" training"", "" generator"")"
"5614","torch","cpp_torch_namespace_rrelu__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" lower"", "" upper"", "" training"", "" generator"")"
"5615","torch","cpp_torch_namespace_relu_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5616","torch","cpp_torch_namespace_relu__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5617","torch","cpp_torch_namespace_prelu_self_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" weight"")"
"5618","torch","cpp_torch_namespace_prelu_backward_grad_output_Tensor_self_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" weight"")"
"5619","torch","cpp_torch_namespace_gelu_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5620","torch","cpp_torch_namespace_gelu_backward_grad_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" self"")"
"5621","torch","cpp_torch_namespace_infinitely_differentiable_gelu_backward_grad_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" self"")"
"5622","torch","cpp_torch_namespace_hardshrink_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" lambd"")"
"5623","torch","cpp_torch_namespace_hardshrink_backward_grad_out_Tensor_self_Tensor_lambd_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_out"", "" self"", "" lambd"")"
"5624","torch","cpp_torch_namespace_rsqrt_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5625","torch","cpp_torch_namespace_rsqrt__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5626","torch","cpp_torch_namespace_rsqrt_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5627","torch","cpp_torch_namespace_select_self_Tensor_dim_Dimname_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" index"")"
"5628","torch","cpp_torch_namespace_select_self_Tensor_dim_int64_t_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" index"")"
"5629","torch","cpp_torch_namespace_select_backward_grad_Tensor_input_sizes_IntArrayRef_dim_int64_t_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" input_sizes"", "" dim"", "" index"")"
"5630","torch","cpp_torch_namespace_selu_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5631","torch","cpp_torch_namespace_selu__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5632","torch","cpp_torch_namespace_celu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" alpha"")"
"5633","torch","cpp_torch_namespace_celu__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" alpha"")"
"5634","torch","cpp_torch_namespace_silu_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5635","torch","cpp_torch_namespace_silu__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5636","torch","cpp_torch_namespace_silu_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5637","torch","cpp_torch_namespace_silu_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"")"
"5638","torch","cpp_torch_namespace_sigmoid_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5639","torch","cpp_torch_namespace_sigmoid__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5640","torch","cpp_torch_namespace_sigmoid_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5641","torch","cpp_torch_namespace_logit_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" self"", "" eps"")"
"5642","torch","cpp_torch_namespace_logit__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" self"", "" eps"")"
"5643","torch","cpp_torch_namespace_logit_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" out"", "" self"", "" eps"")"
"5644","torch","cpp_torch_namespace_sin_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5645","torch","cpp_torch_namespace_sin__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5646","torch","cpp_torch_namespace_sin_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5647","torch","cpp_torch_namespace_sinh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5648","torch","cpp_torch_namespace_sinh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5649","torch","cpp_torch_namespace_sinh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5650","torch","cpp_torch_namespace_detach_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5651","torch","cpp_torch_namespace_detach__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5652","torch","cpp_torch_namespace_size_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5653","torch","cpp_torch_namespace_size_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5654","torch","cpp_torch_namespace_slice_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim"", "" start"", "" end"", "" step"")"
"5655","torch","cpp_torch_namespace_slice_backward_grad_Tensor_input_sizes_IntArrayRef_dim_int64_t_start_int64_t_end_int64_t_step_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" input_sizes"", "" dim"", "" start"", "" end"", "" step"")"
"5656","torch","cpp_torch_namespace_slogdet_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5657","torch","cpp_torch_namespace_smm_self_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mat2"")"
"5658","torch","cpp_torch_namespace_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5659","torch","cpp_torch_namespace_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5660","torch","cpp_torch_namespace__softmax_self_Tensor_dim_int64_t_half_to_float_bool","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" half_to_float"")"
"5661","torch","cpp_torch_namespace__softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"", "" dim"", "" self"")"
"5662","torch","cpp_torch_namespace_unsafe_split_self_Tensor_split_size_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_size"", "" dim"")"
"5663","torch","cpp_torch_namespace_split_self_Tensor_split_size_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_size"", "" dim"")"
"5664","torch","cpp_torch_namespace_unsafe_split_with_sizes_self_Tensor_split_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_sizes"", "" dim"")"
"5665","torch","cpp_torch_namespace_split_with_sizes_self_Tensor_split_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" split_sizes"", "" dim"")"
"5666","torch","cpp_torch_namespace_squeeze_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5667","torch","cpp_torch_namespace_squeeze_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5668","torch","cpp_torch_namespace_squeeze_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5669","torch","cpp_torch_namespace_sspaddmm_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"5670","torch","cpp_torch_namespace_sspaddmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"5671","torch","cpp_torch_namespace_stack_tensors_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" tensors"", "" dim"")"
"5672","torch","cpp_torch_namespace_stack_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" out"", "" tensors"", "" dim"")"
"5673","torch","cpp_torch_namespace_hstack_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5674","torch","cpp_torch_namespace_hstack_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "")","c("" out"", "" tensors"")"
"5675","torch","cpp_torch_namespace_vstack_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5676","torch","cpp_torch_namespace_vstack_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "")","c("" out"", "" tensors"")"
"5677","torch","cpp_torch_namespace_dstack_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5678","torch","cpp_torch_namespace_dstack_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "")","c("" out"", "" tensors"")"
"5679","torch","cpp_torch_namespace_stft_self_Tensor_n_fft_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" n_fft"", "" hop_length"", "" win_length"", "" window"", "" normalized"", "" onesided"", "" return_complex"")"
"5680","torch","cpp_torch_namespace_istft_self_Tensor_n_fft_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" n_fft"", "" hop_length"", "" win_length"", "" window"", "" center"", "" normalized"", "" onesided"", "" length"", "" return_complex"")"
"5681","torch","cpp_torch_namespace_stride_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5682","torch","cpp_torch_namespace_stride_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5683","torch","cpp_torch_namespace_sum_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"5684","torch","cpp_torch_namespace_sum_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5685","torch","cpp_torch_namespace_sum_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5686","torch","cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5687","torch","cpp_torch_namespace_sum_out_out_Tensor_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5688","torch","cpp_torch_namespace_nansum_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"5689","torch","cpp_torch_namespace_nansum_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5690","torch","cpp_torch_namespace_nansum_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5691","torch","cpp_torch_namespace_sqrt_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5692","torch","cpp_torch_namespace_sqrt__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5693","torch","cpp_torch_namespace_sqrt_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5694","torch","cpp_torch_namespace_square_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5695","torch","cpp_torch_namespace_square__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5696","torch","cpp_torch_namespace_std_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"5697","torch","cpp_torch_namespace_std_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5698","torch","cpp_torch_namespace_std_mean_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"5699","torch","cpp_torch_namespace_std_mean_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5700","torch","cpp_torch_namespace_std_mean_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5701","torch","cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" out"", "" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5702","torch","cpp_torch_namespace_std_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5703","torch","cpp_torch_namespace_std_out_out_Tensor_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" out"", "" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5704","torch","cpp_torch_namespace_prod_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"5705","torch","cpp_torch_namespace_prod_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5706","torch","cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5707","torch","cpp_torch_namespace_prod_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" keepdim"", "" dtype"")"
"5708","torch","cpp_torch_namespace_prod_out_out_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" dim"", "" keepdim"", "" dtype"")"
"5709","torch","cpp_torch_namespace_t_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5710","torch","cpp_torch_namespace_tan_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5711","torch","cpp_torch_namespace_tan__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5712","torch","cpp_torch_namespace_tan_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5713","torch","cpp_torch_namespace_tanh_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5714","torch","cpp_torch_namespace_tanh__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5715","torch","cpp_torch_namespace_tanh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5716","torch","cpp_torch_namespace_tensordot_self_Tensor_other_Tensor_dims_self_IntArrayRef_dims_other_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" other"", "" dims_self"", "" dims_other"")"
"5717","torch","cpp_torch_namespace_threshold_self_Tensor_threshold_Scalar_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" threshold"", "" value"")"
"5718","torch","cpp_torch_namespace_threshold__self_Tensor_threshold_Scalar_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" threshold"", "" value"")"
"5719","torch","cpp_torch_namespace_threshold_out_out_Tensor_self_Tensor_threshold_Scalar_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" threshold"", "" value"")"
"5720","torch","cpp_torch_namespace_threshold_backward_grad_output_Tensor_self_Tensor_threshold_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_output"", "" self"", "" threshold"")"
"5721","torch","cpp_torch_namespace_transpose_self_Tensor_dim0_int64_t_dim1_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim0"", "" dim1"")"
"5722","torch","cpp_torch_namespace_transpose_self_Tensor_dim0_Dimname_dim1_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim0"", "" dim1"")"
"5723","torch","cpp_torch_namespace__mkldnn_transpose_self_Tensor_dim0_int64_t_dim1_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim0"", "" dim1"")"
"5724","torch","cpp_torch_namespace__mkldnn_transpose__self_Tensor_dim0_int64_t_dim1_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" dim0"", "" dim1"")"
"5725","torch","cpp_torch_namespace_one_hot_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" num_classes"")"
"5726","torch","cpp_torch_namespace_flip_self_Tensor_dims_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dims"")"
"5727","torch","cpp_torch_namespace_fliplr_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5728","torch","cpp_torch_namespace_flipud_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5729","torch","cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" shifts"", "" dims"")"
"5730","torch","cpp_torch_namespace_rot90_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" k"", "" dims"")"
"5731","torch","cpp_torch_namespace_trapz_y_Tensor_x_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" y"", "" x"", "" dim"")"
"5732","torch","cpp_torch_namespace_trapz_y_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" y"", "" dx"", "" dim"")"
"5733","torch","cpp_torch_namespace__trilinear_i1_Tensor_i2_Tensor_i3_Tensor_expand1_IntArrayRef_expand2_IntArrayRef_expand3_IntArrayRef_sumdim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" i1"", "" i2"", "" i3"", "" expand1"", "" expand2"", "" expand3"", "" sumdim"", "" unroll_dim"")"
"5734","torch","cpp_torch_namespace_triplet_margin_loss_anchor_Tensor_positive_Tensor_negative_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""double "", ""bool "", ""nullable<int64_t> "")","c("" anchor"", "" positive"", "" negative"", "" margin"", "" p"", "" eps"", "" swap"", "" reduction"")"
"5735","torch","cpp_torch_namespace_trunc_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5736","torch","cpp_torch_namespace_trunc__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5737","torch","cpp_torch_namespace_trunc_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5738","torch","cpp_torch_namespace_fix_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5739","torch","cpp_torch_namespace_fix__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5740","torch","cpp_torch_namespace_fix_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"5741","torch","cpp_torch_namespace__has_compatible_shallow_copy_type_self_Tensor_from_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" from"")"
"5742","torch","cpp_torch_namespace__unique_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" sorted"", "" return_inverse"")"
"5743","torch","cpp_torch_namespace_unique_dim_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" dim"", "" sorted"", "" return_inverse"", "" return_counts"")"
"5744","torch","cpp_torch_namespace_unique_consecutive_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" self"", "" return_inverse"", "" return_counts"", "" dim"")"
"5745","torch","cpp_torch_namespace_unique_dim_consecutive_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" return_inverse"", "" return_counts"")"
"5746","torch","cpp_torch_namespace__unique2_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" sorted"", "" return_inverse"", "" return_counts"")"
"5747","torch","cpp_torch_namespace__unsafe_view_self_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" size"")"
"5748","torch","cpp_torch_namespace_unsqueeze_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5749","torch","cpp_torch_namespace_vander_x_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" x"", "" False"", "" increasing"")"
"5750","torch","cpp_torch_namespace_var_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"5751","torch","cpp_torch_namespace_var_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5752","torch","cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" out"", "" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5753","torch","cpp_torch_namespace_var_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5754","torch","cpp_torch_namespace_var_out_out_Tensor_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" out"", "" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5755","torch","cpp_torch_namespace_var_mean_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"5756","torch","cpp_torch_namespace_var_mean_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5757","torch","cpp_torch_namespace_var_mean_self_Tensor_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "", ""bool "", ""bool "")","c("" self"", "" dim"", "" unbiased"", "" keepdim"")"
"5758","torch","cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" condition"", "" self"", "" other"")"
"5759","torch","cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" condition"", "" self"", "" other"")"
"5760","torch","cpp_torch_namespace_where_condition_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" condition"", "" self"", "" other"")"
"5761","torch","cpp_torch_namespace_where_condition_Tensor_self_Scalar_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" condition"", "" self"", "" other"")"
"5762","torch","cpp_torch_namespace_where_condition_Tensor","XPtr<XPtrTorchTensor> "," condition"
"5763","torch","cpp_torch_namespace__s_where_condition_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" condition"", "" self"", "" other"")"
"5764","torch","cpp_torch_namespace_norm_except_dim_v_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" v"", "" pow"", "" dim"")"
"5765","torch","cpp_torch_namespace__weight_norm_v_Tensor_g_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" v"", "" g"", "" dim"")"
"5766","torch","cpp_torch_namespace__weight_norm_cuda_interface_v_Tensor_g_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" v"", "" g"", "" dim"")"
"5767","torch","cpp_torch_namespace__weight_norm_cuda_interface_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_w"", "" saved_v"", "" saved_g"", "" saved_norms"", "" dim"")"
"5768","torch","cpp_torch_namespace__weight_norm_differentiable_backward_grad_w_Tensor_saved_v_Tensor_saved_g_Tensor_saved_norms_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_w"", "" saved_v"", "" saved_g"", "" saved_norms"", "" dim"")"
"5769","torch","cpp_torch_namespace_zeros_size_IntArrayRef_names_DimnameList","c(""std::vector<int64_t> "", ""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" names"", "" options"")"
"5770","torch","cpp_torch_namespace_zeros_size_IntArrayRef","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" options"")"
"5771","torch","cpp_torch_namespace_zeros_out_out_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" size"")"
"5772","torch","cpp_torch_namespace_zeros_like_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" options"", "" memory_format"")"
"5773","torch","cpp_torch_namespace__standard_gamma_grad_self_Tensor_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" output"")"
"5774","torch","cpp_torch_namespace__standard_gamma_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"5775","torch","cpp_torch_namespace__dirichlet_grad_x_Tensor_alpha_Tensor_total_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" x"", "" alpha"", "" total"")"
"5776","torch","cpp_torch_namespace__sample_dirichlet_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"5777","torch","cpp_torch_namespace_poisson_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" generator"")"
"5778","torch","cpp_torch_namespace_binomial_count_Tensor_prob_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" count"", "" prob"", "" generator"")"
"5779","torch","cpp_torch_namespace_native_norm_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"")"
"5780","torch","cpp_torch_namespace_native_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"5781","torch","cpp_torch_namespace__sparse_sum_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5782","torch","cpp_torch_namespace__sparse_sum_self_Tensor_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dtype"")"
"5783","torch","cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" dim"")"
"5784","torch","cpp_torch_namespace__sparse_sum_self_Tensor_dim_IntArrayRef_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5785","torch","cpp_torch_namespace__sparse_sum_backward_grad_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad"", "" self"", "" dim"")"
"5786","torch","cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5787","torch","cpp_torch_namespace__sparse_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5788","torch","cpp_torch_namespace__sparse_softmax_self_Tensor_dim_int64_t_half_to_float_bool","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" half_to_float"")"
"5789","torch","cpp_torch_namespace__sparse_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"", "" dim"", "" self"")"
"5790","torch","cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5791","torch","cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorch> "")","c("" self"", "" dim"", "" dtype"")"
"5792","torch","cpp_torch_namespace__sparse_log_softmax_self_Tensor_dim_int64_t_half_to_float_bool","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" half_to_float"")"
"5793","torch","cpp_torch_namespace__sparse_log_softmax_backward_data_grad_output_Tensor_output_Tensor_dim_int64_t_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"", "" dim"", "" self"")"
"5794","torch","cpp_torch_namespace_norm_self_Tensor_p_Scalar_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dtype"")"
"5795","torch","cpp_torch_namespace_norm_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"")"
"5796","torch","cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"5797","torch","cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" p"", "" dim"", "" keepdim"")"
"5798","torch","cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"5799","torch","cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" p"", "" dim"", "" keepdim"")"
"5800","torch","cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"5801","torch","cpp_torch_namespace_norm_self_Tensor_p_Scalar_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" self"", "" p"", "" dim"", "" keepdim"")"
"5802","torch","cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList_keepdim_bool_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" p"", "" dim"", "" keepdim"", "" dtype"")"
"5803","torch","cpp_torch_namespace_norm_out_out_Tensor_self_Tensor_p_Scalar_dim_DimnameList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorch> "", ""bool "")","c("" out"", "" self"", "" p"", "" dim"", "" keepdim"")"
"5804","torch","cpp_torch_namespace_frobenius_norm_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5805","torch","cpp_torch_namespace_frobenius_norm_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5806","torch","cpp_torch_namespace_frobenius_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5807","torch","cpp_torch_namespace_nuclear_norm_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" keepdim"")"
"5808","torch","cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" keepdim"")"
"5809","torch","cpp_torch_namespace_nuclear_norm_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"5810","torch","cpp_torch_namespace_nuclear_norm_out_out_Tensor_self_Tensor_dim_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" self"", "" dim"", "" keepdim"")"
"5811","torch","cpp_torch_namespace_clone_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" memory_format"")"
"5812","torch","cpp_torch_namespace_resize_as__self_Tensor_the_template_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchMemoryFormat> "")","c("" self"", "" the_template"", "" memory_format"")"
"5813","torch","cpp_torch_namespace_zero__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5814","torch","cpp_torch_namespace_sub_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"", "" alpha"")"
"5815","torch","cpp_torch_namespace_sub_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5816","torch","cpp_torch_namespace_sub_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5817","torch","cpp_torch_namespace_subtract_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"", "" alpha"")"
"5818","torch","cpp_torch_namespace_subtract_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5819","torch","cpp_torch_namespace_subtract_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5820","torch","cpp_torch_namespace_rsub_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5821","torch","cpp_torch_namespace_heaviside_out_out_Tensor_self_Tensor_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" values"")"
"5822","torch","cpp_torch_namespace_heaviside_self_Tensor_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" values"")"
"5823","torch","cpp_torch_namespace_rsub_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"5824","torch","cpp_torch_namespace__sparse_addmm_self_Tensor_sparse_Tensor_dense_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" sparse"", "" dense"", "" beta"", "" alpha"")"
"5825","torch","cpp_torch_namespace_addmm_out_out_Tensor_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"5826","torch","cpp_torch_namespace_addmm_self_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mat1"", "" mat2"", "" beta"", "" alpha"")"
"5827","torch","cpp_torch_namespace_sparse_coo_tensor_size_IntArrayRef_options_TensorOptions","c(""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" size"", "" options"")"
"5828","torch","cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" indices"", "" values"", "" options"")"
"5829","torch","cpp_torch_namespace_sparse_coo_tensor_indices_Tensor_values_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" indices"", "" values"", "" size"", "" options"")"
"5830","torch","cpp_torch_namespace__sparse_coo_tensor_unsafe_indices_Tensor_values_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" indices"", "" values"", "" size"", "" options"")"
"5831","torch","cpp_torch_namespace__validate_sparse_coo_tensor_args_indices_Tensor_values_Tensor_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" indices"", "" values"", "" size"")"
"5832","torch","cpp_torch_namespace__sparse_coo_tensor_with_dims_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_options_TensorOptions","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" sparse_dim"", "" dense_dim"", "" size"", "" options"")"
"5833","torch","cpp_torch_namespace__sparse_coo_tensor_with_dims_and_tensors_sparse_dim_int64_t_dense_dim_int64_t_size_IntArrayRef_indices_Tensor_values_Tensor_options_TensorOptions","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" sparse_dim"", "" dense_dim"", "" size"", "" indices"", "" values"", "" options"")"
"5834","torch","cpp_torch_namespace_to_dense_backward_grad_Tensor_input_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" input"")"
"5835","torch","cpp_torch_namespace_hspmm_out_out_Tensor_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" mat1"", "" mat2"")"
"5836","torch","cpp_torch_namespace_hspmm_mat1_Tensor_mat2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" mat1"", "" mat2"")"
"5837","torch","cpp_torch_namespace_copy_sparse_to_sparse__self_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" src"", "" non_blocking"")"
"5838","torch","cpp_torch_namespace_unbind_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"5839","torch","cpp_torch_namespace_unbind_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "")","c("" self"", "" dim"")"
"5840","torch","cpp_torch_namespace_mkldnn_reorder_conv2d_weight_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" padding"", "" stride"", "" dilation"", "" groups"")"
"5841","torch","cpp_torch_namespace_mkldnn_reorder_conv3d_weight_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" padding"", "" stride"", "" dilation"", "" groups"")"
"5842","torch","cpp_torch_namespace_to_mkldnn_backward_grad_Tensor_input_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" input"")"
"5843","torch","cpp_torch_namespace_quantize_per_tensor_self_Tensor_scale_double_zero_point_int64_t_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" scale"", "" zero_point"", "" dtype"")"
"5844","torch","cpp_torch_namespace_quantize_per_tensor_tensors_TensorList_scales_Tensor_zero_points_Tensor_dtype_ScalarType","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" tensors"", "" scales"", "" zero_points"", "" dtype"")"
"5845","torch","cpp_torch_namespace_quantize_per_channel_self_Tensor_scales_Tensor_zero_points_Tensor_axis_int64_t_dtype_ScalarType","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" self"", "" scales"", "" zero_points"", "" axis"", "" dtype"")"
"5846","torch","cpp_torch_namespace_dequantize_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5847","torch","cpp_torch_namespace_dequantize_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5848","torch","cpp_torch_namespace_q_scale_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5849","torch","cpp_torch_namespace_q_zero_point_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5850","torch","cpp_torch_namespace_q_per_channel_scales_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5851","torch","cpp_torch_namespace_q_per_channel_zero_points_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5852","torch","cpp_torch_namespace_q_per_channel_axis_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5853","torch","cpp_torch_namespace_int_repr_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5854","torch","cpp_torch_namespace__make_per_tensor_quantized_tensor_self_Tensor_scale_double_zero_point_int64_t","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"")"
"5855","torch","cpp_torch_namespace__make_per_channel_quantized_tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"", "" axis"")"
"5856","torch","cpp_torch_namespace_fake_quantize_per_tensor_affine_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"", "" quant_min"", "" quant_max"")"
"5857","torch","cpp_torch_namespace_fake_quantize_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_double_zero_point_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" self"", "" scale"", "" zero_point"", "" quant_min"", "" quant_max"")"
"5858","torch","cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"", "" quant_min"", "" quant_max"")"
"5859","torch","cpp_torch_namespace__fake_quantize_learnable_per_tensor_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" self"", "" scale"", "" zero_point"", "" quant_min"", "" quant_max"")"
"5860","torch","cpp_torch_namespace_fake_quantize_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"", "" axis"", "" quant_min"", "" quant_max"")"
"5861","torch","cpp_torch_namespace_fake_quantize_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" self"", "" scale"", "" zero_point"", "" axis"", "" quant_min"", "" quant_max"")"
"5862","torch","cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" scale"", "" zero_point"", "" axis"", "" quant_min"", "" quant_max"")"
"5863","torch","cpp_torch_namespace__fake_quantize_learnable_per_channel_affine_backward_grad_Tensor_self_Tensor_scale_Tensor_zero_point_Tensor_axis_int64_t_quant_min_int64_t_quant_max_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" self"", "" scale"", "" zero_point"", "" axis"", "" quant_min"", "" quant_max"")"
"5864","torch","cpp_torch_namespace__choose_qparams_per_tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" reduce_range"")"
"5865","torch","cpp_torch_namespace__saturate_weight_to_fp16_weight_Tensor","XPtr<XPtrTorchTensor> "," weight"
"5866","torch","cpp_torch_namespace_choose_qparams_optimized_input_Tensor_numel_int64_t_n_bins_int64_t_ratio_double_bit_width_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""double "", ""nullable<int64_t> "")","c("" input"", "" numel"", "" n_bins"", "" ratio"", "" bit_width"")"
"5867","torch","cpp_torch_namespace_meshgrid_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5868","torch","cpp_torch_namespace_cartesian_prod_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"5869","torch","cpp_torch_namespace_combinations_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" r"", "" with_replacement"")"
"5870","torch","cpp_torch_namespace_result_type_tensor_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" tensor"", "" other"")"
"5871","torch","cpp_torch_namespace_result_type_tensor_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" tensor"", "" other"")"
"5872","torch","cpp_torch_namespace_result_type_scalar_Scalar_tensor_Tensor","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" scalar"", "" tensor"")"
"5873","torch","cpp_torch_namespace_result_type_scalar1_Scalar_scalar2_Scalar","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" scalar1"", "" scalar2"")"
"5874","torch","cpp_torch_namespace_can_cast_from_ScalarType_to_ScalarType","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorch> "")","c("" from"", "" to"")"
"5875","torch","cpp_torch_namespace_promote_types_type1_ScalarType_type2_ScalarType","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorch> "")","c("" type1"", "" type2"")"
"5876","torch","cpp_torch_namespace__local_scalar_dense_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5877","torch","cpp_torch_namespace__thnn_fused_lstm_cell_input_gates_Tensor_hidden_gates_Tensor_cx_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input_gates"", "" hidden_gates"", "" cx"", "" input_bias"", "" hidden_bias"")"
"5878","torch","cpp_torch_namespace__thnn_fused_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_cx_Tensor_cy_Tensor_workspace_Tensor_has_bias_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" grad_hy"", "" grad_cy"", "" cx"", "" cy"", "" workspace"", "" has_bias"")"
"5879","torch","cpp_torch_namespace__thnn_differentiable_lstm_cell_backward_grad_hy_Tensor_grad_cy_Tensor_input_gates_Tensor_hidden_gates_Tensor_input_bias_Tensor_hidden_bias_Tensor_cx_Tensor_cy_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_hy"", "" grad_cy"", "" input_gates"", "" hidden_gates"", "" input_bias"", "" hidden_bias"", "" cx"", "" cy"")"
"5880","torch","cpp_torch_namespace__thnn_fused_gru_cell_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input_gates"", "" hidden_gates"", "" hx"", "" input_bias"", "" hidden_bias"")"
"5881","torch","cpp_torch_namespace__thnn_fused_gru_cell_backward_grad_hy_Tensor_workspace_Tensor_has_bias_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" grad_hy"", "" workspace"", "" has_bias"")"
"5882","torch","cpp_torch_namespace__thnn_differentiable_gru_cell_backward_grad_hy_Tensor_input_gates_Tensor_hidden_gates_Tensor_hx_Tensor_input_bias_Tensor_hidden_bias_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_hy"", "" input_gates"", "" hidden_gates"", "" hx"", "" input_bias"", "" hidden_bias"")"
"5883","torch","cpp_torch_namespace_lstm_input_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "", ""bool "")","c("" input"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"", "" batch_first"")"
"5884","torch","cpp_torch_namespace_lstm_data_Tensor_batch_sizes_Tensor_hx_TensorList_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "")","c("" data"", "" batch_sizes"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"")"
"5885","torch","cpp_torch_namespace_gru_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "", ""bool "")","c("" input"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"", "" batch_first"")"
"5886","torch","cpp_torch_namespace_gru_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "")","c("" data"", "" batch_sizes"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"")"
"5887","torch","cpp_torch_namespace_rnn_tanh_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "", ""bool "")","c("" input"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"", "" batch_first"")"
"5888","torch","cpp_torch_namespace_rnn_tanh_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "")","c("" data"", "" batch_sizes"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"")"
"5889","torch","cpp_torch_namespace_rnn_relu_input_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_batch_first_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "", ""bool "")","c("" input"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"", "" batch_first"")"
"5890","torch","cpp_torch_namespace_rnn_relu_data_Tensor_batch_sizes_Tensor_hx_Tensor_params_TensorList_has_biases_bool_num_layers_int64_t_dropout_double_train_bool_bidirectional_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""bool "", ""nullable<int64_t> "", ""double "", ""bool "", ""bool "")","c("" data"", "" batch_sizes"", "" hx"", "" params"", "" has_biases"", "" num_layers"", "" dropout"", "" train"", "" bidirectional"")"
"5891","torch","cpp_torch_namespace_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"")"
"5892","torch","cpp_torch_namespace_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"")"
"5893","torch","cpp_torch_namespace_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"")"
"5894","torch","cpp_torch_namespace_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"")"
"5895","torch","cpp_torch_namespace_quantized_lstm_cell_input_Tensor_hx_TensorList_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"", "" packed_ih"", "" packed_hh"", "" col_offsets_ih"", "" col_offsets_hh"", "" scale_ih"", "" scale_hh"", "" zero_point_ih"", "" zero_point_hh"")"
"5896","torch","cpp_torch_namespace_quantized_gru_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"", "" packed_ih"", "" packed_hh"", "" col_offsets_ih"", "" col_offsets_hh"", "" scale_ih"", "" scale_hh"", "" zero_point_ih"", "" zero_point_hh"")"
"5897","torch","cpp_torch_namespace_quantized_rnn_relu_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"", "" packed_ih"", "" packed_hh"", "" col_offsets_ih"", "" col_offsets_hh"", "" scale_ih"", "" scale_hh"", "" zero_point_ih"", "" zero_point_hh"")"
"5898","torch","cpp_torch_namespace_quantized_rnn_tanh_cell_input_Tensor_hx_Tensor_w_ih_Tensor_w_hh_Tensor_b_ih_Tensor_b_hh_Tensor_packed_ih_Tensor_packed_hh_Tensor_col_offsets_ih_Tensor_col_offsets_hh_Tensor_scale_ih_Scalar_scale_hh_Scalar_zero_point_ih_Scalar_zero_point_hh_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" hx"", "" w_ih"", "" w_hh"", "" b_ih"", "" b_hh"", "" packed_ih"", "" packed_hh"", "" col_offsets_ih"", "" col_offsets_hh"", "" scale_ih"", "" scale_hh"", "" zero_point_ih"", "" zero_point_hh"")"
"5899","torch","cpp_torch_namespace__pack_padded_sequence_input_Tensor_lengths_Tensor_batch_first_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" input"", "" lengths"", "" batch_first"")"
"5900","torch","cpp_torch_namespace__pack_padded_sequence_backward_grad_Tensor_input_size_IntArrayRef_batch_sizes_Tensor_batch_first_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" grad"", "" input_size"", "" batch_sizes"", "" batch_first"")"
"5901","torch","cpp_torch_namespace__pad_packed_sequence_data_Tensor_batch_sizes_Tensor_batch_first_bool_padding_value_Scalar_total_length_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "")","c("" data"", "" batch_sizes"", "" batch_first"", "" padding_value"", "" total_length"")"
"5902","torch","cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" mask"", "" value"")"
"5903","torch","cpp_torch_namespace_masked_fill_self_Tensor_mask_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" value"")"
"5904","torch","cpp_torch_namespace_masked_scatter_self_Tensor_mask_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"", "" source"")"
"5905","torch","cpp_torch_namespace_index_add_self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"5906","torch","cpp_torch_namespace_index_add_self_Tensor_dim_Dimname_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"5907","torch","cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5908","torch","cpp_torch_namespace_index_fill_self_Tensor_dim_int64_t_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5909","torch","cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5910","torch","cpp_torch_namespace_index_fill_self_Tensor_dim_Dimname_index_Tensor_value_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5911","torch","cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"5912","torch","cpp_torch_namespace_scatter_self_Tensor_dim_int64_t_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5913","torch","cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"5914","torch","cpp_torch_namespace_scatter_self_Tensor_dim_Dimname_index_Tensor_value_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" dim"", "" index"", "" value"")"
"5915","torch","cpp_torch_namespace_scatter_add_self_Tensor_dim_int64_t_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"5916","torch","cpp_torch_namespace_scatter_add_self_Tensor_dim_Dimname_index_Tensor_src_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" src"")"
"5917","torch","cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5918","torch","cpp_torch_namespace_bitwise_and_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5919","torch","cpp_torch_namespace_bitwise_and_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5920","torch","cpp_torch_namespace_bitwise_and_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5921","torch","cpp_torch_namespace___and___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5922","torch","cpp_torch_namespace___and___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5923","torch","cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5924","torch","cpp_torch_namespace_bitwise_or_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5925","torch","cpp_torch_namespace_bitwise_or_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5926","torch","cpp_torch_namespace_bitwise_or_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5927","torch","cpp_torch_namespace___or___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5928","torch","cpp_torch_namespace___or___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5929","torch","cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5930","torch","cpp_torch_namespace_bitwise_xor_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5931","torch","cpp_torch_namespace_bitwise_xor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5932","torch","cpp_torch_namespace_bitwise_xor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5933","torch","cpp_torch_namespace___xor___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5934","torch","cpp_torch_namespace___xor___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5935","torch","cpp_torch_namespace___lshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5936","torch","cpp_torch_namespace___lshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5937","torch","cpp_torch_namespace___rshift___self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5938","torch","cpp_torch_namespace___rshift___self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5939","torch","cpp_torch_namespace_addbmm_out_out_Tensor_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"5940","torch","cpp_torch_namespace_addbmm_self_Tensor_batch1_Tensor_batch2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" batch1"", "" batch2"", "" beta"", "" alpha"")"
"5941","torch","cpp_torch_namespace_diag_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" diagonal"")"
"5942","torch","cpp_torch_namespace_diag_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"5943","torch","cpp_torch_namespace_diag_backward_grad_Tensor_input_sizes_IntArrayRef_diagonal_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "")","c("" grad"", "" input_sizes"", "" diagonal"")"
"5944","torch","cpp_torch_namespace_cross_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" other"", "" dim"")"
"5945","torch","cpp_torch_namespace_cross_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" other"", "" dim"")"
"5946","torch","cpp_torch_namespace_triu_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" diagonal"")"
"5947","torch","cpp_torch_namespace_triu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"5948","torch","cpp_torch_namespace_tril_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" diagonal"")"
"5949","torch","cpp_torch_namespace_tril_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" diagonal"")"
"5950","torch","cpp_torch_namespace_tril_indices_row_int64_t_col_int64_t","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" row"", "" col"", "" offset"", "" options"")"
"5951","torch","cpp_torch_namespace_triu_indices_row_int64_t_col_int64_t","c(""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensorOptions> "")","c("" row"", "" col"", "" offset"", "" options"")"
"5952","torch","cpp_torch_namespace_trace_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"5953","torch","cpp_torch_namespace_trace_backward_grad_Tensor_sizes_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad"", "" sizes"")"
"5954","torch","cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5955","torch","cpp_torch_namespace_ne_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5956","torch","cpp_torch_namespace_ne_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5957","torch","cpp_torch_namespace_ne_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5958","torch","cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5959","torch","cpp_torch_namespace_not_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5960","torch","cpp_torch_namespace_not_equal_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5961","torch","cpp_torch_namespace_not_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5962","torch","cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5963","torch","cpp_torch_namespace_eq_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5964","torch","cpp_torch_namespace_eq_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5965","torch","cpp_torch_namespace_eq_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5966","torch","cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5967","torch","cpp_torch_namespace_ge_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5968","torch","cpp_torch_namespace_ge_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5969","torch","cpp_torch_namespace_ge_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5970","torch","cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5971","torch","cpp_torch_namespace_greater_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5972","torch","cpp_torch_namespace_greater_equal_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5973","torch","cpp_torch_namespace_greater_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5974","torch","cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5975","torch","cpp_torch_namespace_le_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5976","torch","cpp_torch_namespace_le_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5977","torch","cpp_torch_namespace_le_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5978","torch","cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5979","torch","cpp_torch_namespace_less_equal_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5980","torch","cpp_torch_namespace_less_equal_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5981","torch","cpp_torch_namespace_less_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5982","torch","cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5983","torch","cpp_torch_namespace_gt_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5984","torch","cpp_torch_namespace_gt_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5985","torch","cpp_torch_namespace_gt_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5986","torch","cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5987","torch","cpp_torch_namespace_greater_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5988","torch","cpp_torch_namespace_greater_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5989","torch","cpp_torch_namespace_greater_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5990","torch","cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5991","torch","cpp_torch_namespace_lt_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5992","torch","cpp_torch_namespace_lt_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5993","torch","cpp_torch_namespace_lt_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5994","torch","cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"5995","torch","cpp_torch_namespace_less_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"5996","torch","cpp_torch_namespace_less_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"5997","torch","cpp_torch_namespace_less_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"5998","torch","cpp_torch_namespace_take_out_out_Tensor_self_Tensor_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" index"")"
"5999","torch","cpp_torch_namespace_take_self_Tensor_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" index"")"
"6000","torch","cpp_torch_namespace_take_backward_grad_Tensor_input_Tensor_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" input"", "" index"")"
"6001","torch","cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" dim"", "" index"")"
"6002","torch","cpp_torch_namespace_index_select_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"")"
"6003","torch","cpp_torch_namespace_index_select_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" dim"", "" index"")"
"6004","torch","cpp_torch_namespace_index_select_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"")"
"6005","torch","cpp_torch_namespace_index_select_backward_grad_Tensor_self_sizes_IntArrayRef_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" self_sizes"", "" dim"", "" index"")"
"6006","torch","cpp_torch_namespace_masked_select_out_out_Tensor_self_Tensor_mask_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" mask"")"
"6007","torch","cpp_torch_namespace_masked_select_self_Tensor_mask_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" mask"")"
"6008","torch","cpp_torch_namespace_masked_select_backward_grad_Tensor_input_Tensor_mask_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad"", "" input"", "" mask"")"
"6009","torch","cpp_torch_namespace_nonzero_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6010","torch","cpp_torch_namespace_nonzero_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6011","torch","cpp_torch_namespace_nonzero_numpy_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6012","torch","cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" dim"", "" index"", "" sparse_grad"")"
"6013","torch","cpp_torch_namespace_gather_self_Tensor_dim_int64_t_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" dim"", "" index"", "" sparse_grad"")"
"6014","torch","cpp_torch_namespace_gather_backward_grad_Tensor_self_Tensor_dim_int64_t_index_Tensor_sparse_grad_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" grad"", "" self"", "" dim"", "" index"", "" sparse_grad"")"
"6015","torch","cpp_torch_namespace_gather_out_out_Tensor_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" dim"", "" index"", "" sparse_grad"")"
"6016","torch","cpp_torch_namespace_gather_self_Tensor_dim_Dimname_index_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" dim"", "" index"", "" sparse_grad"")"
"6017","torch","cpp_torch_namespace__gather_sparse_backward_self_Tensor_dim_int64_t_index_Tensor_grad_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" grad"")"
"6018","torch","cpp_torch_namespace_addcmul_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" tensor1"", "" tensor2"", "" value"")"
"6019","torch","cpp_torch_namespace_addcmul_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"6020","torch","cpp_torch_namespace_addcdiv_out_out_Tensor_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" tensor1"", "" tensor2"", "" value"")"
"6021","torch","cpp_torch_namespace_addcdiv_self_Tensor_tensor1_Tensor_tensor2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"6022","torch","cpp_torch_namespace_lstsq_out_X_Tensor_qr_Tensor_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" X"", "" qr"", "" self"", "" A"")"
"6023","torch","cpp_torch_namespace_lstsq_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" A"")"
"6024","torch","cpp_torch_namespace_triangular_solve_out_X_Tensor_M_Tensor_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" X"", "" M"", "" self"", "" A"", "" upper"", "" transpose"", "" unitriangular"")"
"6025","torch","cpp_torch_namespace_triangular_solve_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" A"", "" upper"", "" transpose"", "" unitriangular"")"
"6026","torch","cpp_torch_namespace__triangular_solve_helper_self_Tensor_A_Tensor_upper_bool_transpose_bool_unitriangular_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "", ""bool "")","c("" self"", "" A"", "" upper"", "" transpose"", "" unitriangular"")"
"6027","torch","cpp_torch_namespace_symeig_out_e_Tensor_V_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" e"", "" V"", "" self"", "" eigenvectors"", "" upper"")"
"6028","torch","cpp_torch_namespace_symeig_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" eigenvectors"", "" upper"")"
"6029","torch","cpp_torch_namespace__symeig_helper_self_Tensor_eigenvectors_bool_upper_bool","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" eigenvectors"", "" upper"")"
"6030","torch","cpp_torch_namespace_eig_out_e_Tensor_v_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" e"", "" v"", "" self"", "" eigenvectors"")"
"6031","torch","cpp_torch_namespace_eig_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" eigenvectors"")"
"6032","torch","cpp_torch_namespace_svd_out_U_Tensor_S_Tensor_V_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" U"", "" S"", "" V"", "" self"", "" some"", "" compute_uv"")"
"6033","torch","cpp_torch_namespace_svd_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" some"", "" compute_uv"")"
"6034","torch","cpp_torch_namespace__svd_helper_self_Tensor_some_bool_compute_uv_bool","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" some"", "" compute_uv"")"
"6035","torch","cpp_torch_namespace_cholesky_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" upper"")"
"6036","torch","cpp_torch_namespace_cholesky_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" upper"")"
"6037","torch","cpp_torch_namespace__cholesky_helper_self_Tensor_upper_bool","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" upper"")"
"6038","torch","cpp_torch_namespace_cholesky_solve_out_out_Tensor_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" input2"", "" upper"")"
"6039","torch","cpp_torch_namespace_cholesky_solve_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" input2"", "" upper"")"
"6040","torch","cpp_torch_namespace__cholesky_solve_helper_self_Tensor_A_Tensor_upper_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" A"", "" upper"")"
"6041","torch","cpp_torch_namespace_solve_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" A"")"
"6042","torch","cpp_torch_namespace_solve_out_solution_Tensor_lu_Tensor_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" solution"", "" lu"", "" self"", "" A"")"
"6043","torch","cpp_torch_namespace__solve_helper_self_Tensor_A_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" A"")"
"6044","torch","cpp_torch_namespace_cholesky_inverse_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" out"", "" self"", "" upper"")"
"6045","torch","cpp_torch_namespace_cholesky_inverse_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" upper"")"
"6046","torch","cpp_torch_namespace_qr_out_Q_Tensor_R_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "")","c("" Q"", "" R"", "" self"", "" some"")"
"6047","torch","cpp_torch_namespace_qr_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" some"")"
"6048","torch","cpp_torch_namespace__qr_helper_self_Tensor_some_bool","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" some"")"
"6049","torch","cpp_torch_namespace_geqrf_out_a_Tensor_tau_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" a"", "" tau"", "" self"")"
"6050","torch","cpp_torch_namespace_geqrf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6051","torch","cpp_torch_namespace_orgqr_out_out_Tensor_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" input2"")"
"6052","torch","cpp_torch_namespace_orgqr_self_Tensor_input2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" input2"")"
"6053","torch","cpp_torch_namespace_ormqr_out_out_Tensor_self_Tensor_input2_Tensor_input3_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" out"", "" self"", "" input2"", "" input3"", "" left"", "" transpose"")"
"6054","torch","cpp_torch_namespace_ormqr_self_Tensor_input2_Tensor_input3_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" input2"", "" input3"", "" left"", "" transpose"")"
"6055","torch","cpp_torch_namespace__lu_with_info_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" pivot"", "" check_errors"")"
"6056","torch","cpp_torch_namespace_lu_solve_out_out_Tensor_self_Tensor_LU_data_Tensor_LU_pivots_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" LU_data"", "" LU_pivots"")"
"6057","torch","cpp_torch_namespace_lu_solve_self_Tensor_LU_data_Tensor_LU_pivots_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" LU_data"", "" LU_pivots"")"
"6058","torch","cpp_torch_namespace__lu_solve_helper_self_Tensor_LU_data_Tensor_LU_pivots_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" LU_data"", "" LU_pivots"")"
"6059","torch","cpp_torch_namespace_multinomial_out_out_Tensor_self_Tensor_num_samples_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" num_samples"", "" replacement"", "" generator"")"
"6060","torch","cpp_torch_namespace_multinomial_self_Tensor_num_samples_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" num_samples"", "" replacement"", "" generator"")"
"6061","torch","cpp_torch_namespace__multinomial_alias_setup_probs_Tensor","XPtr<XPtrTorchTensor> "," probs"
"6062","torch","cpp_torch_namespace__multinomial_alias_draw_J_Tensor_q_Tensor_num_samples_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorch> "")","c("" J"", "" q"", "" num_samples"", "" generator"")"
"6063","torch","cpp_torch_namespace_lgamma_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6064","torch","cpp_torch_namespace_lgamma_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6065","torch","cpp_torch_namespace_digamma_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6066","torch","cpp_torch_namespace_digamma_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6067","torch","cpp_torch_namespace_polygamma_out_out_Tensor_n_int64_t_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" n"", "" self"")"
"6068","torch","cpp_torch_namespace_erfinv_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6069","torch","cpp_torch_namespace_erfinv_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6070","torch","cpp_torch_namespace_i0_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6071","torch","cpp_torch_namespace_i0__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6072","torch","cpp_torch_namespace_i0_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6073","torch","cpp_torch_namespace_sign_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6074","torch","cpp_torch_namespace_sign_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6075","torch","cpp_torch_namespace_signbit_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6076","torch","cpp_torch_namespace_signbit_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6077","torch","cpp_torch_namespace_dist_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" p"")"
"6078","torch","cpp_torch_namespace_atan2_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6079","torch","cpp_torch_namespace_atan2_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6080","torch","cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" end"", "" weight"")"
"6081","torch","cpp_torch_namespace_lerp_out_out_Tensor_self_Tensor_end_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" end"", "" weight"")"
"6082","torch","cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" end"", "" weight"")"
"6083","torch","cpp_torch_namespace_lerp_self_Tensor_end_Tensor_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" end"", "" weight"")"
"6084","torch","cpp_torch_namespace_histc_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" bins"", "" min"", "" max"")"
"6085","torch","cpp_torch_namespace_histc_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" bins"", "" min"", "" max"")"
"6086","torch","cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"6087","torch","cpp_torch_namespace_fmod_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"6088","torch","cpp_torch_namespace_fmod_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6089","torch","cpp_torch_namespace_fmod_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6090","torch","cpp_torch_namespace_hypot_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6091","torch","cpp_torch_namespace_hypot_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6092","torch","cpp_torch_namespace_nextafter_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6093","torch","cpp_torch_namespace_nextafter_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6094","torch","cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" other"")"
"6095","torch","cpp_torch_namespace_remainder_self_Tensor_other_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"")"
"6096","torch","cpp_torch_namespace_remainder_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6097","torch","cpp_torch_namespace_remainder_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6098","torch","cpp_torch_namespace_min_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6099","torch","cpp_torch_namespace_max_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6100","torch","cpp_torch_namespace_maximum_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6101","torch","cpp_torch_namespace_maximum_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6102","torch","cpp_torch_namespace_max_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6103","torch","cpp_torch_namespace_max_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6104","torch","cpp_torch_namespace_minimum_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6105","torch","cpp_torch_namespace_minimum_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6106","torch","cpp_torch_namespace_min_out_out_Tensor_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" other"")"
"6107","torch","cpp_torch_namespace_min_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6108","torch","cpp_torch_namespace_median_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6109","torch","cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" q"", "" dim"", "" keepdim"")"
"6110","torch","cpp_torch_namespace_quantile_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"6111","torch","cpp_torch_namespace_quantile_out_out_Tensor_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" q"", "" dim"", "" keepdim"")"
"6112","torch","cpp_torch_namespace_quantile_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"6113","torch","cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" q"", "" dim"", "" keepdim"")"
"6114","torch","cpp_torch_namespace_nanquantile_self_Tensor_q_double","c(""XPtr<XPtrTorchTensor> "", ""double "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"6115","torch","cpp_torch_namespace_nanquantile_out_out_Tensor_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" out"", "" self"", "" q"", "" dim"", "" keepdim"")"
"6116","torch","cpp_torch_namespace_nanquantile_self_Tensor_q_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" q"", "" dim"", "" keepdim"")"
"6117","torch","cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" descending"")"
"6118","torch","cpp_torch_namespace_sort_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"6119","torch","cpp_torch_namespace_sort_out_values_Tensor_indices_Tensor_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" descending"")"
"6120","torch","cpp_torch_namespace_sort_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"6121","torch","cpp_torch_namespace_argsort_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"6122","torch","cpp_torch_namespace_argsort_self_Tensor_dim_Dimname","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchDimname> "", ""bool "")","c("" self"", "" dim"", "" descending"")"
"6123","torch","cpp_torch_namespace_topk_out_values_Tensor_indices_Tensor_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" values"", "" indices"", "" self"", "" k"", "" dim"", "" largest"", "" sorted"")"
"6124","torch","cpp_torch_namespace_topk_self_Tensor_k_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""bool "", ""bool "")","c("" self"", "" k"", "" dim"", "" largest"", "" sorted"")"
"6125","torch","cpp_torch_namespace_all_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6126","torch","cpp_torch_namespace_any_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6127","torch","cpp_torch_namespace_renorm_out_out_Tensor_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" p"", "" dim"", "" maxnorm"")"
"6128","torch","cpp_torch_namespace_renorm_self_Tensor_p_Scalar_dim_int64_t_maxnorm_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" p"", "" dim"", "" maxnorm"")"
"6129","torch","cpp_torch_namespace_unfold_backward_grad_in_Tensor_input_sizes_IntArrayRef_dim_int64_t_size_int64_t_step_int64_t","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" grad_in"", "" input_sizes"", "" dim"", "" size"", "" step"")"
"6130","torch","cpp_torch_namespace_equal_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" other"")"
"6131","torch","cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" exponent"")"
"6132","torch","cpp_torch_namespace_pow_self_Tensor_exponent_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" exponent"")"
"6133","torch","cpp_torch_namespace_pow_out_out_Tensor_self_Scalar_exponent_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" exponent"")"
"6134","torch","cpp_torch_namespace_pow_self_Scalar_exponent_Tensor","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" exponent"")"
"6135","torch","cpp_torch_namespace_pow_out_out_Tensor_self_Tensor_exponent_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" exponent"")"
"6136","torch","cpp_torch_namespace_pow_self_Tensor_exponent_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" exponent"")"
"6137","torch","cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorch> "")","c("" out"", "" mean"", "" std"", "" generator"")"
"6138","torch","cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_Tensor","c(""XPtr<XPtrTorchTensor> "", ""double "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" out"", "" mean"", "" std"", "" generator"")"
"6139","torch","cpp_torch_namespace_normal_out_out_Tensor_mean_Tensor_std_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorch> "")","c("" out"", "" mean"", "" std"", "" generator"")"
"6140","torch","cpp_torch_namespace_normal_out_out_Tensor_mean_double_std_double_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""std::vector<int64_t> "", ""XPtr<XPtrTorch> "")","c("" out"", "" mean"", "" std"", "" size"", "" generator"")"
"6141","torch","cpp_torch_namespace_alias_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6142","torch","cpp_torch_namespace__index_copy__self_Tensor_dim_int64_t_index_Tensor_source_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" dim"", "" index"", "" source"")"
"6143","torch","cpp_torch_namespace__cumsum_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"6144","torch","cpp_torch_namespace__cumsum_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" dim"")"
"6145","torch","cpp_torch_namespace__cumprod_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"6146","torch","cpp_torch_namespace__cumprod_out_out_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" dim"")"
"6147","torch","cpp_torch_namespace__var_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"6148","torch","cpp_torch_namespace__std_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""bool "")","c("" self"", "" unbiased"")"
"6149","torch","cpp_torch_namespace__amp_non_finite_check_and_unscale__self_Tensor_found_inf_Tensor_inv_scale_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" found_inf"", "" inv_scale"")"
"6150","torch","cpp_torch_namespace__amp_update_scale_growth_tracker_Tensor_current_scale_Tensor_found_inf_Tensor_scale_growth_factor_double_scale_backoff_factor_double_growth_interval_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""double "", ""double "", ""nullable<int64_t> "")","c("" growth_tracker"", "" current_scale"", "" found_inf"", "" scale_growth_factor"", "" scale_backoff_factor"", "" growth_interval"")"
"6151","torch","cpp_torch_namespace__cat_tensors_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" tensors"", "" dim"")"
"6152","torch","cpp_torch_namespace__cat_out_out_Tensor_tensors_TensorList","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensorList> "", ""nullable<int64_t> "")","c("" out"", "" tensors"", "" dim"")"
"6153","torch","cpp_torch_namespace__foreach_add_tensors_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors"", "" scalar"")"
"6154","torch","cpp_torch_namespace__foreach_add__self_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" scalar"")"
"6155","torch","cpp_torch_namespace__foreach_sub_tensors_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors"", "" scalar"")"
"6156","torch","cpp_torch_namespace__foreach_sub__self_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" scalar"")"
"6157","torch","cpp_torch_namespace__foreach_mul_tensors_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors"", "" scalar"")"
"6158","torch","cpp_torch_namespace__foreach_mul__self_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" scalar"")"
"6159","torch","cpp_torch_namespace__foreach_div_tensors_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors"", "" scalar"")"
"6160","torch","cpp_torch_namespace__foreach_div__self_TensorList_scalar_Scalar","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" scalar"")"
"6161","torch","cpp_torch_namespace__foreach_add_tensors1_TensorList_tensors2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors1"", "" tensors2"", "" alpha"")"
"6162","torch","cpp_torch_namespace__foreach_add__self_TensorList_other_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"6163","torch","cpp_torch_namespace__foreach_sub_tensors1_TensorList_tensors2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" tensors1"", "" tensors2"", "" alpha"")"
"6164","torch","cpp_torch_namespace__foreach_sub__self_TensorList_other_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"6165","torch","cpp_torch_namespace__foreach_mul_tensors1_TensorList_tensors2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "")","c("" tensors1"", "" tensors2"")"
"6166","torch","cpp_torch_namespace__foreach_mul__self_TensorList_other_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "")","c("" self"", "" other"")"
"6167","torch","cpp_torch_namespace__foreach_div_tensors1_TensorList_tensors2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "")","c("" tensors1"", "" tensors2"")"
"6168","torch","cpp_torch_namespace__foreach_div__self_TensorList_other_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "")","c("" self"", "" other"")"
"6169","torch","cpp_torch_namespace__foreach_add_scalar_list_tensors_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" tensors"", "" scalars"")"
"6170","torch","cpp_torch_namespace__foreach_add_scalar_list__self_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" self"", "" scalars"")"
"6171","torch","cpp_torch_namespace__foreach_sub_scalar_list_tensors_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" tensors"", "" scalars"")"
"6172","torch","cpp_torch_namespace__foreach_sub_scalar_list__self_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" self"", "" scalars"")"
"6173","torch","cpp_torch_namespace__foreach_div_scalar_list_tensors_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" tensors"", "" scalars"")"
"6174","torch","cpp_torch_namespace__foreach_div_scalar_list__self_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" self"", "" scalars"")"
"6175","torch","cpp_torch_namespace__foreach_mul_scalar_list_tensors_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" tensors"", "" scalars"")"
"6176","torch","cpp_torch_namespace__foreach_mul_scalar_list__self_TensorList_scalars_ArrayRefdouble","c(""XPtr<XPtrTorchTensorList> "", ""std::vector<double> "")","c("" self"", "" scalars"")"
"6177","torch","cpp_torch_namespace__foreach_exp_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"6178","torch","cpp_torch_namespace__foreach_exp__self_TensorList","XPtr<XPtrTorchTensorList> "," self"
"6179","torch","cpp_torch_namespace__foreach_sqrt_tensors_TensorList","XPtr<XPtrTorchTensorList> "," tensors"
"6180","torch","cpp_torch_namespace__foreach_sqrt__self_TensorList","XPtr<XPtrTorchTensorList> "," self"
"6181","torch","cpp_torch_namespace__foreach_addcdiv__self_TensorList_tensor1_TensorList_tensor2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"6182","torch","cpp_torch_namespace__foreach_addcmul__self_TensorList_tensor1_TensorList_tensor2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" tensor1"", "" tensor2"", "" value"")"
"6183","torch","cpp_torch_namespace__foreach_addcdiv_input_TensorList_tensor1_TensorList_tensor2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" tensor1"", "" tensor2"", "" value"")"
"6184","torch","cpp_torch_namespace__foreach_addcmul_input_TensorList_tensor1_TensorList_tensor2_TensorList","c(""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchTensorList> "", ""XPtr<XPtrTorchScalar> "")","c("" input"", "" tensor1"", "" tensor2"", "" value"")"
"6185","torch","cpp_torch_namespace__mode_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" dim"", "" keepdim"")"
"6186","torch","cpp_torch_namespace__mode_out_values_Tensor_indices_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" values"", "" indices"", "" self"", "" dim"", "" keepdim"")"
"6187","torch","cpp_torch_namespace_bucketize_self_Tensor_boundaries_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" boundaries"", "" out_int32"", "" right"")"
"6188","torch","cpp_torch_namespace_bucketize_out_out_Tensor_self_Tensor_boundaries_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" out"", "" self"", "" boundaries"", "" out_int32"", "" right"")"
"6189","torch","cpp_torch_namespace_bucketize_self_Scalar_boundaries_Tensor","c(""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" self"", "" boundaries"", "" out_int32"", "" right"")"
"6190","torch","cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" sorted_sequence"", "" self"", "" out_int32"", "" right"")"
"6191","torch","cpp_torch_namespace_searchsorted_out_out_Tensor_sorted_sequence_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" out"", "" sorted_sequence"", "" self"", "" out_int32"", "" right"")"
"6192","torch","cpp_torch_namespace_searchsorted_sorted_sequence_Tensor_self_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""bool "")","c("" sorted_sequence"", "" self"", "" out_int32"", "" right"")"
"6193","torch","cpp_torch_namespace_mse_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" reduction"")"
"6194","torch","cpp_torch_namespace_mse_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" reduction"")"
"6195","torch","cpp_torch_namespace_mse_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" reduction"")"
"6196","torch","cpp_torch_namespace_mse_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" reduction"")"
"6197","torch","cpp_torch_namespace_l1_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" reduction"")"
"6198","torch","cpp_torch_namespace_l1_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" reduction"")"
"6199","torch","cpp_torch_namespace_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" reduction"")"
"6200","torch","cpp_torch_namespace_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" reduction"")"
"6201","torch","cpp_torch_namespace_multi_margin_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" p"", "" margin"", "" weight"", "" reduction"")"
"6202","torch","cpp_torch_namespace_multi_margin_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" p"", "" margin"", "" weight"", "" reduction"")"
"6203","torch","cpp_torch_namespace_multi_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" p"", "" margin"", "" weight"", "" reduction"")"
"6204","torch","cpp_torch_namespace_multi_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_p_Scalar_margin_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" p"", "" margin"", "" weight"", "" reduction"")"
"6205","torch","cpp_torch_namespace_multilabel_margin_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" reduction"")"
"6206","torch","cpp_torch_namespace_multilabel_margin_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" reduction"")"
"6207","torch","cpp_torch_namespace_multilabel_margin_loss_forward_out_output_Tensor_is_target_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" output"", "" is_target"", "" self"", "" target"", "" reduction"")"
"6208","torch","cpp_torch_namespace_multilabel_margin_loss_forward_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" reduction"")"
"6209","torch","cpp_torch_namespace_multilabel_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" reduction"", "" is_target"")"
"6210","torch","cpp_torch_namespace_multilabel_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_is_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" target"", "" reduction"", "" is_target"")"
"6211","torch","cpp_torch_namespace_nll_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6212","torch","cpp_torch_namespace_nll_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6213","torch","cpp_torch_namespace_nll_loss_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" output"", "" total_weight"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6214","torch","cpp_torch_namespace_nll_loss_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6215","torch","cpp_torch_namespace_nll_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"", "" total_weight"")"
"6216","torch","cpp_torch_namespace_nll_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"", "" total_weight"")"
"6217","torch","cpp_torch_namespace_nll_loss2d_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6218","torch","cpp_torch_namespace_nll_loss2d_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6219","torch","cpp_torch_namespace_nll_loss2d_forward_out_output_Tensor_total_weight_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" output"", "" total_weight"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6220","torch","cpp_torch_namespace_nll_loss2d_forward_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"")"
"6221","torch","cpp_torch_namespace_nll_loss2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"", "" total_weight"")"
"6222","torch","cpp_torch_namespace_nll_loss2d_backward_grad_output_Tensor_self_Tensor_target_Tensor_weight_Tensor_reduction_int64_t_ignore_index_int64_t_total_weight_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" target"", "" weight"", "" reduction"", "" ignore_index"", "" total_weight"")"
"6223","torch","cpp_torch_namespace_smooth_l1_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""double "")","c("" out"", "" self"", "" target"", "" reduction"", "" beta"")"
"6224","torch","cpp_torch_namespace_smooth_l1_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""double "")","c("" self"", "" target"", "" reduction"", "" beta"")"
"6225","torch","cpp_torch_namespace_smooth_l1_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""double "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" reduction"", "" beta"")"
"6226","torch","cpp_torch_namespace_smooth_l1_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t_beta_double","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""double "")","c("" grad_output"", "" self"", "" target"", "" reduction"", "" beta"")"
"6227","torch","cpp_torch_namespace_soft_margin_loss_out_out_Tensor_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" target"", "" reduction"")"
"6228","torch","cpp_torch_namespace_soft_margin_loss_self_Tensor_target_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" target"", "" reduction"")"
"6229","torch","cpp_torch_namespace_soft_margin_loss_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" target"", "" reduction"")"
"6230","torch","cpp_torch_namespace_soft_margin_loss_backward_grad_output_Tensor_self_Tensor_target_Tensor_reduction_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" target"", "" reduction"")"
"6231","torch","cpp_torch_namespace_elu_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" alpha"", "" scale"", "" input_scale"")"
"6232","torch","cpp_torch_namespace_elu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" alpha"", "" scale"", "" input_scale"")"
"6233","torch","cpp_torch_namespace_elu_backward_out_grad_input_Tensor_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" alpha"", "" scale"", "" input_scale"", "" output"")"
"6234","torch","cpp_torch_namespace_elu_backward_grad_output_Tensor_alpha_Scalar_scale_Scalar_input_scale_Scalar_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" alpha"", "" scale"", "" input_scale"", "" output"")"
"6235","torch","cpp_torch_namespace_elu__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" alpha"", "" scale"", "" input_scale"")"
"6236","torch","cpp_torch_namespace_glu_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" out"", "" self"", "" dim"")"
"6237","torch","cpp_torch_namespace_glu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" self"", "" dim"")"
"6238","torch","cpp_torch_namespace_glu_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" dim"")"
"6239","torch","cpp_torch_namespace_glu_backward_grad_output_Tensor_self_Tensor_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" dim"")"
"6240","torch","cpp_torch_namespace_hardsigmoid_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6241","torch","cpp_torch_namespace_hardsigmoid_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6242","torch","cpp_torch_namespace_hardsigmoid__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6243","torch","cpp_torch_namespace_hardsigmoid_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"")"
"6244","torch","cpp_torch_namespace_hardtanh_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" min_val"", "" max_val"")"
"6245","torch","cpp_torch_namespace_hardtanh_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min_val"", "" max_val"")"
"6246","torch","cpp_torch_namespace_hardtanh_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_input"", "" grad_output"", "" self"", "" min_val"", "" max_val"")"
"6247","torch","cpp_torch_namespace_hardtanh_backward_grad_output_Tensor_self_Tensor_min_val_Scalar_max_val_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_output"", "" self"", "" min_val"", "" max_val"")"
"6248","torch","cpp_torch_namespace_hardtanh__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" min_val"", "" max_val"")"
"6249","torch","cpp_torch_namespace_hardswish_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6250","torch","cpp_torch_namespace_hardswish_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6251","torch","cpp_torch_namespace_hardswish__self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6252","torch","cpp_torch_namespace_hardswish_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"")"
"6253","torch","cpp_torch_namespace_leaky_relu_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" negative_slope"")"
"6254","torch","cpp_torch_namespace_leaky_relu_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" negative_slope"")"
"6255","torch","cpp_torch_namespace_leaky_relu_backward_grad_output_Tensor_self_Tensor_negative_slope_Scalar_self_is_result_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""bool "")","c("" grad_output"", "" self"", "" negative_slope"", "" self_is_result"")"
"6256","torch","cpp_torch_namespace_leaky_relu__self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" negative_slope"")"
"6257","torch","cpp_torch_namespace_log_sigmoid_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6258","torch","cpp_torch_namespace_log_sigmoid_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6259","torch","cpp_torch_namespace_log_sigmoid_forward_out_output_Tensor_buffer_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" output"", "" buffer"", "" self"")"
"6260","torch","cpp_torch_namespace_log_sigmoid_forward_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6261","torch","cpp_torch_namespace_log_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_buffer_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" buffer"")"
"6262","torch","cpp_torch_namespace_log_sigmoid_backward_grad_output_Tensor_self_Tensor_buffer_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" buffer"")"
"6263","torch","cpp_torch_namespace_rrelu_with_noise_out_out_Tensor_self_Tensor_noise_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" noise"", "" lower"", "" upper"", "" training"", "" generator"")"
"6264","torch","cpp_torch_namespace_rrelu_with_noise_self_Tensor_noise_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" noise"", "" lower"", "" upper"", "" training"", "" generator"")"
"6265","torch","cpp_torch_namespace_rrelu_with_noise_backward_grad_output_Tensor_self_Tensor_noise_Tensor_lower_Scalar_upper_Scalar_training_bool_self_is_result_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""bool "")","c("" grad_output"", "" self"", "" noise"", "" lower"", "" upper"", "" training"", "" self_is_result"")"
"6266","torch","cpp_torch_namespace_rrelu_with_noise__self_Tensor_noise_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" noise"", "" lower"", "" upper"", "" training"", "" generator"")"
"6267","torch","cpp_torch_namespace_softplus_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" beta"", "" threshold"")"
"6268","torch","cpp_torch_namespace_softplus_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" beta"", "" threshold"")"
"6269","torch","cpp_torch_namespace_softplus_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" beta"", "" threshold"", "" output"")"
"6270","torch","cpp_torch_namespace_softplus_backward_grad_output_Tensor_self_Tensor_beta_Scalar_threshold_Scalar_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchScalar> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" beta"", "" threshold"", "" output"")"
"6271","torch","cpp_torch_namespace_softshrink_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" out"", "" self"", "" lambd"")"
"6272","torch","cpp_torch_namespace_softshrink_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" lambd"")"
"6273","torch","cpp_torch_namespace_softshrink_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_lambd_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_input"", "" grad_output"", "" self"", "" lambd"")"
"6274","torch","cpp_torch_namespace_softshrink_backward_grad_output_Tensor_self_Tensor_lambd_Scalar","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" grad_output"", "" self"", "" lambd"")"
"6275","torch","cpp_torch_namespace_adaptive_avg_pool2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" output_size"")"
"6276","torch","cpp_torch_namespace_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6277","torch","cpp_torch_namespace_mkldnn_adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6278","torch","cpp_torch_namespace__adaptive_avg_pool2d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6279","torch","cpp_torch_namespace__adaptive_avg_pool2d_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"")"
"6280","torch","cpp_torch_namespace_adaptive_avg_pool3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" output_size"")"
"6281","torch","cpp_torch_namespace_adaptive_avg_pool3d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6282","torch","cpp_torch_namespace_adaptive_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"")"
"6283","torch","cpp_torch_namespace_adaptive_avg_pool3d_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"")"
"6284","torch","cpp_torch_namespace_adaptive_max_pool2d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" indices"", "" self"", "" output_size"")"
"6285","torch","cpp_torch_namespace_adaptive_max_pool2d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6286","torch","cpp_torch_namespace_adaptive_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" indices"")"
"6287","torch","cpp_torch_namespace_adaptive_max_pool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" indices"")"
"6288","torch","cpp_torch_namespace_adaptive_max_pool3d_out_out_Tensor_indices_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" indices"", "" self"", "" output_size"")"
"6289","torch","cpp_torch_namespace_adaptive_max_pool3d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"")"
"6290","torch","cpp_torch_namespace_adaptive_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" indices"")"
"6291","torch","cpp_torch_namespace_adaptive_max_pool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" indices"")"
"6292","torch","cpp_torch_namespace_avg_pool2d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" out"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6293","torch","cpp_torch_namespace_avg_pool2d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6294","torch","cpp_torch_namespace_avg_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6295","torch","cpp_torch_namespace_avg_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6296","torch","cpp_torch_namespace_avg_pool3d_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" out"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6297","torch","cpp_torch_namespace_avg_pool3d_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6298","torch","cpp_torch_namespace_avg_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6299","torch","cpp_torch_namespace_avg_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_ceil_mode_bool_count_include_pad_bool_divisor_override_int64_t","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""bool "", ""nullable<int64_t> "")","c("" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" ceil_mode"", "" count_include_pad"", "" divisor_override"")"
"6300","torch","cpp_torch_namespace_fractional_max_pool2d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" output"", "" indices"", "" self"", "" kernel_size"", "" output_size"", "" random_samples"")"
"6301","torch","cpp_torch_namespace_fractional_max_pool2d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" kernel_size"", "" output_size"", "" random_samples"")"
"6302","torch","cpp_torch_namespace_fractional_max_pool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" output_size"", "" indices"")"
"6303","torch","cpp_torch_namespace_fractional_max_pool2d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" kernel_size"", "" output_size"", "" indices"")"
"6304","torch","cpp_torch_namespace_fractional_max_pool3d_out_output_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" output"", "" indices"", "" self"", "" kernel_size"", "" output_size"", "" random_samples"")"
"6305","torch","cpp_torch_namespace_fractional_max_pool3d_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_random_samples_Tensor","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" kernel_size"", "" output_size"", "" random_samples"")"
"6306","torch","cpp_torch_namespace_fractional_max_pool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" output_size"", "" indices"")"
"6307","torch","cpp_torch_namespace_fractional_max_pool3d_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_output_size_IntArrayRef_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" kernel_size"", "" output_size"", "" indices"")"
"6308","torch","cpp_torch_namespace_max_pool2d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" indices"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"6309","torch","cpp_torch_namespace_max_pool2d_with_indices_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"6310","torch","cpp_torch_namespace_max_pool2d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"", "" indices"")"
"6311","torch","cpp_torch_namespace_max_pool2d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"", "" indices"")"
"6312","torch","cpp_torch_namespace_max_pool3d_with_indices_out_out_Tensor_indices_Tensor_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" out"", "" indices"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"6313","torch","cpp_torch_namespace_max_pool3d_with_indices_self_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "")","c("" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"")"
"6314","torch","cpp_torch_namespace_max_pool3d_with_indices_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"", "" indices"")"
"6315","torch","cpp_torch_namespace_max_pool3d_with_indices_backward_grad_output_Tensor_self_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_ceil_mode_bool_indices_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" self"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" ceil_mode"", "" indices"")"
"6316","torch","cpp_torch_namespace_max_unpool2d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" indices"", "" output_size"")"
"6317","torch","cpp_torch_namespace_max_unpool2d_self_Tensor_indices_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" indices"", "" output_size"")"
"6318","torch","cpp_torch_namespace_max_unpool2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" indices"", "" output_size"")"
"6319","torch","cpp_torch_namespace_max_unpool2d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" indices"", "" output_size"")"
"6320","torch","cpp_torch_namespace_max_unpool3d_out_out_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" indices"", "" output_size"", "" stride"", "" padding"")"
"6321","torch","cpp_torch_namespace_max_unpool3d_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" indices"", "" output_size"", "" stride"", "" padding"")"
"6322","torch","cpp_torch_namespace_max_unpool3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" indices"", "" output_size"", "" stride"", "" padding"")"
"6323","torch","cpp_torch_namespace_max_unpool3d_backward_grad_output_Tensor_self_Tensor_indices_Tensor_output_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" indices"", "" output_size"", "" stride"", "" padding"")"
"6324","torch","cpp_torch_namespace_reflection_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" padding"")"
"6325","torch","cpp_torch_namespace_reflection_pad1d_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" padding"")"
"6326","torch","cpp_torch_namespace_reflection_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" padding"")"
"6327","torch","cpp_torch_namespace_reflection_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" padding"")"
"6328","torch","cpp_torch_namespace_reflection_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" padding"")"
"6329","torch","cpp_torch_namespace_reflection_pad2d_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" padding"")"
"6330","torch","cpp_torch_namespace_reflection_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" padding"")"
"6331","torch","cpp_torch_namespace_reflection_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" padding"")"
"6332","torch","cpp_torch_namespace_replication_pad1d_out_out_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" padding"")"
"6333","torch","cpp_torch_namespace_replication_pad1d_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" padding"")"
"6334","torch","cpp_torch_namespace_replication_pad1d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" padding"")"
"6335","torch","cpp_torch_namespace_replication_pad1d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" padding"")"
"6336","torch","cpp_torch_namespace_replication_pad2d_out_out_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" padding"")"
"6337","torch","cpp_torch_namespace_replication_pad2d_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" padding"")"
"6338","torch","cpp_torch_namespace_replication_pad2d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" padding"")"
"6339","torch","cpp_torch_namespace_replication_pad2d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" padding"")"
"6340","torch","cpp_torch_namespace_replication_pad3d_out_out_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" padding"")"
"6341","torch","cpp_torch_namespace_replication_pad3d_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" self"", "" padding"")"
"6342","torch","cpp_torch_namespace_replication_pad3d_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" self"", "" padding"")"
"6343","torch","cpp_torch_namespace_replication_pad3d_backward_grad_output_Tensor_self_Tensor_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "")","c("" grad_output"", "" self"", "" padding"")"
"6344","torch","cpp_torch_namespace_upsample_linear1d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" align_corners"", "" scale_factors"")"
"6345","torch","cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scale_factors"")"
"6346","torch","cpp_torch_namespace_upsample_bilinear2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" align_corners"", "" scale_factors"")"
"6347","torch","cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scale_factors"")"
"6348","torch","cpp_torch_namespace_upsample_trilinear3d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" align_corners"", "" scale_factors"")"
"6349","torch","cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scale_factors"")"
"6350","torch","cpp_torch_namespace_upsample_bicubic2d_input_Tensor_output_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" align_corners"", "" scale_factors"")"
"6351","torch","cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""bool "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scale_factors"")"
"6352","torch","cpp_torch_namespace_upsample_nearest1d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" scale_factors"")"
"6353","torch","cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scale_factors"")"
"6354","torch","cpp_torch_namespace_upsample_nearest2d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" scale_factors"")"
"6355","torch","cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scale_factors"")"
"6356","torch","cpp_torch_namespace_upsample_nearest3d_input_Tensor_output_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<double>> "")","c("" input"", "" output_size"", "" scale_factors"")"
"6357","torch","cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_scale_factors_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""std::vector<int64_t> "", ""nullableVector<std::vector<double>> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scale_factors"")"
"6358","torch","cpp_torch_namespace_upsample_linear1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" align_corners"", "" scales"")"
"6359","torch","cpp_torch_namespace_upsample_linear1d_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "")","c("" self"", "" output_size"", "" align_corners"", "" scales"")"
"6360","torch","cpp_torch_namespace_upsample_linear1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales"")"
"6361","torch","cpp_torch_namespace_upsample_linear1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales"")"
"6362","torch","cpp_torch_namespace_upsample_bilinear2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6363","torch","cpp_torch_namespace_upsample_bilinear2d_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" self"", "" output_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6364","torch","cpp_torch_namespace_upsample_bilinear2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6365","torch","cpp_torch_namespace_upsample_bilinear2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6366","torch","cpp_torch_namespace_upsample_bicubic2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6367","torch","cpp_torch_namespace_upsample_bicubic2d_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" self"", "" output_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6368","torch","cpp_torch_namespace_upsample_bicubic2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6369","torch","cpp_torch_namespace_upsample_bicubic2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_h"", "" scales_w"")"
"6370","torch","cpp_torch_namespace_upsample_trilinear3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" align_corners"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6371","torch","cpp_torch_namespace_upsample_trilinear3d_self_Tensor_output_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" self"", "" output_size"", "" align_corners"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6372","torch","cpp_torch_namespace_upsample_trilinear3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6373","torch","cpp_torch_namespace_upsample_trilinear3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef_align_corners_bool","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""bool "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" align_corners"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6374","torch","cpp_torch_namespace_upsample_nearest1d_out_out_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" scales"")"
"6375","torch","cpp_torch_namespace_upsample_nearest1d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "")","c("" self"", "" output_size"", "" scales"")"
"6376","torch","cpp_torch_namespace_upsample_nearest1d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" scales"")"
"6377","torch","cpp_torch_namespace_upsample_nearest1d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scales"")"
"6378","torch","cpp_torch_namespace_upsample_nearest2d_out_out_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" scales_h"", "" scales_w"")"
"6379","torch","cpp_torch_namespace_upsample_nearest2d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "")","c("" self"", "" output_size"", "" scales_h"", "" scales_w"")"
"6380","torch","cpp_torch_namespace_upsample_nearest2d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" scales_h"", "" scales_w"")"
"6381","torch","cpp_torch_namespace_upsample_nearest2d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scales_h"", "" scales_w"")"
"6382","torch","cpp_torch_namespace_upsample_nearest3d_out_out_Tensor_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" out"", "" self"", "" output_size"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6383","torch","cpp_torch_namespace_upsample_nearest3d_self_Tensor_output_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" self"", "" output_size"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6384","torch","cpp_torch_namespace_upsample_nearest3d_backward_out_grad_input_Tensor_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" output_size"", "" input_size"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6385","torch","cpp_torch_namespace_upsample_nearest3d_backward_grad_output_Tensor_output_size_IntArrayRef_input_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""nullable<double> "", ""nullable<double> "", ""nullable<double> "")","c("" grad_output"", "" output_size"", "" input_size"", "" scales_d"", "" scales_h"", "" scales_w"")"
"6386","torch","cpp_torch_namespace_sigmoid_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" output"")"
"6387","torch","cpp_torch_namespace_sigmoid_backward_grad_output_Tensor_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"")"
"6388","torch","cpp_torch_namespace_logit_backward_out_grad_input_Tensor_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" grad_input"", "" grad_output"", "" self"", "" eps"")"
"6389","torch","cpp_torch_namespace_logit_backward_grad_output_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""nullable<double> "")","c("" grad_output"", "" self"", "" eps"")"
"6390","torch","cpp_torch_namespace_tanh_backward_out_grad_input_Tensor_grad_output_Tensor_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_output"", "" output"")"
"6391","torch","cpp_torch_namespace_tanh_backward_grad_output_Tensor_output_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_output"", "" output"")"
"6392","torch","cpp_torch_namespace_slow_conv_transpose2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" dilation"")"
"6393","torch","cpp_torch_namespace_slow_conv_transpose2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" dilation"")"
"6394","torch","cpp_torch_namespace_slow_conv_transpose2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_weight"", "" grad_bias"", "" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" output_padding"", "" dilation"", "" columns"", "" ones"")"
"6395","torch","cpp_torch_namespace_slow_conv_transpose2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_columns_Tensor_ones_Tensor_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" output_padding"", "" dilation"", "" columns"", "" ones"", "" output_mask"")"
"6396","torch","cpp_torch_namespace_slow_conv_transpose3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" dilation"")"
"6397","torch","cpp_torch_namespace_slow_conv_transpose3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" output_padding"", "" dilation"")"
"6398","torch","cpp_torch_namespace_slow_conv_transpose3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_weight"", "" grad_bias"", "" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" output_padding"", "" dilation"", "" finput"", "" fgrad_input"")"
"6399","torch","cpp_torch_namespace_slow_conv_transpose3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_output_padding_IntArrayRef_dilation_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" output_padding"", "" dilation"", "" finput"", "" fgrad_input"", "" output_mask"")"
"6400","torch","cpp_torch_namespace_thnn_conv2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6401","torch","cpp_torch_namespace_thnn_conv2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6402","torch","cpp_torch_namespace_thnn_conv2d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" output"", "" finput"", "" fgrad_input"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6403","torch","cpp_torch_namespace_thnn_conv2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6404","torch","cpp_torch_namespace_thnn_conv2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_weight"", "" grad_bias"", "" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" finput"", "" fgrad_input"")"
"6405","torch","cpp_torch_namespace_thnn_conv2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" finput"", "" fgrad_input"", "" output_mask"")"
"6406","torch","cpp_torch_namespace_thnn_conv_depthwise2d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6407","torch","cpp_torch_namespace_thnn_conv_depthwise2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6408","torch","cpp_torch_namespace_thnn_conv_depthwise2d_forward_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6409","torch","cpp_torch_namespace_thnn_conv_depthwise2d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6410","torch","cpp_torch_namespace_thnn_conv_depthwise2d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_weight"", "" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" dilation"")"
"6411","torch","cpp_torch_namespace_thnn_conv_depthwise2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool2","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" output_mask"")"
"6412","torch","cpp_torch_namespace_slow_conv3d_out_out_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6413","torch","cpp_torch_namespace_slow_conv3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6414","torch","cpp_torch_namespace_slow_conv3d_forward_out_output_Tensor_finput_Tensor_fgrad_input_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" output"", "" finput"", "" fgrad_input"", "" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6415","torch","cpp_torch_namespace_slow_conv3d_forward_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_bias_Tensor_stride_IntArrayRef_padding_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"")"
"6416","torch","cpp_torch_namespace_slow_conv3d_backward_out_grad_input_Tensor_grad_weight_Tensor_grad_bias_Tensor_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" grad_input"", "" grad_weight"", "" grad_bias"", "" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" finput"", "" fgrad_input"")"
"6417","torch","cpp_torch_namespace_slow_conv3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_finput_Tensor_fgrad_input_Tensor_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" finput"", "" fgrad_input"", "" output_mask"")"
"6418","torch","cpp_torch_namespace_slow_conv_dilated2d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6419","torch","cpp_torch_namespace_slow_conv_dilated2d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" output_mask"")"
"6420","torch","cpp_torch_namespace_slow_conv_dilated3d_self_Tensor_weight_Tensor_kernel_size_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" weight"", "" kernel_size"", "" bias"", "" stride"", "" padding"", "" dilation"")"
"6421","torch","cpp_torch_namespace_slow_conv_dilated3d_backward_grad_output_Tensor_self_Tensor_weight_Tensor_kernel_size_IntArrayRef_stride_IntArrayRef_padding_IntArrayRef_dilation_IntArrayRef_output_mask_stdarraybool3","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<bool> "")","c("" grad_output"", "" self"", "" weight"", "" kernel_size"", "" stride"", "" padding"", "" dilation"", "" output_mask"")"
"6422","torch","cpp_torch_namespace_col2im_out_out_Tensor_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" output_size"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6423","torch","cpp_torch_namespace_col2im_self_Tensor_output_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" output_size"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6424","torch","cpp_torch_namespace_col2im_backward_out_grad_input_Tensor_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6425","torch","cpp_torch_namespace_col2im_backward_grad_output_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_output"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6426","torch","cpp_torch_namespace_im2col_out_out_Tensor_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" out"", "" self"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6427","torch","cpp_torch_namespace_im2col_self_Tensor_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" self"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6428","torch","cpp_torch_namespace_im2col_backward_out_grad_input_Tensor_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_input"", "" grad_output"", "" input_size"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6429","torch","cpp_torch_namespace_im2col_backward_grad_output_Tensor_input_size_IntArrayRef_kernel_size_IntArrayRef_dilation_IntArrayRef_padding_IntArrayRef_stride_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "", ""std::vector<int64_t> "")","c("" grad_output"", "" input_size"", "" kernel_size"", "" dilation"", "" padding"", "" stride"")"
"6430","torch","cpp_torch_namespace_isfinite_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6431","torch","cpp_torch_namespace_isinf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6432","torch","cpp_torch_namespace_isposinf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6433","torch","cpp_torch_namespace_isposinf_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6434","torch","cpp_torch_namespace_isneginf_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6435","torch","cpp_torch_namespace_isneginf_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"")"
"6436","torch","cpp_torch_namespace__add_batch_dim_self_Tensor_batch_dim_int64_t_level_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" batch_dim"", "" level"")"
"6437","torch","cpp_torch_namespace__remove_batch_dim_self_Tensor_level_int64_t_batch_size_int64_t_out_dim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""nullable<int64_t> "")","c("" self"", "" level"", "" batch_size"", "" out_dim"")"
"6438","torch","cpp_torch_namespace_fft_fft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6439","torch","cpp_torch_namespace_fft_ifft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6440","torch","cpp_torch_namespace_fft_rfft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6441","torch","cpp_torch_namespace_fft_irfft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6442","torch","cpp_torch_namespace_fft_hfft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6443","torch","cpp_torch_namespace_fft_ihfft_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""nullable<int64_t> "", ""std::string "")","c("" self"", "" n"", "" dim"", "" norm"")"
"6444","torch","cpp_torch_namespace_fft_fftn_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<int64_t>> "", ""std::string "")","c("" self"", "" s"", "" dim"", "" norm"")"
"6445","torch","cpp_torch_namespace_fft_ifftn_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<int64_t>> "", ""std::string "")","c("" self"", "" s"", "" dim"", "" norm"")"
"6446","torch","cpp_torch_namespace_fft_rfftn_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<int64_t>> "", ""std::string "")","c("" self"", "" s"", "" dim"", "" norm"")"
"6447","torch","cpp_torch_namespace_fft_irfftn_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "", ""nullableVector<std::vector<int64_t>> "", ""std::string "")","c("" self"", "" s"", "" dim"", "" norm"")"
"6448","torch","cpp_torch_namespace_fft_self_Tensor_signal_ndim_int64_t","c(""XPtr<XPtrTorchTensor> "", ""nullable<int64_t> "", ""bool "")","c("" self"", "" signal_ndim"", "" normalized"")"
"6449","torch","cpp_torch_namespace_linalg_det_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6450","torch","cpp_torch_namespace_det_self_Tensor","XPtr<XPtrTorchTensor> "," self"
"6451","torch","cpp_torch_namespace_outer_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec2"")"
"6452","torch","cpp_torch_namespace_outer_out_out_Tensor_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" vec2"")"
"6453","torch","cpp_torch_namespace_ger_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" vec2"")"
"6454","torch","cpp_torch_namespace_ger_out_out_Tensor_self_Tensor_vec2_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" out"", "" self"", "" vec2"")"
"6455","torch","cpp_torch_namespace_linalg_norm_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" ord"", "" dim"", "" keepdim"", "" dtype"")"
"6456","torch","cpp_torch_namespace_linalg_norm_self_Tensor_ord_stdstring","c(""XPtr<XPtrTorchTensor> "", ""std::string "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" self"", "" ord"", "" dim"", "" keepdim"", "" dtype"")"
"6457","torch","cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" ord"", "" dim"", "" keepdim"", "" dtype"")"
"6458","torch","cpp_torch_namespace_linalg_norm_out_out_Tensor_self_Tensor_ord_stdstring","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""std::string "", ""nullableVector<std::vector<int64_t>> "", ""bool "", ""XPtr<XPtrTorch> "")","c("" out"", "" self"", "" ord"", "" dim"", "" keepdim"", "" dtype"")"
"6459","torch","cpp_torch_namespace__test_serialization_subcmul_self_Tensor_other_Tensor","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchScalar> "")","c("" self"", "" other"", "" alpha"")"
"6460","torch","cpp_torch_namespace__test_optional_intlist_values_Tensor_addends_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "")","c("" values"", "" addends"")"
"6461","torch","cpp_torch_namespace__test_optional_filled_intlist_values_Tensor_addends_IntArrayRef","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<int64_t>> "")","c("" values"", "" addends"")"
"6462","torch","cpp_torch_namespace__test_optional_floatlist_values_Tensor_addends_ArrayRefdouble","c(""XPtr<XPtrTorchTensor> "", ""nullableVector<std::vector<double>> "")","c("" values"", "" addends"")"
"6463","torch","cpp_generator_current_seed","XPtr<XPtrTorchGenerator> "," generator"
"6464","torch","cpp_generator_set_current_seed","c(""XPtr<XPtrTorchGenerator> "", ""std::string "")","c("" generator"", "" seed"")"
"6465","torch","cpp_torch_manual_seed","std::string "," seed"
"6466","torch","enquos0","Environment "," env"
"6467","torch","evaluate_slices","c(""std::vector<RObject> "", ""List "")","c("" quosures"", "" mask"")"
"6468","torch","Tensor_slice","c(""XPtr<XPtrTorchTensor> "", ""Environment "", ""bool "", ""List "")","c("" self"", "" e"", "" drop"", "" mask"")"
"6469","torch","Tensor_slice_put","c(""XPtr<XPtrTorchTensor> "", ""Environment "", ""SEXP "", ""List "")","c("" self"", "" e"", "" rhs"", "" mask"")"
"6470","torch","cpp_lantern_configure","int "," log"
"6471","torch","cpp_lantern_init","std::string "," path"
"6472","torch","cpp_layout_to_string","XPtr<XPtrTorchLayout> "," layout_ptr"
"6473","torch","cpp_memory_format_to_string","XPtr<XPtrTorchMemoryFormat> "," x"
"6474","torch","cpp_nn_utils_rnn_pack_padded_sequence","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""bool "", ""bool "")","c("" input"", "" lengths"", "" batch_first"", "" enforce_sorted"")"
"6475","torch","cpp_nn_utils_pack_sequence","c(""XPtr<XPtrTorchTensorList> "", ""bool "")","c("" sequence"", "" enforce_sorted"")"
"6476","torch","cpp_nn_utils_pad_packed_sequence","c(""XPtr<XPtrTorchPackedSequence> "", ""bool "", ""double "", ""XPtr<XPtrTorchoptional_int64_t> "")","c("" sequence"", "" batch_first"", "" padding_value"", "" total_length"")"
"6477","torch","cpp_nn_utils_pad_sequence","c(""XPtr<XPtrTorchTensorList> "", ""bool "", ""double "")","c("" sequence"", "" batch_first"", "" padding_value"")"
"6478","torch","cpp_nn_utils_PackedSequence_new","c(""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "", ""XPtr<XPtrTorchTensor> "")","c("" data"", "" batch_sizes"", "" sorted_indices"", "" unsorted_indices"")"
"6479","torch","cpp_nn_utils_PackedSequence_data","XPtr<XPtrTorchPackedSequence> "," x"
"6480","torch","cpp_nn_utils_PackedSequence_batch_sizes","XPtr<XPtrTorchPackedSequence> "," x"
"6481","torch","cpp_nn_utils_PackedSequence_sorted_indices","XPtr<XPtrTorchPackedSequence> "," x"
"6482","torch","cpp_nn_utils_PackedSequence_unsorted_indices","XPtr<XPtrTorchPackedSequence> "," x"
"6483","torch","cpp_qscheme_to_string","XPtr<XPtrTorchQScheme> "," x"
"6484","torch","cpp_Tensor_is_quantized","XPtr<XPtrTorchTensor> "," self"
"6485","torch","cpp_tensor_save","XPtr<XPtrTorchTensor> "," x"
"6486","torch","cpp_tensor_load","std::string "," s"
"6487","torch","cpp_load_state_dict","std::string "," path"
"6488","torch","cpp_torch_scalar","SEXP "," x"
"6489","torch","cpp_torch_scalar_dtype","XPtr<XPtrTorchScalar> "," self"
"6490","torch","cpp_torch_scalar_to_int","XPtr<XPtrTorchScalar> "," self"
"6491","torch","cpp_torch_scalar_to_double","XPtr<XPtrTorchScalar> "," self"
"6492","torch","cpp_torch_scalar_to_float","XPtr<XPtrTorchScalar> "," self"
"6493","torch","cpp_torch_scalar_to_bool","XPtr<XPtrTorchScalar> "," self"
"6494","torch","cpp_stack_push_back_Tensor","c(""XPtr<XPtrTorchStack> "", ""XPtr<XPtrTorchTensor> "")","c("" self"", "" x"")"
"6495","torch","cpp_stack_push_back_int64_t","c(""XPtr<XPtrTorchStack> "", ""int64_t "")","c("" self"", "" x"")"
"6496","torch","cpp_stack_push_back_TensorList","c(""XPtr<XPtrTorchStack> "", ""XPtr<XPtrTorchTensorList> "")","c("" self"", "" x"")"
"6497","torch","cpp_stack_to_r","XPtr<XPtrTorchStack> "," self"
"6498","torch","cpp_Tensor_storage","XPtr<XPtrTorchTensor> "," self"
"6499","torch","cpp_Tensor_has_storage","XPtr<XPtrTorchTensor> "," self"
"6500","torch","cpp_Storage_data_ptr","XPtr<XPtrTorchStorage> "," self"
"6501","torch","cpp_torch_tensor_print","c(""XPtr<XPtrTorchTensor> "", ""int "")","c("" x"", "" n"")"
"6502","torch","cpp_torch_tensor_dtype","XPtr<XPtrTorchTensor> "," x"
"6503","torch","cpp_torch_tensor","c(""SEXP "", ""std::vector<std::int64_t> "", ""XPtr<XPtrTorchTensorOptions> "", ""bool "", ""bool "")","c("" x"", "" dim"", "" options"", "" requires_grad"", "" is_integer64"")"
"6504","torch","cpp_as_array","XPtr<XPtrTorchTensor> "," x"
"6505","torch","cpp_tensor_element_size","XPtr<XPtrTorchTensor> "," x"
"6506","torch","cpp_tensor_dim","XPtr<XPtrTorchTensor> "," x"
"6507","torch","cpp_tensor_numel","XPtr<XPtrTorchTensor> "," x"
"6508","torch","cpp_tensor_device","XPtr<XPtrTorchTensor> "," self"
"6509","torch","cpp_tensor_is_undefined","XPtr<XPtrTorchTensor> "," self"
"6510","torch","cpp_tensor_is_contiguous","XPtr<XPtrTorchTensor> "," self"
"6511","torch","cpp_tensor_has_names","XPtr<XPtrTorchTensor> "," self"
"6512","torch","cpp_tensor_names","XPtr<XPtrTorchTensor> "," self"
"6513","torch","cpp_set_num_threads","int "," n"
"6514","torch","cpp_set_num_interop_threads","int "," n"
"6515","torch","cpp_torch_tensor_list","const List& "," x"
"6516","torch","cpp_tensor_list_to_r_list","XPtr<XPtrTorchTensorList> "," x"
"6517","torch","cpp_torch_tensor_options","c(""Nullable<XPtr<XPtrTorchDtype>> "", ""Nullable<XPtr<XPtrTorch>> "", ""Nullable<XPtr<XPtrTorch>> "", ""Nullable<bool> "", ""Nullable<bool> "")","c("" dtype_ptr"", "" layout_ptr"", "" device_ptr"", "" requires_grad"", "" pinned_memory"")"
"6518","torch","cpp_torch_tensor_options_print","XPtr<XPtrTorchTensorOptions> "," x"
"6519","torch","cpp_trace_function","c(""Function "", ""XPtr<XPtrTorchStack> "", ""XPtr<XPtrTorchCompilationUnit> "")","c("" fn"", "" inputs"", "" compilation_unit"")"
"6520","torch","cpp_save_traced_fn","c(""XPtr<XPtrTorch> "", ""std::string "")","c("" fn"", "" filename"")"
"6521","torch","cpp_call_traced_fn","c(""XPtr<XPtrTorch> "", ""XPtr<XPtrTorchStack> "")","c("" fn"", "" inputs"")"
"6522","torch","cpp_traced_fn_graph_print","XPtr<XPtrTorch> "," fn"
"6523","torch","cpp_jit_load","std::string "," path"
"6524","torch","cpp_call_jit_script","c(""XPtr<XPtrTorchJITModule> "", ""XPtr<XPtrTorchStack> "")","c("" module"", "" inputs"")"
"6525","torch","cpp_optional_int64_t","Nullable<int64_t> "," x"
"6526","torch","cpp_clean_names","c(""std::string "", ""std::vector<std::string> "")","c("" x"", "" r"")"
"6527","torch","cpp_suffix","c(""std::vector<std::string> "", ""std::vector<std::string> "")","c("" arg_names"", "" arg_types"")"
"6528","torch","cpp_make_function_name","c(""std::string "", ""std::vector<std::string> "", ""std::vector<std::string> "", ""std::string "", ""std::vector<std::string> "")","c("" method_name"", "" arg_names"", "" arg_types"", "" type"", "" remove_characters"")"
"6529","torch","cpp_torch_variable_list","const List& "," x"
"6530","torch","cpp_variable_list_to_r_list","XPtr<XPtrTorchvariable_list> "," x"
"6531","touch","rcpp_split_string","const CharacterVector& "," x"
"6532","touch","rcpp_strsplit","const CharacterVector& "," x"
"6533","touch","rcpp_strcat","const List& "," x"
"6534","touch","rcpp_gem","c(""const std::vector<std::string>& "", ""const int& "", ""bool "")","c("" dx"", "" which_map"", "" cache"")"
"6535","touch","init_gem_f17","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6536","touch","init_gem_b17","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6537","touch","init_gem_rf17","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6538","touch","init_gem_rb17","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6539","touch","init_gem_f18","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6540","touch","init_gem_b18","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6541","touch","init_gem_rf18","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6542","touch","init_gem_rb18","c(""const std::vector<std::string>& "", ""const std::vector<std::string>& "")","c("" keys"", "" values"")"
"6543","tracerer","calc_act_cpp","c(""const std::vector<double>& "", ""const int "")","c("" sample"", "" sample_interval"")"
"6544","tracerer","calc_std_error_of_mean_cpp","const std::vector<double>& "," sample"
"6545","tree.interpreter","featureContribTreeCpp","c(""const List& "", ""const int "", ""const DataFrame& "")","c("" tidyRF"", "" tree"", "" X"")"
"6546","tree.interpreter","trainsetBiasTreeCpp","c(""const List& "", ""const int "")","c("" tidyRF"", "" tree"")"
"6547","tree.interpreter","tidyRFCpp_randomForest","c(""const List& "", ""const DataFrame& "", ""const DataFrame& "", ""const List& "")","c("" rfobj"", "" trainX"", "" trainY"", "" inbag_counts_ensemble"")"
"6548","tree.interpreter","tidyRFCpp_ranger","c(""const List& "", ""const DataFrame& "", ""const DataFrame& "", ""const List& "")","c("" rfobj"", "" trainX"", "" trainY"", "" inbag_counts_ensemble"")"
"6549","treeclim","corfun","c(""SEXP "", ""SEXP "")","c("" x"", "" y"")"
"6550","treeclim","corfunexact","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" y"", "" y0"")"
"6551","treeclim","corfunnoboot","c(""SEXP "", ""SEXP "")","c("" x"", "" y"")"
"6552","treeclim","pcor","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x1"", "" x2"", "" y"", "" y0"")"
"6553","treeclim","respo","c(""SEXP "", ""SEXP "")","c("" x"", "" y"")"
"6554","treeclim","respoexact","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" x"", "" y"", "" y0"")"
"6555","treeducken","sim_sptree_bdp","c(""SEXP "", ""SEXP "", ""SEXP "", ""NumericVector "", ""NumericVector "")","c("" sbr"", "" sdr"", "" numbsim"", "" n_tips"", "" gsa_stop_mult"")"
"6556","treeducken","sim_sptree_bdp_time","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" sbr"", "" sdr"", "" numbsim"", "" t"")"
"6557","treeducken","sim_locustree_bdp","c(""List "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""String "")","c("" species_tree"", "" gbr"", "" gdr"", "" lgtr"", "" num_loci"", "" transfer_type"")"
"6558","treeducken","sim_cophylo_bdp","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" hbr"", "" hdr"", "" sbr"", "" sdr"", "" host_exp_rate"", "" cosp_rate"", "" time_to_sim"", "" numbsim"")"
"6559","treeducken","sim_multispecies_coal","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""LogicalVector "", ""NumericVector "", ""NumericVector "")","c("" species_tree"", "" ne"", "" num_sampled_individuals"", "" num_genes"", "" rescale"", "" mutation_rate"", "" generation_time"")"
"6560","treespace","updateDistancesWithCombinations","c(""NumericVector& "", ""NumericVector& "", ""IntegerVector& "", ""IntegerVector& "", ""IntegerVector& "", ""double "", ""int "")","c("" length_root_distances"", "" topological_root_distances"", "" left_partition"", "" right_partition"", "" index_offsets"", "" distance_to_root"", "" edges_to_root"")"
"6561","triebeard","add_trie_string","c(""SEXP "", ""CharacterVector "", ""CharacterVector "")","c("" trie"", "" keys"", "" values"")"
"6562","triebeard","add_trie_integer","c(""SEXP "", ""CharacterVector "", ""IntegerVector "")","c("" trie"", "" keys"", "" values"")"
"6563","triebeard","add_trie_numeric","c(""SEXP "", ""CharacterVector "", ""NumericVector "")","c("" trie"", "" keys"", "" values"")"
"6564","triebeard","add_trie_logical","c(""SEXP "", ""CharacterVector "", ""LogicalVector "")","c("" trie"", "" keys"", "" values"")"
"6565","triebeard","remove_trie_string","c(""SEXP "", ""CharacterVector "")","c("" trie"", "" keys"")"
"6566","triebeard","remove_trie_integer","c(""SEXP "", ""CharacterVector "")","c("" trie"", "" keys"")"
"6567","triebeard","remove_trie_numeric","c(""SEXP "", ""CharacterVector "")","c("" trie"", "" keys"")"
"6568","triebeard","remove_trie_logical","c(""SEXP "", ""CharacterVector "")","c("" trie"", "" keys"")"
"6569","triebeard","radix_create_string","c(""std::vector < std::string > "", ""std::vector < std::string > "")","c("" keys"", "" values"")"
"6570","triebeard","radix_create_integer","c(""std::vector < std::string > "", ""std::vector < int > "")","c("" keys"", "" values"")"
"6571","triebeard","radix_create_numeric","c(""std::vector < std::string > "", ""std::vector < double > "")","c("" keys"", "" values"")"
"6572","triebeard","radix_create_logical","c(""std::vector < std::string > "", ""std::vector < bool > "")","c("" keys"", "" values"")"
"6573","triebeard","get_keys_string","SEXP "," radix"
"6574","triebeard","get_keys_integer","SEXP "," radix"
"6575","triebeard","get_keys_numeric","SEXP "," radix"
"6576","triebeard","get_keys_logical","SEXP "," radix"
"6577","triebeard","get_values_string","SEXP "," radix"
"6578","triebeard","get_values_integer","SEXP "," radix"
"6579","triebeard","get_values_numeric","SEXP "," radix"
"6580","triebeard","get_values_logical","SEXP "," radix"
"6581","triebeard","greedy_string","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6582","triebeard","greedy_integer","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6583","triebeard","greedy_numeric","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6584","triebeard","greedy_logical","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6585","triebeard","radix_len_string","SEXP "," radix"
"6586","triebeard","radix_len_integer","SEXP "," radix"
"6587","triebeard","radix_len_numeric","SEXP "," radix"
"6588","triebeard","radix_len_logical","SEXP "," radix"
"6589","triebeard","longest_string","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6590","triebeard","longest_integer","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6591","triebeard","longest_numeric","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6592","triebeard","longest_logical","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6593","triebeard","prefix_string","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6594","triebeard","prefix_integer","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6595","triebeard","prefix_numeric","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6596","triebeard","prefix_logical","c(""SEXP "", ""CharacterVector "")","c("" radix"", "" to_match"")"
"6597","triebeard","trie_str_string","SEXP "," radix"
"6598","triebeard","trie_str_integer","SEXP "," radix"
"6599","triebeard","trie_str_numeric","SEXP "," radix"
"6600","triebeard","trie_str_logical","SEXP "," radix"
"6601","trustOptim","sparseTR","c(""NumericVector "", ""Function "", ""Function "", ""Function "", ""const List "")","c("" start"", "" fn"", "" gr"", "" hs"", "" control"")"
"6602","trustOptim","quasiTR","c(""NumericVector "", ""Function "", ""Function "", ""const List "")","c("" start"", "" fn"", "" gr"", "" control"")"
"6603","tvd","tvd_1d_condat_worker","c(""NumericVector& "", ""double "")","c("" y"", "" lambda"")"
"6604","uFTIR","cderivate_mat","c(""arma::mat "", ""arma::rowvec "")","c("" X"", "" v"")"
"6605","uFTIR","cderivate_cube","c(""arma::cube "", ""arma::vec "")","c("" myCube"", "" v"")"
"6606","uFTIR","cmosaic_clusterfind","c(""arma::cube "", ""arma::rowvec "")","c("" sam_match"", "" clusters"")"
"6607","uFTIR","cmosaic_compose","c(""StringVector "", ""arma::mat "", ""int "", ""int "", ""int "")","c("" file"", "" xy_pos"", "" xmax"", "" ymax"", "" zmax"")"
"6608","uFTIR","csam_load","char const* "," filename"
"6609","uFTIR","csmooth_sam","c(""arma::cube "", ""int "", ""int "", ""int "")","c("" myCube"", "" wind"", "" bins"", "" nslices"")"
"6610","uFTIR","gdal_polygonize","c(""const char* "", ""const char* "", ""const char* "", ""const char* "")","c("" raster"", "" folder"", "" layer"", "" field"")"
"6611","uFTIR","mosaic_read_chunk","c(""char const* "", ""int "", ""int "")","c("" filename"", "" fpa"", "" wl"")"
"6612","uFTIR","mosaic_sam_write","c(""arma::cube "", ""char const* "")","c("" A"", "" filename"")"
"6613","uFTIR","read_cube","std::string "," x"
"6614","uFTIR","sam_internal","c(""arma::mat& "", ""arma::mat& "")","c("" x"", "" em"")"
"6615","uFTIR","sam_main","c(""arma::cube "", ""arma::mat "")","c("" myCube"", "" em"")"
"6616","uFTIR","sam_match","arma::cube "," myCube"
"6617","uFTIR","ctile_sam","c(""arma::cube "", ""arma::mat "")","c("" myCube"", "" em"")"
"6618","ulid","ts_generate","DatetimeVector "," tsv"
"6619","ulid","ULIDgenerate","long "," n"
"6620","ulid","unmarshal","std::vector<std::string> "," ulids"
"6621","unine","finnish_stemmer","StringVector "," words"
"6622","unine","french_stemmer","StringVector "," words"
"6623","unine","german_stemmer","StringVector "," words"
"6624","unine","italian_stemmer","StringVector "," words"
"6625","unine","portuguese_stemmer","StringVector "," words"
"6626","unine","spanish_stemmer","StringVector "," words"
"6627","unine","swedish_stemmer","StringVector "," words"
"6628","valr","bed12toexons_impl","DataFrame "," x"
"6629","valr","closest_impl","c(""ValrGroupedDataFrame "", ""ValrGroupedDataFrame "", ""IntegerVector "", ""IntegerVector "", ""const std::string& "", ""const std::string& "")","c("" x"", "" y"", "" grp_idx_x"", "" grp_idx_y"", "" suffix_x"", "" suffix_y"")"
"6630","valr","complement_impl","c(""ValrGroupedDataFrame "", ""DataFrame "")","c("" gdf"", "" genome"")"
"6631","valr","coverage_impl","c(""ValrGroupedDataFrame "", ""ValrGroupedDataFrame "", ""IntegerVector "", ""IntegerVector "")","c("" x"", "" y"", "" x_grp_indexes"", "" y_grp_indexes"")"
"6632","valr","dist_impl","c(""ValrGroupedDataFrame "", ""ValrGroupedDataFrame "", ""IntegerVector "", ""IntegerVector "", ""std::string "")","c("" x"", "" y"", "" x_grp_indexes"", "" y_grp_indexes"", "" distcalc"")"
"6633","valr","flank_impl","c(""DataFrame "", ""DataFrame "", ""double "", ""double "", ""double "", ""bool "", ""bool "", ""bool "")","c("" df"", "" genome"", "" both"", "" left"", "" right"", "" fraction"", "" stranded"", "" trim"")"
"6634","valr","intersect_impl","c(""ValrGroupedDataFrame "", ""ValrGroupedDataFrame "", ""IntegerVector "", ""IntegerVector "", ""bool "", ""const std::string& "", ""const std::string& "")","c("" x"", "" y"", "" x_grp_indexes"", "" y_grp_indexes"", "" invert"", "" suffix_x"", "" suffix_y"")"
"6635","valr","makewindows_impl","c(""DataFrame "", ""int "", ""int "", ""int "", ""bool "")","c("" df"", "" win_size"", "" num_win"", "" step_size"", "" reverse"")"
"6636","valr","merge_impl","c(""ValrGroupedDataFrame "", ""int "", ""bool "")","c("" gdf"", "" max_dist"", "" collapse"")"
"6637","valr","partition_impl","c(""const ValrGroupedDataFrame& "", ""int "")","c("" gdf"", "" max_dist"")"
"6638","valr","random_impl","c(""DataFrame "", ""int "", ""int "", ""int "")","c("" genome"", "" length"", "" n"", "" seed"")"
"6639","valr","shuffle_impl","c(""DataFrame "", ""DataFrame "", ""bool "", ""int "", ""int "")","c("" df"", "" incl"", "" within"", "" max_tries"", "" seed"")"
"6640","valr","subtract_impl","c(""ValrGroupedDataFrame "", ""ValrGroupedDataFrame "", ""IntegerVector "", ""IntegerVector "")","c("" gdf_x"", "" gdf_y"", "" x_grp_indexes"", "" y_grp_indexes"")"
"6641","valuer","calc_account","c(""const NumericVector& "", ""const NumericVector& "", ""double "", ""double "", ""const NumericVector& "")","c("" spot"", "" ben"", "" fee"", "" barrier"", "" penalty"")"
"6642","varband","soft_threshold","c(""const arma::vec& "", ""const double "", ""const int "", ""arma::vec& "")","c("" beta"", "" lam"", "" r"", "" result"")"
"6643","varband","close_update","c(""const arma::mat& "", ""const arma::mat& "", ""const int "", ""const double "", ""const arma::vec& "", ""const arma::vec& "", ""arma::vec& "")","c("" S"", "" S_inv"", "" r"", "" rho"", "" u"", "" gamma"", "" res"")"
"6644","varband","inverse_update","c(""const arma::mat& "", ""double "", ""arma::mat& "")","c("" S"", "" rho"", "" S_inv"")"
"6645","varband","elliproj_u","c(""const arma::vec& "", ""const double "", ""arma::vec& "")","c("" y"", "" tau"", "" pp"")"
"6646","varband","rootfind","c(""const arma::vec& "", ""const arma::vec& "", ""double "", ""int "")","c("" pp"", "" ww"", "" tau"", "" l"")"
"6647","varband","elliproj_w","c(""const arma::vec& "", ""const double "", ""arma::vec& "")","c("" y"", "" tau"", "" pp"")"
"6648","varband","rowadmm","c(""const arma::mat& "", ""const arma::vec& "", ""const double "", ""const bool "", ""double "", ""const int "")","c("" S"", "" init_row"", "" lambda"", "" w"", "" tol"", "" itermax"")"
"6649","varband","rowadmm_lasso","c(""const arma::mat& "", ""const arma::vec& "", ""const double "", ""double "", ""const int "")","c("" S"", "" init_row"", "" lambda"", "" tol"", "" itermax"")"
"6650","varband","varband","c(""arma::mat "", ""double "", ""arma::mat "", ""bool "", ""bool "")","c("" S"", "" lambda"", "" init"", "" w"", "" lasso"")"
"6651","vcpen","minque_Rcpp","c(""arma::vec& "", ""arma::mat& "", ""const List& "", ""arma::vec "")","c("" y"", "" X"", "" Kerns"", "" vc"")"
"6652","vcpen","vcpen_Rcpp","c(""arma::vec& "", ""arma::mat& "", ""const List& "", ""arma::vec "", ""arma::vec "", ""double "", ""arma::vec "", ""int "", ""bool "")","c("" y"", "" X"", "" Kerns"", "" lambda_factor"", "" lambda_grid"", "" frac1"", "" sigma2_init"", "" maxiter"", "" print_iter"")"
"6653","vdiffr","compare_files","c(""std::string "", ""std::string "")","c("" expected"", "" test"")"
"6654","vdiffr","test_string_width","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" string"", "" font_size"", "" font_file"")"
"6655","vdiffr","test_string_info","c(""SEXP "", ""SEXP "", ""SEXP "")","c("" string"", "" font_size"", "" font_file"")"
"6656","vinereg","select_dvine_cpp","c(""const Eigen::MatrixXd& "", ""std::vector<std::string> "", ""std::string "", ""std::string "", ""double "", ""std::string "", ""const Eigen::VectorXd& "", ""double "", ""bool "", ""size_t "", ""const std::vector<std::string>& "")","c("" data"", "" family_set"", "" par_method"", "" nonpar_method"", "" mult"", "" selcrit"", "" weights"", "" psi0"", "" preselect_families"", "" cores"", "" var_types"")"
"6657","vinereg","cond_quantile_cpp","c(""const Eigen::VectorXd& "", ""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" alpha"", "" u"", "" vinecop_r"", "" num_threads"")"
"6658","vinereg","cond_dist_cpp","c(""const Eigen::MatrixXd& "", ""const List& "", ""size_t "")","c("" u"", "" vinecop_r"", "" num_threads"")"
"6659","viscomplexr","mandelbrot","c(""std::complex<double> "", ""int "")","c("" z"", "" itDepth"")"
"6660","viscomplexr","juliaNormal","c(""std::complex<double> "", ""std::complex<double> "", ""double "", ""int "")","c("" z"", "" c"", "" R_esc"", "" itDepth"")"
"6661","viscomplexr","blaschkeProd","c(""std::complex<double> "", ""std::vector<std::complex<double>> "")","c("" z"", "" a"")"
"6662","viscomplexr","jacobiTheta","c(""std::complex<double> "", ""std::complex<double> "", ""int "")","c("" z"", "" tau"", "" nn"")"
"6663","vita","Rcpp_VarImpCVLReg","c(""NumericMatrix "", ""NumericVector "", ""int "", ""int "", ""int "", ""int "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""IntegerMatrix "", ""IntegerVector "", ""IntegerVector "", ""int "")","c("" x_l"", "" y_l"", "" nsample"", "" mdim"", "" nTree"", "" nPerm"", "" lDaughter"", "" rDaughter"", "" nodestatus"", "" split"", "" nodepred"", "" splitVar"", "" ndbigtree"", "" cat"", "" maxcat"")"
"6664","vita","Rcpp_VarImpCVLCL","c(""NumericMatrix "", ""IntegerVector "", ""int "", ""int "", ""int "", ""int "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""NumericMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerVector "", ""IntegerVector "", ""int "")","c("" x_l"", "" y_l"", "" nsample"", "" mdim"", "" nTree"", "" nclass"", "" lDaughter"", "" rDaughter"", "" nodestatus"", "" xbestsplit"", "" nodeclass"", "" bestvar"", "" ndbigtree"", "" cat"", "" maxcat"")"
"6665","vita","Rcpp_compVarImpReg","c(""NumericMatrix "", ""NumericVector "", ""int "", ""int "", ""int "", ""int "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""NumericMatrix "", ""NumericMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerVector "", ""IntegerVector "", ""int "")","c("" x"", "" y"", "" nsample"", "" mdim"", "" nTree"", "" nPerm"", "" lDaughter"", "" rDaughter"", "" nodestatus"", "" split"", "" nodepred"", "" splitVar"", "" inm"", "" ndbigtree"", "" cat"", "" maxcat"")"
"6666","vita","Rcpp_compVarImpCL","c(""NumericMatrix "", ""IntegerVector "", ""int "", ""int "", ""int "", ""int "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""NumericMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerMatrix "", ""IntegerVector "", ""IntegerVector "", ""int "")","c("" x"", "" y"", "" nsample"", "" mdim"", "" nTree"", "" nclass"", "" lDaughter"", "" rDaughter"", "" nodestatus"", "" xbestsplit"", "" nodeclass"", "" bestvar"", "" inbag"", "" ndbigtree"", "" cat"", "" maxcat"")"
"6667","wCorr","cont","c(""arma::vec "", ""arma::vec "", ""const arma::vec& "")","c("" x"", "" y"", "" w"")"
"6668","wCorr","wrankFast","c(""arma::vec "", ""const arma::vec& "")","c("" x"", "" w"")"
"6669","wCorr","fixxFast","c(""const arma::vec "", ""const arma::vec "")","c("" x"", "" w"")"
"6670","wCorr","mapThetaFast","const arma::vec& "," v"
"6671","wCorr","optFcFast","c(""const arma::vec& "", ""const arma::vec& "", ""arma::vec "", ""const arma::vec& "", ""double "", ""const arma::vec& "")","c("" par"", "" x"", "" w"", "" M"", "" temp3"", "" theta0"")"
"6672","wCorr","optFFast","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec "", ""const arma::vec& "", ""double "")","c("" par"", "" x"", "" w"", "" M"", "" temp3"")"
"6673","wCorr","imapThetaFast2","const arma::vec& "," theta0"
"6674","wCorr","mainF","c(""const arma::vec& "", ""const arma::vec& "", ""arma::vec "", ""const arma::vec& "")","c("" x"", "" M"", "" w"", "" theta0"")"
"6675","wCorr","imapThetaFast","const arma::vec& "," theta0"
"6676","wCorr","fscale_cutsFast","const arma::vec& "," par"
"6677","wCorr","tableFast","c(""const arma::vec& "", ""const arma::vec& "", ""const arma::vec& "")","c("" x"", "" y"", "" w"")"
"6678","wCorr","discord","const arma::mat& "," xytab"
"6679","wCorr","lnlFast","c(""const arma::mat& "", ""const arma::mat& "")","c("" xytab"", "" pm"")"
"6680","walker","predict_walker","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::vec "", ""const arma::mat "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::uword "", ""const arma::uword "", ""const arma::uword "", ""const arma::uword "", ""const bool "")","c("" sigma_rw1"", "" sigma_rw2"", "" sigma_y"", "" beta_fixed"", "" beta_rw"", "" slope"", "" xreg_fixed"", "" xreg_rw"", "" n"", "" k"", "" k_rw1"", "" k_rw2"", "" response"")"
"6681","walker","predict_walker_glm","c(""const arma::mat& "", ""const arma::mat& "", ""const arma::mat "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::mat& "", ""const arma::vec& "", ""const int "", ""arma::vec "", ""const arma::uword "", ""const arma::uword "", ""const arma::uword "", ""const arma::uword "", ""const int "")","c("" sigma_rw1"", "" sigma_rw2"", "" beta_fixed"", "" beta_rw"", "" slope"", "" xreg_fixed"", "" xreg_rw"", "" u"", "" distribution"", "" weights"", "" n"", "" k"", "" k_rw1"", "" k_rw2"", "" type"")"
"6682","wbsd","rrank","c(""Eigen::MatrixXd "", ""double "")","c("" A"", "" tol"")"
"6683","wbsd","rkernel","c(""Eigen::MatrixXd "", ""double "")","c("" A"", "" tol"")"
"6684","wdm","wdm_cpp","c(""const std::vector<double>& "", ""const std::vector<double>& "", ""std::string "", ""const std::vector<double>& "", ""bool "")","c("" x"", "" y"", "" method"", "" weights"", "" remove_missing"")"
"6685","wdm","wdm_mat_cpp","c(""const NumericMatrix& "", ""std::string "", ""const std::vector<double>& "", ""bool "")","c("" x"", "" method"", "" weights"", "" remove_missing"")"
"6686","wdm","indep_test_cpp","c(""const std::vector<double>& "", ""const std::vector<double>& "", ""std::string "", ""const std::vector<double>& "", ""bool "", ""std::string "")","c("" x"", "" y"", "" method"", "" weights"", "" remove_missing"", "" alternative"")"
"6687","websocket","wsCreate","c(""std::string "", ""int "", ""Environment "", ""Environment "", ""CharacterVector "", ""CharacterVector "", ""int "")","c("" uri"", "" loop_id"", "" robjPublic"", "" robjPrivate"", "" accessLogChannels"", "" errorLogChannels"", "" maxMessageSize"")"
"6688","websocket","wsAppendHeader","c(""SEXP "", ""std::string "", ""std::string "")","c("" wsc_xptr"", "" key"", "" value"")"
"6689","websocket","wsAddProtocols","c(""SEXP "", ""CharacterVector "")","c("" wsc_xptr"", "" protocols"")"
"6690","websocket","wsConnect","SEXP "," wsc_xptr"
"6691","websocket","wsSend","c(""SEXP "", ""SEXP "")","c("" wsc_xptr"", "" msg"")"
"6692","websocket","wsClose","c(""SEXP "", ""uint16_t "", ""std::string "")","c("" wsc_xptr"", "" code"", "" reason"")"
"6693","websocket","wsProtocol","SEXP "," wsc_xptr"
"6694","websocket","wsState","SEXP "," wsc_xptr"
"6695","websocket","wsUpdateLogChannels","c(""SEXP "", ""std::string "", ""std::string "", ""CharacterVector "")","c("" wsc_xptr"", "" accessOrError"", "" setOrClear"", "" logChannels"")"
"6696","womblR","JointCovarianceCube","c(""arma::cube const& "", ""arma::vec const& "", ""arma::mat const& "", ""double "", ""int "", ""int "")","c("" WAlphas"", "" Tau2"", "" EyeM"", "" Rho"", "" M"", "" Nu"")"
"6697","womblR","RootiLikelihoodCube","c(""arma::cube const& "", ""arma::mat const& "", ""int "", ""int "")","c("" JointCovariances"", "" EyeM"", "" M"", "" Nu"")"
"6698","womblR","SIGMA","c(""double "", ""int "", ""arma::mat const& "", ""int "")","c("" Phi"", "" TempCorInd"", "" TimeDist"", "" Nu"")"
"6699","womblR","WAlphaCube","c(""arma::vec const& "", ""arma::colvec const& "", ""arma::mat const& "", ""int "", ""int "", ""int "")","c("" Alpha"", "" Z"", "" W"", "" M"", "" Nu"", "" WeightsInd"")"
"6700","womblR","STBDwDM_Rcpp","c(""List "", ""List "", ""List "", ""List "", ""List "", ""List "", ""arma::mat "", ""bool "")","c("" DatObj_List"", "" HyPara_List"", "" MetrObj_List"", "" Para_List"", "" DatAug_List"", "" McmcObj_List"", "" RawSamples"", "" Interactive"")"
"6701","womblR","ThetaKrigging","c(""List "", ""List "", ""int "")","c("" DatObj_List"", "" Para_List"", "" NKeep"")"
"6702","word2vec","w2v_train","c(""std::string "", ""std::string "", ""std::string "", ""uint16_t "", ""uint16_t "", ""uint8_t "", ""uint16_t "", ""uint8_t "", ""float "", ""bool "", ""uint8_t "", ""uint8_t "", ""uint8_t "", ""float "", ""bool "", ""std::string "", ""std::string "", ""bool "", ""bool "")","c("" trainFile"", "" modelFile"", "" stopWordsFile"", "" minWordFreq"", "" size"", "" window"", "" expTableSize"", "" expValueMax"", "" sample"", "" withHS"", "" negative"", "" threads"", "" iterations"", "" alpha"", "" withSG"", "" wordDelimiterChars"", "" endOfSentenceChars"", "" verbose"", "" normalize"")"
"6703","word2vec","w2v_load_model","c(""std::string "", ""bool "")","c("" file"", "" normalize"")"
"6704","word2vec","w2v_save_model","c(""SEXP "", ""std::string "")","c("" ptr"", "" file"")"
"6705","word2vec","w2v_dictionary","SEXP "," ptr"
"6706","word2vec","w2v_embedding","c(""SEXP "", ""StringVector "")","c("" ptr"", "" x"")"
"6707","word2vec","w2v_nearest","c(""SEXP "", ""std::string "", ""std::size_t "", ""float "")","c("" ptr"", "" x"", "" top_n"", "" min_distance"")"
"6708","word2vec","w2v_nearest_vector","c(""SEXP "", ""const std::vector<float>& "", ""std::size_t "", ""float "")","c("" ptr"", "" x"", "" top_n"", "" min_distance"")"
"6709","word2vec","w2v_read_binary","c(""const std::string "", ""bool "", ""std::size_t "")","c("" modelFile"", "" normalize"", "" n"")"
"6710","word2vec","d2vec","c(""SEXP "", ""StringVector "", ""std::string "")","c("" ptr"", "" x"", "" wordDelimiterChars"")"
"6711","word2vec","d2vec_nearest","c(""SEXP "", ""SEXP "", ""StringVector "", ""std::string "")","c("" ptr_w2v"", "" ptr_d2v"", "" x"", "" wordDelimiterChars"")"
"6712","wordcloud","is_overlap","c(""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "", ""SEXP "")","c("" x11"", "" y11"", "" sw11"", "" sh11"", "" boxes1"")"
"6713","xrnet","computeResponseRcpp","c(""SEXP "", ""const int& "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const Eigen::Map<Eigen::MatrixXd> "", ""const std::string& "", ""const std::string& "")","c("" X"", "" mattype_x"", "" Fixed"", "" beta0"", "" betas"", "" gammas"", "" response_type"", "" family"")"
"6714","xrnet","fitModelCVRcpp","c(""SEXP "", ""const int "", ""const Eigen::Map<Eigen::MatrixXd> "", ""SEXP "", ""const bool& "", ""const Eigen::Map<Eigen::MatrixXd> "", ""Eigen::VectorXd "", ""const LogicalVector& "", ""const LogicalVector& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const IntegerVector& "", ""const NumericVector& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""const std::string& "", ""const std::string& "", 
""const Eigen::Map<Eigen::VectorXi> "", ""const double& "", ""const int& "", ""const int& "", ""const int& "")","c("" x"", "" mattype_x"", "" y"", "" ext"", "" is_sparse_ext"", "" fixed"", "" weights_user"", "" intr"", "" stnd"", "" penalty_type"", "" cmult"", "" quantiles"", "" num_penalty"", "" penalty_ratio"", "" penalty_user"", "" penalty_user_ext"", "" lower_cl"", "" upper_cl"", "" family"", "" user_loss"", "" test_idx"", "" thresh"", "" maxit"", "" ne"", "" nx"")"
"6715","xrnet","fitModelRcpp","c(""SEXP "", ""const int& "", ""const Eigen::Map<Eigen::MatrixXd> "", ""SEXP "", ""const bool& "", ""const Eigen::Map<Eigen::MatrixXd> "", ""Eigen::VectorXd "", ""const LogicalVector& "", ""const LogicalVector& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""const IntegerVector& "", ""const NumericVector& "", ""const Eigen::Map<Eigen::VectorXd> "", ""const Eigen::Map<Eigen::VectorXd> "", ""Eigen::VectorXd "", ""Eigen::VectorXd "", ""const std::string& "", ""const double& "", 
""const int& "", ""const int& "", ""const int& "")","c("" x"", "" mattype_x"", "" y"", "" ext"", "" is_sparse_ext"", "" fixed"", "" weights_user"", "" intr"", "" stnd"", "" penalty_type"", "" cmult"", "" quantiles"", "" num_penalty"", "" penalty_ratio"", "" penalty_user"", "" penalty_user_ext"", "" lower_cl"", "" upper_cl"", "" family"", "" thresh"", "" maxit"", "" ne"", "" nx"")"
"6716","xslt","doc_xslt_apply","c(""XPtrDoc "", ""XPtrDoc "", ""std::vector<std::string> "")","c("" doc"", "" xslt"", "" params"")"
"6717","xtensor","test_add_cpp","c(""xt::rarray<double>& "", ""xt::rarray<double>& "")","c("" x"", "" y"")"
"6718","xtensor","test_in_place_modify_cpp","xt::rarray<double>& "," x"
"6719","xtensor","test_roundtrip_rarray_optional","xt::rarray_optional<double> "," x"
"6720","xtensor","test_roundtrip_rtensor_optional","xt::rtensor_optional<double, 2> "," x"
"6721","xtensor","test_reshape_cpp","xt::rarray<double>& "," x"
"6722","xtensor","test_int_cpp","xt::rarray<int>& "," x"
"6723","xtensor","test_lgl_cpp","xt::rarray<rlogical>& "," x"
"6724","xtensor","test_stdcomplex_cpp","xt::rarray<std::complex<double>>& "," x"
"6725","xtensor","xtensor_r_example","xt::rtensor<int, 1> "," tens"
"6726","yakmoR","orthoKMeansTrainCpp","c(""NumericMatrix "", ""unsigned long int "", ""unsigned long int "", ""unsigned long int "", ""unsigned long int "", ""bool "")","c("" x"", "" rounds"", "" k"", "" iter"", "" initType"", "" verbose"")"
"6727","yakmoR","orthoKMeansPredictCpp","c(""NumericMatrix "", ""std::vector <NumericMatrix> "", ""unsigned long int "", ""unsigned long int "", ""bool "")","c("" x"", "" centers"", "" nf"", "" k"", "" verbose"")"
