// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IB
double IB(const arma::sp_mat& W, const arma::vec& s);
RcppExport SEXP _WaveSampling_IB(SEXP WSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(IB(W, s));
    return rcpp_result_gen;
END_RCPP
}
// distUnitk
arma::vec distUnitk(arma::mat X, int k, bool tore, double toreBound);
RcppExport SEXP _WaveSampling_distUnitk(SEXP XSEXP, SEXP kSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(distUnitk(X, k, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// sb_vk
arma::vec sb_vk(arma::vec pik, arma::mat X, arma::vec s);
RcppExport SEXP _WaveSampling_sb_vk(SEXP pikSEXP, SEXP XSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(sb_vk(pik, X, s));
    return rcpp_result_gen;
END_RCPP
}
// wave
arma::vec wave(const arma::mat& X, const arma::vec& pik, double bound, bool tore, bool shift, double toreBound, bool comment, bool fixedSize);
RcppExport SEXP _WaveSampling_wave(SEXP XSEXP, SEXP pikSEXP, SEXP boundSEXP, SEXP toreSEXP, SEXP shiftSEXP, SEXP toreBoundSEXP, SEXP commentSEXP, SEXP fixedSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    Rcpp::traits::input_parameter< bool >::type comment(commentSEXP);
    Rcpp::traits::input_parameter< bool >::type fixedSize(fixedSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(wave(X, pik, bound, tore, shift, toreBound, comment, fixedSize));
    return rcpp_result_gen;
END_RCPP
}
// wpik
arma::sp_mat wpik(arma::mat X, arma::vec pik, double bound, bool tore, bool shift, double toreBound);
RcppExport SEXP _WaveSampling_wpik(SEXP XSEXP, SEXP pikSEXP, SEXP boundSEXP, SEXP toreSEXP, SEXP shiftSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(wpik(X, pik, bound, tore, shift, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// wpikInv
arma::sp_mat wpikInv(arma::mat X, arma::vec pik, bool tore, bool shift, double toreBound);
RcppExport SEXP _WaveSampling_wpikInv(SEXP XSEXP, SEXP pikSEXP, SEXP toreSEXP, SEXP shiftSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(wpikInv(X, pik, tore, shift, toreBound));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WaveSampling_IB", (DL_FUNC) &_WaveSampling_IB, 2},
    {"_WaveSampling_distUnitk", (DL_FUNC) &_WaveSampling_distUnitk, 4},
    {"_WaveSampling_sb_vk", (DL_FUNC) &_WaveSampling_sb_vk, 3},
    {"_WaveSampling_wave", (DL_FUNC) &_WaveSampling_wave, 8},
    {"_WaveSampling_wpik", (DL_FUNC) &_WaveSampling_wpik, 6},
    {"_WaveSampling_wpikInv", (DL_FUNC) &_WaveSampling_wpikInv, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_WaveSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
