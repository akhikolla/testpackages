// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CalcGene
List CalcGene(List s_data, NumericMatrix seqAll, int prodValue);
RcppExport SEXP _HUM_CalcGene(SEXP s_dataSEXP, SEXP seqAllSEXP, SEXP prodValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type s_data(s_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type seqAll(seqAllSEXP);
    Rcpp::traits::input_parameter< int >::type prodValue(prodValueSEXP);
    rcpp_result_gen = Rcpp::wrap(CalcGene(s_data, seqAll, prodValue));
    return rcpp_result_gen;
END_RCPP
}
// CalcROC
List CalcROC(List s_data, NumericVector seq, NumericVector thresholds);
RcppExport SEXP _HUM_CalcROC(SEXP s_dataSEXP, SEXP seqSEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type s_data(s_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    rcpp_result_gen = Rcpp::wrap(CalcROC(s_data, seq, thresholds));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HUM_CalcGene", (DL_FUNC) &_HUM_CalcGene, 3},
    {"_HUM_CalcROC", (DL_FUNC) &_HUM_CalcROC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_HUM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
